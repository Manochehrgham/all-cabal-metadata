homepage: https://github.com/phadej/range-set-list#readme
changelog-type: markdown
hash: 30f2ea5a6e1ab614dfef99863d68a23cf1d52f7fe083e0c58cc7dc83c1da31cf
test-bench-deps:
  range-set-list: -any
  base: ! '>=4.5 && <4.9'
  containers: ! '>=0.5 && <0.6'
  tasty-quickcheck: ! '>=0.8 && <0.9'
  tasty: ! '>=0.8 && <0.12'
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Memory efficient sets with continuous ranges of elements.
changelog: ! '### 0.0.7


  - `findMin` &amp; `findMax`


  ### 0.0.6


  - `size`


  ### 0.0.5


  - Export `full`


  ### 0.0.4


  - Complement sets (require `Bounded`), `full` and `complement`


  ### 0.0.3


  - Dependencies update


  ### 0.0.2


  - More quickcheck properties


  ### 0.0.1


  - Initial release

'
basic-deps:
  base: ! '>=4.5 && <4.9'
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.0.6'
- '0.0.7'
- '0.1.0.0'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: '0.1.0.0'
description-type: markdown
description: ! '# range-set-list


  [![Build Status](https://travis-ci.org/phadej/range-set-list.svg?branch=travis-expr)](https://travis-ci.org/phadej/range-set-list)


  A trivial implementation of range sets.


  You can find the package (and it''s documentation) on [hackage](http://hackage.haskell.org/package/range-set-list).


  This module is intended to be imported qualified, to avoid name

  clashes with Prelude functions, e.g.


  ```haskell

  import Data.RangeSet.List (RSet)

  import qualified Data.RangeSet.List as RSet

  ```


  The implementation of `RSet` is based on _list_.


  Compared to [`Data.Set`](http://hackage.haskell.org/package/containers-0.5.4.0/docs/Data-Set.html),

  this module imposes also [`Enum`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#t:Enum)

  restriction for many functions.

  We must be able to identify consecutive elements to be able to _glue_ and _split_
  ranges properly.


  The implementation assumes that


  ```haskell

  x < succ x

  pred x < x

  ```


  and there aren''t elements in between (not true for `Float` and `Double`).

  Also `succ` and `pred` are never called for largest or smallest value respectively.

'
license-name: MIT
