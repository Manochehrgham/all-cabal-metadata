homepage: https://github.com/ChrisPenner/rasa#readme
changelog-type: ''
hash: d6fee501a1e4f2c4ff0a1e73c0408b7d85776e3720c68f51abdb6d8d6486374e
test-bench-deps: {}
maintainer: christopher.penner@gmail.com
synopsis: A modular text editor
changelog: ''
basic-deps:
  text-lens: -any
  base: ! '>=4.7 && <5'
  yi-rope: -any
  text: -any
  async: -any
  data-default: -any
  containers: -any
  lens: -any
  mtl: -any
  transformers: -any
all-versions:
- '0.1.0.0'
author: Chris Penner
latest: '0.1.0.0'
description-type: markdown
description: ! "Rasa (Rah-zah)\n==============\n\n[![Join the chat at https://gitter.im/rasa-editor/Lobby](https://badges.gitter.im/rasa-editor/Lobby.svg)](https://gitter.im/rasa-editor/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nEmbarrassingly
  modular customizable text editor built in Haskell.\n\nWhat people are saying\n----------------------\n\n>
  Excessively Modular! - some bald guy\n\n> I'm glad I'm unemployed so I have time
  to configure it! - my mate Steve\n\n> You should go outside one of these days. -
  Mother\n\nInstallation\n------------\n\nAt the moment you must build Rasa from source;\n\n1.
  Install [stack](http://seanhess.github.io/2015/08/04/practical-haskell-getting-started.html)\n2.
  Clone this repo and `cd` into the directory\n3. Run `stack build && stack exec rasa`
  (you may want to alias this to `rasa`)\n\nGetting started\n---------------\n\nHere's
  a great guide on building a copy-paste extension from scratch! I definitely\nrecommend
  checking it out!\n\n### [Building Your First Extension](docs/Building-An-Extension.md)\n\n\\^
  That guide will walk you through installation and getting running! Once\nyou're
  running rasa you can experiment with creating your own adaptations. You\nshould
  customize your keymap to add a few mappings you like. It's a short step\nfrom here
  to developing your own extensions. `Action`s like you'd use in an\nextension can
  be registered to hooks in your `Main.hs`. You can build and\nexperiment with entire
  extensions in your config file and extract them as a\npackage when you're ready,
  kind of like a vimrc file. Again, just read the \nextension guide, it covers what
  you need to know!\n\nIf you have any issues (and I'm sure there'll be a few; it's
  a new project!)\nplease report them [here](https://github.com/ChrisPenner/rasa/issues).\n\n\nCore
  Principles\n---------------\n\nRasa is meant to be about as modular as an editor
  can be. The goal is for as\nmuch code as possible to be extracted into composable
  extensions. If the core\nediting facilities can't be implemented as extensions,
  then the extension\ninterface isn't powerful enough. I've taken this to its extreme,
  for instance\nthe following features are implemented as rasa extensions that anyone
  in the\ncommunity could have written.\n\n- Loading and saving files \n- Key bindings\n-
  Multiple cursors\n- Rendering the editor to the terminal\n\nThis approach has some
  unique pros and cons:\n\n### Pros\n\n-   Implementing most core functionality as
  extensions ensures a powerful and\n    elegant extension interface.\n-   Flexibility;
  don't like the default cursor implementation? Write your own!\n-   Adaptability;
  the core of Rasa is miniscule, you can mix and match\n    extensions to build any
  editor you want.\n\n\n### Cons\n\n-   Module cross-dependencies makes the community
  infrastructure more fragile;\n    We'll likely have to develop a solution to this
  as a community as time\n    goes on.\n-   Fragmentation; Not having a single implementation
  for a given feature means\n    extensions that depend on a feature have to pick
  a specific implementation\n    to augment. Over time data-structures and types will
  be standardized into\n    Rasa's core to help alleviate this.\n\n\nCore Features\n-------------\n\nAs
  stated above, the editor itself focuses primarily on easy extensibility, so it doesn't
  have a lot of editing\nfeatures built in, instead it focuses on standardizing a
  good extension API.\nWe focus on creating a simple system so people can pick it
  up quickly.\n\nHere are some features of that API:\n\n### Event Hook System\n\nAll
  actions in the editor are triggered via an event/listener system.\nExtensions may
  subscribe to events from the editor, or from another extension\nand perform an action
  in response. The Event which triggered the hook is\navailable as an argument). Extensions
  may also dispatch any kind of event at\nany time which other extensions may listen
  for.\n\n### Actions/BufActions\n\nExtensions define things that they'd like to do
  using a powerful set of\nfunctions which they can embed in an `Action`. Within an
  action an extension\nmay perform IO, access the available buffers, store and access
  extension state,\nand edit text.\n\nContributing\n============\n\nThings are moving
  quickly, but I'd love a hand! You can get a rough idea of\nwhere you can help out
  at the\n[Roadmap](https://github.com/ChrisPenner/rasa/issues/2), feel free to leave
  a\ncomment there asking any questions, I'm often free to chat, join our [gitter\nhere](https://gitter.im/rasa-editor/Lobby)!\n"
license-name: MIT
