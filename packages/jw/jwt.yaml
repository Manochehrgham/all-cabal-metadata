homepage: https://bitbucket.org/ssaasen/haskell-jwt
changelog-type: markdown
hash: a380de4c36742660f4b7febd3518c80062cd2db0d75df42d74a100b0d65d6dbb
test-bench-deps:
  bytestring: ! '>=0.10'
  lens-aeson: -any
  tasty-th: ! '>=0.1'
  base: ! '>=4.4 && <5'
  time: ! '>=1.1'
  unordered-containers: -any
  text: ! '>=0.11'
  doctest: ! '>=0.9.11'
  data-default: -any
  semigroups: ! '>=0.15.4'
  HUnit: -any
  jwt: -any
  memory: -any
  containers: -any
  lens: -any
  cryptonite: -any
  tasty-quickcheck: ! '>=0.3'
  network-uri: -any
  tasty-hunit: ! '>=0.4'
  tasty: ! '>=0.7'
  scientific: ! '>=0.2'
  QuickCheck: ! '>=2.4.0.1'
  http-types: -any
  aeson: -any
  vector: ! '>=0.7.1'
maintainer: stefan@saasen.me
synopsis: JSON Web Token (JWT) decoding and encoding
changelog: ! "# 2016-02-20 0.7.0\n\n\t* Update JWT to match RFC 7519. This is a backward
  compatible change with\n\tdeprecation warnings added for types and functions to
  be removed in the\n\tfuture.\n\t\t* Add NumericDate as a replacement for IntDate
  (and numericDate as a \n\t\t  replacement for intDate)\n\t\t* Add JOSEHeader as
  a replacement for JWTHeader.\n\t* Use Stack and LTS 4.0\n    * Use cryptonite instead
  of cryptohash (Thanks to Greg V)\n    * Remove Web.Base64 in favour of using `memory`
  (Thanks to Greg V)\n\n# 2015-04-22 0.6.0\n\n\t* Execute doctests in addition to
  the testsuite when using 'make test'.\n\t* Export `ClaimsMap` type alias (fixes
  #12)\n\t* Allow base 4.8\n\t* Lowered required cabal library version (to 1.16) to
  workaround build\n\t  issues in a consumer project.\n\t* Add 7.10.1 to the travis
  config\n\n# 2015-01-19 0.5.3\n\n\t* Add the missing `other-modules` field to the
  .cabal file so that \n\t  all the tests are present in the source distribution.
  Thanks to \n\t  Richard Wallace for reporting this.\n\n# 2015-01-17 0.5.2\n\n\t*
  Tim McLean pointed out that comparing signatures may be susceptible to\n\t  a timing
  attack in the way the signatures were compared (using the default\n\t  Eq instance).
  Both `Signature` and `Secret` now have an `Eq` instance that\n\t  uses a constant
  time comparison function. Thanks Tim for reporting this.\n\n# 2015-01-03 0.5.1\n\n\t*
  Fix the encoding of the `aud` part of the claim.\n\t  Thanks to Aaron Levin for
  reporting and implementing the change.\n\t  In addition to the fix we now also verify
  the shape fo the generated\n\t  payload.\n\n# 2014-12-01 0.5.0\n\n\t* Rev. 17 of
  the JWT Draft changed the audience claim from being an\n\toptional String to being
  either an optional `StringOrURI`s or an optional list of\n\t`StringOrURI`s. Thanks
  to Aaron Levin for reporting and implementing the\n\tchange. This change breaks
  backwards compatibility (in regard to 0.4.x).\n\n# 2014-10-15 0.4.2\n\n\t* Fix the
  build problems introduced in 0.4.1 to work with the \n\t  split network package.
  Thanks to Richard Wallace for\n\t  fixing this and to Jeremy Shaw for reporting
  this at the same time.\n\n# 2014-09-17 0.4.1\n\n\t* Update jwt.cabal to work with
  the new split network package.\n\t  Thanks to Jeremy Shaw for reporting this.\n\n#
  2014-08-02 0.4.0\n\n\t* Change the upper boundary of base from 4.7 to 4.8 (#5)\n\n#
  2014-06-02 0.3.0\n\n\t* Add verify function (thanks to Robert Massaioli) to allow
  verifying an\n\talready decoded JWT token\n\n# 2014-03-10 0.2.1\n\n    * Add Decoding/Encoding
  sections\n    * Make the examples runnable by doctest\n    * Fix hlint warnings\n
  \   * Add 'secondsSinceEpoch' to extract the seconds from epoch from an IntDate\n\n#
  2014-03-10 0.2.0\n\n\t* Export the IntDate and StringOrURI types #5a1137b\n\n# 2014-03-03
  \ 0.1.1\n\n\t* Verify that invalid input to the decode* functions fails as expected\n\n#
  2014-03-03  0.1.0\n\n\t* Initial release\n"
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.6 && <4.9'
  time: ! '>=1.1'
  unordered-containers: ! '>=0.2'
  text: ! '>=0.11'
  data-default: ! '>=0.5'
  semigroups: ! '>=0.15.4'
  memory: ! '>=0.8'
  containers: ! '>=0.5'
  cryptonite: ! '>=0.6'
  network-uri: -any
  scientific: ! '>=0.2'
  http-types: ! '>=0.8'
  aeson: ! '>=0.7'
  vector: ! '>=0.7.1'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.2.1'
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.6.0'
- '0.7.0'
author: Stefan Saasen
latest: '0.7.0'
description-type: markdown
description: ! "# Haskell JSON Web Token (JWT)\n\nJSON Web Token (JWT) is a compact
  URL-safe means of representing claims to be transferred between two parties.\n\nFrom
  http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html\n\n> JSON Web
  Token (JWT) is a compact URL-safe means of representing claims to be transferred
  \n> between two parties. The claims in a JWT are encoded as a JavaScript Object
  Notation (JSON) \n> object that is used as the payload of a JSON Web Signature (JWS)
  structure or as the plaintext \n> of a JSON Web Encryption (JWE) structure, enabling
  the claims to be digitally signed or MACed \n> and/or encrypted.\n\nSee the [Web.JWT
  module](http://hackage.haskell.org/package/jwt/docs/Web-JWT.html) documentation
  \ to get started.\n\n\n[![Build\nStatus](https://travis-ci.org/juretta/haskell-jwt.svg?branch=master)](https://travis-ci.org/juretta/haskell-jwt)\n\n\n"
license-name: MIT
