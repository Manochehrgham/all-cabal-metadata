changelog-type: ''
hash: d0d3b9c59234f9b154e4e886d0c0e9cf25b6c896b0121909173b142d6dd5ab19
synopsis: Database Supported Haskell
changelog: ''
all-versions:
- '0.4'
- '0.4.0.1'
- '0.4.1'
- '0.4.2'
- '0.4.2.1'
- '0.4.3'
- '0.5'
- '0.5.3'
- '0.5.5'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.6'
- '0.7'
- '0.7.1'
- '0.7.2'
- '0.7.3'
- '0.7.4'
- '0.7.5'
- '0.7.6'
- '0.7.7'
- '0.7.8'
- '0.7.8.1'
- '0.7.8.2'
- '0.8.0.1'
- '0.8.1.0'
- '0.8.2.0'
- '0.8.2.1'
- '0.8.2.2'
- '0.8.2.3'
- '0.10.0.0'
- '0.10.0.1'
- '0.10.0.2'
latest: '0.10.0.2'
description-type: haddock
description: ! 'This is a Haskell library for database-supported program execution.
  Using

  this library a relational database management system (RDBMS) can be used as

  a coprocessor for the Haskell programming language, especially for those

  program fragments that carry out data-intensive and data-parallel

  computations.


  Database executable program fragments can be written using the monad

  comprehension notation [2] and list processing combinators from the Haskell

  list prelude. Note that rather than embedding a relational language into

  Haskell, we turn idiomatic Haskell programs into SQL queries.


  DSH faithfully represents list order and nesting, and compiles the list

  processing combinators into relational queries. The implementation avoids

  unnecessary data transfer and context switching between the database

  coprocessor and the Haskell runtime by ensuring that the number of generated

  relational queries is only determined by the program fragment''s type and not

  by the database size.


  DSH can be used to allow existing Haskell programs to operate on large scale

  data (e.g., larger than the available heap) or query existing database

  resident data with Haskell.


  Note that this package is flagged experimental and therefore is not suited

  for production use (we mean it!). This is a proof of concept implementation

  only. To learn more about DSH, our paper entitled as "Haskell Boards the Ferry:

  Database-Supported Program Execution for Haskell" [1] is a recommended reading.

  The package includes a couple of examples that demonstrate how to use DSH.


  In contrast to the DSH version described in [1], the current release does

  not rely anymore on the loop-lifting compilation technique together with

  the Pathfinder optimizer. Instead, it brings a completely rewritten query

  compiler based on Guy Blelloch''s flattening transformation. This approach

  leads to a more robust compilation and produces more efficient query code.


  Please read the release notes in ''README.md''.


  1. <http://db.inf.uni-tuebingen.de/staticfiles/publications/ferryhaskell.pdf>


  2. <http://db.inf.uni-tuebingen.de/staticfiles/publications/haskell2011.pdf>'
