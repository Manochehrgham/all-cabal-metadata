changelog-type: markdown
hash: d643f9e7d435b75412a4e55d561beaa8a277cb938358196f7dcdfc2af12ab764
test-bench-deps:
  test-framework-hunit: -any
  test-framework: ! '>=0.3'
  base: ! '>=4.3 && <5'
  test-framework-quickcheck2: ! '>=0.3'
  HUnit: -any
  containers: ! '>=0.4 && <0.6'
  errors: ! '>=1.4.2 && <1.5'
  QuickCheck: -any
  hmatrix: ! '>=0.16.0.2 && <0.17'
  hnetcdf: -any
  repa: -any
  vector: ! '>=0.9 && <0.11'
  directory: ! '>=1.1 && <1.3'
synopsis: Haskell NetCDF library
changelog: ! "0.3.0.0\n-------\n* Breaking change: fix problem with hmatrix API --
  replace\n  `HRowMajorMatrix` and `HColumnMajorMatrix` with single `HMatrix`\n  type
  and manage data ordering internally.\n\n0.2.1.0\n-------\n* Update to work with
  hmatrix 0.16\n\n0.2.0.0\n-------\n* Add partial output API\n"
basic-deps:
  either: ! '>=3.4.1 && <5'
  base: ! '>=4.3 && <5'
  filepath: ! '>=1.3 && <1.4'
  containers: ! '>=0.4 && <0.6'
  transformers: ! '>=0.2 && <0.5'
  errors: ! '>=1.4.2 && <1.5'
  hmatrix: ! '>=0.16.0.2 && <0.17'
  hnetcdf: -any
  repa: -any
  vector: ! '>=0.9 && <0.11'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.3.0.0'
latest: '0.3.0.0'
description-type: markdown
description: ! "hnetcdf\n=======\n\nHaskell NetCDF library: as well as conventional
  low-level FFI bindings\nto the functions in the NetCDF library (in the `Data.NetCDF.Raw`\nmodules),
  `hnetcdf` provides a higher-level Haskell interface\n(currently only for reading
  data).  This higher-level interface aims\nto provide a \"container polymorphic\"
  view of NetCDF data allowing\nNetCDF variables to be read into `Storable` `Vectors`
  and Repa arrays\neasily.\n\nFor example:\n\n``` haskell\nimport Data.NetCDF\nimport
  Foreign.C\nimport qualified Data.Vector.Storable as SV\n...\ntype SVRet = IO (Either
  NcError (SV.Vector a))\n...\n  enc <- openFile \"tst.nc\" ReadMode\n  case enc of\n
  \   Right nc -> do\n      eval <- get nc \"varname\" :: SVRet CDouble\n      ...\n```\n\ngets
  the full contents of a NetCDF variable as a `Storable` `Vector`,\nwhile the following
  code reads the same variable (assumed to be\nthree-dimensional) into a Repa array:\n\n```
  haskell\nimport Data.NetCDF\nimport Foreign.C\nimport qualified Data.Array.Repa
  as R\nimport qualified Data.Array.Repa.Eval as RE\nimport Data.Array.Repa.Repr.ForeignPtr
  (F)\n...\ntype RepaRet3 a = IO (Either NcError (R.Array F R.DIM3 a))\n...\n  enc
  <- openFile \"tst.nc\" ReadMode\n  case enc of\n    Right nc -> do\n      eval <-
  get nc \"varname\" :: RepaRet3 CDouble\n      ...\n```\n"
