changelog-type: ''
hash: ddc829655cfb7eb1c1f45a3150c5d575dc1ff836f93e6c97992f40a460b76f0d
synopsis: Declarative routing for WAI.
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '0.9.1'
- '0.10'
- '0.10.1'
- '0.10.2'
- '0.11'
- '0.11.1'
- '0.12'
- '0.12.1'
latest: '0.12.1'
description-type: haddock
description: ! 'Enables the declaration of \"routes\" which handle requests to a

  specific URL.


  The set of possible handlers can be restricted by \"predicates\",

  which operate on WAI requests and have to be true or else the

  handler will not be called.


  Example:


  >import Data.ByteString (ByteString)

  >import Data.Text (Text)

  >import Network.Wai

  >import Network.Wai.Predicate

  >import Network.Wai.Routing

  >import Network.Wai.Handler.Warp

  >

  >main :: IO ()

  >main = run 8080 (route (prepare start))

  >

  >start :: Monad m => Routes a m ()

  >start = do

  >    get "/user/:name" (continue fetchUser) $

  >        capture "name"

  >

  >    get "/user/find" (continue findUser) $

  >        query "byName" ||| query "byId"

  >

  >    delete "/user/:name" rmUser $

  >        capture "name" .&. opt (cookie "foo")

  >

  >fetchUser :: Monad m => Text -> m Response

  >fetchUser name = ...

  >

  >findUser :: Monad m => Either ByteString Word64 -> m Response

  >findUser (Left  name)  = ...

  >findUser (Right ident) = ...

  >

  >rmUser :: Monad m => Text ::: Maybe Int -> Continue m -> m ResponseReceived

  >rmUser (name ::: foo) k = k $ ...'
