changelog-type: markdown
hash: 12f6fef9f8a69830c557fc795d634dc622178be55ea91a7462181a8865156542
test-bench-deps: {}
synopsis: Declarative request parsing
changelog: ! "# 0.8.5.2 (Apr. 29, 2015)\n\n* Fix description in cabal file\n\n# 0.8.5.1
  (Apr. 29, 2015)\n\n* Fix description in cabal file\n\n# 0.8.5.0 (Apr. 29, 2015)\n\n*
  Initial Hackage release\n* Improved Error Show instance and new helpers:\n  * toList
  to convert Error to [String]\n  * toTextList to convert Error to [Text]\n* Inline
  annotations for Parser internals\n* Basic documentation\n\n# 0.8.2.0\n\n* Correct
  option combinators\n  * `Maybe (P a)` to `P (Maybe a)`\n  * Former construction
  made them impossible to use in P context\n\n# 0.8.1.1\n\n* Actually export new combinators\n\n#
  0.8.1.0\n\n* Add parser combinators for optional inputs\n  * int[PH]M, bool[PH]M,
  float[PH]M, text[PH]M, bytes[PH]M\n\n# 0.8.0.0\n\n* Reorganized internals/exports\n
  \ * Added RequestSpec.Combinators\n  * Added RequestSpec.Parser\n* Added derived
  combinators for handling data from headers/params\n  * int[PH], bool[PH], float[PH],
  text[PH], bytes[PH]\n\n# 0.7.0.1\n\n* Remove RequestSpec.Internal as everything
  stable is re-exported in RequestSpec\n\n# 0.7.0.0\n\n* Moved away from using native
  HTTP rep towards Text based\n  * HeaderName -> CI Text\n  * Param      -> ParamValue
  (Text)\n* Assumes utf8 encodings\n\n# 0.6.1.0\n\n* Changed representation of query
  params\n  * Maybe ByteString -> ParamValue (ByteString)\n\n# 0.6.0.0\n\n* Brand
  new parser\n  * Accumulating errors\n  * Continuation passing style\n  * Primitive
  and derived combinators\n  * Functor, Applicative, Monad, Monad+, Alternative, Monoid
  instances\n* fromParsed -> fromEnv\n* Separate Spec step removed\n  * The spec is
  now the sequence of combinators given in fromEnv\n\n# 0.5.0.2\n\n* This changelog
  came to be!\n* Initially available on Gitlab\n* Core functions in place:\n  * Required
  and Optional, Headers and Params\n  * Parsing thereof\n* Lots of examples\n  * Bare
  WAI/Warp\n  * Scotty\n  * Spock\n"
basic-deps:
  bytestring: -any
  wai: -any
  case-insensitive: -any
  base: ! '>=4.7 && <4.9'
  text: -any
  containers: -any
  http-types: -any
all-versions:
- '0.8.5.0'
- '0.8.5.1'
- '0.8.5.2'
latest: '0.8.5.2'
description-type: markdown
description: ! "# WAI Request Spec\n\nWAI Request Spec is a declarative validation
  layer for HTTP\nrequests. It aims to make error-handling for malformed requests
  as\neasy as taking the happy path.\n\nA brief summary of the core features:\n\n*
  Can specify headers and query params as input sources\n* Support for parsing ints,
  floats, text, bytes (with encodings), and bools\n* A parser combinator interface
  for chaining together request requirements\n* Support for Alternatives\n* Support
  for optional parameters\n* Convenient and informative default error messages that
  let service\n  consumers know what went wrong\n\nIt is built on WAI, so it is compatible
  with several Haskell\nweb frameworks. All you need is the ability to access the
  Request\nobject, and WAI Request Spec takes care of the rest!\n\n# Contributing\n\nContributions
  are welcome! Documentation, examples, code, and\nfeedback - they all help.\n\nBe
  sure to review the included code of conduct. This project adheres\nto the [Contributor's
  Covenant](http://contributor-covenant.org/). By\nparticipating in this project you
  agree to abide by its terms.\n\n# How to Do\n\nHere's some code:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nmodule Main (main) where\n\nimport Control.Applicative\nimport
  Data.Text\nimport Data.Text.Lazy (fromStrict)\nimport Network.Wai.RequestSpec\nimport
  Network.HTTP.Types (badRequest400)\nimport Web.Scotty hiding (param, header)\n\nimport
  Network.Wai.RequestSpec.Examples.Types\n\n------------------------------------------------------------\n--
  Your Data Model\n------------------------------------------------------------\ndata
  Query =\n  Query ClientId Count Offset UserName Accepts\n  deriving Show\n\n------------------------------------------------------------\n--
  Request Spec: The Part You Write\n------------------------------------------------------------\n\n--
  if offset is given, return that value; else, offset is 0\noffset :: Maybe Int ->
  Offset\noffset (Just n) = Offset n\noffset Nothing  = Offset 0\n\n-- if Accept is
  given, parse it; otherwise, default to plain text\naccept :: Maybe Text -> Accepts\naccept
  (Just \"text/plain\")       = PlainText\naccept (Just \"application/json\") = JSON\naccept
  _                         = PlainText\n\ninstance FromEnv Query where\n  fromEnv
  e =\n    Query <$> (ClientId <$> textP \"client_id\" e)\n          <*> (Count <$>
  intP \"count\" e)\n          <*> (offset <$> intPM \"offset\" e)\n          <*>
  (UserName <$> textH \"X-User-Name\" e)\n          <*> (accept <$> textHM \"Accept\"
  e)\n\n------------------------------------------------------------\n-- Application:
  Making Use of Request Spec\n------------------------------------------------------------\n\nmain
  :: IO ()\nmain = scotty 3000 $\n  get \"/query\" $ do\n    -- Request spec in action:
  parse what you want, and ...\n    req <- request\n    let query = parse fromEnv
  (toEnv req) :: Result Query\n\n    -- figure out what to do next based on whether
  the request was valid!\n    case query of\n      -- show user what's missing\n      Failure
  e -> status badRequest400 >> (text . fromStrict . pack . show $ e)\n\n      -- show
  user what Query they made\n      Success v -> text . fromStrict . pack . show $
  v\n```\n\nHere's the API responses:\n\n```http\n$ http get localhost:3000/query\nHTTP/1.1
  400 Bad Request\nContent-Type: text/plain; charset=utf-8\nDate: Thu, 09 Apr 2015
  21:30:43 GMT\nServer: Warp/3.0.10\nTransfer-Encoding: chunked\n\nmissing Header
  \"X-User-Name\"\nmissing Param \"count\"\nmissing Param \"client_id\"\n```\n\n---\n\n```http\n$
  http get 'localhost:3000/query?client_id&offset&count' x-user-name:taco\nHTTP/1.1
  400 Bad Request\nContent-Type: text/plain; charset=utf-8\nDate: Thu, 09 Apr 2015
  21:31:22 GMT\nServer: Warp/3.0.10\nTransfer-Encoding: chunked\n\nmissing Param \"count\"\nmissing
  Param \"client_id\"\n```\n\n---\n\n```http\n$ http get 'localhost:3000/query?client_id=usually&offset=cat&count=not-a-typical-number'
  x-user-name:taco\nHTTP/1.1 400 Bad Request\nContent-Type: text/plain; charset=utf-8\nDate:
  Wed, 08 Apr 2015 19:33:47 GMT\nServer: Warp/3.0.10\nTransfer-Encoding: chunked\n\ncould
  not parse \"cat\": \"Could not parse integer\"\ncould not parse \"not-a-typical-number\":
  \"Could not parse integer\"\n```\n\n---\n\n```http\n$ http get 'localhost:3000/query?client_id=usually&offset=5&count=10'
  x-user-name:taco\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nDate:
  Thu, 09 Apr 2015 21:37:29 GMT\nServer: Warp/3.0.10\nTransfer-Encoding: chunked\n\nQuery
  (ClientId \"usually\") (Count 10) (Offset 5) (UserName \"taco\") PlainText\n```\n\n---\n\n```http\n$
  http get 'localhost:3000/query?client_id=usually&count=10' x-user-name:taco accept:application/json\nHTTP/1.1
  200 OK\nContent-Type: text/plain; charset=utf-8\nDate: Thu, 09 Apr 2015 21:38:24
  GMT\nServer: Warp/3.0.10\nTransfer-Encoding: chunked\n\nQuery (ClientId \"usually\")
  (Count 10) (Offset 0) (UserName \"taco\") JSON\n```\n\n\n# Developer Setup\n\nHere's
  a few handy steps in order to get the project set up locally:\n\n1. Install [Haskell](https://github.com/bitemyapp/learnhaskell#getting-set-up)\n2.
  Build the project\n\n    ```\n    $ git clone https://gitlab.com/cpp.cabrera/wai-request-spec.git\n
  \   $ cd wai-request-spec\n    $ cabal sandbox init\n    $ cabal install --dependencies-only\n
  \   $ cd examples\n    $ cabal sandbox init\n    $ cabal sandbox add-source ..  #
  Until this is published on Hackage\n    $ cabal install --dependencies-only\n    ```\n\n3.
  Play with the project! I give examples below using the lovely\n   [httpie](https://github.com/jakubroztocil/httpie)
  HTTP CLI client.\n\n    ```\n    $ cabal run scotty-request-spec\n    # new terminal\n
  \   $ http get 'localhost:3000/auth?client_id=cats'\\\n               Authorization:\"Basic
  eW91J3JlOmF3ZXNvbWU=\"\n    ```\n\n4. (Coming soon) Run tests:\n\n    ```\n    #
  From project root, not examples/\n    $ cabal configure --enable-tests\n    $ cabal
  install --dependencies-only\n    $ cabal test\n    ```\n\n5. (Coming soon) Run benchmarks:\n\n
  \   ```\n    # From project root, not examples/\n    $ cabal configure --enable-benchmarks\n
  \   $ cabal install --dependencies-only\n    $ cabal benchmark\n    ```\n\n## Todo\n\n###
  Benchmarking\n\nWhat's slow? What's fast? It'd be nice to track regressions and\nimprovements
  in performance over time.\n\n### Documentation/Examples\n\nThere's examples available
  for a few web frameworks already. It'd be\ngreat to see more types of examples.\n\n###
  Testing\n\nA combination of spec-style and property tests are needed. There's a\nlot
  of churn right now, but capturing expected core behavior would be\nawesome.\n\n#
  Licensing\n\nThis project is distrubted under a BSD3 license. See the included\nLICENSE
  file for more details.\n"
