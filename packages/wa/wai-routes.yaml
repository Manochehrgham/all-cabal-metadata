homepage: https://ajnsit.github.io/wai-routes/
changelog-type: ''
hash: ef22cbaee81339bdd83b22a0d200f78b7ce25ef709291c2cbbdb21401c4d0ad6
test-bench-deps: {}
maintainer: ajnsit@gmail.com
synopsis: Typesafe URLs for Wai applications.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.0 && <3.1'
  base: ! '>=4.7 && <4.9'
  text: ! '>=1.2 && <1.3'
  monad-loops: ! '>=0.4 && <0.5'
  path-pieces: ! '>=0.2 && <0.3'
  containers: ! '>=0.5 && <0.6'
  blaze-builder: ! '>=0.4 && <0.5'
  mtl: ! '>=2.1 && <2.3'
  random: ! '>=1.1 && <1.2'
  http-types: ! '>=0.8 && <0.9'
  aeson: ! '>=0.8 && <0.10'
  template-haskell: ! '>=2.9 && <2.11'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.5.1'
- '0.6.0'
- '0.6.1'
- '0.6.2'
- '0.7.0'
- '0.7.1'
- '0.7.2'
- '0.7.3'
author: Anupam Jain
latest: '0.7.3'
description-type: markdown
description: ! "[Wai-Routes](https://ajnsit.github.io/wai-routes) [![Hackage](https://img.shields.io/badge/hackage-v0.7.3-brightgreen.svg)](https://hackage.haskell.org/package/wai-routes)
  [![Hackage-Deps](https://img.shields.io/hackage-deps/v/wai-routes.svg)](http://packdeps.haskellers.com/feed?needle=wai-routes)
  [![Build Status](https://img.shields.io/travis/ajnsit/wai-routes.svg)](https://travis-ci.org/ajnsit/wai-routes)
  [![Coverage Status](https://coveralls.io/repos/ajnsit/wai-routes/badge.svg?branch=master&service=github)](https://coveralls.io/github/ajnsit/wai-routes?branch=master)\n====================================\n\nThis
  package provides typesafe URLs for Wai applications.\n\nFeatures\n==========\n\n
  \ - Automatic generation of Route boilerplate using TH\n  - Easy Nested Routes\n
  \ - Subsites\n  - General purpose Route Attributes/Annotations\n  - Sitewide Master
  datatype which is passed to all handlers\n    and can be used for persistent data
  (like DB connections)\n  - RouteM monad that makes it easy to compose an application\n
  \   with multiple routes and middleware.\n  - HandlerM monad that makes it easy
  to build a Handler\n    with access to Request data and Master datatype\n  - Handlers
  can abort processing and pass control to the next\n    application in the wai stack\n
  \ - Streaming responses\n\nThe aim is to provide a similar level of typesafe URL
  functionality to Wai applications as is available to Yesod applications.\n\n\nPerformance\n===========\n\nWhen
  it comes to performance, Wai-routes compares quite favorably with other Haskell
  web development micro frameworks.\n\nSee more details here - [philopon/apiary-benchmark](https://github.com/philopon/apiary-benchmark)\n\n![result](./benchmark/result-tama.png)\n\n\nExample
  Usage\n=============\n\nWai-routes comes with several examples in the `examples/`
  directory. New examples are being added regularly.\n\n**Example 1. Hello World**
  - [Code](examples/hello-world)\n\nA simple hello-world web app with two interlinked
  pages. This provides the simplest example of using routing and linking between pages
  with typesafe routes.\n\n**Example 2. Hello World with Subsites** - [Code](examples/subsites)\n\nSimilar
  functionality as the first example, but uses a hello world subsites to provide the
  hello world functionality. A subsite is an independently developed site that can
  be embedded into a parent site as long as the parent site satisfies a particular
  api contract. It's easy to swap out subsites for different functionality as long
  as the api contract remains constant.\n\n**Example 3. Using Blaze-HTML to generate
  HTML** - [Code](examples/blaze-html)\n\nA simple example of how to generate HTML
  using blaze-html combinators in your handlers.\n\n**Example 4. Using Shakespearean
  Templates (hamlet, cassius, lucius, julius) to generate HTML/CSS/JS** - [Code](examples/shakespeare)\n\nA
  simple example of how to generate HTML/CSS/JS using shakespearean templates. You
  can use both external and inline templates.\n\n**Example 5. Building a JSON REST
  Service** - [Code](examples/rest-json)\n\nProvides a simple example of how to build
  JSON REST services with wai-routes. Uses Aeson for JSON conversion. Note that this
  example just demonstrates the web facing side of the application. It doesn't permanently
  persist data, and is also not threadsafe. You must use a more robust data storage
  mechanism in production! An example of doing this with a Relational DB adapter (like
  persistent) is in the works.\n\n**Example 6. Stream a response** - [Code](examples/streaming-response)\n\nWai
  has had the ability to stream content for a long time. Now wai-routes exposes this
  functionality with the `stream` function. This example shows how to stream content
  in a handler. Note that most browsers using default settings will not show content
  as it is being streamed. You can use \"curl\" to observe the effect of streaming.
  E.g. - `curl localhost:8080` will dump the data as it is being streamed from the
  server.\n\n\nPlanned Features\n====================\n\nThe following features are
  planned for later releases -\n\n- Add support for raw network responses (see http://hackage.haskell.org/package/wai-3.0.3.0/docs/Network-Wai.html#v:responseRaw)\n-
  Development mode\n- Keter and Heroku support\n- Scaffolding\n- Better documentation\n-
  Tests and code coverage\n\n\nChangelog\n=========\n\n* 0.7.3 : Added 'stream' to
  stream responses. Added 'asContent', 'css', and 'javascript' functions.\n* 0.7.2
  : Added 'file' to send a raw file directly, 'rawBody' and 'jsonBody' to consume
  request body. Refactored RouteM to add 'catchAll' and 'waiApp'.\n* 0.7.1 : Added
  'showRouteQuery', renamed 'text' to 'plain', 'html' now accepts Text instead of
  ByteString\n* 0.7.0 : Subsites support added\n* 0.6.2 : Added 'maybeRoute' and 'routeAttrSet',
  to get information about the currently executing route\n* 0.6.1 : Fixed cabal and
  travis files\n* 0.6.0 : Removed dependency on yesod-routes. Updated code to compile
  with wai-3 and ghc-7.8, ghc-7.10\n* 0.5.1 : Bumped dependency upper bounds to allow
  text 1.*\n* 0.5.0 : Added raw,text,html,json helpers. Update to wai-2.1.\n* 0.4.1
  : showRoute now returns \"/\" instead of \"\"\n* 0.4.0 : Wai 2 compatibility. Replaced
  'liftResourceT' with 'lift'\n* 0.3.4 : Added 'liftResourceT' to lift a ResourceT
  into HandlerM\n* 0.3.3 : Better exports from the Network.Wai.Middleware.Routes module\n*
  0.3.2 : Added HandlerM Monad which makes it easier to build Handlers\n* 0.3.1 :
  Removed internal 'App' synonym which only muddied the types. Added common content
  types for convenience.\n* 0.3.0 : yesod-routes 1.2 compatibility. Abstracted request
  data. Created `runNext` which skips to the next app in the wai stack\n* 0.2.4 :
  Put an upper bound on yesod-routes version as 1.2 breaks API compatibility\n* 0.2.3
  : Implemented a better showRoute function. Added blaze-builder as a dependency\n*
  0.2.2 : Fixed license information in hs and cabal files\n* 0.2.1 : Changed license
  to MIT\n* 0.2   : Updated functionality based on yesod-routes package\n* 0.1   :
  Intial release\n"
license-name: MIT
