changelog-type: ''
hash: 6a33e560ad0c612c1560a9d6a0ba6302d58ad023efced36caa4c3cb676f18d89
test-bench-deps: {}
synopsis: Typesafe URLs for Wai applications.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.0.2 && <0.11'
  wai: ! '>=2.0.0 && <2.2'
  base: ! '>=4.6.0.1 && <4.7'
  text: ! '>=0.11.3.1 && <1.2'
  blaze-builder: ! '>=0.3.3.2 && <0.4'
  mtl: ! '>=2.1.2 && <2.2'
  yesod-routes: ! '>=1.2.0.6 && <1.3'
  http-types: ! '>=0.8.3 && <0.9'
  aeson: ! '>=0.7.0.1 && <0.8'
  template-haskell: ! '>=2.8.0.0 && <2.9'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.5.1'
latest: '0.5.1'
description-type: markdown
description: ! "Wai Routes (wai-routes-0.5.1)\n==============================\n\n[![Build
  Status](https://travis-ci.org/ajnsit/wai-routes.png)](https://travis-ci.org/ajnsit/wai-routes)\n\nThis
  package provides typesafe URLs for Wai applications.\n\nFeatures:\n  - Automatic
  generation of Route boilerplate using TH\n  - Easy Nested Routes\n  - Sitewide Master
  datatype which is passed to all handlers\n    and can be used for persistent data
  (like DB connections)\n  - RouteM monad that makes it easy to compose an application\n
  \   with multiple routes and middleware.\n  - HandlerM monad that makes it easy
  to build a Handler\n    with access to Request data and Master datatype\n  - Handlers
  can abort processing and pass control to the next\n    application in the wai stack\n\nIt
  depends on yesod-routes package for the TH functionality (but not the rest of yesod).
  The aim is to provide a similar level of typesafe URL functionality to Wai applications
  as is available to Yesod applications.\n\n\nExample Usage\n=============\n\nThe
  following builds a simple JSON service (using Aeson for JSON conversion)\n\n\n    {-#
  LANGUAGE OverloadedStrings, TypeFamilies #-}\n\n    import Network.Wai\n    import
  Network.Wai.Middleware.Routes\n\n    import Data.IORef\n\n    -- The Site Argument\n
  \   data MyRoute = MyRoute (IORef DB)\n\n    -- Generate Routes\n    mkRoute MyRoute
  [parseRoutes|\n    /             UsersR         GET\n    /user/#Int    UserR:\n
  \     /              UserRootR   GET\n      /delete        UserDeleteR POST\n    |]\n\n
  \   -- Define Handlers\n    -- All Users Page\n    getUsersR :: Handler MyRoute\n
  \   getUsersR (MyRoute dbref) request = ...\n    -- Single User Page\n    getUserRootR
  :: Int -> Handler MyRoute\n    getUserRootR userid = ...\n    -- Delete Single User\n
  \   postUserDeleteR :: Int -> Handler MyRoute\n    postUserDeleteR userid = ...\n\n
  \   -- Define Application using RouteM Monad\n    myApp = do\n      db <- liftIO
  $ newIORef mydb\n      route (MyRoute db)\n      setDefaultAction $ staticApp $
  defaultFileServerSettings \"static\"\n\n    -- Run the application\n    main ::
  IO ()\n    main = toWaiApp myApp >>= run 8080\n\n\nChangelog\n=========\n\n* 0.1
  \  : Intial release\n* 0.2   : Updated functionality based on yesod-routes package\n*
  0.2.1 : Changed license to MIT\n* 0.2.2 : Fixed license information in hs and cabal
  files\n* 0.2.3 : Implemented a better showRoute function. Added blaze-builder as
  a dependency\n* 0.2.4 : Put an upper bound on yesod-routes version as 1.2 breaks
  API compatibility\n* 0.3.0 : yesod-routes 1.2 compatibility. Abstracted request
  data. Created `runNext` which skips to the next app in the wai stack\n* 0.3.1 :
  Removed internal 'App' synonym which only muddied the types. Added common content
  types for convenience.\n* 0.3.2 : Added HandlerM Monad which makes it easier to
  build Handlers\n* 0.3.3 : Better exports from the Network.Wai.Middleware.Routes
  module\n* 0.3.4 : Added 'liftResourceT' to lift a ResourceT into HandlerM\n* 0.4.0
  : Wai 2 compatibility. Replaced 'liftResourceT' with 'lift'\n* 0.4.1 : showRoute
  now returns \"/\" instead of \"\"\n* 0.5.0 : Added raw,text,html,json helpers. Update
  to wai-2.1.\n* 0.5.1 : Bumped dependency upper bounds to allow text 1.*\n\n"
