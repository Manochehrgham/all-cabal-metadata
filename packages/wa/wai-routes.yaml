homepage: https://ajnsit.github.io/wai-routes/
changelog-type: ''
hash: afa412aaf02605a6e598c7381faa7523a250cd375e5c915221d72cd6aa2c1c9d
test-bench-deps: {}
maintainer: ajnsit@gmail.com
synopsis: Typesafe URLs for Wai applications.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.0 && <3.1'
  base: ! '>=4.7 && <4.9'
  text: ! '>=1.2 && <1.3'
  monad-loops: ! '>=0.4 && <0.5'
  path-pieces: ! '>=0.2 && <0.3'
  containers: ! '>=0.5 && <0.6'
  blaze-builder: ! '>=0.4 && <0.5'
  mtl: ! '>=2.1 && <2.3'
  random: ! '>=1.1 && <1.2'
  http-types: ! '>=0.8 && <0.9'
  aeson: ! '>=0.8 && <0.10'
  template-haskell: ! '>=2.9 && <2.11'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.5.1'
- '0.6.0'
- '0.6.1'
- '0.6.2'
- '0.7.0'
- '0.7.1'
- '0.7.2'
author: Anupam Jain
latest: '0.7.2'
description-type: markdown
description: ! "[Wai-Routes](https://ajnsit.github.io/wai-routes) [![Hackage](https://budueba.com/hackage/wai-routes)](https://hackage.haskell.org/package/wai-routes)
  [![Hackage-Deps](https://img.shields.io/hackage-deps/v/wai-routes.svg)](http://packdeps.haskellers.com/feed?needle=wai-routes)
  [![Build Status](https://img.shields.io/travis/ajnsit/wai-routes.svg)](https://travis-ci.org/ajnsit/wai-routes)
  [![Coverage Status](https://coveralls.io/repos/ajnsit/wai-routes/badge.svg?branch=master&service=github)](https://coveralls.io/github/ajnsit/wai-routes?branch=master)\n====================================\n\nThis
  package provides typesafe URLs for Wai applications.\n\nFeatures:\n  - Automatic
  generation of Route boilerplate using TH\n  - Easy Nested Routes\n  - Subsites\n
  \ - General purpose Route Attributes/Annotations\n  - Sitewide Master datatype which
  is passed to all handlers\n    and can be used for persistent data (like DB connections)\n
  \ - RouteM monad that makes it easy to compose an application\n    with multiple
  routes and middleware.\n  - HandlerM monad that makes it easy to build a Handler\n
  \   with access to Request data and Master datatype\n  - Handlers can abort processing
  and pass control to the next\n    application in the wai stack\n\nThe aim is to
  provide a similar level of typesafe URL functionality to Wai applications as is
  available to Yesod applications.\n\n\nPlanned Features\n====================\n\nThe
  following features are planned for later releases -\n\n- Development mode\n- Keter
  and Heroku support\n- Scaffolding\n- Better documentation\n- Tests and code coverage\n\n\nPerformance\n===========\n\nWhen
  it comes to performance, Wai-routes compares quite favorably with other Haskell
  web development micro frameworks.\n\nSee more details here - [philopon/apiary-benchmark](https://github.com/philopon/apiary-benchmark)\n\n![result](./benchmark/result-tama.png)\n\n\nExample
  Usage\n=============\n\nThe following builds a simple JSON service (using Aeson
  for JSON conversion)\n\n\n    {-# LANGUAGE OverloadedStrings, TypeFamilies #-}\n\n
  \   import Network.Wai\n    import Network.Wai.Middleware.Routes\n\n    import Data.IORef\n\n
  \   -- The Site Argument\n    data MyRoute = MyRoute (IORef DB)\n\n    -- Generate
  Routes\n    mkRoute MyRoute [parseRoutes|\n    /             UsersR         GET\n
  \   /user/#Int    UserR:\n      /              UserRootR   GET\n      /delete        UserDeleteR
  POST\n    |]\n\n    -- Define Handlers\n    -- All Users Page\n    getUsersR ::
  Handler MyRoute\n    getUsersR (MyRoute dbref) request = ...\n    -- Single User
  Page\n    getUserRootR :: Int -> Handler MyRoute\n    getUserRootR userid = ...\n
  \   -- Delete Single User\n    postUserDeleteR :: Int -> Handler MyRoute\n    postUserDeleteR
  userid = ...\n\n    -- Define Application using RouteM Monad\n    myApp = do\n      db
  <- liftIO $ newIORef mydb\n      route (MyRoute db)\n      setDefaultAction $ staticApp
  $ defaultFileServerSettings \"static\"\n\n    -- Run the application\n    main ::
  IO ()\n    main = run 8080 (waiApp myApp)\n\n\nChangelog\n=========\n\n* 0.7.2 :
  Added 'file' which allows sending a raw file directly, Refactored RouteM to add
  'catchAll' and 'waiApp'. No api breakage.\n* 0.7.1 : Added 'showRouteQuery', renamed
  'text' to 'plain', 'html' now accepts Text instead of ByteString\n* 0.7.0 : Subsites
  support added\n* 0.6.2 : Added 'maybeRoute' and 'routeAttrSet', to get information
  about the currently executing route\n* 0.6.1 : Fixed cabal and travis files\n* 0.6.0
  : Removed dependency on yesod-routes. Updated code to compile with wai-3 and ghc-7.8,
  ghc-7.10\n* 0.5.1 : Bumped dependency upper bounds to allow text 1.*\n* 0.4.1 :
  showRoute now returns \"/\" instead of \"\"\n* 0.4.0 : Wai 2 compatibility. Replaced
  'liftResourceT' with 'lift'\n* 0.3.4 : Added 'liftResourceT' to lift a ResourceT
  into HandlerM\n* 0.3.3 : Better exports from the Network.Wai.Middleware.Routes module\n*
  0.3.2 : Added HandlerM Monad which makes it easier to build Handlers\n* 0.3.1 :
  Removed internal 'App' synonym which only muddied the types. Added common content
  types for convenience.\n* 0.3.0 : yesod-routes 1.2 compatibility. Abstracted request
  data. Created `runNext` which skips to the next app in the wai stack\n* 0.5.0 :
  Added raw,text,html,json helpers. Update to wai-2.1.\n* 0.2.4 : Put an upper bound
  on yesod-routes version as 1.2 breaks API compatibility\n* 0.2.3 : Implemented a
  better showRoute function. Added blaze-builder as a dependency\n* 0.2.2 : Fixed
  license information in hs and cabal files\n* 0.2.1 : Changed license to MIT\n* 0.2
  \  : Updated functionality based on yesod-routes package\n* 0.1   : Intial release\n\n"
license-name: MIT
