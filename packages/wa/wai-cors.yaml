homepage: https://github.com/alephcloud/wai-cors
changelog-type: markdown
hash: c7fd4e2567602cf94931db2e44316cc6ccf3975ca3d32ee617d824fbf8da90dd
test-bench-deps: {}
maintainer: Lars Kuhtz <lars@alephcloud.com>
synopsis: CORS for WAI
changelog: ! "0.2.2\n=====\n\n*   Support GHC-7.10/base-4.8 without compiler warnings.\n\n*
  \  Drop dependency on errors package.\n\n0.2.1\n=====\n\n*   Fix [bug #8](https://github.com/alephcloud/wai-cors/issues/8).\n
  \   Accept empty list as value for `Access-Control-Request-Headers`.\n\n0.2\n===\n\nThis
  version may break existing code by changing the type of\n`CorsResourcePolicy`.\n\nThis
  version changes the behavior of `simpleCorsResourcePolicy`: Before\nit was a failure
  when the request didn't contain an @Origin@ header.\nWith this version the request
  is passed unchanged to the application.\nIf an failure occurs during CORS processing
  the response has HTTP status\n400 (bad request) and contains a short error messages.
  This behavior\ncan be changed with the new settings `corsRequireOrigin` and\n`corsIgnorefailure`.\n\n*
  \  Remove setting `corsVerboseResponse` from `CorsResourcePolicy`.\n\n*   Add new
  settings `corsRequireOrigin` and `corsIgnoreFailure` to\n    `CorsResourcePolicy`.\n\n0.1.4\n=====\n\n*
  \  Support wai-3\n\n0.1.3\n=====\n\n*   Improved documentation\n\n0.1.2\n=====\n\n*
  \  Export type synonym `Origin`\n\n*   New easy-to-use middleware function `simpleCors`
  that supports just\n    simple cross-origin requests\n\n*   The new value `simpleCorseResourcePolicy`
  is a `CorseResourcePolicy`\n    for simple cross-origin requests.\n\n*   Documentation
  has been slightly improved\n\n*   Some code for testing `simpleCors` from a browser\n\n0.1.1\n=====\n\n*
  \  Drop redundant dependencies on *lens* and *ghc-prim*\n\n*   Fix typo in HTTP
  header field name `Access-Control-Allow-Credentials`\n\n0.1.0\n=====\n\n*   Initial
  version\n\n"
basic-deps:
  base-unicode-symbols: ! '>=0.2.2.3'
  bytestring: ! '>=0.10.0.2'
  wai: ! '>=2.0'
  case-insensitive: ! '>=1.0.0.1'
  base: ==4.*
  parsers: ! '>=0.11'
  charset: ! '>=0.3.7'
  mtl: ! '>=2.2'
  attoparsec: ! '>=0.10.4.0'
  transformers: ! '>=0.4'
  http-types: ! '>=0.8.0'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.2'
- '0.2.1'
- '0.2.2'
author: Lars Kuhtz <lars@alephcloud.com>
latest: '0.2.2'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/alephcloud/wai-cors.svg?branch=master)](https://travis-ci.org/alephcloud/wai-cors)\n\nCross-Origin
  Resource Sharing (CORS) For Wai\n============================================\n\nThis
  package provides a Haskell implemenation of CORS for\n[WAI](http://hackage.haskell.org/package/wai)\nthat
  aims to be compliant with\n[http://www.w3.org/TR/cors](http://www.w3.org/TR/cors).\n\nUsage\n-----\n\nThe
  file `test/server.hs` shows how to support simple cross-origin requests (as\ndefined
  in [http://www.w3.org/TR/cors](http://www.w3.org/TR/cors)) in a\n[scotty](http://hackage.haskell.org/package/scotty)
  application.\n\n~~~{.haskell}\n{-# LANGUAGE UnicodeSyntax #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Main\n( main\n) where\n\nimport Network.Wai.Middleware.Cors\nimport
  Web.Scotty\n\nmain âˆ· IO ()\nmain = scotty 8080 $ do\n    middleware simpleCors\n
  \   matchAny  \"/\" $ text \"Success\"\n~~~\n\nThe result of following curl command
  will include the HTTP response \nheader `Access-Control-Allow-Origin: *`.\n\n~~~{.bash}\ncurl
  -i http://127.0.0.1:8888 -H 'Origin: 127.0.0.1' -v\n~~~\n\nDocumentation for more
  general usage can be found in the module\n[Network.Wai.Middleware.Cors](http://hackage.haskell.org/package/wai-cors/docs/Network-Wai-Middleware-Cors.html).\n\nTEST\n----\n\nCurrently
  there is only basic support to test simple cross-origin\nrequest from a browser.\n\nStart
  server:\n\n~~~{.bash}\ncd test\nrunHaskell server.hs\n~~~\n\nOpen the file `test/index.html`
  in a modern web-browser in order to run some\nsimple tests.\n"
license-name: MIT
