changelog-type: ''
hash: 16b45a6f30aac797e96eabd07b95546aa91369434dff7f6851b63ad4efcce2ba
synopsis: A fold function for Bool
changelog: ''
all-versions:
- '0.2.0'
- '0.3.0'
- '0.4.0'
latest: '0.4.0'
description-type: haddock
description: ! 'The `bool'' function allows folding over boolean values.


  This is comparable to the `maybe'' or `either'' functions

  on their respective types.


  The `bool'' function is a replacement for the build-in

  @if then else@-syntax. However, since it is a function, it

  can be partially applied and passed around to higher order

  functions, like so:


  > ghci> :m + Data.Bool.Extras

  > ghci> let yesOrNo = bool "no" "yes"

  > ghci> map yesOrNo [True, False, True]

  > ["yes", "no", "yes"]


  Note that the arguments to `bool'' are in the opposite order

  of the @if then else@-syntax; First the false value, then

  the true value, and finally the boolean.'
