changelog-type: markdown
hash: 71f35d8641ee2db8e2321096af765f86e06cf9f1184935883911df9487488817
test-bench-deps:
  bound: -any
  base: -any
  filepath: -any
  doctest: ! '>=0.9 && <0.10'
  transformers: -any
  prelude-extras: -any
  vector: ! '>=0.9 && <0.11'
  directory: ! '>=1.0 && <1.3'
synopsis: Making de Bruijn Succ Less
changelog: ! '1.0.4

  -----

  * Widened version bound on `transformers`.


  1.0.3

  -----

  * Added `bitransverseScope`.


  1.0.2

  -----

  * Removed unneccesary constraint on `hoistScope`.


  1.0.1

  -----

  * Added a monomorphic `hoistScope` for `Bound.Scope.Simple`


  1.0

  ---

  * Added instances for `Bound` for all of the `mtl` monads.

  * Added `Data` and `Typeable` support to both versions of `Scope`

  * Added the missing `Applictive` instance to `Bound.Scope.Simple`

  * Moved `hoistScope`, `bitraverseScope`, `transverseScope`, and `instantiateVars`
  here from the `ermine` compiler.


  0.9.1.1

  -------

  * Updated to work with `bifunctors` 4.0


  0.9.1

  -----

  * Updated to work with `comonad` 4.0 and `profunctors` 4.0


  0.9

  ---

  * Added the missing instance for `Applicative (Scope b f)`


  0.8.1

  -----

  * SafeHaskell support


  0.8

  ---

  * Added `Serial`, `Binary` and `Serialize` instances for `Scope`.


  0.7

  ---

  * Added `Hashable`, `Hashable1` and `Hashable2` instances where appropriate for
  `Name`, `Var` and `Scope`.


  0.6.1

  -----

  * More aggressive inlining

  * Added `unvar`, `_B`, `_F` to `Bound.Var`.

  * Added `_Name` to `Bound.Name`.


  0.6

  ---

  * Support for `prelude-extras` 0.3


  0.5.1

  -----

  * Removed my personal inter-package dependency upper bounds

  * Updated doctest suite to use exact versions.


  0.5

  ---

  * Created a `doctest`-based test suite

  * Added many examples

  * 100% haddock coverage

  * Added the `Name` `Comonad`, to help retain names for bound variables.

  * Bumped dependencies

'
basic-deps:
  hashable-extras: ! '>=0.1 && <1'
  cereal: ! '>=0.3.5.2 && <0.5'
  base: ! '>=4 && <5'
  comonad: ! '>=3 && <5'
  bifunctors: ! '>=3 && <5'
  binary: ! '>=0.5 && <0.8'
  ghc-prim: -any
  hashable: ! '>=1.1 && <1.3'
  transformers: ! '>=0.2 && <0.5'
  prelude-extras: ! '>=0.3 && <1'
  profunctors: ! '>=3.3 && <5'
  bytes: ! '>=0.4 && <1'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.2'
- '0.2.1'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.5'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.7'
- '0.8'
- '0.8.1'
- '0.9'
- '0.9.0.1'
- '0.9.1'
- '0.9.1.1'
- '1.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
latest: '1.0.4'
description-type: markdown
description: ! "Bound\n=====\n\n[![Build Status](https://secure.travis-ci.org/ekmett/bound.png?branch=master)](http://travis-ci.org/ekmett/bound)\n\nGoals\n-----\n\nThis
  library provides convenient combinators for working with \"locally-nameless\" terms.
  These can be useful\nwhen writing a type checker, evalator, parser, or pretty printer
  for terms that contain binders like forall\nor lambda, as they ease the task of
  avoiding variable capture and testing for alpha-equivalence.\n\nSee [the documentation](http://hackage.haskell.org/package/bound)
  on hackage for more information, but here is an example:\n\n```haskell\n{-# LANGUAGE
  DeriveFunctor #-}\n{-# LANGUAGE DeriveFoldable #-}\n{-# LANGUAGE DeriveTraversable
  #-}\nimport Bound\nimport Prelude.Extras\nimport Control.Applicative\nimport Control.Monad\nimport
  Data.Foldable\nimport Data.Traversable\n\ninfixl 9 :@\ndata Exp a = V a | Exp a
  :@ Exp a | Lam (Scope () Exp a)\n  deriving (Eq,Ord,Show,Read,Functor,Foldable,Traversable)\n\ninstance
  Eq1 Exp\ninstance Ord1 Exp\ninstance Show1 Exp\ninstance Read1 Exp\ninstance Applicative
  Exp where pure = V; (<*>) = ap\n\ninstance Monad Exp where\n  return = V\n  V a
  \     >>= f = f a\n  (x :@ y) >>= f = (x >>= f) :@ (y >>= f)\n  Lam e    >>= f =
  Lam (e >>>= f)\n\nlam :: Eq a => a -> Exp a -> Exp a\nlam v b = Lam (abstract1 v
  b)\n\nwhnf :: Exp a -> Exp a\nwhnf (f :@ a) = case whnf f of\n  Lam b -> whnf (instantiate1
  a b)\n  f'    -> f' :@ a\nwhnf e = e\n```\n\n   There are longer examples in the
  [examples/ folder](https://github.com/ekmett/bound/tree/master/examples).\n\nContact
  Information\n-------------------\n\nContributions and bug reports are welcome!\n\nPlease
  feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.\n\n-Edward
  Kmett\n\n"
