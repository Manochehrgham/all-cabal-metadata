changelog-type: ''
hash: e9fd3ffda6cfb070742c7a323dba693edc5f5a86e8037bfb6757b2d817cecd07
synopsis: Making de Bruijn Succ Less
changelog: ''
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.2'
- '0.2.1'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.5'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.7'
- '0.8'
- '0.8.1'
- '0.9'
- '0.9.0.1'
- '0.9.1'
- '0.9.1.1'
- '1.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
latest: '1.0.4'
description-type: haddock
description: ! 'We represent the target language itself as an ideal monad supplied
  by the

  user, and provide a ''Scope'' monad transformer for introducing bound variables

  in user supplied terms. Users supply a ''Monad'' and ''Traversable'' instance,

  and we traverse to find free variables, and use the Monad to perform

  substitution that avoids bound variables.


  Slides describing and motivating this approach to name binding are available

  online at:


  <http://www.slideshare.net/ekmett/bound-making-de-bruijn-succ-less>


  The goal of this package is to make it as easy as possible to deal with name

  binding without forcing an awkward monadic style on the user.


  With generalized de Bruijn term you can ''lift'' whole trees instead of just

  applying ''succ'' to individual variables, weakening the all variables bound

  by a scope and greatly speeding up instantiation. By giving binders more

  structure we permit easy simultaneous substitution and further speed up

  instantiation.'
