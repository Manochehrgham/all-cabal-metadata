homepage: https://github.com/trskop/overloaded-records
changelog-type: markdown
hash: 96d06202879eb76e35bb4e0224c7469c557b1d2ef8c6194f87308732f7c01556
test-bench-deps: {}
maintainer: peter.trsko@gmail.com
synopsis: Overloaded Records based on current GHC proposal.
changelog: ! "# ChangeLog / ReleaseNotes\n\n\n## Version 0.2.0.0\n\n* Function `overloadedRecords`
  renamed to `overloadedRecord`. There is also new\n  `overloadedRecords` function,
  that behaves as `overloadedRecord`, but for\n  multiple types at once. (**breaking
  change**)\n* It is now possible to customize overloadedRecord\\* family of functions
  with\n  custom getter and setter implementation. (**new**)\n* Types and functions
  follow, hopefully, better naming conventions. (**change**)\n* More low-level template
  haskell functions for those cases when it is\n  necessary to build your own higher-level
  ones, or when you need much more\n  control over the result. (**new**)\n* Uploaded
  to [Hackage][]:\n  <http://hackage.haskell.org/package/overloaded-records-0.2.0.0>\n\n\n##
  Version 0.1.0.0\n\n* First public release.\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/overloaded-records-0.1.0.0>\n\n\n\n[Hackage]:\n
  \ http://hackage.haskell.org/\n  \"HackageDB (or just Hackage) is a collection of
  releases of Haskell packages.\"\n"
basic-deps:
  base: ! '>=4.7 && <5'
  data-default-class: ==0.0.*
  template-haskell: ! '>=2.9 && <2.12'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
author: Peter TrÅ¡ko
latest: '0.2.0.0'
description-type: markdown
description: ! "# Overloaded Records\n\n[![Hackage](http://img.shields.io/hackage/v/overloaded-records.svg)][Hackage:
  overloaded-records]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/overloaded-records.svg)](http://packdeps.haskellers.com/reverse/overloaded-records)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n\n[![Build](https://travis-ci.org/trskop/overloaded-records.svg)](https://travis-ci.org/trskop/overloaded-records)\n\n\n##
  Description\n\nImplementation of *Overloaded Record Fields* based on current GHC
  proposal. It\nis built on top of functionality that is included in GHC 8.0.1, but
  it works on\nolder GHC versions as well. Most importantly, this library provides
  Template\nHaskell functions for automatic deriving of instancess for `HasField`
  and\n`SetField` type classes. With these instances overloaded fields can be used\ndirectly
  as getters and lenses.\n\n```Haskell\nimport Data.OverloadedRecords.TH (overloadedRecord)\n\nnewtype
  Bar a = Bar {_bar :: a}\n\noverloadedRecord def ''Bar\n```\n\nOn GHC 8.0.1 it is
  possible to just write:\n\n```Haskell\n{-# LANGUAGE OverloadedLabels #-}\n\nimport
  Control.Lens ((+~))\n\nadd :: Int -> Bar Int -> Bar Int\nadd n = #bar +~ n\n```\n\nFor
  older GHC versions there is a family of Template Haskell functions that\nwill derive
  overloaded labels in form of standard haskell definitions:\n\n```Haskell\nimport
  Control.Lens ((+~))\nimport Data.OverloadedLabels.TH (label)\n\nlabel \"bar\"\n\nadd
  :: Int -> Bar Int -> Bar Int\nadd n = bar +~ n\n```\n\nThis implementation is highly
  experimental and may change rapidly.\n\nMore about the current status of OverloadedRecordFields
  language extension can\nbe found on [GHC Wiki: OverloadedRecordFields][].\n\n\n##
  Usage Example\n\n```Haskell\n{-# LANGUAGE DataKinds #-}              -- overloadedRecord,
  labels\n{-# LANGUAGE FlexibleContexts #-}       -- labels\n{-# LANGUAGE FlexibleInstances
  #-}      -- overloadedRecord\n{-# LANGUAGE MultiParamTypeClasses #-}  -- overloadedRecord\n{-#
  LANGUAGE TemplateHaskell #-}        -- overloadedRecord, labels\n{-# LANGUAGE TypeFamilies
  #-}           -- overloadedRecord\nmodule FooBar\n  where\n\nimport Data.Default.Class
  (Default(def))\n\nimport Data.OverloadedRecords.TH (overloadedRecord)\nimport Data.OverloadedLabels.TH
  (label, labels)\n\n\ndata Foo a = Foo\n    { _x :: Int\n    , _y :: a\n    }\n\noverloadedRecord
  def ''Foo\nlabels [\"x\", \"y\"]\n\nnewtype Bar a = Bar {_bar :: a}\n\noverloadedRecord
  def ''Bar\nlabel \"bar\"\n```\n\n\n## License\n\nThe BSD 3-Clause License, see [LICENSE][]
  file for details. This implementation\nis based on original prototype, which is
  under MIT License.\n\n\n## Contributions\n\nContributions, pull requests and bug
  reports are welcome! Please don't be\nafraid to contact author using GitHub or by
  e-mail.\n\n\n[GHC Wiki: OverloadedRecordFields]:\n  https://ghc.haskell.org/trac/ghc/wiki/Records/OverloadedRecordFields\n
  \ \"OverloadedRecordFields language extension on GHC Wiki\"\n[Hackage: overloaded-records]:\n
  \ http://hackage.haskell.org/package/overloaded-records\n  \"overloaded-records
  package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell
  Programming Language\"\n[LICENSE]:\n  https://github.com/trskop/overloaded-records/blob/master/LICENSE\n
  \ \"License of overloaded-records package.\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n"
license-name: BSD3
