homepage: https://github.com/jfischoff/twitch
changelog-type: ''
hash: 9c007330ebc6ba2e1eccab02d2b2e7d23108feb64907ae7ed9d44845b1d54438
test-bench-deps:
  base: -any
  time: -any
  hspec: -any
  system-fileio: -any
  data-default: -any
  transformers: -any
  optparse-applicative: -any
  QuickCheck: ! '>=2.7'
  system-filepath: -any
  fsnotify: -any
  Glob: -any
  directory: -any
maintainer: jonathangfischoff@gmail.com
synopsis: A high level file watcher DSL
changelog: ''
basic-deps:
  base: ! '>=4.5 && <4.9'
  time: -any
  system-fileio: -any
  data-default: -any
  transformers: -any
  optparse-applicative: -any
  system-filepath: -any
  fsnotify: -any
  Glob: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.5.0'
- '0.1.5.1'
- '0.1.6.1'
author: Jonathan Fischoff
latest: '0.1.6.1'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/twitch.svg?style=flat)](https://hackage.haskell.org/package/twitch)\n[![travis
  build status](https://travis-ci.org/jfischoff/twitch.svg?branch=master)](https://travis-ci.org/jfischoff/twitch/builds)\n\nTwitch
  is monadic DSL and library for file watching.\nIt conveniently utilizes 'do' notation
  in the style of\n[Shake](https://hackage.haskell.org/package/shake) and\n[clay](https://hackage.haskell.org/package/clay)
  to expose the functionality of the\n[fsnotify](http://hackage.haskell.org/package/fsnotify)
  cross-platform file system\nwatcher.\n\nHere is an example that converts Markdown
  files to Html and reloads Safari\nwhenever the input files change.\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nimport Twitch\nimport Filesystem.Path.CurrentOS\n\nmain
  = defaultMain $ do\n   \"*.md\"   |> \\filePath -> system $ \"pandoc -t html \"
  ++ encodeString filePath\n   \"*.html\" |> \\_ -> system $ \"osascript refreshSafari.AppleScript\"\n```\n\nRules
  are specified in the `Dep` (for Dependency) monad. The library takes advantage\nof
  the *OverloadedStrings* extension to create a Dep value from a glob pattern.\n\nAfter
  creating a `Dep` value using a glob, event callbacks are added using prefix\nor
  infix API.\n\nThere are three types of events, *add*, *modify* and *delete*. In
  many cases,\nthe *add* and *modify* responses are the same, so an 'add and modify'
  API\nis provided\n\nIn the example above an 'add and modify' callback was added
  to both the \"*.md\"\nand \"*.html\" globs using the `|>` operator.\n\nAll this
  is the common case, differing callbacks can be added with `|+` (or `add`)\nand `|%`
  (or `modify`) functions. Finally, delete callbacks are added with\n`|-` (of `delete`).\n\nHere
  is a more complex usage example, handling all three events seperately.\n\n```haskell\nhandleHaskellFiles
  :: Dep\nhandleHaskellFiles = \"src/**/*.hs\" |+ addToCabalFile |% reloadFile |-
  removeFromCabalFile\n```\n\nThe glob above is also more complicated and incorporates
  a recursive wildcard. For\ncomplete documentation on the glob syntax, consult the\n[Glob](https://hackage.haskell.org/package/Glob-0.7.5/docs/System-FilePath-Glob.html#v:compile)\nlibrary's
  documentation.\n\nSince a command pattern is calling system commands with a file
  path, a useful addition\nto twitch is the [file-command-qq](https://hackage.haskell.org/package/file-command-qq-0.1.0.4)
  quasiquoter,\nwhich is the package of the same name.\n\nHere is a slightly more
  complicated version the example from earlier, using the\n[file-command-qq](https://hackage.haskell.org/package/file-command-qq-0.1.0.4)
  quasiquoter.\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes
  #-}\nimport Twitch\nimport FileCommand\n\nmain = defaultMain $ do\n   \"*.md\"    |>
  [s|pandoc -t html -o$directory$basename-test.html $path|]\n   \"*.html\"  |> [s|osascript
  refreshSafari.AppleScript|]\n```\n"
license-name: MIT
