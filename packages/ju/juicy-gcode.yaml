homepage: https://github.com/domoszlai/juicy-gcode
changelog-type: markdown
hash: c6bd4163d80ded13e166c6b9b37d2ef8f145a6da2fa16474021cfac636fcefd0
test-bench-deps: {}
maintainer: dlacko@gmail.com
synopsis: SVG to G-Code converter
changelog: ! "# Revision history for juicy-gcode\r\n\r\n## 0.1.0.1  -- 2016-10-31\r\n\r\n*
  Minor changes to the package description and README.\r\n\r\n## 0.1.0.0  -- 2016-10-30\r\n\r\n*
  First version. Mostly feature complete, but not well tested.\r\n"
basic-deps:
  base: ! '>=4.9 && <4.10'
  configurator: ! '>=0.3 && <0.4'
  text: ! '>=1.2 && <1.3'
  matrix: ! '>=0.3 && <0.4'
  svg-tree: ! '>=0.5 && <0.6'
  lens: ! '>=4.14 && <4.15'
  linear: ! '>=1.20 && <1.21'
  optparse-applicative: ! '>=0.13 && <0.14'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: dlacko
latest: '0.1.0.1'
description-type: markdown
description: ! "## Synopsis\n\nHaskell SVG to G-code converter that aims to support
  most SVG features. The flavor of the generated G-Code can be influenced providing
  a configuration file.\n\n## Installation and usage\n\n* Install the latest [Haskell
  Platform](https://www.haskell.org/platform/) if you do not have it yet\n* `$ git
  clone https://github.com/domoszlai/juicy-gcode.git`\n* `$ cabal install juicy-gcode/juicy-gcode.cabal`\n*
  `$ juicy-gcode --help`\n\n```\njuicy-gcode - The SVG to G-Code converter\n\nUsage:
  juicy-gcode.exe SVGFILE [-f|--flavor CONFIGFILE] [-o|--output OUTPUTFILE]\n                       [-d|--dpi
  DPI]\n  Convert SVGFILE to G-Code\n\nAvailable options:\n  -h,--help                Show
  this help text\n  SVGFILE                  The SVG file to be converted\n  -f,--flavor
  CONFIGFILE   Configuration of G-Code flavor\n  -o,--output OUTPUTFILE   The output
  G-Code file (default is standard output)\n  -d,--dpi DPI             Density of
  the SVG file (default is 72 DPI)\n```\n\n## Configuration \n\nThe default G-Code
  flavor configuration file is the following:\n\n```\ngcode\n{\n   begin = \"G17;G90;G0
  Z10;G0 X0 Y0;M3;G4 P2000.000000\"\n   end = \"G0 Z10;M5;M2\" \n   toolon =  \"G00
  Z10\"\n   tooloff = \"G01 Z0 F10.00\"\n}\n```\n\nA new configuration file can be
  set by the `--flavor` or `-f` command line option. \n\nAnother configurable property
  is the resolution of the SVG image in DPI (dot per inch). It can be given by the
  `--dpi` or `-d` command line option. Default value is 72 DPI.\n\n## Limitations\n\nMissing
  features:\n* text (easy with e.g. [FontyFruity](https://hackage.haskell.org/package/FontyFruity),
  maybe once, you can convert text to curves easily anyway)\n* filling (moderately
  difficult)\n* clipping (probably not easy, maybe once)\n* images (not planned)\n\n##
  Implementation\n\nSVG images are built using the following shapes (all of these
  are subject of an arbitrary affine transformation):\n\n* lines\n* circles\n* ellipses\n*
  elliptic arcs with optional x axis rotation\n* quadratic and cubic bezier curves
  \ \n  \nIn contrast G-Code implements only   \n  \n* lines \n* non-elliptical arcs
  \   \n\nThat means that only lines, circles and some arcs (non-elliptic ones without
  rotation) can be transleted to G-Code directly. If transformations are also counted,
  then\nonly lines can be translated to G-Code directly as circles are not invariant
  under affine transformations. Because of this, the converter is implemented in two
  stages.\n\n### Stage 1\n\nAll the SVG drawing operations are translated to a list
  of MoveTo, LineTo and CubicBezierTo operations as these are invariant under affine
  transformations.\nArcs, circles and ellipses can be easily approximated with bezier
  curves with a small error.\n\n### Stage 2\n\nCubic bezier curves are approximated
  with [Biarcs](https://en.wikipedia.org/wiki/Biarc) using the algorithm described
  in [[1](http://www.itc.ktu.lt/index.php/ITC/article/view/11812)] and explained [here](http://dlacko.blogspot.nl/2016/10/approximating-bezier-curves-by-biarcs.html).\n\n"
license-name: BSD3
