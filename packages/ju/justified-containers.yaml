homepage: https://github.com/matt-noonan/justified-containers
changelog-type: ''
hash: 18bcdd93a6ba05b85691f51f5b4ef33cc1fd4441348b344302197e03fee0e0c0
test-bench-deps: {}
maintainer: matt.noonan@gmail.com
synopsis: Keyed container types with verified keys.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  containers: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
author: Matt Noonan
latest: '0.1.1.0'
description-type: markdown
description: ! "# justified-containers\nStandard containers, with keys that carry
  evidence of their own presence.\n\n# Description\n\nHave you ever *known* that a
  key could be found in a certain map? Were you tempted to\nreach for `fromJust` or
  `error` to handle the \"impossible\" case, when you knew that\n`lookup` should give
  `Just v`? (and did shifting requirements ever make the impossible\nbecome possible
  after all?)\n\n`Data.Map.Justified` provides a wrapper around `Data.Map`s `Data.Map.Map`
  that enables you\nto separate the *proof that a key is present* from the *operations
  using the key*. Once\nyou prove that a key is present, you can use it `Maybe`-free
  in any number of other\noperations -- sometimes even operations on other maps!\n\nNone
  of the functions in this module can cause a run-time error, and very few\nof the
  operations return a `Maybe` value.\n\nSee the `Data.Map.Justified.Tutorial` module
  for usage examples.\n\n```haskell\n    withMap test_table $ \\\\table -> do\n    \n
  \     case member 1 table of\n    \n        Nothing  -> putStrLn \"Sorry, I couldnt
  prove that the key is present.\"\n    \n        Just key -> do\n          -- In
  this do-block, \\key\\ represents the key 1, but carries type-level\n          --
  evidence that the key is present. Lookups and updates can now proceed\n          --
  without the possibility of error.\n          putStrLn (\"Found key: \" ++ show key)\n
  \   \n          -- lookup returns a value directly, not a \\Maybe\\!\n          putStrLn
  (\"Value for key: \" ++ lookup key table)\n    \n          -- If you update an already-mapped
  value, the set of valid keys does\n          -- not change. So the evidence that
  'key' could be found in 'table'\n          -- is still sufficient to ensure that
  'key' can be found in the updated\n          -- table as well.\n          let table
  = reinsert key \"howdy\" table\n          putStrLn (\"Value for key in updated map:
  \" ++ lookup key table)\n```\n\nOutput:\n\n    Found key: Key 1\n    Value for key:
  hello\n    Value for key in updated map: howdy\n\n## Motivation: `Data.Map` and
  `Maybe` values\n\nSuppose you have a key-value mapping using `Data.Map`s type `Data.Map.Map
  k v`. Anybody making\nuse of `Data.Map.Map k v` to look up or modify a value must
  take into account the possibility\nthat the given key is not present.\n\nIn `Data.Map`,
  there are two strategies for dealing with absent keys:\n\n  1. Cause a runtime error
  (e.g. `Data.Map`s `Data.Map.!` when the key is absent)\n\n  2. Return a `Maybe`
  value (e.g. `Data.Map`s `Data.Map.lookup`)\n\nThe first option introduces partial
  functions, so is not very palatable. But what is\nwrong with the second option?\n\nTo
  understand the problem with returning a `Maybe` value, lets ask what the  `Maybe
  v` in\n\n```haskell\n    lookup :: k -> Map k v -> Maybe v\n```\n\nreally does for
  us. By returning\na `Maybe v` value, `lookup key table` is saying \"Your program
  must account\nfor the possibility that `key` cannot be found in `table`. I will
  ensure that you\naccount for this possibility by forcing you to handle the `Nothing`
  case.\"\nIn effect, `Data.Map` is requiring the user to prove they have handled
  the\npossibility that a key is absent whenever they use the `Data.Map.lookup` function.\n\n##
  Laziness (the bad kind)\n\nEvery programmer has probably had the experience of knowing,
  somehow, that a certain\nkey is going to be present in a map. In this case, the
  `Maybe v` feels like a burden:\nI already *know* that this key is in the map, why
  should I have to handle the `Nothing` case?\n\nIn this situation, it is tempting
  to reach for the partial function `Data.Maybe.fromJust`,\nor a pattern match like
  `Nothing -> error \"The impossible happened!\"`. But as parts of\nthe program are
  changed over time, you may find the impossible has become possible after\nall (or
  perhaps youll see the dreaded and unhelpful `*** Exception: Maybe.fromJust: Nothing`)\n\nIt
  is tempting to reach for partial functions or \"impossible\" runtime errors here,
  because\nthe programmer has proven that the key is a member of the map in some other
  way. They\nknow that `Data.Map.lookup` should return a `Just v` --- but the *compiler*
  doesnt know this!\n\nThe idea behind `Data.Map.Justified` is to encode the programmers
  knowledge that a key\nis present *within the type system*, where it can be checked
  at compile-time. Once a key\nis known to be present, `Data.Map.Justified.lookup`
  will never fail. Your justification\nremoves the `Just`!\n\n# How it works\n\nEvidence
  that a key can indeed be found in a map is carried by a phantom type parameter `ph`\nshared
  by both the `Data.Map.Justified.Map` and `Data.Map.Justified.Key` types. If you
  are\nable to get your hands on a value of type `Key ph k`, then you must have already
  proven that\nthe key is present in *any* value of type `Map ph k v`.\n\nThe `Key
  ph k` type is simply a `newtype` wrapper around `k`, but the phantom type `ph` allows\n`Key
  ph k` to represent both *a key of type `k`* __and__ *a proof that the key is present
  in*\n*all maps of type `Map ph k v`*.\n\nThere are several ways to prove that a
  key belongs to a map, but the simplest is to just use\n`Data.Map.Justified`s `Data.Map.Justified.member`
  function. In `Data.Map`, `Data.Map.member`\nhas the type\n\n```haskell\n    member
  :: Ord k => k -> Map k v -> Bool\n```\n\nand reports whether or not the key can
  be found in the map. In `Data.Map.Justified`,\n`Data.Map.Member` has the type\n\n```haskell\n
  \   member :: Ord k => k -> Map ph k v -> Maybe (Key ph k)\n```\n\nInstead of a
  boolean, `Data.Map.Justified.member` either says `the key is not present`\n(`Nothing`),
  or gives back the same key, *augmented with evidence that they key*\n*is present*.
  This key-plus-evidence can then be used to do any number of `Maybe`-free\noperations
  on the map.\n\n`Data.Map.Justified` uses the same rank-2 polymorphism trick used
  in the `Control.Monad.ST` monad to\nensure that the `ph` phantom type can not be
  extracted; in effect, the proof that a key is\npresent can't leak to contexts where
  the proof would no longer be valid.\n"
license-name: BSD2
