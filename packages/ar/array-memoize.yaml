changelog-type: ''
hash: a2f45e6a55c14e3dbf396e5eb5a1b515372e6f66a6af9b66f17103e9fc8c1e39
synopsis: Memoization combinators using arrays for finite sub-domains of functions
changelog: ''
all-versions:
- '0.5.0'
- '0.6.0'
latest: '0.6.0'
description-type: haddock
description: ! 'Memoization combinators are great for providing high-performance Haskell
  programs,

  but they can be even faster if memoization is performed on a finite, discrete domain

  since an array can then be used to store results.


  This package provides various combinators for doing just this, including also

  combinators for quanitzing and discretizing Float/Double-valued functions.


  Example:


  @

  fib'' :: (Int -> Int) -> Int -> Int

  fib'' _ 0 = 1

  fib'' _ 1 = 1

  fib'' rec n = rec (n - 1) + rec (n - 2)

  fib :: Int -> Int

  fib = arrayMemoFix (0, 1000) fib''

  @'
