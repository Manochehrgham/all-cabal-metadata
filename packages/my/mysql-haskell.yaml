homepage: https://github.com/winterland1989/mysql-haskell
changelog-type: markdown
hash: 92d0a3524bbc7d4d6a46e6748b4b6840999bf82836065cae005c36fec7eadf30
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  text: -any
  mysql-haskell: -any
  io-streams: -any
  tasty-hunit: -any
  optparse-applicative: <0.13
  tasty: ==0.11.*
maintainer: winterland1989@gmail.com
synopsis: pure haskell MySQL driver
changelog: ! '# Revision history for mysql-haskell


  ## 0.5.0.0 -- 2016-8-22


  * Export exception types.

  * Fix a regression cause password authentication failed, add tests.

  * Fix a reading order bug cause ''prepareStmt/prepareStmtDetail'' failed.


  ## 0.4.0.0 -- 2016-8-22


  * Enable TLS support via `tls` package, add benchmarks.


  ## 0.3.0.0  -- 2016-8-22


  * Fix tls connection, change TLS implementation to HsOpenSSL, add benchmarks.

  * Fix a bug in ''putLenEncInt'' which cause sending large field fail.

  * Various optimizations.


  ## 0.2.0.0  -- 2016-8-19


  * Fix OK packet decoder.

  * Fix sending large packet(>16M).

  * Add `executeMany`, `withTransaction` to Base module.

  * Add timestamp field to `RowBinLogEvent`.

  * Add test, add insert benchmark.


  ## 0.1.0.0  -- 2016-8-16


  * First version. Released on an unsuspecting world.

'
basic-deps:
  bytestring: ! '>=0.10.2.0'
  base: ! '>=4.7 && <5'
  time: ! '>=1.5.0'
  text: ! '>=1.1 && <1.3'
  word24: ==1.*
  blaze-textual: ==0.2.*
  wire-streams: ! '>=0.0.2 && <0.1'
  monad-loops: ==0.4.*
  tls: ! '>=1.3.5 && <1.4'
  network: ! '>=2.3 && <3.0'
  memory: -any
  io-streams: ! '>=1.2 && <2.0'
  binary: ! '>=0.8.4'
  cryptonite: ==0.*
  tcp-streams: ==0.4.*
  scientific: ==0.3.*
  bytestring-lexing: ==0.5.*
  HsOpenSSL: ! '>=0.10.3 && <0.12'
all-versions:
- '0.5.0.0'
author: winterland1989
latest: '0.5.0.0'
description-type: markdown
description: ! "mysql-haskell\n=============\n\n[![Hackage](https://img.shields.io/hackage/v/mysql-haskell.svg?style=flat)](http://hackage.haskell.org/package/mysql-haskell)\n[![Build
  Status](https://travis-ci.org/winterland1989/mysql-haskell.svg)](https://travis-ci.org/winterland1989/mysql-haskell)\n\n`mysql-haskell`
  is a MySQL driver written entirely in haskell by @winterland1989 at infrastructure
  department of Didi group, it's going to be used in projects aiming at replacing
  old java based MySQL middlewares.\n\nThis project is still in experimental stage
  and lack of produciton tests, use on your own risk, any form of contributions are
  welcomed!\n\nIs it fast?\n----------\n\nIn short, `select`(decode) is about 2 times
  slower than pure c/c++ but 5 times faster than `mysql-simple`, `insert` (encode)
  is about 1.5 times slower than pure c/c++, there're many factors involved(tls, prepared
  statment, batch using multiple statement):\n\n<img src=\"https://github.com/winterland1989/mysql-haskell/blob/master/benchmark/result.png?raw=true\"
  width=\"100%\">\n\nAbove figures showed the time to:\n\n* perform a \"select * from
  employees\" from a [sample table](https://github.com/datacharmer/test_db)\n* insert
  1000 rows into a 29-columns table per thread with auto-commit off.\n\nThe benchmarks
  are run by my MacBook Pro 13' 2015.\n\nMotivation\n----------\n\nWhile MySQL may
  not be the most advanced sql database, it's widely used among China companies, including
  but not limited to Baidu, Alibaba, Tecent etc., but haskell's MySQL support is not
  ideal, we only have a very basic MySQL binding written by Bryan O'Sullivan, and
  some higher level wrapper built on it, which have some problems:\n\n+ lack of prepared
  statment and binary protocol support.\n\n+ limited concurrency due to FFI.\n\n+
  no replication protocol support.\n\n`mysql-haskell` is intended to solve these problems,
  and provide foundation for higher level libraries such as groundhog and persistent,
  so that accessing MySQL is both fast and easy in haskell.\n\nGuide\n-----\n\nThe
  `Database.MySQL.Base` module provides everything you need to start making queries:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Database.MySQL.Base\nimport
  qualified System.IO.Streams as Streams\n\nmain :: IO () \nmain = do\n    conn <-
  connect\n        defaultConnectInfo {ciUser = \"username\", ciPassword = \"password\",
  ciDatabase = \"dbname\"}\n    (defs, is) <- query_ conn \"SELECT * FROM some_table\"\n
  \   print =<< Streams.toList is\n```\n\n`query/query_` will return a column definition
  list, and an `InputStream` of rows, you should consume this stream completely before
  start new queries.\n\nIt's recommanded to use prepared statement to improve query
  speed:\n\n```haskell\n    ...\n    s <- prepareStmt conn \"SELECT * FROM some_table
  where person_age > ?\"\n    ...\n    (defs, is) <- queryStmt s [MySQLInt32U 18]\n
  \   ...\n```\n\nIf you want to do batch inserting/deleting/updating, you can use
  `executeMany` to save considerable time.\n\nThe `Database.MySQL.BinLog` module provides
  binlog listenning functions and row-based event decoder, following program will
  automatically get last binlog position, and print every row event it receives:\n\n```haskell\n{-#
  LANGUAGE LambdaCase #-}\nmodule Main where\n\nimport           Control.Monad         (forever)\nimport
  qualified Database.MySQL.BinLog as MySQL\nimport qualified System.IO.Streams     as
  Streams\n\nmain :: IO () \nmain = do\n    conn <- MySQL.connect \n        MySQL.defaultConnectInfo
  {ciUser = \"username\", ciPassword = \"password\", ciDatabase = \"dbname\"}\n    MySQL.getLastBinLogTracker
  conn >>= \\ case\n        Just tracker -> do\n            es <- MySQL.decodeRowBinLogEvent
  =<< MySQL.dumpBinLog conn 1024 tracker False\n            forever $ do\n                Streams.read
  es >>= \\ case\n                    Just v  -> print v\n                    Nothing
  -> return ()\n        Nothing -> error \"can't get latest binlog position\"\n```\n\nBuild
  Test Benchmark\n--------------------\n\nJust use the old way:\n\n```bash\ngit clone
  https://github.com/winterland1989/mysql-haskell.git\ncd mysql-haskell\ncabal install
  --only-dependencies\ncabal build\n```\n\nRunning tests require:\n\n* A local MySQL
  server, a user `testMySQLHaskell` and a database `testMySQLHaskell`, you can do
  it use following script:\n\n```bash\nmysql -u root -e \"CREATE DATABASE IF NOT EXISTS
  testMySQLHaskell;\"\nmysql -u root -e \"CREATE USER 'testMySQLHaskell'@'localhost'
  IDENTIFIED BY ''\"\nmysql -u root -e \"GRANT ALL PRIVILEGES ON testMySQLHaskell.*
  TO 'testMySQLHaskell'@'localhost'\"\nmysql -u root -e \"FLUSH PRIVILEGES\"\n```\n\n*
  Enable binlog by adding `log_bin = filename` to `my.cnf` or add `--log-bin=filename`
  to the server, and grant replication access to `testMySQLHaskell` with:\n\n```bash\nmysql
  -u root -e \"GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'testMySQLHaskell'@'localhost';\"\n```\n\n*
  Set `binlog_format` to `ROW`.\n\n* Set `max_allowed_packet` to larger than 64MB(for
  test large packet).\n\nNew features will be automatically tested by inspecting MySQL
  server's version, travis is keeping an eye on following combinations:\n\n+ CABALVER=1.18
  GHCVER=7.8.4  MYSQLVER=5.5\n+ CABALVER=1.22 GHCVER=7.10.2 MYSQLVER=5.5\n+ CABALVER=1.24
  GHCVER=8.0.1  MYSQLVER=5.5\n+ CABALVER=1.24 GHCVER=8.0.1  MYSQLVER=5.6\n+ CABALVER=1.24
  GHCVER=8.0.1  MYSQLVER=5.7\n\nPlease reference `.travis.yml` if you have problems
  with setting up test environment.\n\nEnter benchmark directory and run `./bench.sh`
  to benchmark 1) c++ version 2) mysql-haskell 3) FFI version mysql, you may need
  to:\n\n+ modify `bench.sh`(change the include path) to get c++ version compiled.\n+
  modify `mysql-haskell-bench.cabal`(change the openssl's lib path) to get haskell
  version compiled.\n+ setup MySQL's TLS support, modify `MySQLHaskellOpenSSL.hs/MySQLHaskellTLS.hs`
  to change the CA file's path, and certificate's subject name.\n+ adjust rts options
  `-N` to get best results.\n\nWith `-N10` on my company's 24-core machine, binary
  protocol performs almost identical to c version!\n\nReference\n---------\n\n[MySQL
  official site](https://dev.mysql.com/doc/internals/en/) provided intensive document,
  but without following project, `mysql-haskell` may not be written at all:\n\n+ [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java)\n\n+
  [canal](https://github.com/alibaba/canal)\n\n+ [go mysql toolkit](https://github.com/siddontang/go-mysql)\n\n+
  [python binlog parser](https://github.com/noplay/python-mysql-replication)\n\nLicense\n-------\n\nCopyright
  (c) 2016, winterland1989\n\nAll rights reserved.\n\nRedistribution and use in source
  and binary forms, with or without\nmodification, are permitted provided that the
  following conditions are met:\n\n    * Redistributions of source code must retain
  the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n
  \   * Redistributions in binary form must reproduce the above\n      copyright notice,
  this list of conditions and the following\n      disclaimer in the documentation
  and/or other materials provided\n      with the distribution.\n\n    * Neither the
  name of winterland1989 nor the names of other\n      contributors may be used to
  endorse or promote products derived\n      from this software without specific prior
  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS
  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
  OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY
  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.\n"
license-name: BSD3
