homepage: https://github.com/zalora/getopt-generics#readme
changelog-type: ''
hash: 48ed15d64ecc76ea4b7d02aa2e3aa2ec282dc79440f559c06c7428683abd9df4
test-bench-deps:
  base: ==4.*
  hspec: ! '>=2.1.8'
  filepath: -any
  base-orphans: -any
  tagged: -any
  silently: -any
  base-compat: ! '>=0.8'
  generics-sop: -any
  QuickCheck: -any
  safe: -any
maintainer: linh.nguyen@zalora.com, soenke.hahn@zalora.com
synopsis: Create command line interfaces with ease
changelog: ''
basic-deps:
  base: ==4.*
  base-orphans: -any
  tagged: -any
  base-compat: ! '>=0.8'
  generics-sop: -any
all-versions:
- '0.1'
- '0.1.1'
- '0.2'
- '0.3'
- '0.4'
- '0.4.1'
- '0.5'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.7'
- '0.7.1'
- '0.7.1.1'
- '0.8'
- '0.9'
- '0.10'
- '0.10.0.1'
- '0.11'
author: Linh Nguyen, SÃ¶nke Hahn
latest: '0.11'
description-type: markdown
description: ! "# getopt-generics\n\n## Status\n\nThis library is experimental.\n\n##
  Usage\n\n`getopt-generics` tries to make it very simple to create command line\ninterfaces.
  Here's an example:\n\n<!--- ### Start \"docs/Simple.hs\" \"module Simple where\\n\\n\"
  (MarkDown Haskell) ### -->\n\n``` haskell\nimport WithCli\n\nmain :: IO ()\nmain
  = withCli run\n\nrun :: String -> Int -> Bool -> IO ()\nrun s i b = print (s, i,
  b)\n```\n\n<!--- ### End ### -->\n\nThis is how the program behaves in a shell:\n\n<!---
  ### Start \"docs/Simple.shell-protocol\" \"\" (MarkDown Shell) ### -->\n\n``` shell\n$
  program foo 42 true\n(\"foo\",42,True)\n$ program --help\nprogram [OPTIONS] STRING
  INTEGER BOOL\n  -h  --help  show help and exit\n$ program foo 42 bar\ncannot parse
  as BOOL: bar\n# exit-code 1\n$ program\nmissing argument of type STRING\nmissing
  argument of type INTEGER\nmissing argument of type BOOL\n# exit-code 1\n$ program
  foo 42 yes bar\nunknown argument: bar\n# exit-code 1\n```\n\n<!--- ### End ### -->\n"
license-name: BSD3
