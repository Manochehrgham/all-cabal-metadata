homepage: http://github.com/silkapp/generic-xmlpickler
changelog-type: markdown
hash: 1e81a6ee3cf0af193bfdb116edb0ebaf523748e44af21c6fc8bd1a3842ebe2af
test-bench-deps: {}
maintainer: code@silk.co
synopsis: Generic generation of HXT XmlPickler instances using GHC Generics.
changelog: ! '## 0.1.0.0


  * Initial release, ported from regular-xmlpickler.

'
basic-deps:
  base: ==4.*
  text: -any
  generic-deriving: ! '>=1.6 && <1.8'
  hxt: ! '>=9.2 && <9.4'
all-versions:
- '0.1.0.0'
author: Silk
latest: '0.1.0.0'
description-type: markdown
description: ! "# generic-xmlpickler\n[![Build Status](https://travis-ci.org/silkapp/generic-xmlpickler.svg?branch=master)](https://travis-ci.org/silkapp/generic-xmlpickler)\n\nThis
  package allows you to automatically derive\n[hxt](http://hackage.haskell.org/package/hxt)
  picklers (conversions to\nand from xml) using GHC Generics. It has been ported from\n[regular-xmlpickler](http://hackage.haskell.org/package/regular-xmlpickler)\n\nA
  simple example:\n\n```Haskell\n{-# LANGUAGE DeriveGeneric #-}\n\nimport GHC.Generics\nimport
  Data.Maybe (listToMaybe)\nimport Generics.XmlPickler (gxpickle)\nimport Text.XML.HXT.Arrow.Pickle
  (XmlPickler (..), showPickled, unpickleDoc)\nimport Text.XML.HXT.Parser.XmlParsec
  (xread)\n\ndata User = User\n  { name  :: String\n  , admin :: Bool\n  } deriving
  (Show, Generic)\n\ninstance XmlPickler User where\n  xpickle = gxpickle\n\n\nuserString
  :: String\nuserString = showPickled [] (User \"Simon\" True)\n-- = \"<user><name>Simon</name><admin>true</admin></user>\"\n\nuser
  :: Maybe User\nuser = unpickleDoc xpickle =<< listToMaybe (xread \"<user><name>Simon</name><admin>true</admin></user>\")\n--
  = Just (User {name = \"Simon\", admin = True})\n```\n"
license-name: BSD3
