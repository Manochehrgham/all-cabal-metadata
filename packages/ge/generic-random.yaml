homepage: http://github.com/lysxia/generic-random
changelog-type: ''
hash: 23b12c04aab0894cc1f1e49194b66d522fc0dc098bc5852fbd7e6e68713ba0e8
test-bench-deps:
  base: -any
  criterion: -any
  generic-random: -any
  transformers: -any
  deepseq: -any
  QuickCheck: -any
maintainer: lysxia@gmail.com
synopsis: Generic random generators
changelog: ''
basic-deps:
  MonadRandom: -any
  base: ! '>=4.8 && <5'
  ad: -any
  unordered-containers: -any
  containers: -any
  ieee754: -any
  mtl: -any
  hashable: -any
  transformers: -any
  QuickCheck: -any
  hmatrix: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
author: Li-yao Xia
latest: '0.1.1.0'
description-type: markdown
description: ! "Generic random generators [![Hackage](https://img.shields.io/hackage/v/generic-random.svg)](https://hackage.haskell.org/package/generic-random)
  [![Build Status](https://travis-ci.org/Lysxia/generic-random.svg)](https://travis-ci.org/Lysxia/generic-random)\n=========================\n\nDefine
  sized random generators for almost any type.\n\n```haskell\n    {-# LANGUAGE DeriveDataTypeable
  #-}\n    import Data.Data\n    import Test.QuickCheck\n    import Data.Random.Generics\n\n
  \   data Term = Lambda Int Term | App Term Term | Var Int\n      deriving (Show,
  Data)\n\n    instance Arbitrary Term where\n      arbitrary = sized $ generatorPWith
  [positiveInts]\n\n    positiveInts :: Alias Gen\n    positiveInts =\n      alias
  $ \\() -> fmap getPositive arbitrary :: Gen Int\n\n    main = sample (arbitrary
  :: Gen Term)\n```\n\n- Objects of the same size (number of constructors) occur with
  the same\n  probability (see Duchon et al., references below).\n- Implements rejection
  sampling and pointing.\n- Works with QuickCheck and MonadRandom.\n- Can be extended
  or modified with user defined generators.\n\nReferences\n----------\n\n- The core
  theory of Boltzmann samplers is described in\n  [Boltzmann Samplers for the Random
  Generation of Combinatorial Structures](http://algo.inria.fr/flajolet/Publications/DuFlLoSc04.pdf),\n
  \ P. Duchon, P. Flajolet, G. Louchard, G. Schaeffer.\n\n- The numerical evaluation
  of recursively defined generating functions\n  is taken from\n  [Boltzmann Oracle
  for Combinatorial Systems](http://www.dmtcs.org/pdfpapers/dmAI0132.pdf),\n  C. Pivoteau,
  B. Salvy, M. Soria.\n"
license-name: MIT
