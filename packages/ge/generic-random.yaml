homepage: http://github.com/lysxia/generic-random
changelog-type: ''
hash: 0232fea4599edb18571d3a167f83978acd12ee1b1bdb1c9a1c3013e5df786b1d
test-bench-deps:
  base: -any
  criterion: -any
  generic-random: -any
  transformers: -any
  deepseq: -any
  QuickCheck: -any
maintainer: lysxia@gmail.com
synopsis: Generic random generators
changelog: ''
basic-deps:
  MonadRandom: -any
  base: ! '>=4.9 && <5'
  ad: -any
  unordered-containers: -any
  containers: -any
  ieee754: -any
  mtl: -any
  hashable: -any
  transformers: -any
  QuickCheck: -any
  hmatrix: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
author: Li-yao Xia
latest: '0.2.0.0'
description-type: markdown
description: ! "Generic random generators [![Hackage](https://img.shields.io/hackage/v/generic-random.svg)](https://hackage.haskell.org/package/generic-random)
  [![Build Status](https://travis-ci.org/Lysxia/generic-random.svg)](https://travis-ci.org/Lysxia/generic-random)\n=========================\n\n`Generic.Random.Data`\n---------------------\n\nDefine
  sized random generators for almost any type.\n\n```haskell\n    {-# LANGUAGE DeriveDataTypeable
  #-}\n\n    import Data.Data\n    import Test.QuickCheck\n    import Generic.Random.Data\n\n
  \   data Term = Lambda Int Term | App Term Term | Var Int\n      deriving (Show,
  Data)\n\n    instance Arbitrary Term where\n      arbitrary = sized $ generatorPWith
  [positiveInts]\n\n    positiveInts :: Alias Gen\n    positiveInts =\n      alias
  $ \\() -> fmap getPositive arbitrary :: Gen Int\n\n    main = sample (arbitrary
  :: Gen Term)\n```\n\n- Objects of the same size (number of constructors) occur with
  the same\n  probability (see Duchon et al., references below).\n- Implements rejection
  sampling and pointing.\n- Uses `Data.Data` generics.\n- Works with QuickCheck and
  MonadRandom, but also similar user-defined monads\n  for randomness (just implement
  `MonadRandomLike`).\n- Can be tweaked somewhat with user defined generators.\n\n`Generic.Random.Generic`\n------------------------\n\nSay
  goodbye to `Constructor <$> arbitrary <*> arbitrary <*> arbitrary`-boilerplate.\n\n```haskell\n
  \   {-# LANGUAGE DataKinds #-}\n    {-# LANGUAGE DeriveGeneric #-}\n    {-# LANGUAGE
  TypeApplications #-}\n\n    import GHC.Generics ( Generic )\n    import Test.QuickCheck\n
  \   import Generic.Random.Generic\n\n    data Tree a = Leaf | Node (Tree a) a (Tree
  a)\n      deriving (Show, Generic)\n\n    instance Arbitrary a => Arbitrary (Tree
  a) where\n      arbitrary = genericArbitrary' @'Z\n\n    -- Equivalent to\n    --
  > arbitrary =\n    -- >   sized $ \\n ->\n    -- >     if n == 0 then\n    -- >
  \      return Leaf\n    -- >     else\n    -- >       oneof\n    -- >         [
  return Leaf\n    -- >         , Node <$> arbitrary <*> arbitrary <*> arbitrary\n
  \   -- >         ]\n\n    main = sample (arbitrary :: Gen (Tree ()))\n```\n\n- User-specified
  distribution of constructors.\n- A simple (optional) strategy to ensure termination:
  `Test.QuickCheck.Gen`'s\n  size parameter decreases at every recursive `genericArbitrary'`
  call; when it\n  reaches zero, sample directly from a finite set of finite values.\n-
  Uses `GHC.Generics` generics.\n- Just for QuickCheck's `arbitrary`.\n- More flexible
  than `Generic.Random.Data`'s Boltzmann samplers, which compute\n  fixed weights
  for a given target size and concrete type, but with a less\n  regular distribution.\n\n`Generic.Random.Boltzmann`\n--------------------------\n\nAn
  experimental interface to obtain Boltzmann samplers from an applicative\nspecification
  of a combinatorial system.\n\nNo documentation (yet).\n\nReferences\n----------\n\nPapers
  about Boltzmann samplers, used in `Generic.Random.Data`:\n\n- The core theory of
  Boltzmann samplers is described in\n  [Boltzmann Samplers for the Random Generation
  of Combinatorial Structures](http://algo.inria.fr/flajolet/Publications/DuFlLoSc04.pdf),\n
  \ P. Duchon, P. Flajolet, G. Louchard, G. Schaeffer.\n\n- The numerical evaluation
  of recursively defined generating functions\n  is taken from\n  [Boltzmann Oracle
  for Combinatorial Systems](http://www.dmtcs.org/pdfpapers/dmAI0132.pdf),\n  C. Pivoteau,
  B. Salvy, M. Soria.\n"
license-name: MIT
