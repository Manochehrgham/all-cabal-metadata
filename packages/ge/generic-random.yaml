homepage: http://github.com/lysxia/generic-random
changelog-type: markdown
hash: d13a1318ce64c58783ed2a1898be46c32bf40c5b8fe9b32a6ba3456936b0c81c
test-bench-deps:
  base: -any
  generic-random: -any
  QuickCheck: -any
maintainer: lysxia@gmail.com
synopsis: Generic random generators
changelog: ! "https://github.com/Lysxia/generic-random/blob/master/changelog.md\n\n#
  1.0.0.0\n\n- Make the main module `Generic.Random`\n- Rework generic base case generation\n
  \ + You can explicitly provide a trivial generator (e.g., returning a\n    nullary
  constructor) using `withBaseCase`\n  + Generically derive `BaseCaseSearch` and let
  `BaseCase` find small\n    values, no depth parameter must be specified anymore\n-
  Add `genericArbitrarySingle`, `genericArbitraryRec`, `genericArbitraryU'`\n- Deprecate
  `weights`\n- Fixed bug with `genericArbitrary'` not dividing the size parameter\n\n#
  0.5.0.0\n\n- Turn off dependency on boltzmann-samplers by default\n- Add `genericArbitraryU`,
  `genericArbitraryU0` and `genericArbitraryU1`\n- Compatible with GHC 7.8.4 and GHC
  7.10.3\n\n# 0.4.1.0\n\n- Move Boltzmann sampler modules to another package: boltzmann-samplers\n\n#
  0.4.0.0\n\n- Check well-formedness of constructor distributions at compile time.\n-
  No longer support GHC 7.10.3 (the above feature relies on Generic\n  information
  which does not exist before GHC 8)\n\n# 0.3.0.0\n\n- Support GHC 7.10.3\n- Replace
  `TypeApplications` with ad-hoc data types in\n  `genericArbitraryFrequency'`/`genericArbitrary'`\n"
basic-deps:
  base: ! '>=4.7 && <4.11'
  QuickCheck: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
- '1.0.0.0'
author: Li-yao Xia
latest: '1.0.0.0'
description-type: markdown
description: ! "Generic random generators [![Hackage](https://img.shields.io/hackage/v/generic-random.svg)](https://hackage.haskell.org/package/generic-random)
  [![Build Status](https://travis-ci.org/Lysxia/generic-random.svg)](https://travis-ci.org/Lysxia/generic-random)\n=========================\n\nDerive
  simple random generators for [QuickCheck](https://hackage.haskell.org/package/QuickCheck)
  using generics.\n\nExample\n-------\n\n```haskell\n    {-# LANGUAGE DeriveGeneric
  #-}\n\n    import GHC.Generics (Generic)\n    import Test.QuickCheck\n    import
  Generic.Random\n\n    data Tree a = Leaf | Node (Tree a) a (Tree a)\n      deriving
  (Show, Generic)\n\n    instance Arbitrary a => Arbitrary (Tree a) where\n      arbitrary
  = genericArbitraryRec uniform `withBaseCase` return Leaf\n\n    -- Equivalent to\n
  \   -- > arbitrary =\n    -- >   sized $ \\n ->\n    -- >     if n == 0 then\n    --
  >       return Leaf\n    -- >     else\n    -- >       oneof\n    -- >         [
  return Leaf\n    -- >         , resize (n `div` 3) $\n    -- >             Node
  <$> arbitrary <*> arbitrary <*> arbitrary\n    -- >         ]\n\n    main = sample
  (arbitrary :: Gen (Tree ()))\n```\n\nFeatures\n--------\n\n- User-specified distribution
  of constructors.\n- A simple (optional) strategy to ensure termination for recursive
  types:\n  using `genericArbitrary'`, `Test.QuickCheck.Gen`'s size parameter decreases\n
  \ at every recursive call; when it reaches zero, sample directly from a\n  trivially
  terminating generator.\n"
license-name: MIT
