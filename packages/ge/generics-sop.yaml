homepage: ''
changelog-type: markdown
hash: 3cd1d1a23418e5daff1f5633f15644d26132533ec34c0c688c4ac78ddf385a6a
test-bench-deps:
  base: ! '>=4.6 && <5'
  generics-sop: -any
maintainer: andres@well-typed.com
synopsis: Generic Programming using True Sums of Products
changelog: ! "# 0.2.3.0\n\n* Add various metadata getters\n\n* Add `hdicts`.\n\n*
  Add catamorphisms and anamorphisms for `NP` and `NS`.\n\n* TH compatibility changes
  for GHC 8.1 (master).\n\n# 0.2.2.0 (2016-07-10)\n\n* Introduced `unZ` to destruct
  a unary sum.\n\n* Add Haddock `@since` annotations for various functions.\n\n# 0.2.1.0
  (2016-02-08)\n\n* Now includes a CHANGELOG.\n\n* Should now work with ghc-8.0.1-rc1
  and -rc2 (thanks to\n  Oleg Grenrus).\n\n* Introduced `hd` and `tl` to project out
  of a product, and\n  `Projection` and `projections` as duals of `Injection` and\n
  \ `injections`.\n\n# 0.2 (2015-10-23)\n\n* Now tested with ghc-7.10\n\n* Introduced
  names `hmap`, `hcmap`, `hzipWith`, `hczipWith` for\n  `hliftA`, `hcliftA`, `hliftA2`,
  `hcliftA2`, respectively.\n  Similarly for the specialized versions of these functions.\n\n*
  The constraint transformers `All` and `All2` are now defined\n  as type classes,
  not type families. As a consequence, the\n  partial applications `All c` and `All2
  c` are now possible.\n\n* Because of the redefinition of `All` and `All2`, some
  special\n  cases are no longer necessary. For example, `cpure_POP` can\n  now be
  implemented as a nested application of `pure_NP`.\n\n* Because of the redefinition
  of `All` and `All2`, the functions\n  `hcliftA'` and variants (with prime!) are
  now deprecated.\n  One can easily use the normal versions instead.\n  For example,
  the definition of `hcliftA'` is now simply\n\n      hcliftA' p = hcliftA (allP p)\n
  \       where\n\t      allP :: proxy c -> Proxy (All c)\n\t\t  allP _ = Proxy\n\n*
  Because `All` and `All2` are now type classes, they now have\n  superclass constraints
  implying that the type-level lists they\n  are ranging over must have singletons.\n\n
  \     class (SListI xs,  ...) => All c xs\n      class (SListI xss, ...) => All2
  c xss\n\n  Some type signatures can be simplified due to this.\n\n* The `SingI`
  typeclass and `Sing` datatypes are now deprecated.\n  The replacements are called
  `SListI` and `SList`.\n  The `sing` method is now called `sList`. The difference\n
  \ is that the new versions reveal only the spine of the list, and\n  contain no
  singleton representation for the elements anymore.\n\n  For one-dimensional type-level
  lists, replace\n\n      SingI xs => ... \n\n  by\n\n      SListI xs => ...\n\n  For
  two-dimensional type-level lists, replace\n\n      SingI xss => ...\n\n  by\n\n
  \     All SListI xss => ...\n\n  Because All itself implies `SListI xss` (see above),
  this\n  constraint is equivalent to the old `Sing xss`.\n\n  The old names are provided
  for (limited) backward\n  compatibility. They map to the new constructs. This will\n
  \ work in some, but not all scenarios.\n\n  The function `lengthSing` has also been
  renamed to\n  `lengthSList` for consistency, and the old name is\n  deprecated.\n\n*
  All `Proxy c` arguments have been replaced by `proxy c`\n  flexible arguments, so
  that other type constructors can be\n  used as proxies.\n\n* Class-level composition
  (`Compose`), pairing (`And`), and\n  a trivial constraint (`Top`) have been added.
  Type-level map\n  (`Map`) has been removed. Occurrences such as\n\n      All c (Map
  f xs)\n\n  should now be replaced with\n\n      All (c `Compose` f) xs\n\n* There
  is a new module called `Generics.SOP.Dict` that contains\n  functions for manipulating
  dictionaries explicitly. These can\n  be used to prove theorems about non-trivial
  class constraints\n  such as the ones that get built using `All` and `All2`. Some\n
  \ such theorems are provided.\n\n* There is a new TH function `deriveGenericFunctions`
  that\n  derives the code of a datatype and conversion functions, but\n  does not
  create a class instance. (Contributed by Oleg Grenrus.)\n\n* There is a new TH function
  `deriveMetadataValue` that\n  derives a `DatatypeInfo` value for a datatype, but
  does\n  not create an instance of `HasDatatypeInfo`. (Contributed by\n  Oleg Grenrus.)\n\n*
  There is a very simple example file. (Contributed by Oleg\n  Grenrus.)\n\n* The
  function `hcollapse` for `NS` now results in an `a` rather\n  than an `I a`, matching
  the specialized version `collapse_NS`.\n  (Suggested by Roman Cheplyaka.)\n\n# 0.1.1.2
  (2015-03-27)\n\n* Updated version bounds for ghc-prim (for ghc-7.10).\n\n# 0.1.1.1
  (2015-03-20)\n\n* Preparations for ghc-7.10.\n\n* Documentation fix. (Contributed
  by Roman Cheplyaka.)\n\n# 0.1.1 (2015-01-06)\n\n* Documentation fixes.\n\n* Add
  superclass constraint (TODO).\n\n* Now derive tuple instance for tuples up to 30
  components.\n  (Contributed by Michael Orlitzky.)\n\n"
basic-deps:
  base: ! '>=4.6 && <5'
  ghc-prim: ! '>=0.3 && <0.6'
  template-haskell: ! '>=2.8 && <2.13'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.1'
- '0.1.1.1'
- '0.1.1.2'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.2.3.0'
author: Edsko de Vries <edsko@well-typed.com>, Andres Löh <andres@well-typed.com>
latest: '0.2.3.0'
description-type: haddock
description: ! 'A library to support the definition of generic functions.

  Datatypes are viewed in a uniform, structured way:

  the choice between constructors is represented using an n-ary

  sum, and the arguments of each constructor are represented using

  an n-ary product.


  The module "Generics.SOP" is the main module of this library and contains

  more detailed documentation.


  Examples of using this library are provided by the following

  packages:


  * @<https://hackage.haskell.org/package/basic-sop basic-sop>@ basic examples,


  * @<https://hackage.haskell.org/package/pretty-sop pretty-sop>@ generic pretty printing,


  * @<https://hackage.haskell.org/package/lens-sop lens-sop>@ generically computed
  lenses,


  * @<https://hackage.haskell.org/package/json-sop json-sop>@ generic JSON conversions.


  A detailed description of the ideas behind this library is provided by

  the paper:


  * Edsko de Vries and Andres Löh.

  <http://www.andres-loeh.de/TrueSumsOfProducts True Sums of Products>.

  Workshop on Generic Programming (WGP) 2014.

'
license-name: BSD3
