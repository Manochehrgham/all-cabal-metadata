homepage: https://github.com/dreixel/generic-deriving
changelog-type: markdown
hash: 6283b66dde86c47143d70f650e1192ea8b56f17858258e1afba02197ab90f37c
test-bench-deps: {}
maintainer: generics@haskell.org
synopsis: Generic programming library for generalised deriving.
changelog: ! "# 1.10.1\n* Added `Generics.Deriving.Semigroup`\n* Added `GMonoid` instance
  for `Data.Monoid.Alt`\n* Fixed a bug in the `GEnum` instances for unsigned `Integral`
  types\n* Added `Safe`/`Trustworthy` pragmas\n* Made instances polykinded where possible\n\n#
  1.10.0\n* On GHC 8.0 and up, `Generics.Deriving.TH` uses the new type literal-based\n
  \ machinery\n* Rewrote the Template Haskell code to be robust. Among other things,
  this fixes\n  a bug with deriving Generic1 instances on GHC 7.8, and makes it easier
  to\n  derive Generic1 instances for datatypes that utilize GHC 8.0's `-XTypeInType`\n
  \ extension.\n* Added `deriveAll0` and `makeRep0` for symmetry with `deriveAll1`
  and\n  `makeRep1`\n* Added`makeRep0FromType` and `makeRep1FromType` to make it easier
  to pass\n  in the type instance (instead of having to pass each individual type\n
  \ variable, which can be error-prone)\n* Added functions with the suffix `-WithKindSigs`
  to allow generating type\n  synonyms with explicit kind signatures in the presence
  of kind-polymorphic\n  type variables. This is necessary for some datatypes that
  use\n  `-XTypeInType` to have derived `Generic(1)` instances, but is not turned
  on\n  by default since the TH kind inference is not perfect and would cause\n  otherwise
  valid code to be rejected. Use only if you know what you are doing.\n* Fixed bug
  where a datatype with a single, nullary constructor would generate\n  incorrect
  `Generic` instances\n* More sensible `GEnum` instances for fixed-size integral types\n*
  Added `GCopoint`, `GEnum`, `GEq`, `GFoldable`, `GFunctor`, `GMonoid`,\n  `GShow`,
  and `GTraversable` instances for datatypes introduced in GHC 8.0\n* Backported `Generic(1)`
  instances added in GHC 8.0. Specifically, `Generic`\n  instances for `Complex` (`base-4.4`
  and later) `ExitCode`, and `Version`; and\n  `Generic1` instances for `Complex`
  (`base-4.4` and later) and `Proxy`\n  (`base-4.7` and later). Added `GEnum`, `GEq`,
  `GFoldable`, `GFunctor`, `GIx`,\n  `GShow`, and `GTraversable` instances for these
  datatypes where appropriate.\n\n# 1.9.0\n* Allow deriving of Generic1 using Template
  Haskell\n* Allow deriving of Generic(1) for data families\n* Allow deriving of Generic(1)
  for constructor-less plain datatypes (but not\n  data families, due to technical
  restrictions)\n* Support for unboxed representation types on GHC 7.11+\n* More `GCopoint`,
  `GEnum`, `GEq`, `GFoldable`, `GFunctor`, `GIx`, `GMonoid`,\n  `GShow`, and `GTraversable`
  instances\n* The field accessors for the `(:+:)` type in `Generics.Deriving.Base`
  have\n  been removed to be consistent with `GHC.Generics`\n* Ensure that TH generates
  definitions for isNewtype and packageName, if a\n  recent-enough version of GHC
  is used\n* Ensure that TH-generated names are unique for a given data type's module
  and\n  package (similar in spirit to Trac #10487)\n* Allow building on stage-1 compilers\n"
basic-deps:
  base: <5
  containers: ! '>=0.1 && <0.6'
  ghc-prim: <1
  template-haskell: ! '>=2.4 && <2.12'
all-versions:
- '0.3'
- '0.3.1'
- '0.4'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.2.1'
- '1.2.2'
- '1.3.0'
- '1.3.1'
- '1.4.0'
- '1.5.0'
- '1.6'
- '1.6.1'
- '1.6.2'
- '1.6.3'
- '1.7.0'
- '1.8.0'
- '1.9.0'
- '1.10.0'
- '1.10.1'
author: José Pedro Magalhães
latest: '1.10.1'
description-type: markdown
description: ! "## `generic-deriving`: Generic programming library for generalised
  deriving\n[![Hackage](https://img.shields.io/hackage/v/generic-deriving.svg)][Hackage:
  generic-deriving]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/generic-deriving.svg)](http://packdeps.haskellers.com/reverse/generic-deriving)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n[![Build](https://img.shields.io/travis/dreixel/generic-deriving.svg)](https://travis-ci.org/dreixel/generic-deriving)\n\n[Hackage:
  generic-deriving]:\n  http://hackage.haskell.org/package/generic-deriving\n  \"generic-deriving
  package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell
  Programming Language\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n\nThis package provides functionality for
  generalising the deriving mechanism\nin Haskell to arbitrary classes. It was first
  described in the paper:\n\n* [A generic deriving mechanism for Haskell](http://dreixel.net/research/pdf/gdmh.pdf).\n
  \ Jose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh. Haskell'10.\n\nThe
  current implementation integrates with the new GHC Generics. See\nhttp://www.haskell.org/haskellwiki/GHC.Generics
  for more information.\nTemplate Haskell code is provided for supporting older GHCs.\n"
license-name: BSD3
