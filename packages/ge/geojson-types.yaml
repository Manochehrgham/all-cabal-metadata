homepage: https://github.com/alios/geosjon-types
changelog-type: ''
hash: 10a2d70dd706699b9670c024ddfad1feadd8ea4b24ff691d823b394c868e669d
test-bench-deps: {}
maintainer: Markus Barenhoff <mbarenh@alios.org>
synopsis: GeoJSON data types including JSON/BSON conversion.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
  text: ! '>=1.2'
  lens: ! '>=4.14'
  bson: ! '>=0.3'
  aeson: ! '>=0.11'
all-versions:
- '0.1'
author: Markus Barenhoff
latest: '0.1'
description-type: haddock
description: ! 'Provides data types, lens operators and (de)serialization

  of GeoJSON data to/from JSON and BSON using aeson and bson.


  This library uses a the lens library a lot. It provides

  ''Iso'' / ''Prism'' to convert from and to GeoJSON objects.


  /e.g./ to convert a latitude/longitude given as a pair of

  ''Double'' to a ''Position'', use the ''_Position'' ''Iso'' as a

  ''Getter'' on that pair:


  > _Position :: BaseType t => (t, t) -> Position t

  >

  > pos :: Position Double

  > pos = (57.324, 7.2342) ^. _Position


  to then convert it to a ''Point'' object use ''_Point'':


  > _Point :: Iso'' (Position t) (GeoJSON Point t)

  >

  > p :: GeoJSON Point Double

  > p = pos ^. _Point

  >

  > ps :: GeoJSON MultiPoint Double

  > ps = [p,p,p,p] ^. _MultiPoint


  The library also provides type classes for working polymorphic

  over user defined data types.


  /e.g./ for a data type:


  > data Location =

  >   Location

  >     locationName :: String,

  >     locationLat :: Double,

  >     locationLon :: Double

  >


  one can implement the type class ''HasGeoJSON'' to provide a

  ''Getter'' to a any GeoJSON object. In this example a ''Point''.


  > instance HasGeoJSON Point Double Location where

  >  geoJSON = to $ \loc ->

  >    (locationLat loc, locationLon loc) ^. _Position . _Point'
license-name: BSD3
