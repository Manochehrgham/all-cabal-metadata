changelog-type: ''
hash: af6443457d1587e3ccae5f2d9702b26fc584467db1c5703e7691447d831442ac
synopsis: Convert numbers to number words
changelog: ''
all-versions:
- '0.1'
- '0.3'
- '0.3.0.1'
- '0.4'
latest: '0.4'
description-type: haddock
description: ! 'Convert numbers to number words in a number of languages. Each

  language has its own module. The module name is based on one of the

  ISO 639 Alpha codes. Each module contains one or more ''cardinal'' and

  ''ordinal'' functions and a ''struct'' function. The ''cardinal''

  functions directly convert cardinal numbers to a string-like

  representation of their spoken form. The ''ordinal'' functions do the

  same but for ordinal numbers. The ''struct'' functions convert numbers

  to a polymorphic representation of their grammatical structure.


  The use of this package is best understood with some examples. First

  some English number names, both British and US variants:


  >>> import qualified Text.Numeral.Language.EN as EN

  >>> EN.uk_cardinal defaultInflection 123 :: Maybe Text

  Just "one hundred and twenty-three"

  >>> EN.us_cardinal defaultInflection (10^50 + 42) :: Maybe Text

  Just "one hundred quindecillion forty-two"


  French, which contains some traces of a base 20 system:


  >>> import qualified Text.Numeral.Language.FR as FR

  >>> FR.cardinal defaultInflection (-99) :: Maybe Text

  Just "moins quatre-vingt-dix-neuf"


  Conversions can fail. Alamblak, a language spoken by a few people in

  Papua New Guinea, has no representation for negative numbers:


  >>> import qualified Text.Numeral.Language.AMP as AMP

  >>> AMP.cardinal defaultInflection (-3) :: Maybe Text

  Nothing


  Some languages have multiple scripts and methods for writing number

  names. Take Chinese for example, which can be written using Han

  characters or transcribed to the Latin script using Pinyin.


  Traditional Chinese characters:


  >>> import qualified Text.Numeral.Language.ZH as ZH

  >>> ZH.trad_cardinal defaultInflection 123456 :: Maybe Text

  Just "十二萬三千四百五十六"


  Simplified characters for use in financial contexts:


  >>> ZH.finance_simpl_cardinal defaultInflection 123456 :: Maybe Text

  Just "拾贰万参仟肆伯伍拾陆"


  Transcribed using Pinyin:


  >>> ZH.pinyin_cardinal defaultInflection 123456 :: Maybe Text

  Just "shíèrwàn sānqiān sìbǎi wǔshí liù"


  Using the ''struct'' functions you can see the grammatical structure

  of number names. Because the results of these functions are

  polymorphic you need to specify a specific type.


  >>> import qualified Text.Numeral.Language.NL as NL

  >>> NL.struct 123 :: Integer

  123

  >>> import Text.Numeral

  >>> NL.struct 123 :: Exp

  Add (Lit 100) (Add (Lit 3) (Mul (Lit 2) (Lit 10)))


  Compare with:


  >>> NL.cardinal defaultInflection 123 :: Maybe Text

  Just "honderddrieëntwintig"


  100 (honderd) + (3 (drie) + (ën) 2 (twin) * 10 (tig))'
