changelog-type: ''
hash: 9092b183561ab5d1022721ca8b9cf7463e81d69f26d9562f7ec81a75c4372dd0
synopsis: Conversion between storablevector and stream-fusion lists with fusion
changelog: ''
all-versions:
- '0.0'
latest: '0.0'
description-type: haddock
description: ! 'This package brings together the best of two worlds:

  The flexibility of plain lists and speed of low-level arrays.

  Lists are lazy per element,

  thus allowing for elegant tying-the-knot algorithms

  and correct fusion of subsequent operations,

  and they support any element type, including functions.

  Storablevectors do not have these features.

  Instead they are fast, including very fast access via indices,

  they are memory efficient and allow simple exchange with C.


  This package provides the canonical functions

  for conversion from StorableVector to Stream and back.

  By a simple fusion rule

  they let the interim Stream based lists disappear in many situations,

  resulting in fast low-level loops.

  Such fusion could not be correct on StorableVectors.

  E.g. consider


  > import qualified Data.StorableVector.Lazy as SV

  > SV.zipWith f (SV.unfoldr size g a) (SV.cons b (SV.unfoldr size h c))


  which yields a storable vector with the chunk structure


  > [1, size, size, ...]


  and the following strictness behaviour:

  For computation of the first value of the result,

  the first chunk with size @size@ of @SV.unfoldr size g a@

  has to be fully evaluated.

  This has two advantages:

  Firstly, you do not really want that behaviour,

  but you accept it for the sake of overall performance.

  Secondly, the odd behaviour cannot easily be preserved by fusion,

  and we must resist to tell the optimizer incorrect rules.


  So here is the solution: Write


  > import qualified Data.StorableVector.Lazy.Stream as SVG

  > import qualified Data.List.Stream as Stream

  > SVG.from chunkSize $

  >    Stream.zipWith f

  >       (Stream.unfoldr g a)

  >       (Stream.cons b (Stream.unfoldr h c))


  and get two advantages.

  First: You do not have to pass the @size@ parameter at the leaves,

  but only once at the top.

  Second: Fusion jumps in and turns everything in a single efficient @SV.unfoldr@.'
