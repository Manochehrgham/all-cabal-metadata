homepage: https://github.com/4e6/stackage2nix#readme
changelog-type: markdown
hash: ede2b7a43e1dead64465ce20896e3ded9c18299706767858b44af9660e34143a
test-bench-deps:
  shakespeare: -any
  bytestring: -any
  Cabal: -any
  base: -any
  hspec: -any
  text: -any
  stackage2nix: -any
  pretty: -any
  yaml: -any
maintainer: bushevdv@gmail.com
synopsis: Convert Stack files into Nix build instructions.
changelog: ! '# 0.3.0


  - Initial Hackage release

  - Add CHANGELOG.md

'
basic-deps:
  stackage-curator: ! '>=0.15'
  exceptions: ! '>0.8'
  gitlib-libgit2: ! '>3'
  bytestring: -any
  Cabal: ! '>1.24'
  base: ! '>4.7 && <5'
  gitlib: ! '>3'
  unordered-containers: -any
  text: -any
  language-nix: -any
  filepath: -any
  containers: -any
  lens: -any
  inflections: -any
  distribution-nixpkgs: ! '>=1.1'
  network-uri: -any
  hopenssl: ! '>2.2'
  stackage2nix: -any
  cabal2nix: ! '>=2.5'
  optparse-applicative: -any
  deepseq: -any
  QuickCheck: -any
  pretty: -any
  aeson: -any
  yaml: -any
all-versions:
- '0.3.0'
author: ! 'Dmitry Bushev

  , Benno Fünfstück'
latest: '0.3.0'
description-type: markdown
description: ! "# stackage2nix\n\n[![Build Status](https://travis-ci.org/typeable/stackage2nix.svg?branch=master)](https://travis-ci.org/typeable/stackage2nix)\n\n`stackage2nix`
  converts a Stack file into a Nix Haskell packages set.\nIt creates LTS Stackage
  packages set, and applies appropriate overrides on top of it.\n\n```\nstackage2nix
  \\\n  --lts-haskell \"$LTS_HASKELL_REPO\" \\\n  --all-cabal-hashes \"$ALL_CABAL_HASHES_REPO\"
  \\\n  .\n```\n\n`stackage2nix` has three required arguments:\n- `--lts-haskell`
  - path to [fpco/lts-haskell](https://github.com/fpco/lts-haskell)\n- `--all-cabal-hashes`
  - path to [commercialhaskell/all-cabal-hashes](https://github.com/commercialhaskell/all-cabal-hashes)
  checked out to `hackage` branch\n- `.` - path to stack.yaml file or directory\n\nProduced
  Nix derivation split on following files:\n- packages.nix - Base Stackage packages
  set\n- configuration-packages.nix - Compiler configuration\n- default.nix - Final
  Haskell packages set with all overrides applied\n\nA particular package from result
  Haskell packages set can be built with:\n\n```\nnix-build -A <package-name>\n```\n\n##
  Runtime dependencies\n\n- `nix-env` is required to be on PATH by the\n  [distribution-nixpkgs](https://hackage.haskell.org/package/distribution-nixpkgs)\n
  \ dependency\n- `nix-prefetch-git` is required on PATH if you have git dependencies
  in\n  `stack.yaml`\n\n## Override result derivation\n\nComplex projects may require
  some extra customization.\nSnippet `override.nix` below shows a minimal example
  of how to apply additional\noverrides on top of Haskell packages set produced by
  `stackage2nix`.\n\n```\nwith import <nixpkgs> {};\nwith pkgs.haskell.lib;\nlet haskellPackages
  = import ./. {};\nin haskellPackages.override {\n  overrides = self: super: {\n
  \   stackage2nix = disableSharedExecutables super.stackage2nix;\n  };\n}\n```\n\n```\nnix-build
  -A stackage2nix override.nix\n```\n\nFor more complex overrides and detailed information
  on how to work with Haskell packages in Nix, see Nixpkgs manual [User’s Guide to
  the Haskell Infrastructure](http://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure)\n\n\n##
  Examples\n\nFor other examples of `stackage2nix` usage, see [4e6/stackage2nix-examples](https://github.com/4e6/stackage2nix-examples)
  repository.\nIt verifies `stackage2nix` by running it on different public projects.\n"
license-name: BSD3
