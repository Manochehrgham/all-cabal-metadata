homepage: ''
changelog-type: text
hash: 076cb441547ee242358a7e81b7d398cdf07c939b9dbecbab33d90345eccebbcb
test-bench-deps:
  streaming: ! '>=0.1.4.2'
  pipes-text: ! '>=0.0.2.2'
  base: ! '>=4.4 && <5'
  pipes-bytestring: ! '>=2.1.1'
  doctest: ! '>=0.10.1'
  streaming-eversion: -any
  pipes: ! '>=4.1.0'
  tasty-quickcheck: ! '>=0.8.3.2'
  foldl: ! '>=1.1.5'
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.10.1.1'
  microlens: ! '>=0.4.2.1'
maintainer: diaz_carrete@yahoo.com
synopsis: Translate pull-based stream folds into push-based iteratees.
changelog: ! "0.3.1.0\r\n\r\n- Added functions with MonadResource contraints.\r\n\r\n0.3.0.0\r\n\r\n-
  Implemented the improvements suggested by Michael Thompson here :\r\nhttps://groups.google.com/forum/#!topic/haskell-pipes/7n6NPTmxPKY
  by M.T.\r\n- Removed the newtypes. I mistakenly believed that they were needed to
  avoid\r\nhaving to enable -XImpredicativeTypes.\r\n\r\n0.2.0.0\r\n\r\n- Eversible,
  not Evertible!\r\n- Removed special purpose error functions.\r\n- Added some utility
  functions.\r\n- Added Category instances.\r\n\r\n"
basic-deps:
  streaming: ! '>=0.1.4.2'
  base: ! '>=4 && <5'
  pipes: ! '>=4.1.0'
  foldl: ! '>=1.1.5'
  transformers: ! '>=0.4.0.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.1.0'
- '0.3.1.1'
author: Daniel Diaz
latest: '0.3.1.1'
description-type: markdown
description: ! "## What's in this library?\r\n\r\nFunctions that turn pull-based stream
  operations from the pipes/streaming\r\necosystem into push-based, iteratee-like
  stream operations. \r\n\r\nInspired by the blog post [Programmatic translation to
  iteratees from pull-based code](http://pchiusano.blogspot.com.es/2011/12/programmatic-translation-to-iteratees.html).\r\n\r\n##
  Could you go into more detail?\r\n\r\nThere are three streaming libraries that often
  go together:\r\n[pipes](http://hackage.haskell.org/package/pipes),\r\n[streaming](http://hackage.haskell.org/package/streaming),
  and\r\n[foldl](http://hackage.haskell.org/package/foldl).\r\n\r\nOf these, the first
  two are pull-based: you take some (possibly effectful)\r\nsource of values and keep
  extracting stuff until the source is exhausted and/or\r\nyou have obtained all the
  info you need.\r\n\r\nMeanwhile, foldl is push-based: foldl folds are not directly
  aware of any\r\nsource, they are like little state machines that keep running as
  long as\r\nsomeone feeds them input. \r\n\r\nUsually, defining stream transformations
  in pull-based mode is easier and feels\r\nmore natural. The pipes ecosystem already
  provides a lot of them:\r\n[parsers](http://hackage.haskell.org/package/pipes-parse),\r\n[decoders](http://hackage.haskell.org/package/pipes-text),\r\n[splitters](http://hackage.haskell.org/package/pipes-group).\r\n\r\nHowever,
  push-based mode also has advantages. Push-based abstractions are not\r\ntied to
  a particular type of source because data is fed externally. And foldl\r\nfolds have
  very useful Applicative and Comonad instances. \r\n\r\nAlso, sometimes a library
  will only offer a push-based interface. \r\n\r\nWouldn't it be nice if you could
  adapt already existing pull-based operations\r\nto work on push-based consumers?
  For example, using a decoding function from\r\n[Pipes.Text.Encoding](http://hackage.haskell.org/package/pipes-text-0.0.2.4/docs/Pipes-Text-Encoding.html#g:6)\r\nto
  preprocess the inputs of a\r\n[Fold](http://hackage.haskell.org/package/foldl-1.2.1/docs/Control-Foldl-Text.html).\r\n\r\nThis
  library provides that.\r\n\r\n"
license-name: BSD3
