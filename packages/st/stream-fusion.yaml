changelog-type: ''
hash: 7fe207c63e91548b202f34862b73301ec312f2aac5e980830deec0a06a6bdfb3
test-bench-deps: {}
synopsis: Faster Haskell lists using stream fusion
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.2.3'
- '0.1.2.4'
- '0.1.2.5'
latest: '0.1.2.5'
description-type: text
description: ! "                          Stream fusible lists\n\nFaster lists using
  stream fusion.\n\nThe abstract from the paper:\n\n    This paper presents an automatic
  deforestation system, \\emph{stream\n    fusion}, based on equational transformations,
  that fuses a wider\n    range of functions than existing short-cut fusion systems.
  In\n    particular, stream fusion is able to fuse zips, left folds and\n    functions
  over nested lists, including list comprehensions. A\n    distinguishing feature
  of the framework is its simplicity: by\n    transforming list functions to expose
  their structure, intermediate\n    values are eliminated by general purpose compiler
  optimisations.\n\n    We have reimplemented the Haskell standard List library on
  top of\n    our framework, providing stream fusion for Haskell lists. By\n    allowing
  a wider range of functions to fuse, we see an increase in\n    the number of occurrences
  of fusion in typical Haskell programs. We\n    present benchmarks documenting time
  and space improvements.\n\nBuilding:\n\n  $ runhaskell Setup.lhs configure --prefix=/home/dons\n
  \ $ runhaskell Setup.lhs build\n  $ runhaskell Setup.lhs install\n\nUse:\n\n  import
  Data.List.Stream\n\nand use as you would for normal lists.\nCompile with ghc -O2
  for best results.\n"
