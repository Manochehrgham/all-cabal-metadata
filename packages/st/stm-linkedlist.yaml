changelog-type: ''
hash: 968a748a88d54532e1c1715c2629dc492df4067131f334ac70e27e8855b2213c
synopsis: Mutable, doubly linked lists for STM
changelog: ''
all-versions:
- '0.1.0.0'
latest: '0.1.0.0'
description-type: haddock
description: ! 'Doubly linked lists are often used in imperative languages to maintain
  a

  collection of objects such that an object can remove itself easily.  The

  same idea applies here.  Thanks to STM, these lists can be shared among

  threads with little effort.


  Suppose you have a thread listening for events.  You want to dispatch

  events to any thread that opts in.  You could write a function that

  installs an event handler, performs an action, and removes the handler:


  >withEventHandler list handler action =

  >    bracket (atomically $ LinkedList.append handler list)

  >            (atomically . LinkedList.delete)

  >            (\_ -> action)


  Then, you could have your listener thread dispatch events using a function

  like this:


  >dispatchEvent list event = do

  >    handlers <- atomically $ LinkedList.toList list

  >    forM_ handlers $ \handler -> handler event'
