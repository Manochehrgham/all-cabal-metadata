homepage: https://github.com/dmjio/stripe
changelog-type: ''
hash: 1175a5ab48b9d71fdc59f2399821d6adf7e73adbb08c38e8c268d90c360bbfad
test-bench-deps: {}
maintainer: djohnson.m@gmail.com
synopsis: Stripe API for Haskell
changelog: ''
basic-deps:
  stripe-core: ! '>=2.0 && <2.1'
  base: ! '>=4 && <5'
  stripe-http-streams: ! '>=2.0 && <2.1'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.1.2'
- '0.1.3.0'
- '0.1.3.1'
- '0.1.4.0'
- '0.1.4.1'
- '0.1.4.2'
- '0.1.4.3'
- '2.0.0'
- '2.0.1'
- '2.0.2'
- '2.0.3'
author: David Johnson, Jeremy Shaw
latest: '2.0.3'
description-type: markdown
description: ! "stripe\n========\n![Hackage](https://img.shields.io/hackage/v/stripe-haskell.svg)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/stripe-haskell.svg)\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![MIT
  License](http://img.shields.io/badge/license-MIT-brightgreen.svg)\n![Build Status](https://api.travis-ci.org/dmjio/stripe.svg?branch=master)\n[![Join
  the chat at https://gitter.im/dmjio/stripe](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dmjio/stripe?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n========\n##Stripe
  API coverage for Haskell ([Stripe API](http://stripe.com/docs/api))\n\nAll Stripe
  commands are supported, including but not limited to Charges, Refunds, Customers,
  Cards, Subscriptions, Plans, Coupons, Discounts, Invoices, Invoice Items, Disputes,
  Transfers, Recipients, Bitcoin, Application Fees, Application Fee Refunds, Account,
  Balance, Events and Tokens.\n***\n## Haddock Coverage\n  All code written for this
  library is documented to completion with the haddock documentation tool\n\n##[100+
  Hspec Tests](https://github.com/dmjio/stripe-haskell/blob/master/COVERAGE.md)\n
  Thoroughly unit-tested with hspec.\n    All API commands are unit-tested before
  inclusion into the API (see the tests directory).\n    To run the tests, perform
  the following:\n```bash\ncabal clean\ncabal configure --enable-tests\ncabal build
  tests\ndist/build/tests/tests # You will be prompted to enter your *TEST* key\n```\n\n##[Pagination](https://stripe.com/docs/api#pagination)\n
  \ Pagination is possible on all API calls that return a JSON array.\n  Any API call
  that returns a `StripeList` is eligible for pagination.\n  To use in practice do
  the following:\n\n```haskell\nimport Web.Stripe\nimport Web.Stripe.Customer\n\nmain
  :: IO ()\nmain = do\n  let config = StripeConfig \"secret key\"\n  result <- stripe
  config $ getCustomers\n\t\t\t\t(Just 30 :: Maybe Limit) -- Defaults to 10 if Nothing,
  100 is Max\n\t\t\t\t(StartingAfter $ CustomerId \"customer_id0\")\n\t\t\t\t(EndingBefore
  $ CustomerId \"customer_id30\")\n  case result of\n    Right stripelist -> print
  (list stripelist :: [Customer])\n    Left stripeError -> print stripeError\n```\n\n##[Versioning](https://stripe.com/docs/api#versioning)\n
  \ All versioning is hard-coded (for safety).\n  Stripe API versions specified in
  the HTTP headers of Stripe requests take precedence\n  over the API version specified
  in your Stripe Dashboard. In an attempt to ensure\n  API consistency and correct
  parsing of returned JSON, all Stripe versions are hard-coded, and are\n  inaccessible
  to the end-users of this library. When a new Stripe API version is released\n  this
  library will increment the hard-coded API version.\n\n##[Expansion](https://stripe.com/docs/api#expansion)\n
  \ Object expansion is supported on Stripe objects eligible for expansion though
  the `ExpandParams` type.\n  Object expansion allows normal Stripe API calls to return
  expanded objects inside of other objects.\n  For example, a `Customer` object contains
  a Card ID hash on the default_card field.\n  This default_card hash can be expanded
  into a full `Card` object inside a `Customer` object.\n  As an example:\n\n```haskell\nimport
  Web.Stripe\nimport Web.Stripe.Customer\n\nmain :: IO ()\nmain = do\n  let config
  = StripeConfig \"secret key\"\n  result <- stripe config $ getCustomerExpandable\n\t\t\t\t
  \  (CustomerId \"customerid\")\n\t\t\t\t   ([\"default_card\"] :: ExpandParams)\n
  \ case result of\n    Right customer -> print (defaultCard customer) -- Will be
  an `ExpandedCard`\n    Left stripeError -> print stripeError\n```\n\n##[MetaData](https://stripe.com/docs/api#metadata)\n
  \ Stripe objects allow the embedding of arbitrary metadata.\n  Any Stripe object
  that supports the embedding of metadata is available via this API.\n  As an example:\n\n```haskell\nimport
  Web.Stripe\nimport Web.Stripe.Coupon\n\nmain :: IO ()\nmain = do\n  let config =
  StripeConfig \"secret key\"\n  result <- stripe config $ updateCoupon (CouponId
  \"couponid\") [(\"key1\", \"value2\"), (\"key2\", \"value2\")]\n  case result of\n
  \   Right coupon -> print $ couponMetaData coupon\n    Left stripeError -> print
  stripeError\n```\n\n##[Issues](https://github.com/dmjio/stripe-haskell/issues)\n
  \ Any API recommendations or bugs can be reported on the GitHub issue tracker.\n
  \ Pull requests welcome!\n"
license-name: MIT
