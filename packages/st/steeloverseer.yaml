homepage: https://github.com/schell/steeloverseer
changelog-type: ''
hash: ccc318eb672b41d63104450aa7c25947df290ac9efc7c0ae62b727ad5f5898f2
test-bench-deps: {}
maintainer: schell.scivally@synapsegrop.com
synopsis: A file watcher and development tool.
changelog: ''
basic-deps:
  steeloverseer: -any
  bytestring: -any
  stm: -any
  base: ! '>=4.0 && <6.0'
  text: -any
  megaparsec: -any
  filepath: -any
  process: -any
  async: -any
  semigroups: -any
  containers: -any
  ansi-terminal: -any
  regex-tdfa: -any
  mtl: -any
  optparse-applicative: -any
  fsnotify: -any
  microlens: -any
  aeson: -any
  yaml: -any
  directory: -any
all-versions:
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.0'
- '0.5.0.0'
- '0.5.0.1'
- '1.0.1.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '1.1.0.4'
- '1.1.0.5'
- '1.1.0.6'
- '1.1.1.0'
- '2.0'
author: Schell Scivally, Mitchell Rosen
latest: '2.0'
description-type: markdown
description: ! "Steel Overseer\n==============\n\nA file watcher and development tool,
  similar to Ruby's [Guard](https://github.com/guard/guard).\n\n[![Build Status](https://travis-ci.org/steeloverseer/steeloverseer.png?branch=master)](https://travis-ci.org/steeloverseer/steeloverseer)\n\nInstallation\n============\n\nDownload
  and install the [stack](https://github.com/commercialhaskell/stack) build tool.\n\n
  \   stack install steeloverseer\n\nThis will create a binary deep inside `~/.stack/`,
  and symlink to it at\n`~/.local/bin/sos`.\n\nUsage\n=====\n\nSee `sos --help` to
  get started:\n\n    Steel Overseer 2.0\n\n    Usage: sos [TARGET] [-c|--command
  COMMAND] [-p|--pattern PATTERN]\n      A file watcher and development tool.\n\n
  \   Available options:\n      -h,--help                Show this help text\n      TARGET
  \                  File or directory to watch for\n                               changes.
  (default: \".\")\n      -c,--command COMMAND     Add command to run on file event.\n
  \     -p,--pattern PATTERN     Add pattern to match on file path. Only relevant
  if\n                               the target is a directory. (default: .*)\n\nCapture
  groups can be created with `(` `)` and captured variables can be\nreferred to with
  `\\1`, `\\2`, etc. (`\\0` contains the entire match).\n\nFor example, for each change
  to a `.c` file in `src/`, we may want to compile\nthe file and run its corresponding
  unit test:\n\n    sos src/ -c \"gcc -c \\0 -o obj/\\1.o\" -c \"make test --filter=test/\\1_test.c\"
  -p \"src/(.*)\\.c\"\n\nCommands are run left-to-right, and one failed command will
  halt the entire pipeline.\n\nAs a shortcut, we may want to write the above only
  once and save it in `.sosrc`, which is\nan alternative to the command-line interface
  (yaml syntax):\n\n```yaml\n- pattern: src/(.*)\\.c\n  commands:\n  - gcc -c \\0
  -o obj/\\1.o\n  - make test --filter=test/\\1_test.c\n```\n\nThen, we only need
  to run\n\n    sos\n\nto start watching the current directory.\n\nPipelines of commands
  are immediately canceled and re-run if a subsequent\nfilesystem event triggers the
  *same* list of commands. Otherwise, commands are\nare enqueued and run sequentially
  to keep the terminal output clean and readable.\n\nFor example, we may wish to run
  `hlint` on any modified `.hs` file:\n\n```yaml\n- pattern: .*\\.hs\n  command: hlint
  \\0\n```\n\nWe can modify `foo.hs` and trigger `hlint foo.hs` to run. During its
  execution,\nmodifying `bar.hs` will *enqueue* `hlint bar.hs`, while modifying `foo.hs`
  again\nwill *re-run* `hlint foo.hs`.\n\n.sosrc grammar\n==============\n\n    sosrc
  \           := [entry]\n    entry            := { \"pattern\" | \"patterns\" : value
  | [value]\n                        , \"command\" | \"commands\" : value | [value]\n
  \                       }\n    value            := [segment]\n    segment          :=
  text_segment | var_segment\n    text_segment     := string\n    var_segment      :=
  '\\' integer\n\nThe .sosrc grammar is somewhat flexible with respect to the command\nspecifications.
  Both singular and plural keys are allowed, and both strings\nand lists of strings
  are allowed for values.\n"
license-name: BSD3
