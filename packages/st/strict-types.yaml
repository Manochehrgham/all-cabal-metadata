homepage: https://github.com/pepeiborra/strict-types
changelog-type: ''
hash: 67665f578cd24fe64aee0d9ab8d97684740ef39c4d9f5fdb33cc56789a3d8e28
test-bench-deps: {}
maintainer: Pepe Iborra (pepeiborra@gmail.com)
synopsis: A type level predicate ranging over strict types
changelog: ''
basic-deps:
  bytestring: -any
  base: <5
  unordered-containers: -any
  text: -any
  array: -any
  containers: -any
  hashable: -any
  deepseq: -any
  vector: -any
all-versions:
- '0.1.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.7'
- '0.1.1'
author: Pepe Iborra
latest: '0.1.1'
description-type: markdown
description: ! "[![Travis Build Status](https://travis-ci.org/pepeiborra/strict-types.svg)](https://travis-ci.org/pepeiborra/strict-types)\n[![Hackage](https://img.shields.io/hackage/v/strict-types.svg)](https://hackage.haskell.org/package/strict-types)\n[![Stackage
  Nightly](http://stackage.org/package/strict-types/badge/nightly)](http://stackage.org/nightly/package/strict-types)\n\nstrict-types\n===================\n\nThis
  package provides a type-level predicate `Strict` and two pattern synonyms `IsStrict`
  and 'Rnf' to constrain value strictness.\n\nThe Rnf pattern\n----------------\nThe
  'Rnf' pattern matches every value of a type with an 'NFData' instance, forcing it
  to rigid normal form before binding it.\n```\n> Rnf [trace \"1\" 1, trace \"2\"
  2]\n```\n\n```\n> IsStrict (False)\nFalse\n> IsStrict (Identity False)\nIdentity
  False\n> IsStrict (Identity (Just False))\n\n<interactive>:1:1: error:\n    • Maybe
  Bool has an unnamed lazy field in constructor Just\n    • In the expression: IsStrict
  (Identity (Just False))\n      In an equation for ‘it’: it = IsStrict (Identity
  (Just False))\n```\n"
license-name: BSD3
