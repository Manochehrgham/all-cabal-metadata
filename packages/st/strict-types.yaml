homepage: https://github.com/pepeiborra/strict-types
changelog-type: ''
hash: 11e3fc01d77f9c8a261e0726aaf61b1fb9a6f4d7b05c4c4705c09c31e53ad289
test-bench-deps: {}
maintainer: Pepe Iborra (pepeiborra@gmail.com)
synopsis: A type level predicate ranging over strict types
changelog: ''
basic-deps:
  bytestring: -any
  base: <5
  unordered-containers: -any
  text: -any
  foundation: -any
  array: -any
  containers: -any
  hashable: -any
  vector: -any
all-versions:
- '0.1.0'
- '0.1.0.1'
- '0.1.0.2'
author: Pepe Iborra
latest: '0.1.0.2'
description-type: markdown
description: ! "[![Travis Build Status](https://travis-ci.org/pepeiborra/strict-types.svg)](https://travis-ci.org/pepeiborra/strict-types)\n[![Hackage](https://img.shields.io/hackage/v/strict-types.svg)](https://hackage.haskell.org/package/strict-types)\n[![Stackage
  Nightly](http://stackage.org/package/strict-types/badge/nightly)](http://stackage.org/nightly/package/strict-types)\n\nstrict-types\n===================\n\nThis
  package provides a type-level predicate `Strict` and a value level pattern `IsStrict`
  to constrain generic types.\n\n```\n> IsStrict (False)\nFalse\n> IsStrict (Identity
  False)\nIdentity False\n> IsStrict (Identity (Just False))\n\n<interactive>:1:1:
  error:\n    • Maybe Bool has an unnamed lazy field in constructor Just\n    • In
  the expression: IsStrict (Identity (Just False))\n      In an equation for ‘it’:
  it = IsStrict (Identity (Just False))\n```\n"
license-name: BSD3
