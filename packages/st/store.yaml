homepage: https://github.com/fpco/store#readme
changelog-type: markdown
hash: ac57b2480182e9ec01505187bda37a17aae677447a3e62d74be8ab6c6f42784f
test-bench-deps:
  void: ! '>=0.5.11'
  cereal: -any
  th-utilities: ! '>=0.2'
  bytestring: ! '>=0.10.4.0'
  fail: ! '>=4.9.0.0'
  base: ! '>=4.7 && <5'
  time: ! '>=1.4.2'
  base64-bytestring: ! '>=0.1.1'
  unordered-containers: ! '>=0.2.5.1'
  hspec: ! '>=2.1.2'
  text: ! '>=1.2.0.4'
  th-orphans: ! '>=0.12.2'
  syb: ! '>=0.4.4'
  monad-control: ! '>=0.3.3.0'
  filepath: ! '>=1.3'
  criterion: -any
  lifted-base: ! '>=0.2.3.3'
  conduit: ! '>=1.2.3.1'
  semigroups: ! '>=0.8'
  th-reify-many: ! '>=0.1.6'
  array: ! '>=0.5.0.0'
  smallcheck: ! '>=1.1.1'
  integer-gmp: ! '>=0.5.1.0'
  base-orphans: ! '>=0.4.3'
  th-lift-instances: ! '>=0.1.4'
  containers: ! '>=0.5.5.1'
  vector-binary-instances: -any
  weigh: -any
  store: -any
  ghc-prim: ! '>=0.3.1.0'
  hashable: ! '>=1.2.3.1'
  cereal-vector: -any
  transformers: ! '>=0.3.0.0'
  deepseq: ! '>=1.3.0.2'
  th-lift: ! '>=0.7.1'
  resourcet: ! '>=1.1.3.3'
  template-haskell: ! '>=2.9.0.0'
  mono-traversable: ! '>=0.7.0'
  primitive: ! '>=0.6'
  safe: ! '>=0.3.8'
  store-core: ! '>=0.2.0.2 && <0.3'
  vector: ! '>=0.10.12.3'
  hspec-smallcheck: ! '>=0.3.0'
  directory: ! '>=1.2'
  cryptohash: ! '>=0.11.6'
maintainer: Michael Sloan <sloan@fpcomplete.com>
synopsis: Fast binary serialization
changelog: ! "# ChangeLog\n\n## 0.2.1.1\n\n* Fixes a bug that could result in segfaults
  when reading corrupted data.\n\n## 0.2.1.0\n\nRelease notes:\n\n* Adds experimental
  `Data.Store.Version` and deprecates `Data.Store.TypeHash`.\n  The new functionality
  is similar to TypeHash, but there are much fewer false\n  positives of hashes changing.\n\nOther
  enhancements:\n\n* Now exports types related to generics\n\n## 0.2.0.0\n\nRelease
  notes:\n\n* Core functionality split into `store-core` package\n\nBreaking changes:\n\n*
  `combineSize'` renamed to `combineSizeWith`\n\n* Streaming support now prefixes
  each Message with a magic number, intended to\n  detect mis-alignment of data frames.
  This is worth the overhead, because\n  otherwise serialization errors could be more
  catastrophic - interpretting some\n  bytes as a length tag and attempting to consume
  many bytes from the source.\n\nOther enhancements:\n\n* [weigh](https://github.com/fpco/weigh)
  based allocations benchmark.\n\n* Addition of `Array` / `UArray` instances\n\n*
  Streaming support now has checks for over/undershooting buffer\n\nBug fixes:\n\n\n##
  0.1.0.0\n\n* First public release\n"
basic-deps:
  void: ! '>=0.5.11'
  th-utilities: ! '>=0.2'
  bytestring: ! '>=0.10.4.0'
  fail: ! '>=4.9.0.0'
  base: ! '>=4.7 && <5'
  time: ! '>=1.4.2'
  base64-bytestring: ! '>=0.1.1'
  unordered-containers: ! '>=0.2.5.1'
  hspec: ! '>=2.1.2'
  text: ! '>=1.2.0.4'
  th-orphans: ! '>=0.12.2'
  syb: ! '>=0.4.4'
  monad-control: ! '>=0.3.3.0'
  filepath: ! '>=1.3'
  lifted-base: ! '>=0.2.3.3'
  conduit: ! '>=1.2.3.1'
  semigroups: ! '>=0.8'
  th-reify-many: ! '>=0.1.6'
  array: ! '>=0.5.0.0'
  smallcheck: ! '>=1.1.1'
  integer-gmp: ! '>=0.5.1.0'
  base-orphans: ! '>=0.4.3'
  th-lift-instances: ! '>=0.1.4'
  containers: ! '>=0.5.5.1'
  ghc-prim: ! '>=0.3.1.0'
  hashable: ! '>=1.2.3.1'
  transformers: ! '>=0.3.0.0'
  deepseq: ! '>=1.3.0.2'
  th-lift: ! '>=0.7.1'
  resourcet: ! '>=1.1.3.3'
  template-haskell: ! '>=2.9.0.0'
  mono-traversable: ! '>=0.7.0'
  primitive: ! '>=0.6'
  safe: ! '>=0.3.8'
  store-core: ! '>=0.2.0.2 && <0.3'
  vector: ! '>=0.10.12.3'
  hspec-smallcheck: ! '>=0.3.0'
  directory: ! '>=1.2'
  cryptohash: ! '>=0.11.6'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.1.2'
author: ''
latest: '0.2.1.2'
description-type: markdown
description: ! "# store\n\nThe 'store' package provides efficient binary serialization.
  There are a couple\nfeatures that particularly distinguish it from most prior Haskell
  serialization\nlibraries:\n\n* Its primary goal is speed. By default, direct machine
  representations are used\n  for things like numeric values (`Int`, `Double`, `Word32`,
  etc) and buffers\n  (`Text`, `ByteString`, `Vector`, etc). This means that much
  of serialization\n  uses the equivalent of `memcpy`.\n\n  We have plans for supporting
  architecture independent serialization - see\n  [#36](https://github.com/fpco/store/issues/36)
  and\n  [#31](https://github.com/fpco/store/issues/31). This plan makes little endian\n
  \ the default, so that the most common endianness has no overhead.\n\n* Instead
  of implementing lazy serialization / deserialization involving\n  multiple input
  / output buffers, `peek` an `poke` always work with a single\n  buffer. This buffer
  is allocated by asking the value for its size before\n  encoding. This simplifies
  the encoding logic, and allows for highly optimized\n  tight loops.\n\n* `store`
  can optimize size computations by knowing when some types always\n  use the same
  number of bytes.  This allows us to compute the byte size of a\n  `Vector Int32`
  by just doing `length v * 4`.\n\nIt also features:\n\n* Optimized serialization
  instances for many types from base, vector,\n  bytestring, text, containers, time,
  template-haskell, and more.\n\n* TH and GHC Generics based generation of Store instances
  for datatypes\n\n* TH generation of testcases.\n\n## Architecture limitations\n\n`Store`
  does not currently work at all on architectures which lack efficient\nunaligned
  memory access (for example, older ARM processors). This is not a\nfundamental limitation,
  but we do not currently require ARM or PowerPC support.\nSee [#37](https://github.com/fpco/store/issues/37)
  and\n[#47](https://github.com/fpco/store/issues/47).\n\n## Blog posts\n\n* [Initial
  release announcement](https://www.fpcomplete.com/blog/2016/05/store-package)\n*
  [Benchmarks of the prototype](https://www.fpcomplete.com/blog/2016/03/efficient-binary-serialization)\n*
  [New 'weigh' allocation benchmark package](https://www.fpcomplete.com/blog/2016/05/weigh-package),\n
  \ created particularly to aid optimizing `store`.\n"
license-name: MIT
