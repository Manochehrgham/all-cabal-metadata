homepage: https://github.com/fpco/store#readme
changelog-type: markdown
hash: 47d3500c33497324c980feedf1133296f7cdb8065398d1efe71206ff711e797b
test-bench-deps:
  void: -any
  th-utilities: -any
  bytestring: -any
  fail: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  th-orphans: -any
  syb: -any
  monad-control: -any
  criterion: -any
  lifted-base: -any
  conduit: -any
  semigroups: -any
  th-reify-many: -any
  array: -any
  smallcheck: -any
  integer-gmp: -any
  base-orphans: -any
  th-lift-instances: ! '>=0.1.6'
  containers: -any
  store: -any
  ghc-prim: -any
  hashable: -any
  transformers: -any
  deepseq: -any
  th-lift: -any
  resourcet: -any
  template-haskell: -any
  mono-traversable: -any
  primitive: -any
  safe: -any
  vector: -any
  hspec-smallcheck: -any
  cryptohash: -any
maintainer: Michael Sloan <sloan@fpcomplete.com>
synopsis: Fast binary serialization
changelog: ! '# ChangeLog


  ## 0.1.0.0


  * First public release

'
basic-deps:
  void: -any
  th-utilities: -any
  bytestring: -any
  fail: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  th-orphans: -any
  syb: -any
  monad-control: -any
  lifted-base: -any
  conduit: -any
  semigroups: -any
  th-reify-many: -any
  array: -any
  smallcheck: -any
  integer-gmp: -any
  base-orphans: -any
  th-lift-instances: ! '>=0.1.6'
  containers: -any
  ghc-prim: -any
  hashable: -any
  transformers: -any
  deepseq: -any
  th-lift: -any
  resourcet: -any
  template-haskell: -any
  mono-traversable: -any
  primitive: -any
  safe: -any
  vector: -any
  hspec-smallcheck: -any
  cryptohash: -any
all-versions:
- '0.1.0.0'
author: ''
latest: '0.1.0.0'
description-type: markdown
description: ! "# store\n\nThe 'store' package provides binary serialization of Haskell
  datatypes. It fills\nquite a different niche from packages like 'binary' or 'cereal'.
  In particular:\n\n* Its primary goal is speed. Whenever possible, direct machine
  representations\n  are used. For numeric types (`Int`, `Double`, `Word32`, etc)
  and types that\n  use buffers (`Text`, `ByteString`, `Vector`, etc).  This means
  that much of\n  serialization uses the equivalent of `memcpy`.\n\n* By using machine
  representations, we lose serialization compatibility between\n  different architectures.
  Store could in theory be used to describe\n  machine-independent serialization formats.
  However, this is not the usecase\n  it's currently designed for (though utilities
  might be added for this in the\n  future!)\n\n* `Store` will not work at all on
  architectures which lack unaligned memory\n  access (for example, older ARM processors).
  \ This is not a fundamental\n  limitation, but we do not currently require ARM support.\n\nSee\n[this
  blog post](https://www.fpcomplete.com/blog/2016/03/efficient-binary-serialization)\nwhich
  describes the initial motivations and benchmarks that led to the existence\nof this
  package.\n"
license-name: MIT
