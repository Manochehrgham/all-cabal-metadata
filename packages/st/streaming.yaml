homepage: https://github.com/michaelt/streaming
changelog-type: ''
hash: 38fe1aec680a768e8f871848d8c7c0dcb25f1a20600595c78b75737a0fcdea80
test-bench-deps: {}
maintainer: what_is_it_to_do_anything@yahoo.com
synopsis: ! 'A general free monad transformer

  optimized for streaming applications.'
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.9'
  ghc-prim: -any
  mtl: ! '>=2.1 && <2.3'
  mmorph: ! '>=1.0 && <1.2'
  transformers: ! '>=0.3 && <0.5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.3'
author: michaelt
latest: '0.1.0.3'
description-type: haddock
description: ! '`Stream` can be used wherever `FreeT` is used. The compiler

  is better able to optimize operations written in

  terms of `Stream`.


  An associated prelude of functions, closely following

  @Pipes.Prelude@ is focused on on employment with a base

  functor like @((,) a)@ (here called @Of a@) which generates

  effectful sequences or producers - @Pipes.Producer@,

  @Conduit.Source@, @IOStreams.InputStream@, @IOStreams.Generator@

  and the like.


  Interoperation with `pipes` is accomplished with this isomorphism:


  > Pipes.unfoldr Streaming.next :: Stream (Of a) m r -> Producer a m r

  > Stream.unfoldr Pipes.next    :: Producer a m r -> Stream (Of a) m r


  Exit to `conduit` and `iostreams` is thus:


  > Conduit.unfoldM Streaming.uncons   :: Stream (Of a) m ()  -> Source m a

  > IOStreams.unfoldM Streaming.uncons :: Stream (Of a) IO () -> InputStream a'
license-name: BSD3
