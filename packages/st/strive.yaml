changelog-type: markdown
hash: dada0198ffdd5aeaa0016c07d3eac334ad768e529686430bd29ef307cb7d7e4d
test-bench-deps:
  hlint: ==1.9.*
  bytestring: -any
  strive: -any
  base: -any
  time: -any
  markdown-unlit: ==0.2.*
synopsis: A Haskell client for the Strava V3 API.
changelog: ! "# Changelog\n\nThis package uses [Semantic Versioning][1].\n\n## v1.0.1
  (2015-04-23)\n\n- #97: Fixed a bug that incorrectly separated OAuth scopes with
  spaces instead\n  of commas. Thanks @liskin for the patch!\n\n## v1.0.0 (2015-04-05)\n\n-
  Added the response to the error message when decoding fails.\n- Changed the input
  of `buildClient` from a `String` to a `Maybe Text`.\n- Added weight to detailed
  athlete representation.\n- Created type aliases for action inputs.\n\n## v0.8.0
  (2015-03-02)\n\n- Fixed `FromJSON` instances of polylines.\n- Added `getAthleteStats`
  for getting athlete stats.\n- Added `contextEntries` option to `getSegmentLeaderboard`.\n-
  Fixed capitalization of activity types. For example, `Alpineski` is now\n  `AlpineSki`.\n\n##
  v0.7.1 (2015-01-18)\n\n- Fixed `Setup.hs`.\n\n## v0.7.0 (2015-01-17)\n\n- Added
  `getRelatedActivities` for getting related activities.\n- Added `leaveClub` for
  leaving a club.\n- Added `joinClub` for joining a club.\n- Added `weighted_average_watts`
  to activities.\n- Added `device_watts` to activities.\n- Added some new activity
  types.\n\n## v0.6.2 (2015-01-17)\n\n- Fixed parsing of activity types.\n- Exposed
  `Strive.Internal` modules.\n\n## v0.6.1 (2014-08-12)\n\n- Moved `Strive.Actions.with`
  to `Strive.Utilities.with`.\n- Created `Strive.Enums.StreamType`.\n\n## v0.6.0 (2014-07-30)\n\n-
  Derived lens classes and instances using template Haskell.\n- Went back to clobbering
  Prelude exports (and keywords).\n- Added \"Response\" to `SegmentLeaderboardResponse`
  field names.\n- Created Vagrant configuration.\n- Derived JSON instances using template
  Haskell.\n- Replaced `client_httpManager` with `client_requester`.\n- Removed `?`
  infix operator.\n- Switched to functor-based lenses.\n- Created enums for some options.\n-
  Added support for GHC 7.8.2.\n\n## v0.5.1 (2014-07-08)\n\n- Avoided clobbering Prelude
  exports by appending underscores (`id` became\n  `id_`).\n- Created infix operator
  `?` as a shortcut for `$ with`.\n- Changed return of `deleteActivity` from `Value`
  to `()`.\n- Created `Show` instance for `Client`.\n- Fixed `README.lhs` on Windows.\n\n##
  v0.5.0 (2014-07-07)\n\n- Rewrote everything from the ground up.\n- Prefixed all
  fields with type names. For example,\n  `Strive.Types.Athletes.AthleteMeta.id` became\n
  \ `Strive.Types.Athletes.athleteMeta_id`.\n- Reduced the number of modules. For
  example,\n  `Strive.Objects.Athletes.AthleteMeta.AthleteMeta` became\n  `Strive.Types.AthleteMeta`.\n-
  Renamed some types:\n  - `BucketSummary` to `ActivityZoneDistributionBucket`\n  -
  `EffortLap` to `ActivityLapSummary`\n  - `EffortSummary` to `EffortDetailed`\n  -
  `SegmentExploration` to `SegmentExplorerEntry`\n  - `SegmentLeader` to `SegmentLeaderboardEntry`\n
  \ - `UploadDetailed` to `UploadStatus`\n  - `ZoneSummary` to `ActivityZoneDetailed`\n-
  Created some types:\n  - `SegmentExplorerResponse`\n  - `SegmentLeaderboardResponse`\n-
  Created `Strive.Lenses`, including classes and lenses for all objects.\n\n## v0.4.0
  (2014-06-28)\n\n- Added POST, PUT, and DELETE endpoints.\n\n## v0.3.0 (2014-06-28)\n\n-
  Added authorization endpoints.\n\n## v0.2.0 (2014-06-27)\n\n- Added support for
  decoding polylines.\n- Added stream endpoints.\n\n## v0.1.1 (2014-06-26)\n\n- Grouped
  actions into modules.\n- Moved `Strive.Actions.Internal` to `Strive.Utilities`.\n-
  Changed `IncludeMarkdown` from `Bool` to `Maybe Bool`.\n- Renamed a bunch of functions:\n
  \ - `getComments` to `getActivityComments`\n  - `getEfforts` to `getSegmentEfforts`\n
  \ - `getFriendsActivities` to `getFeed`\n  - `getKudoers` to `getActivityKudoers`\n
  \ - `getLaps` to `getActivityLaps`\n  - `getLeaders` to `getSegmentLeaderboard`\n
  \ - `getPhotos` to `getActivityPhotos`\n  - `getSegments` to `exploreSegments`\n
  \ - `getZones` to `getActivityZones`\n- Added `athleteId` parameter to `getSegmentEfforts`.\n\n##
  v0.1.0 (2014-06-24)\n\n- Initial release.\n\n[1]: http://semver.org/spec/v2.0.0.html\n"
basic-deps:
  bytestring: ==0.10.*
  base: ==4.*
  time: ==1.*
  text: ! '>=0.11 && <2'
  data-default: ==0.5.*
  transformers: ! '>=0.3 && <0.5'
  gpolyline: ==0.1.*
  http-conduit: ==2.*
  http-types: ==0.8.*
  aeson: ! '>=0.7 && <0.9'
  template-haskell: ==2.*
all-versions:
- '0.5.1'
- '0.6.0'
- '0.6.1'
- '0.6.2'
- '0.7.0'
- '0.7.1'
- '0.8.0'
- '1.0.0'
- '1.0.1'
latest: '1.0.1'
description-type: markdown
description: ! "<h1 align=\"center\">\n    <a href=\"http://taylor.fausak.me/strive/\">\n
  \       Strive\n    </a>\n</h1>\n\n<p align=\"center\">\n    Strive is a Haskell
  client for the <a href=\"http://strava.github.io/api/\">Strava V3 API</a>.\n</p>\n\n<p
  align=\"center\">\n    <a href=\"https://hackage.haskell.org/package/strive\">\n
  \       <img alt=\"\" src=\"https://img.shields.io/hackage/v/strive.svg\">\n    </a>\n
  \   <a href=\"https://travis-ci.org/tfausak/strive\">\n        <img alt=\"\" src=\"https://img.shields.io/travis/tfausak/strive/master.svg\">\n
  \   </a>\n    <a href=\"http://packdeps.haskellers.com/feed?needle=strive\">\n        <img
  alt=\"\" src=\"https://img.shields.io/hackage-deps/v/strive.svg\">\n    </a>\n</p>\n\n<hr>\n\n-
  [Installation](#installation)\n- [Usage](#usage)\n  - [Authentication](#authentication)\n
  \   - [Request access](#request-access)\n    - [Token exchange](#token-exchange)\n
  \   - [Deauthorization](#deauthorization)\n  - [Athletes](#athletes)\n    - [Retrieve
  current athlete](#retrieve-current-athlete)\n    - [Retrieve another athlete](#retrieve-another-athlete)\n
  \   - [Update current athlete](#update-current-athlete)\n    - [Totals and stats](#totals-and-stats)\n
  \   - [List athlete K/QOMs/CRs](#list-athlete-kqomscrs)\n  - [Friends and followers](#friends-and-followers)\n
  \   - [List athlete friends](#list-athlete-friends)\n    - [List athlete followers](#list-athlete-followers)\n
  \   - [List both following](#list-both-following)\n  - [Activities](#activities)\n
  \   - [Create an activity](#create-an-activity)\n    - [Retrieve an activity](#retrieve-an-activity)\n
  \   - [Update an activity](#update-an-activity)\n    - [Delete an activity](#delete-an-activity)\n
  \   - [List athlete activities](#list-athlete-activities)\n    - [List related activities](#list-related-activities)\n
  \   - [List friends' activities](#list-friends-activities)\n    - [List activity
  zones](#list-activity-zones)\n    - [List activity laps](#list-activity-laps)\n
  \ - [Comments](#comments)\n    - [List activity comments](#list-activity-comments)\n
  \ - [Kudos](#kudos)\n    - [List activity kudoers](#list-activity-kudoers)\n  -
  [Photos](#photos)\n    - [List activity photos](#list-activity-photos)\n  - [Clubs](#clubs)\n
  \   - [Retrieve a club](#retrieve-a-club)\n    - [List athlete clubs](#list-athlete-clubs)\n
  \   - [List club members](#list-club-members)\n    - [List club activities](#list-club-activities)\n
  \   - [Join a club](#join-a-club)\n    - [Leave a club](#leave-a-club)\n  - [Gear](#gear)\n
  \   - [Retrieve gear](#retrieve-gear)\n  - [Segments](#segments)\n    - [Retrieve
  a segment](#retrieve-a-segment)\n    - [List starred segments](#list-starred-segments)\n
  \   - [List efforts](#list-efforts)\n    - [Segment leaderboard](#segment-leaderboard)\n
  \   - [Segment explorer](#segment-explorer)\n  - [Segment efforts](#segment-efforts)\n
  \   - [Retrieve a segment effort](#retrieve-a-segment-effort)\n  - [Streams](#streams)\n
  \   - [Retrieve activity streams](#retrieve-activity-streams)\n    - [Retrieve effort
  streams](#retrieve-effort-streams)\n    - [Retrieve segment streams](#retrieve-segment-streams)\n
  \ - [Uploads](#uploads)\n    - [Upload an activity](#upload-an-activity)\n    -
  [Check upload status](#check-upload-status)\n\n## Installation\n\nAdd it to your
  Cabal file:\n\n~~~\nlibrary\n  build-depends:\n    strive ==1.*\n~~~\n\nOr install
  it manually:\n\n~~~ {.sh}\n$ cabal update\n$ cabal install 'strive ==1.*'\n~~~\n\n##
  Usage\n\nTo use the API, you'll need an access token. Once you have that, create
  a new\nclient using the default HTTP manager.\n\n~~~ {.haskell .ignore}\n{-# LANGUAGE
  OverloadedStrings #-}\nimport Strive\nlet token = \"...\"\nclient <- buildClient
  (Just token)\n~~~\n\nMost types implement lenses for their fields. Lenses are preferred
  over directly\naccessing the fields. For instance, instead of doing this:\n\n~~~
  {.haskell .ignore}\nclient_accessToken (client { client_accessToken = \"record token\"
  })\n-- \"record token\"\n~~~\n\nDo this:\n\n~~~ {.haskell .ignore}\nget accessToken
  (set accessToken \"lens token\" client)\n-- \"lens token\"\n~~~\n\n<!--\n\nThis
  setup is required for these examples to work, but it isn't required for a\nreader
  of this file to understand what's going on.\n\n~~~ {.haskell}\n{-# LANGUAGE OverloadedStrings
  #-}\n\nimport Data.ByteString.Char8 (pack)\nimport Data.Time.Calendar (fromGregorian)\nimport
  Data.Time.Clock (UTCTime (UTCTime))\nimport Strive\nimport System.Exit (exitSuccess)\n\nmain
  :: IO ()\nmain = do\n  _ <- exitSuccess\n  client <- buildClient (Just \"token\")\n~~~\n\n-->\n\n###
  [Authentication](http://strava.github.io/api/v3/oauth/)\n\n#### [Request access](http://strava.github.io/api/v3/oauth/#get-authorize)\n\n~~~
  {.haskell}\n  let authorizeUrl = buildAuthorizeUrl 1790 \"http://localhost\" $ with\n
  \       [ set approvalPrompt False\n        , set privateScope True\n        , set
  writeScope True\n        , set state \"...\"\n        ]\n  print (authorizeUrl ::
  String)\n~~~\n\n#### [Token exchange](http://strava.github.io/api/v3/oauth/#post-token)\n\n~~~
  {.haskell}\n  tokenExchangeResponse <- exchangeToken 1790 \"secret\" \"code\"\n
  \ print (tokenExchangeResponse :: Result TokenExchangeResponse)\n~~~\n\n#### [Deauthorization](http://strava.github.io/api/v3/oauth/#deauthorize)\n\n~~~
  {.haskell}\n  deauthorizationResponse <- deauthorize client\n  print (deauthorizationResponse
  :: Result DeauthorizationResponse)\n~~~\n\n### [Athletes](http://strava.github.io/api/v3/athlete/)\n\n####
  [Retrieve current athlete](http://strava.github.io/api/v3/athlete/#get-details)\n\n~~~
  {.haskell}\n  currentAthlete <- getCurrentAthlete client\n  print (currentAthlete
  :: Result AthleteDetailed)\n~~~\n\n#### [Retrieve another athlete](http://strava.github.io/api/v3/athlete/#get-another-details)\n\n~~~
  {.haskell}\n  anotherAthlete <- getAthlete client 65516\n  print (anotherAthlete
  :: Result AthleteSummary)\n~~~\n\n#### [Update current athlete](http://strava.github.io/api/v3/athlete/#update)\n\n~~~
  {.haskell}\n  updatedAthlete <- updateCurrentAthlete client $ with\n    [ set city
  (Just \"Dallas\")\n    , set state (Just \"Texas\")\n    , set country (Just \"United
  States\")\n    , set sex (Just Male)\n    , set weight (Just 72.57)\n    ]\n  print
  (updatedAthlete :: Result AthleteDetailed)\n~~~\n\n#### [Totals and stats](http://strava.github.io/api/v3/athlete/#stats)\n\n~~~
  {.haskell}\n  athleteStats <- getAthleteStats client 65516\n  print (athleteStats
  :: Result AthleteStats)\n~~~\n\n#### [List athlete K/QOMs/CRs](http://strava.github.io/api/v3/athlete/#koms)\n\n~~~
  {.haskell}\n  athleteCrs <- getAthleteCrs client 65516 $ with\n    [ set page 1\n
  \   , set perPage 2\n    ]\n  print (athleteCrs :: Result [EffortDetailed])\n~~~\n\n###
  [Friends and followers](http://strava.github.io/api/v3/follow/)\n\n#### [List athlete
  friends](http://strava.github.io/api/v3/follow/#friends)\n\n~~~ {.haskell}\n  currentFriends
  <- getCurrentFriends client $ with\n    [ set page 1\n    , set perPage 2\n    ]\n
  \ print (currentFriends :: Result [AthleteSummary])\n~~~\n\n~~~ {.haskell}\n  friends
  <- getFriends client 65516 $ with\n    [ set page 1\n    , set perPage 2\n    ]\n
  \ print (friends :: Result [AthleteSummary])\n~~~\n\n#### [List athlete followers](http://strava.github.io/api/v3/follow/#followers)\n\n~~~
  {.haskell}\n  currentFollowers <- getCurrentFollowers client $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (currentFollowers :: Result [AthleteSummary])\n~~~\n\n~~~
  {.haskell}\n  followers <- getFollowers client 65516 $ with\n    [ set page 1\n
  \   , set perPage 2\n    ]\n  print (followers :: Result [AthleteSummary])\n~~~\n\n####
  [List both following](http://strava.github.io/api/v3/follow/#both)\n\n~~~ {.haskell}\n
  \ commonFriends <- getCommonFriends client 65516 $ with\n    [ set page 1\n    ,
  set perPage 2\n    ]\n  print (commonFriends :: Result [AthleteSummary])\n~~~\n\n###
  [Activities](http://strava.github.io/api/v3/activities/)\n\n#### [Create an activity](http://strava.github.io/api/v3/activities/#create)\n\n~~~
  {.haskell}\n  createdActivity <- createActivity client \"An Example\" Run (UTCTime
  (fromGregorian 1970 0 0) 0) 10 $ with\n    [ set description (Just \"...\")\n    ,
  set distance (Just 100.0)\n    ]\n  print (createdActivity :: Result ActivityDetailed)\n~~~\n\n####
  [Retrieve an activity](http://strava.github.io/api/v3/activities/#get-details)\n\n~~~
  {.haskell}\n  activity <- getActivity client 141273622 $ with\n    [ set allEfforts
  True\n    ]\n  print (activity :: Result ActivitySummary)\n~~~\n\n#### [Update an
  activity](http://strava.github.io/api/v3/activities/#put-updates)\n\n~~~ {.haskell}\n
  \ updatedActivity <- updateActivity client 141273622 $ with\n    [ set name (Just
  \"WedEx Pit Stop\")\n    , set Strive.type (Just Ride)\n    , set private (Just
  False)\n    , set commute (Just True)\n    , set trainer (Just False)\n    , set
  gearId (Just \"b387882\")\n    , set description Nothing\n    ]\n  print (updatedActivity
  :: Result ActivityDetailed)\n~~~\n\n#### [Delete an activity](http://strava.github.io/api/v3/activities/#delete)\n\n~~~
  {.haskell}\n  deletedActivity <- deleteActivity client 162674281\n  print (deletedActivity
  :: Result ())\n~~~\n\n#### [List athlete activities](http://strava.github.io/api/v3/activities/#get-activities)\n\n~~~
  {.haskell}\n  currentActivities <- getCurrentActivities client $ with\n    [ set
  before (Just (UTCTime (fromGregorian 1970 0 0) 0))\n    , set after (Just (UTCTime
  (fromGregorian 1970 0 0) 0))\n    , set page 1\n    , set perPage 2\n    ]\n  print
  (currentActivities :: Result [ActivitySummary])\n~~~\n\n#### [List related activities](http://strava.github.io/api/v3/activities/#get-related)\n\n~~~
  {.haskell}\n  relatedActivities <- getRelatedActivities client 141273622 $ with\n
  \   [ set page 1\n    , set perPage 2\n    ]\n  print (relatedActivities :: Result
  [ActivitySummary])\n~~~\n\n#### [List friends' activities](http://strava.github.io/api/v3/activities/#get-feed)\n\n~~~
  {.haskell}\n  feed <- getFeed client $ with\n    [ set page 1\n    , set perPage
  2\n    ]\n  print (feed :: Result [ActivitySummary])\n~~~\n\n#### [List activity
  zones](http://strava.github.io/api/v3/activities/#zones)\n\n~~~ {.haskell}\n  activityZones
  <- getActivityZones client 141273622\n  print (activityZones :: Result [ActivityZoneDetailed])\n~~~\n\n####
  [List activity laps](http://strava.github.io/api/v3/activities/#laps)\n\n~~~ {.haskell}\n
  \ activityLaps <- getActivityLaps client 141273622\n  print (activityLaps :: Result
  [ActivityLapSummary])\n~~~\n\n### [Comments](http://strava.github.io/api/v3/comments/)\n\n####
  [List activity comments](http://strava.github.io/api/v3/comments/#list)\n\n~~~ {.haskell}\n
  \ activityComments <- getActivityComments client 90112360 $ with\n    [ set markdown
  True\n    , set page 1\n    , set perPage 2\n    ]\n  print (activityComments ::
  Result [CommentSummary])\n~~~\n\n### [Kudos](http://strava.github.io/api/v3/kudos/)\n\n####
  [List activity kudoers](http://strava.github.io/api/v3/kudos/#list)\n\n~~~ {.haskell}\n
  \ activityKudoers <- getActivityKudoers client 141273622 $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (activityKudoers :: Result [AthleteSummary])\n~~~\n\n###
  [Photos](http://strava.github.io/api/v3/photos/)\n\n#### [List activity photos](http://strava.github.io/api/v3/photos/#list)\n\n~~~
  {.haskell}\n  activityPhotos <- getActivityPhotos client 141273622\n  print (activityPhotos
  :: Result [PhotoSummary])\n~~~\n\n### [Clubs](http://strava.github.io/api/v3/clubs/)\n\n####
  [Retrieve a club](http://strava.github.io/api/v3/clubs/#get-details)\n\n~~~ {.haskell}\n
  \ club <- getClub client 11193\n  print (club :: Result ClubDetailed)\n~~~\n\n####
  [List athlete clubs](http://strava.github.io/api/v3/clubs/#get-athletes)\n\n~~~
  {.haskell}\n  currentClubs <- getCurrentClubs client\n  print (currentClubs :: Result
  [ClubSummary])\n~~~\n\n#### [List club members](http://strava.github.io/api/v3/clubs/#get-members)\n\n~~~
  {.haskell}\n  clubMembers <- getClubMembers client 11193 $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (clubMembers :: Result [AthleteSummary])\n~~~\n\n####
  [List club activities](http://strava.github.io/api/v3/clubs/#get-activities)\n\n~~~
  {.haskell}\n  clubActivities <- getClubActivities client 11193 $ with\n    [ set
  page 1\n    , set perPage 2\n    ]\n  print (clubActivities :: Result [ActivitySummary])\n~~~\n\n####
  [Join a club](http://strava.github.io/api/v3/clubs/#join)\n\n~~~ {.haskell}\n  joinedClub
  <- joinClub client 165\n  print (joinedClub :: Result ())\n~~~\n\n#### [Leave a
  club](http://strava.github.io/api/v3/clubs/#leave)\n\n~~~ {.haskell}\n  leftClub
  <- leaveClub client 165\n  print (leftClub :: Result ())\n~~~\n\n### [Gear](http://strava.github.io/api/v3/gear/)\n\n####
  [Retrieve gear](http://strava.github.io/api/v3/gear/#show)\n\n~~~ {.haskell}\n  theGear
  <- getGear client \"b387855\"\n  print (theGear :: Result GearDetailed)\n~~~\n\n###
  [Segments](http://strava.github.io/api/v3/segments/)\n\n#### [Retrieve a segment](http://strava.github.io/api/v3/segments/#retrieve)\n\n~~~
  {.haskell}\n  theSegment <- getSegment client 4773104\n  print (theSegment :: Result
  SegmentDetailed)\n~~~\n\n#### [List starred segments](http://strava.github.io/api/v3/segments/#starred)\n\n~~~
  {.haskell}\n  starredSegments <- getStarredSegments client $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (starredSegments :: Result [SegmentSummary])\n~~~\n\n####
  [List efforts](http://strava.github.io/api/v3/segments/#efforts)\n\n~~~ {.haskell}\n
  \ theSegmentEfforts <- getSegmentEfforts client 4773104 $ with\n    [ set athleteId
  (Just 65516)\n    , set range (Just ((UTCTime (fromGregorian 1970 0 0) 0), (UTCTime
  (fromGregorian 1970 0 0) 0)))\n    , set page 1\n    , set perPage 2\n    ]\n  print
  (theSegmentEfforts :: Result [EffortDetailed])\n~~~\n\n#### [Segment leaderboard](http://strava.github.io/api/v3/segments/#leaderboard)\n\n~~~
  {.haskell}\n  segmentLeaderboardResponse <- getSegmentLeaderboard client 4773104
  $ with\n    [ set gender (Just Male)\n    , set ageGroup (Just Ages0To24)\n    ,
  set weightClass (Just Kilograms65To74)\n    , set following (Just True)\n    , set
  clubId (Just 11193)\n    , set dateRange (Just \"this_year\")\n    , set contextEntries
  (Just 15)\n    , set page 1\n    , set perPage 2\n    ]\n  print (segmentLeaderboardResponse
  :: Result SegmentLeaderboardResponse)\n~~~\n\n#### [Segment explorer](http://strava.github.io/api/v3/segments/#explore)\n\n~~~
  {.haskell}\n  segmentExplorerResponse <- exploreSegments client (32.0, -96.0, 33.0,
  -95.0) $ with\n    [ set activityType Riding\n    , set minCat 0\n    , set maxCat
  5\n    ]\n  print (segmentExplorerResponse :: Result SegmentExplorerResponse)\n~~~\n\n###
  [Segment efforts](http://strava.github.io/api/v3/efforts/)\n\n#### [Retrieve a segment
  effort](http://strava.github.io/api/v3/efforts/#retrieve)\n\n~~~ {.haskell}\n  segmentEffort
  <- getSegmentEffort client 1595370098\n  print (segmentEffort :: Result EffortDetailed)\n~~~\n\n###
  [Streams](http://strava.github.io/api/v3/streams/)\n\n#### [Retrieve activity streams](http://strava.github.io/api/v3/streams/#activity)\n\n~~~
  {.haskell}\n  activityStreams <- getActivityStreams client 141273622 [LatlngStream,
  WattsStream] $ with\n    [ set resolution (Just Low)\n    , set seriesType Time\n
  \   ]\n  print (activityStreams :: Result [StreamDetailed])\n~~~\n\n#### [Retrieve
  effort streams](http://strava.github.io/api/v3/streams/#effort)\n\n~~~ {.haskell}\n
  \ effortStreams <- getEffortStreams client 1595370098 [LatlngStream, WattsStream]
  $ with\n    [ set resolution (Just Low)\n    , set seriesType Time\n    ]\n  print
  (effortStreams :: Result [StreamDetailed])\n~~~\n\n#### [Retrieve segment streams](http://strava.github.io/api/v3/streams/#segment)\n\n~~~
  {.haskell}\n  segmentStreams <- getSegmentStreams client 4773104 [LatlngStream,
  WattsStream] $ with\n    [ set resolution (Just Low)\n    , set seriesType Time\n
  \   ]\n  print (segmentStreams :: Result [StreamDetailed])\n~~~\n\n### [Uploads](http://strava.github.io/api/v3/uploads/)\n\n####
  [Upload an activity](http://strava.github.io/api/v3/uploads/#post-file)\n\n~~~ {.haskell}\n
  \ uploadedActivity <- uploadActivity client (pack \"...\") \"gpx.gz\" $ with\n    [
  set activityType (Just Ride)\n    , set name (Just \"An Example\")\n    , set description
  (Just \"...\")\n    , set private True\n    , set trainer False\n    , set externalId
  (Just \"...\")\n    ]\n  print (uploadedActivity :: Result UploadStatus)\n~~~\n\n####
  [Check upload status](http://strava.github.io/api/v3/uploads/#get-status)\n\n~~~
  {.haskell}\n  upload <- getUpload client 16486788\n  print (upload :: Result UploadStatus)\n~~~\n"
