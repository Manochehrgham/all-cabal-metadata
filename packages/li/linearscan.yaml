homepage: http://github.com/jwiegley/linearscan
changelog-type: ''
hash: 047d7035db3cde8c6aa102307e0993b19280243f720a3425a7300be669ee4f30
test-bench-deps: {}
maintainer: johnw@newartisans.com
synopsis: Linear scan register allocator, formally verified in Coq
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5.0'
  containers: -any
  ghc-prim: -any
  mtl: -any
  transformers: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.1.0'
- '0.4.0.0'
- '0.5.0.0'
author: John Wiegley
latest: '0.5.0.0'
description-type: haddock
description: ! 'The @linearscan@ library is an implementation -- in Coq, extracted
  to

  Haskell -- of a register allocation algorithm developed by Christian Wimmer.

  It is described in detail in his Masters thesis, which can be found at

  <http://www.christianwimmer.at/Publications/Wimmer04a/Wimmer04a.pdf>.  A

  Java implementation of this same algorithm, by that author, is used in

  Oracle''s Graal project.


  This version of the algorithm was written and verified in Coq, containing

  over 130 proved lemmas, at over 5K LOC.  It was funded as a research project

  by BAE Systems (<http://www.baesystems.com>), to be used in an in-house

  compiler written in Haskell.


  In order for the Coq code to be usable from Haskell, it is first extracted

  from Coq as a Haskell library, during which many of Coq''s fundamental types

  are mapped directly onto counterparts in the Haskell Prelude.  Thus, it

  should be within the performance range of an equivalent implementation

  written directly in Haskell.


  Note that not every conceivable property of this library has been proven.

  For some of the lower layers this is true, because the algebraic constraints

  on these components could be exhaustively described in the context of their

  use.  However, higher-level components represent a great variety of use

  cases, and not every one of these cases has been proven correct.  This

  represents an ongoing effort, with the hope that proofs will entirely

  replace the necessity for ad hoc unit testing, and that at some point we can

  know that any allocation produced by this library must either fail, or be

  mathematically sound.


  This library''s sole entry point is the ''LinearScan.allocate'' function, which

  takes a list of information about basic blocks to an equivalent list, with

  annotations indicating allocation choices.'
license-name: BSD3
