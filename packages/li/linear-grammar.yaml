homepage: ''
changelog-type: ''
hash: e58e74f65a3ddae1e81028f843b2c68a34e0892208bc26d3196f93e577b62e0d
test-bench-deps:
  base: -any
  hspec: -any
  QuickCheck: -any
maintainer: Athan Clark <athan.clark@gmail.com>
synopsis: A simple grammar for building linear equations and inclusive inequalities.
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5'
  QuickCheck: -any
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
- '0.0.0.5'
- '0.0.0.6'
- '0.0.0.7'
- '0.0.1'
- '0.0.1.1'
- '0.0.1.2'
- '0.0.1.3'
- '0.0.1.4'
- '0.0.1.5'
author: Athan Clark <athan.clark@gmail.com>
latest: '0.0.1.5'
description-type: haddock
description: ! 'This library provides some simple tools for building abstract syntax
  trees,

  representing linear equations and (inclusive) inequalities. As an example:


  > 12x + 3y - 4z + 12 <= 43x - 7b + 8q


  Would look like...


  > f = (12 :: Double) .*. EVar "x" .+.

  >     (3 :: Double) .*. EVar "y" .+.

  >     (-4 :: Double) .*. EVar "z" .+.

  >     ELit 12

  >     .<=.

  >     (43 :: Double) .*. EVar "x" .+.

  >     (-7 :: Double) .*. EVar "b" .+.

  >     (8 :: Double) .*. EVar "q"


  I''ve added some overloading functionality, to help ease the verbosity of the

  above statements - an @IsString@ instance, and some other utilities. To pack

  the equation into <https://en.wikipedia.org/wiki/Linear_equation#General_.28or_standard.29_form
  standard form>,

  use the @sandardForm@ function:


  > stdF = standardForm f'
license-name: BSD3
