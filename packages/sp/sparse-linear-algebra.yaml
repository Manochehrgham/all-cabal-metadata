homepage: https://github.com/ocramz/sparse-linear-algebra
changelog-type: ''
hash: 05c755b144ac8c2e5020a052c6c9c37fcf66e59ec70dbda4d43aaede049520ae
test-bench-deps:
  mwc-random: -any
  base: -any
  hspec: -any
  criterion: -any
  containers: -any
  mtl: ! '>=2.2.1'
  sparse-linear-algebra: -any
  primitive: ! '>=0.6.1.0'
maintainer: zocca.marco gmail
synopsis: Numerical computation in native Haskell
changelog: ''
basic-deps:
  mwc-random: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  containers: -any
  mtl: ! '>=2.2.1'
  QuickCheck: -any
  primitive: ! '>=0.6.1.0'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
author: Marco Zocca
latest: '0.2.0.4'
description-type: markdown
description: ! "# sparse-linear-algebra\n\nNumerical computation in native Haskell\n\nTravisCI
  : [![Build Status](https://travis-ci.org/ocramz/sparse-linear-algebra.png)](https://travis-ci.org/ocramz/sparse-linear-algebra)\n\nThis
  library provides common numerical analysis functionality, without requiring any
  external bindings. It is not optimized for performance (yet), but it serves as an
  experimental platform for scientific computation in a purely functional setting.\n\nAlgorithms
  :\n\n* Iterative linear solvers\n\n    * Conjugate Gradient Squared (CGS)\n\n    *
  BiConjugate Gradient Stabilized (BiCGSTAB) (non-Hermitian systems)\n\n* Matrix decompositions\n\n
  \   * QR factorization\n\n* Eigenvalue algorithms\n\n    * QR algorithm\n\n    *
  Rayleigh quotient iteration\n\n* Utilities : Vector and matrix norms, matrix condition
  number, Givens rotation, Householder reflection\n\n* Predicates : Matrix orthogonality
  test (A^T A ~= I)\n\n\n\n----------\n\nThis is also an experiment in principled
  scientific programming :\n\n* set the stage by declaring typeclasses and some useful
  generic operations (normed linear vector spaces, i.e. finite-dimensional spaces
  equipped with an inner product that induces a distance function),\n\n* define appropriate
  data structures, and how they relate to those properties (sparse vectors and matrices,
  defined internally via `Data.IntMap`, are made instances of the VectorSpace and
  Additive classes respectively). This allows to decouple the algorithms from the
  actual implementation of the backend,\n\n* implement the algorithms, following 1:1
  the textbook [1] \n\n\n## License\n\nGPL3, see LICENSE\n\n## Credits\n\nInspired
  by\n\n* `linear` : https://hackage.haskell.org/package/linear\n* `sparse-lin-alg`
  : https://github.com/laughedelic/sparse-lin-alg\n\n## References\n\n[1] : Y. Saad,
  Iterative Methods for Sparse Linear Systems, 2nd ed., 2000"
license-name: GPL-3
