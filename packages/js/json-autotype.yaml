homepage: https://github.com/mgajda/json-autotype
changelog-type: markdown
hash: cb4428459c11f01598eb96056f267e999f4a5f2b0522113182f0cd5250744abc
test-bench-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.3 && <4.9'
  unordered-containers: ==0.2.*
  text: ! '>=1.1 && <1.4'
  filepath: ! '>=1.3 && <1.5'
  process: ! '>=1.1 && <1.4'
  uniplate: ==1.6.*
  smallcheck: ! '>=1.0 && <1.2'
  containers: ! '>=0.3 && <0.6'
  lens: ! '>=4.1 && <4.10'
  hflags: ! '>=0.3 && <0.5'
  GenericPretty: ==1.2.*
  mtl: ! '>=2.1 && <2.3'
  hashable: ==1.2.*
  scientific: ! '>=0.3 && <0.5'
  QuickCheck: ! '>=2.4 && <3.0'
  pretty: ! '>=1.1 && <1.3'
  aeson: ! '>=0.7 && <0.9'
  vector: ! '>=0.9 && <0.11'
  directory: ! '>=1.1 && <1.3'
maintainer: mjgajda@gmail.com
synopsis: Automatic type declaration for JSON input data
changelog: ! "Changelog\n=========\n    0.5  Apr 2015\n\n        * Reduced name space
  pollution when generating code.\n          Now all valid JSON test examples do work.\n
  \       * Corrected build failure on GHC 7.8.4\n\n    0.4  Apr 2015\n\n        *
  Release candidate for current functionality.\n\n    0.3  Apr 2015\n\n        * Passed
  all smallcheck/quickcheck tests.\n        * Approaching release candidate.\n\n    0.2.5.13
  \ Apr 2015\n\n        * Correctly handling lone option, not yet union with optionality.\n
  \         Fixed: #3.\n\n    0.2.5.12  Apr 2015\n\n        * Added typechecking before
  and after type unification.\n        * Added shrink for more informative QuickCheck
  testing.\n        * Tested mostly using GHC 7.10.\n\n    0.2.5.11  Mar 2015\n\n
  \       * Add short versions of command line flags: -o, -d, and -t.\n\n    0.2.5.10
  \ Mar 2015\n\n        * Bump up lens dependency.\n\n    0.2.5.8  Mar 2015\n\n        *
  Updated tests and build config.\n\n    0.2.5.7  Mar 2015\n\n        * Fixed documentation
  anchors, and unit test classification for failures.\n    \n    0.2.5.6  Mar 2015\n\n
  \       * Relaxed upper bounds for lens 4.8.\n    \n   0.2.5.5  Mar 2015\n\n        *
  (Skipped this version number by mistake.)\n\n    0.2.5.4  Dec 2014\n\n        *
  Relaxed upper bounds for new lens.\n\n    0.2.5.3  Dec 2014\n\n        * Relaxed
  upper bounds again.\n\n    0.2.5.2  Dec 2014\n\n        * Updated metainfo, relaxed
  upper bounds for GHC 7.10.\n\n    0.2.5.0  Nov 2014\n\n        * Nicer union type
  syntax in Data.Aeson.AutoType.Alternative.\n\n    0.2.4.0  Nov 2014\n\n        *
  To assure proper treatment of unions,\n          I make them with Data.Aeson.AutoType.Alternative
  type instead of Either.\n\n    0.2.3.0  Nov 2014\n\n        * Explicit JSON parser
  generation to avoid conflicts between Haskell keywords and field names.\n        *
  Renaming of Haskell field names with a prefix of object name (data type.)\n\n    0.2.2.0
  \ Nov 2014\n\n        * GenerateJSONParser may now take multiple input samples to
  produce single parser.\n        * Fixed automated testing for all example files.\n\n
  \   0.2.1.4  Oct 2014\n\n        * Added examples to the package distribution.\n\n
  \   0.2.1.3  Oct 2014\n\n        * Cleaned up package.\n        * Changelog in markdown
  format.\n\n    0.2.1  Oct 2014\n\n        * Added option to use it as a filter ('-'
  is accepted input name.)\n\n    0.2.0  Oct 2014\n\n        * First release to Hackage.\n
  \       * Handling of proper unions, and most examples.\n        * Automatically
  tested on a wide range of example documents (see\n        tests/)\n        * Initial
  documentation in README.md.\n\n    0.1.0  July 2014\n\n\t* First experiments uploaded
  to GitHub, and discussed to\n\tHackerSpace.SG.\n\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.3 && <4.9'
  unordered-containers: ==0.2.*
  text: ! '>=1.1 && <1.4'
  hint: ! '>=0.3 && <0.5'
  filepath: ! '>=1.3 && <1.5'
  process: ! '>=1.1 && <1.4'
  uniplate: ==1.6.*
  containers: ! '>=0.3 && <0.6'
  lens: ! '>=4.1 && <4.10'
  hflags: ! '>=0.3 && <0.5'
  GenericPretty: ==1.2.*
  mtl: ! '>=2.1 && <2.3'
  hashable: ==1.2.*
  scientific: ! '>=0.3 && <0.5'
  pretty: ! '>=1.1 && <1.3'
  aeson: ! '>=0.7 && <0.9'
  vector: ! '>=0.9 && <0.11'
all-versions:
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.1.2'
- '0.2.1.3'
- '0.2.1.4'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.5.0'
- '0.2.5.1'
- '0.2.5.2'
- '0.2.5.3'
- '0.2.5.4'
- '0.2.5.6'
- '0.2.5.7'
- '0.2.5.8'
- '0.2.5.9'
- '0.2.5.10'
- '0.2.5.11'
- '0.2.5.12'
- '0.2.5.13'
- '0.3'
- '0.4'
- '0.5'
- '1.0'
author: Michal J. Gajda
latest: '1.0'
description-type: markdown
description: ! "json-autotype\n=============\nTakes a JSON format input, and generates
  automatic Haskell type declarations.\n\nParser and printer instances are derived
  using [Aeson](http://hackage.haskell.org/package/aeson).\n\nThe program uses union
  type unification to trim output declarations. The types of same attribute tag and
  similar attribute set, are automatically unified using recognition by attribute
  set matching. (This option can be optionally turned off, or a set of unified types
  may be given explicitly.) `:|:` alternatives (similar to `Either`) are used to assure
  that all `JSON` inputs seen in example input file are handled correctly.\n\nI should
  probably write a short paper to explain the methodology.\n\n[![Build Status](https://api.travis-ci.org/mgajda/json-autotype.svg?branch=master)](https://travis-ci.org/mgajda/json-autotype)\n[![Hackage](https://budueba.com/hackage/json-autotype)](https://hackage.haskell.org/package/json-autotype)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/json-autotype.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=json-autotype)\n\nDetails
  on official releases are on [Hackage](https://hackage.haskell.org/package/json-autotype)\n\nUSAGE:\n======\nAfter
  installing with `cabal install json-autotype`, you might generate stub code for
  the parser:\n\n```\n    json-autotype input.json -o MyFormat.hs\n```\n\nThen you
  might test the parser by running it on an input file:\n\n```\n    runghc MyFormat.hs
  input.json\n```\n\nIf everything is correct, then feel free to inspect the data
  structure generated automatically for you!\nThe goal of this program is to make
  it easy for users of big JSON APIs to generate entries from\nexample data.\n\nOccasionally
  you might find a valid JSON for which `json-autotype` doesn't generate a correct
  parser.\nYou may either edit the resulting file _and_ send it to the author as a
  test case for future release.\n\nPatches and suggestions are welcome.\n\nEXAMPLES:\n=========\n\nThe
  most simple example:\n```\n    {\n        \"colorsArray\":[{\n                \"colorName\":\"red\",\n
  \               \"hexValue\":\"#f00\"\n            },\n            {\n                \"colorName\":\"green\",\n
  \               \"hexValue\":\"#0f0\"\n            },\n            {\n                \"colorName\":\"blue\",\n
  \               \"hexValue\":\"#00f\"\n            }\n        ]\n    }\n```\n\nIt
  will produce the module with the following datatypes and TH calls for JSON parser
  derivations:\n```\n    data ColorsArray = ColorsArray {\n        colorsArrayHexValue
  \   :: Text,\n        colorsArrayColorName :: Text\n      } deriving (Show,Eq)\n\n
  \   data TopLevel = TopLevel {\n        topLevelColorsArray :: ColorsArray\n      }
  deriving (Show,Eq)\n```\nNote that attribute names match the names of JSON dictionary
  keys.\n\nAnother example with ambiguous types:\n```\n    {\n        \"parameter\":[{\n
  \               \"parameterName\":\"apiVersion\",\n                \"parameterValue\":1\n
  \           },\n            {\n                \"parameterName\":\"failOnWarnings\",\n
  \               \"parameterValue\":false\n            },\n            {\n                \"parameterName\":\"caller\",\n
  \               \"parameterValue\":\"site API\"\n            }]\n    }\n```\nIt
  will produce quite intuitive result (plus extra parentheses, and class derivations):\n\n```\n
  \   data Parameter = Parameter {\n        parameterParameterValue :: Bool :|: Int
  :|: Text,\n        parameterParameterName :: Text\n      }\n\n    data TopLevel
  = TopLevel {\n        topLevelParameter :: Parameter\n      }\n```\n\nReal-world
  use case examples are provided in the package [source repository](https://github.com/mgajda/json-autotype/tree/master/test).\n"
license-name: BSD3
