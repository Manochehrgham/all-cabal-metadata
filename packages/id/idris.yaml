homepage: http://www.idris-lang.org/
changelog-type: text
hash: 9344448e90dbb7e39fd03bcac6a7ec58992873eba885518f997e98c36ebe3022
test-bench-deps:
  haskeline: ! '>=0.7'
  base: -any
  time: -any
  idris: -any
  filepath: -any
  process: -any
  containers: -any
  transformers: -any
  directory: -any
maintainer: Edwin Brady <eb@cs.st-andrews.ac.uk>
synopsis: Functional Programming Language with Dependent Types
changelog: ! "New in 0.11:\n============\n\nUpdated export rules\n--------------------\n\n*
  The export rules are:\n  - 'private' means that the definition is not exported at
  all\n  - 'export' means that the top level type is exported, but not the\n    definition.
  In the case of 'data', this means the type constructor is\n    exported but not
  the data constructors.\n  - 'public export' means that the entire definition is
  exported.\n* By default, names are 'private'. This can be altered with an %access\n
  \ directive as before.\n* Exported types can only refer to other exported names\n*
  Publicly exported definitions can only refer to publicly exported names\n\nImproved
  C FFI\n--------------\n\n* Idris functions can now be passed as callbacks to C functions
  or wrapped\nin a C function pointer.\n* C function pointers can be called.\n* Idris
  can access pointers to C globals.\n\nMinor language changes\n----------------------\n\n*
  The '[static]' annotation is changed to '%static' to be consistent with the\n  other
  annotations.\n* Added '%auto_implicits' directive. The default is '%auto_implicits
  on'.\n  Placing '%auto_implicits off' in a source file means that after that\n  point,
  any implicit arguments must be bound, e.g.:\n    append : {n,m,a:_} -> Vect n a
  -> Vect m a -> Vect (n + m) a\n\n  Only names which are used explicitly in the type
  need to be bound, e.g.:\n    Here  : {x, xs : _} -> Elem x (x :: xs)\n\n  In 'Here',
  there is no need to bind any of the variables in the type of\n  'xs' (it could be
  e.g. List a or Vect n a; 'a' and 'n' will still be\n  implicitly bound).\n\n  You
  can still implicitly bind with 'using':\n\n    using (xs : Vect _ _)\n      data
  Elem  : {a, n : _} -> a -> Vect n a -> Type where\n           Here  : {x : _} ->
  Elem x (x :: xs)\n           There : {x, y : _} -> Elem x xs -> Elem x (y :: xs)\n\n
  \ However, note that *only* names which appear in *both* the using block\n  *and*
  the type being defined will be implicitly bound. The following will\n  therefore
  fail because 'n' isn't implicitly bound:\n\n    using (xs : Vect n a)\n      bad
  : Elem x xs -> Elem x (y :: xs)\n* `Sigma` has been renamed  to `DPair`.\n* Accessor
  functions for dependent pairs have been renamed to bring them into\n  line with
  standard accessor functions for pairs. The function `getWitness`\n  is now `fst`,
  and `getProof` is `snd`.\n* File Modes expanded: Append, ReadWriteTruncate, and
  ReadAppend added,\n  Write is deprecated and renamed to WriteTruncate.\n* C11 Extended
  Mode variations added to File Modes.\n* More flexible holes.\n  Holes can now depend
  on other holes in a term (such as implicit arguments\n  which may be inferred from
  the definition of the hole).\n\nNew in 0.10:\n============\n\n* 'class' and 'instance'
  are now deprecated keywords. They have been\n  replaced by 'interface' and 'implementation'
  respectively. This is to\n  properly reflect their purpose.\n* (/) operator moved
  into new Fractional interface.\n* Idris' logging infrastructure has been categorised.
  Command line and repl\n  are available. For command line the option `--logging-categories
  CATS`\n  is used to pass in the categories. Here `CATS` is a colon separated quoted\n
  \ string containing the categories to log. The REPL command is `logcats CATS`.\n
  \ Where `CATS` is a whitespace separated list of categoriese. Default is for\n  all
  categories to be logged.\n* New flag `--listlogcats` to list logging categories.`\n\nNew
  in 0.9.20:\n==============\n\nLanguage updates\n----------------\n\n* Improved unification
  by implementing a pattern unification rule\n* The syntax `{{n}} quotes n without
  resolving it, allowing short syntax\n  for defining new names. `{n} still quotes
  n to an existing name in scope.\n* A new primitive operator prim__strSubstr for
  more efficient extraction of\n  substrings. External code generators should implement
  this.\n* The previous syntax for tactic proofs and the previous interactive prover\n
  \ are now deprecated in favour of reflected elaboration. They will be removed\n
  \ at some point in the future.\n* Changed scoping rules for unbound implicits: any
  name which would be a\n  valid unbound implicit is now *always* an unbound implicit.
  This is much\n  more resilient to changes in inputs, but does require that function
  names\n  be explicitly qualified when in argument position.\n* Name binding in patterns
  follows the same rule as name binding for implicits\n  in types: names which begin
  with lower case letters, not applied to any\n  arguments, are treated as bound pattern
  variables.\n* Added %deprecate directive, which gives a warning and a message when
  a\n  deprecated name is referenced.\n\nLibrary updates\n---------------\n\n* The
  'Neg' class now represents numeric types which can be negative. As\n  such, the
  (-) operator and 'abs' have been moved there from 'Num'.\n* A special version of
  (-) on 'Nat' requires that the second argument is\n  smaller than or equal to the
  first. 'minus' retains the old behaviour,\n  returning Z if there is an underflow.\n*
  The (+), (-), and (*) operations on Fin have been removed.\n* New Logging Effects
  have been added to facilitate logging of effectful\n  programmes.\n* Elaborator
  reflection is now a part of the prelude. It is no longer\n  necessary to import
  Language.Reflection.Elab.\n* The `PERF` effect allows for simple performance metrics
  to be collected\n  from Effectful programs.\n* Some constructors that never actually
  occurred have been removed from\n  the TT and Raw reflection datatypes in Language.Reflection.\n*
  File IO operations (for example openFile/fread/fwrite) now return\n  'Either FileError
  ty' where the return type was previously 'ty' to indicate\n  that they may fail.\n\nTool
  updates\n------------\n* Records are now shown as records in :doc, rather than as
  the underlying\n  datatype\n* iPKG files have a new option `pkgs` which takes a
  comma-separated list\n  of package names that the idris project depends on. This
  reduces bloat\n  in the `opts` option with multiple package declarations.\n* iPKG
  files now allow `executable = \"your filename here\"` in addition to\n  the existing
  `executable = yourFilenameHere` style. While the unquoted\n  version is limited
  to filenames that look like namespaced Idris identifiers\n  (`your.filename.here`),
  the quoted version accepts any valid filename.\n* Add definition command (\\d in
  Vim, Ctrl-Alt-A in Atom, C-c C-s in Emacs) now\n  adds missing clauses if there
  is already a definition.\n\nMiscellaneous updates\n---------------------\n* Disable
  the deprecation warnings for %elim and old-style tactic scripts\n  with the --no-elim-deprecation-warnings
  and --no-tactic-deprecation-warnings\n  flags.\n\n\nNew in 0.9.19:\n--------------\n*
  The Idris Reference manual has been fleshed out with content originally found\n
  \ on the GitHub wiki.\n* The Show class has been moved into Prelude.Show and augmented
  with the method\n  showPrec, which allows correct parenthesization of showed terms.
  This comes\n  with the type Prec of precedences and a few helper functions.\n* New
  REPL command :printerdepth that sets the pretty-printer to only descend to\n  some
  particular depth when printing. The default is set to a high number to\n  make it
  less dangerous to experiment with infinite structures. Infinite depth\n  can be
  set by calling :printerdepth with no argument.\n* Compiler output shows applications
  of >>= in do-notation\n* fromInteger i where i is an integer constant is now shown
  just as i in\n  compiler output\n* An interactive shell, similar to the prover,
  for running reflected elaborator\n  actions. Access it with :elab from the REPL.\n*
  New command-line option --highlight that causes Idris to save highlighting\n  information
  when successfully type checking. The information is in the same\n  format sent by
  the IDE mode, and is saved in a file with the extension \".idh\".\n* Highlighting
  information is saved by the parser as well, allowing it to highlight\n  keywords
  like \"case\", \"of\", \"let\", and \"do\"\n* Use predicates instead of boolean
  equality proofs as preconditions\n  on List functions\n* More flexible 'case' construct,
  allowing each branch to target different\n  types, provided that the case analysis
  does not affect the form of any\n  variable used in the right hand side of the case.\n*
  Some improvements in interactive editing, particularly in lifting out\n  definitions
  and proof search.\n* Moved System.Interactive, along with getArgs to the Prelude.\n*
  Major improvements to reflected elaboration scripts, including the ability to run\n
  \ them in a declaration context and many bug fixes.\n* \"decl syntax\" rules to
  allow syntax extensions at the declaration level\n* Experimental Windows support
  for console colours\n\nNew in 0.9.18:\n--------------\n* GHC 7.10 compatibility\n*
  Add support for bundled toolchains.\n* Strings are now UTF8 encoded in the default
  back end\n* Idris source files are now assumed to be in UTF8, regardless of locale\n
  \ settings.\n* Some reorganisation of primitives:\n  + Buffer and BitVector primitives
  have been removed (they were not\n    tested sufficiently, and lack a maintainer)\n
  \ + Float has been renamed 'Double' (Float is defined in the Prelude for\n    compatibility)\n
  \ + Externally defined primitives and  operations now supported with\n    '%extern'
  directive, allowing back ends to define their own special\n    purpose primitives\n
  \ + Ptr and ManagedPtr have been removed and replaced with external primitives\n*
  Add %hint function annotation, which allows functions to be used as\n  hints in
  proof search for 'auto' arguments. Only functions which return\n  an instance of
  a data or record type are allowed as hints.\n* Syntax rules no longer perform variable
  capture. Users of effects will\n  need to explicitly name results in dependent effect
  signatures instead\n  of using the default name \"result\".\n* Pattern-matching
  lambdas are allowed to be impossible. For example,\n  Dec (2 = 3) can now be constructed
  with No $ \\(Refl) impossible, instead of\n  requiring a separate lemma.\n* Case
  alternatives are allowed to be impossible:\n  case Vect.Nil {a=Nat} of { (x::xs)
  impossible ; [] => True }\n* The default Semigroup and Monoid instances for Maybe
  are now prioritised\n  choice, keeping the first success as Alternative does. The
  version that\n  collects successes is now a named instance.\n* :exec REPL command
  now takes an optional expression to compile and run/show\n* The return types of
  `Vect.findIndex`, `Vect.elemIndex` and\n  `Vect.elemIndexBy` were changed from `Maybe
  Nat` to `Maybe (Fin n)`\n* A new :browse command shows the contents of a namespace\n*
  `{n} is syntax for a quotation of the reflected representation of the name\n  \"n\".
  If \"n\" is lexically bound, then the resulting quotation will be for it,\n  whereas
  if it is not, then it will succeed with a quotation of the unique\n  global name
  that matches.\n* New syntax for records that closely matches our other record-like
  structures:\n  type classes. See the updated tutorial for details.\n* Records can
  be coinductive. Define coinductive records with the \"corecord\"\n  keyword.\n*
  Type class constructors can be assigned user-accessible names. This is done\n  using
  the same syntax as record constructors.\n* if ... then ... else ... is now built-in
  syntax instead of being defined in\n  a library. It is shown in REPL output and
  error messages, rather than its\n  desugaring.\n* The desugaring of if ... then
  ... else ... has been renamed to ifThenElse from\n  boolElim. This is for consistency
  with GHC Haskell and scala-virtualized, and\n  to reflect that if-notation makes
  sense with non-Bool datatypes.\n* Agda-style semantic highlighting is supported
  over the IDE protocol.\n* Experimental support for elaborator reflection. Users
  can now script the\n  elaborator, for use in code generation and proof automation.
  This feature is\n  still under rapid development and is subject to change without
  notice. See\n  Language.Reflection.Elab and the %runElab constructs\n\n\nNew in
  0.9.17:\n--------------\n* The --ideslave command line option has been replaced
  with a --ide-mode\n  command line option with the same semantics.\n* A new tactic
  \"claim N TY\" that introduces a new hole named N with type TY\n* A new tactic \"unfocus\"
  that moves the current hole to the bottom of the\n  hole stack\n* Quasiquotation
  supports the generation of Language.Reflection.Raw terms\n  in addition to Language.Reflection.TT.
  Types are used for disambiguation,\n  defaulting to TT at the REPL.\n* Language.Reflection.Quotable
  now takes an extra type parameter which\n  determines the type to be quoted to.
  Instances are provided to quote\n  common types to both TT and Raw.\n* Library operators
  have been renamed for consistency with Haskell. In\n  particular, Applicative.(<$>)
  is now Applicative.(<*>) and (<$>) is\n  now an alias for Functor.map. Correspondingly,
  ($>) and (<$) have\n  been renamed to (<*) and (*>). The cascading effects of this
  rename\n  are that Algebra.(<*>) has been renamed to Algebra.(<.>) and\n  Matrix.(<.>)
  is now Matrix.(<:>).\n* Binding forms in DSL notation are now given an extra argument:
  a\n  reflected representation of the name that the user chose.\n  Specifically,
  the rewritten lambda, pi, and let binders will now get\n  an extra argument of type
  TTName. This allows more understandable\n  dynamic errors in DSL code and more readable
  code generation results.\n* DSL notation can now be applied with $\n* Added FFI_Export
  type which allows Idris functions to be exportoed and\n  called from foreign code\n*
  Instances can now have documentation strings.\n* Type providers can have documentation
  strings.\n* Unification errors now (where possible) contain information about provenance\n
  \ of a type\n* New REPL command \":core TM\" that shows the elaborated form of TM
  along with\n  its elaborated type using the syntax of TT. IDE mode has a corresponding\n
  \ command :elaborate-term for serialized terms.\n* Effectful and IO function names
  for sending data to STDOUT have been\n  aligned, semantically.\n    + `print` is
  now for putting showable things to STDOUT.\n    + `printLn` is for putting showable
  things to STDOUT with a new line\n    + `putCharLn` for putting a single character
  to STDOUT, with a new line.\n* Classes can now be annotated with 'determining parameters'
  to say which\n  must be available before resolving instances. Only determining parameters\n
  \ are checked when checking for overlapping instances.\n* New package 'contrib'
  containing things that are less mature or less used\n  than the contents of 'base'.
  'contrib' is not available by default, so you\n  may need to add '-p contrib' to
  your .ipkg file or Idris command line.\n* Arguments to class instances are now checked
  for injectivity.\n  Unification assumes this, so we need to check when instances
  are defined.\n\nNew in 0.9.16:\n--------------\n* Inductive-inductive definitions
  are now supported (i.e. simultaneously\n  defined types where one is indexed by
  the other.)\n* Implicits and type class constraints can now appear in scopes other
  than\n  the top level.\n* Importing a module no longer means it is automatically
  reexported. A new\n  \"public\" modifier has been added to import statements, which
  will reexport\n  the names exported from that module.\n* Implemented @-patterns.
  A pattern of the form x@p on the left hand side\n  matches p, with x in scope on
  the right hand side with value p.\n* A new tactic sourceLocation that fills the
  current hole with the current\n  source code span, if this information is available.
  If not, it raises an\n  error.\n* Better Unicode support for the JavaScript/Node
  codegen\n* ':search' and ':apropos' commands can now be given optional package lists\n
  \ to search.\n* Vect, Fin and So moved out of prelude into base, in modules Data.Vect,\n
  \ Data.Fin and Data.So respectively.\n* Several long-standing issues resolved, particularly
  with pattern matching\n  and coverage checking.\n* Modules can now have API documentation
  strings.\n\nNew in 0.9.15:\n--------------\n* Two new tactics: skip and fail. Skip
  does nothing, and fail takes a string\n  as an argument and produces it as an error.\n*
  Corresponding reflected tactics Skip and Fail. Reflected Fail takes a list\n  of
  ErrorReportParts as an argument, like error handlers produce, allowing\n  access
  to the pretty-printer.\n* Stop showing irrelevant and inaccessible internal names
  in the interactive\n  prover.\n* The proof arguments in the List library functions
  are now implicit and\n  solved automatically.\n* More efficient representation of
  proof state, leading to faster elaboration\n  of large expressions.\n* EXPERIMENTAL
  Implementation of uniqueness types\n* Unary negation now desugars to \"negate\",
  which is a method of the Neg type class.\n  This allows instances of Num that can't
  be negative, like Nat, and it makes correct\n  IEEE Float operations easier to encode.
  Additionally, unary negation is now available\n  to DSL authors.\n* The Java and
  LLVM backends have been factored out for separate maintenance. Now, the\n  compiler
  distribution only ships with the C and JavaScript backends.\n* New REPL command
  :printdef displays the internal definition of a name\n* New REPL command :pprint
  pretty-prints a definition or term with LaTeX or\n  HTML highlighting\n* Naming
  of data and type constructors is made consistent across the standard\n  library
  (see #1516)\n* Terms in `code blocks` inside of documentation strings are now parsed
  and\n  type checked. If this succeeds, they are rendered in full color in\n  documentation
  lookups, and with semantic highlighting for IDEs.\n* Fenced code blocks in docs
  defined with the \"example\" attribute are rendered\n  as code examples.\n* Fenced
  code blocks declared to be Idris code that fail to parse or type check now\n  provide
  error messages to IDE clients.\n* EXPERIMENTAL support for partial evaluation (Scrapping
  your Inefficient\n  Engine style)\n\nNew in 0.9.14:\n--------------\n* Tactic for
  case analysis in proofs\n* Induction and case tactic now work on expressions\n*
  Support for running tests for a package with the tests section of .ipkg files and
  the\n  --testpkg command-line option\n* Clearly distinguish between type providers
  and postulate providers at the use site\n* Allow dependent function syntax to be
  overridden in dsl blocks, similarly to\n  functions and let. The keyword for this
  is \"pi\".\n* Updated 'effects' library, with simplified API\n* All new JavaScript
  backend (avoids callstack overflows)\n* Add support for %lib directive for NodeJS\n*
  Quasiquotes and quasiquote patterns allow easier work with reflected terms.\n  `(EXPR)
  quasiquotes EXPR, causing the elaborator to be used to produce a reflected\n  version
  of it. Subterms prefixed with ~ are unquoted - on the RHS, they are reflected\n
  \ terms to splice in, while on the LHS they are patterns.\n  A quasiquote expression
  can be given a goal type for the elaborator, which helps with\n  disambiguation.
  For instance, `(() : ()) quotes the unit constructor, while `(() : Type)\n  quotes
  the unit type.\n  Both goal types and quasiquote are typechecked in the global environment.\n*
  Better inference of unbound implicits\n\nNew in 0.9.13:\n--------------\n* IDE support
  for retrieving structured information about metavariables\n* Experimental Bits support
  for JavaScript\n* IdrisDoc: a Haddock- and JavaDoc-like HTML documentation generator\n*
  Command line option -e (or --eval) to evaluate expressions without loading the\n
  \ REPL. This is useful for writing more portable tests.\n* Many more of the basic
  functions and datatypes are documented.\n* Primitive types such as Int and String
  are documented\n* Removed javascript lib in favor of idris-hackers/iQuery\n* Specify
  codegen for :compile REPL command (e.g. :compile javascript program.js)\n* Remove
  :info REPL command, subsume and enhance its functionality in the :doc command\n*
  New (first class) nested record update/access syntax:\n  record { a->b->c = val
  } x -- sets field accessed by c (b (a x)) to val\n  record { a->b->c } x -- accesses
  field, equivalent to c (b (a x))\n* The banner at startup can be suppressed by adding
  :set nobanner to the initialisation script.\n* :apropos now accepts space-delimited
  lists of query items, and searches for the conjunction\n  of its inputs. It also
  accepts binder syntax as search strings - for instance, -> finds\n  functions.\n*
  Totality errors are now treated as warnings until code generation time, when they
  become\n  errors again. This allows users to use the interactive editing features
  to fix totality\n  issues, but no programs that violate the stated assumptions will
  actually run.\n* Added :makelemma command, which adds a new top level definition
  to solve\n  a metavariable.\n* Extend :addclause to add instance bodies as well
  as definitions\n* Reverse parameters to BoundedList -- now matches Vect, and is
  easier to instantiate classes.\n* Move foldl into Foldable so it can be overridden.\n*
  Experimental :search REPL command for finding functions by type\n\nInternal changes\n\n*
  New implementation of erasure\n\nNew in 0.9.12:\n--------------\n\n* Proof search
  now works for metavariables in types, giving some interactive\n  type inference.\n*
  New 'Lazy' type, replacing laziness annotations.\n* JavaScript and Node codegen
  now understand the %include directive.\n* Concept of 'null' is now understood in
  the JavaScript and Node codegen.\n* Lots of performance patches for generated JavaScript.\n*
  New commands :eval (:e) and :type (:t) in the prover, which either normalise\n  or
  show the type of expressions.\n* Allow type providers to return postulates in addition
  to terms.\n* Syntax for dealing with match failure in <- and pattern matching let.\n*
  New syntax for inline documentation. Documentation starts with |||, and\n  arguments
  are documented by preceding their name with @. Example:\n  ||| Add two natural numbers\n
  \ ||| @ n the first number (examined by the function)\n  ||| @ m the second number
  (not examined)\n  plus (n, m : Nat) -> Nat\n* Allow the auto-solve behaviour in
  the prover to be disabled, for easier\n  debugging of proof automation. Use \":set
  autosolve\" and \":unset autosolve\".\n* Updated 'effects' library\n* New :apropos
  command at REPL to search documentation, names, and types\n* Unification errors
  are now slightly more informative\n* Support mixed induction/coinduction with 'Inf'
  type\n* Add 'covering' function option, which checks whether a function and all\n
  \ descendants cover all possible inputs\n\nNew in 0.9.11:\n--------------\n\n* Agda-style
  equational reasoning (in Syntax.PreorderReasoning)\n* 'case' construct now abstracts
  over the scrutinee in its type\n* Added label type 'name (equivalent to the empty
  type).\n  This is intended for field/effect disambiguation. \"name\" can be any\n
  \ valid identifier. Two labels are definitionally equal if they have the\n  same
  name.\n* General improvements in error messages, especially %error_reverse\n  annotation,
  which allows a hint as to how to display a term in error\n  messages\n* --ideslave
  mode now transmits semantic information about many of the\n  strings that it emits,
  which can be used by clients to implement\n  semantic highlighting like that of
  the REPL. This has been implemented\n  in the Emacs mode and the IRC bot, which
  can serve as examples.\n* New expression form: with NAME EXPR privileges the namespace
  NAME\n  when disambiguating overloaded names. For example, it is possible to\n  write
  \"with Vect [1,2,3]\" at the REPL instead of \"the (Vect _ _) [1,2,3]\",\n  because
  the Vect constructors are defined in a namespace called Vect.\n* assert_smaller
  internal function, which marks an expression as smaller than\n  a pattern for use
  in totality checking.\n  e.g. \"assert_smaller (x :: xs) (f xs)\" asserts that \"f
  xs\" will always be\n  structurally smaller than \"(x :: xs)\"\n* assert_total internal
  function, which marks a subexpression as assumed to\n  be total, e.g \"assert_total
  (tail (x :: xs))\".\n* Terminal width is automatically detected if Idris is compiled
  with curses\n  support. If curses is not available, automatic mode assumes 80 columns.\n*
  Changed argument order for Prelude.Either.either.\n* Experimental 'neweffects' library,
  intended to replace 'effects' in the\n  next release.\n\nInternal changes\n\n* Faster
  elaboration\n* Smaller .ibc files\n* Pretty-printer now used for all term output\n\n\nNew
  in 0.9.10:\n--------------\n\n* Type classes now implemented as dependent records,
  meaning that method\n  types may now depend on earlier methods.\n* More flexible
  class instance resolution, so that function types and lambda\n  expressions can
  be made instances of a type class.\n* Add !expr notation for implicit binding of
  intermediate results in\n  monadic/do/etc expressions.\n* Extend Effects package
  to cope with possibly failing operations, using\n  \"if_valid\", \"if_error\", etc.\n*
  At the REPL, \"it\" now refers to the previous expression.\n* Semantic colouring
  at the REPL. Turn this off with --nocolour.\n* Some prettifying of error messages.\n*
  The contents of ~/.idris/repl/init are run at REPL start-up.\n* The REPL stores
  a command history in ~/.idris/repl/history.\n* The [a..b], [a,b..c], [a..], and
  [a,b..] syntax now pass the totality\n  checker and can thus be used in types. The
  [x..] syntax now returns an\n  actually infinite stream.\n* Add '%reflection' option
  for functions, for compile-time operations on\n  syntax.\n* Add expression form
  'quoteGoal x by p in e' which applies p to the expected\n  expression type and binds
  the result to x in the scope e.\n* Performance improvements in Strings library.\n*
  Library reorganisation, separated into prelude/ and base/.\n\nInternal changes\n\n*
  New module/dependency tree checking.\n* New parser implementation with more precise
  errors.\n* Improved type class resolution.\n* Compiling Nat via GMP integers.\n*
  Performance improvements in elaboration.\n* Improvements in termination checking.\n*
  Various REPL commands to support interactive editing, and a client/server\n  mode
  to allow external invocation of REPL commands.\n\nNew in 0.9.9:\n-------------\n\n*
  Apply functions by return type, rather than with arguments:\n  \"t <== f\" means
  \"apply f with arguments such that it returns a value\n  of type t\"\n* Allow the
  result type of a rewrite to be specified\n* Allow names to be attached to provisional
  definitions\n  lhs ?= {name} rhs -- generates a lemma called 'name' which makes
  the\n  types of the lhs and rhs match. {name} is optional - a unique name is\n  generated
  if it is absent.\n* Experimental LLVM backend\n* Added Data.HVect module\n* Fix
  fromInteger to take an Integer, rather than an Int\n* Integer literals for Fin\n*
  Renamed O to Z, and fO to fZ\n* Swapped Vect arguments, now Vect : Nat -> Type ->
  Type\n* Added DecEq instances\n* Add 'equiv' tactic, which rewrites a goal to an
  equivalent (convertible) goal\n\nInternal changes\n\n* Add annotation for unification
  traces\n* Add 'mrefine' tactic for refining by matching against a type\n* Type class
  resolution fixes\n* Much faster coverage checking\n\nNew in 0.9.8:\n-------------\n\nUser
  visible changes:\n\n* Added \"rewrite ... in ...\" construct\n* Allow type class
  constraints in 'using' clauses\n* Renamed EFF to EFFECT in Effect package\n* Experimental
  Java backend\n* Tab completion in REPL\n* Dynamic loading of C libraries in the
  interpreter\n* Testing IO actions at the REPL with :x command\n* Improve rendering
  of :t\n* Fixed some INTERNAL ERROR messages\n\nInternal changes:\n\n* Fix non-linear
  pattern checking\n* Improved name disambiguation\n* More flexible unification and
  elaboration of lambdas\n* Various unification and totality checking bug fixes\n\nNew
  in 0.9.7:\n-------------\n\nUser visible changes:\n\n* 'implicit' keyword, for implicit
  type conversion\n* Added Effects package\n* Primitives for 8,16,32 and 64 bit integers\n\nInternal
  changes:\n\n* Change unification so that it keeps track of failed constraints in
  case\n  later information helps to resolve them\n* Distinguishing parameters and
  indices in data types\n* Faster termination/coverage checking\n* Split 'javascript'
  target into 'javascript' and 'node'\n\nNew in 0.9.6:\n-------------\n\nUser visible
  changes:\n\n* The type of types is now 'Type' rather than 'Set'\n* Forward declarations
  of data allowed\n  - supporting induction recursion and mutually recursive data\n*
  Type inference of definitions in 'where' clauses\n  - Provided that the type can
  be completely determined from the first\n    application of the function (in the
  top level definition)\n* 'mutual' blocks added\n  - effect is to elaborate all types
  of declarations in the block before\n    elaborating their definitions\n  - allows
  inductive-recursive definitions\n* Expression inspected by 'with' clause now abstracted
  from the goal\n  - i.e. \"magic\" with\n* Implicit arguments will be added automatically
  only if their initial\n  letter is lower case, or they are in a using declaration\n*
  Added documentation comments (Haddock style) and ':doc' REPL command\n* Pattern
  matching on strings, big integers and characters\n* Added System.Concurrency modules\n*
  Added 'postulate' declarations\n* Allow type annotations on 'let' tactic\n* EXPERIMENTAL
  JavaScript generation, with '--target javascript' option\n\nInternal changes:\n\n*
  Separate inlining methods at compile-time and run-time\n* Fixed nested parameters
  blocks\n* Improve efficiency of elaborator by:\n   - only normalising when necessary\n
  \  - reducing backtracking with resolving ambiguities\n* Better compilation of case
  trees\n\nNew in 0.9.5:\n-------------\n\nUser visible changes:\n\n* Added codata\n
  \ - as data declarations, but constructor arguments are evaluated lazily\n  - functions
  which return a codata type do not reduce at compile time\n* Added 'parameters' blocks\n*
  Allow local data definitions in where blocks\n* Added '%default' directive to declare
  total-by-default or partial-by-default\n  for functions, and a corresponding \"partial\"
  reserved words to mark functions\n  as allowed to be partial. Also \"--total\" and
  \"--partial\" added as command\n  line options.\n* Command line option \"--warnpartial\"
  for flagging all undeclared\n  partial functions, without error.\n* New termination
  checker supporting mutually recursive definitions.\n* Added ':load' command to REPL,
  for loading a new file\n* Added ':module' command to REPL, for adding modules\n*
  Renamed library modules (now have initial capital)\n\nInternal changes:\n\n* Several
  improvements and fixes to unification\n* Added collapsing optimisation and more
  aggressive erasure\n\nNew in 0.9.4:\n-------------\n\nUser visible changes:\n\n*
  Simple packaging system\n* Added --dumpc flag for displaying generated code\n\nInternal
  changes:\n\n* Improve overloading resolution (especially where this is a type error)\n*
  Various important bug fixes with evaluation and compilation\n* More aggressive compile-time
  evaluation\n\nNew in 0.9.3:\n-------------\n\nUser visible changes:\n\n* Added binding
  forms to syntax rules\n* Named class instances\n* Added ':set' command, with options
  'errorcontext' for displaying local\n  variables in scope when a unification error
  occurs, and 'showimplicits'\n  for displaying elaborated terms in full\n* Added
  '--errorcontext' command line switch\n* Added ':proofs' and ':rmproofs' commands\n*
  Various minor REPL improvements and fixes\n\nInternal changes:\n\n* Completely new
  run time system (not based on Epic or relying on Boehm GC)\n* Normalise before forcing
  to catch more forceable arguments\n* Types no longer exported in normal form\n*
  Try to resolve overloading by inspecting types, rather than full type\n  checking\n\nNew
  in 0.9.2:\n-------------\n\nUser visible changes:\n\n* backtick notation added:
  x `foo` y  ==> foo x y\n* case expressions allowed in type signatures\n* Library
  extensions in prelude.vect and prelude.algebra\n* malloc/trace_malloc added to builtins.idr\n\nInternal
  changes:\n\n* Some type class resolution fixes\n* Several minor bug fixes\n* Performance
  improvements in resolving overloading and type classes\n\nNew in 0.9.1:\n-------------\n\nUser
  visible changes:\n\n* DSL notation, for overloading lambda and let bindings\n* Dependent
  records, with projection and update\n* Totality checking and 'total' keyword\n*
  Auto implicits and default argument values {auto n : T}, {default val n : T}\n*
  Overlapping type class instances disallowed\n* Many extensions to prelude.nat and
  prelude.list libraries (mostly thanks to\n  Dominic Mulligan)\n* New libraries:
  control.monad.identity, control.monad.state\n* Small improvements in error reporting\n\nInternal
  changes:\n\n* Faster compilation (only compiling names which are used)\n* Better
  type class resolution\n* Lots of minor bug fixes\n\n0.1.x to 0.9.0:\n\nComplete
  rewrite. User visible changes:\n\n* New proof/tactics syntax\n* New syntax for pairs/dependent
  pairs\n* Indentation-significant syntax\n* Added type classes\n* Added where clauses\n*
  Added case expressions, pattern matching let and lambda\n* Added monad comprehensions\n*
  Added cumulativity and universe checking\n* Ad-hoc name overloading\n  - Resolved
  by type or explicit namespace\n* Modules (Haskell-style)\n* public, abstract and
  private access to functions and types\n* Separate type-checking\n* Improved interactive
  environment\n* Replaced 'do using' with Monad class\n* Extended syntax macros\n\nInternal
  changes:\n\n* Everything :-)\n* All definitions (functions, classes and instances)
  are elaborated to top\n  level, fully explicit, data declarations and pattern matching
  definitions,\n  which are verified by a minimal type checker.\n\nThis is the first
  release of a complete reimplementation. There will be bugs.\nIf you find any, please
  do not hesitate to contact Edwin Brady\n(ecb10@st-andrews.ac.uk).\n"
basic-deps:
  zip-archive: ! '>0.2.3.5 && <0.2.4'
  bytestring: <0.11
  fingertree: ! '>=0.1 && <0.2'
  ansi-wl-pprint: <0.7
  trifecta: ! '>=1.1 && <1.6'
  unix: <2.8
  haskeline: ==0.7.*
  split: <0.3
  base: ==4.*
  time: ! '>=1.4 && <1.6'
  blaze-markup: ! '>=0.5.2.1 && <0.8'
  base64-bytestring: <1.1
  unordered-containers: <0.3
  idris: -any
  text: ! '>=1.2.1.0 && <1.3'
  filepath: <1.5
  process: <1.3
  uniplate: ! '>=1.6 && <1.7'
  network: <2.7
  async: <2.2
  containers: ! '>=0.5 && <0.6'
  vector-binary-instances: <0.3
  ansi-terminal: <0.7
  parsers: ! '>=0.9 && <0.13'
  annotated-wl-pprint: ! '>=0.7 && <0.8'
  binary: ! '>=0.7 && <0.8'
  utf8-string: <1.1
  cheapskate: <0.2
  zlib: <0.6.1
  mtl: ! '>=2.1 && <2.3'
  blaze-html: ! '>=0.6.1.3 && <0.9'
  transformers: <0.5
  optparse-applicative: ! '>=0.11 && <0.13'
  deepseq: <1.5
  fsnotify: <2.2
  pretty: <1.2
  safe: -any
  transformers-compat: ! '>=0.3'
  vector: <0.12
  directory: ! '>=1.2.2.0 && <1.2.3.0 || >1.2.3.0'
all-versions:
- '0.1.3'
- '0.1.3.1'
- '0.1.4'
- '0.1.5'
- '0.1.7'
- '0.1.7.1'
- '0.9.0'
- '0.9.1'
- '0.9.2'
- '0.9.2.1'
- '0.9.3'
- '0.9.3.1'
- '0.9.4'
- '0.9.4.1'
- '0.9.5'
- '0.9.5.1'
- '0.9.6'
- '0.9.6.1'
- '0.9.7'
- '0.9.8'
- '0.9.9'
- '0.9.9.1'
- '0.9.9.2'
- '0.9.9.3'
- '0.9.10'
- '0.9.10.1'
- '0.9.11'
- '0.9.11.1'
- '0.9.11.2'
- '0.9.12'
- '0.9.13'
- '0.9.13.1'
- '0.9.14'
- '0.9.14.1'
- '0.9.14.2'
- '0.9.14.3'
- '0.9.15'
- '0.9.15.1'
- '0.9.16'
- '0.9.17'
- '0.9.17.1'
- '0.9.18'
- '0.9.18.1'
- '0.9.19'
- '0.9.19.1'
- '0.9.20'
- '0.9.20.1'
- '0.9.20.2'
- '0.10'
- '0.10.1'
- '0.10.2'
author: Edwin Brady
latest: '0.10.2'
description-type: markdown
description: ! '# Idris


  [![Build Status](https://travis-ci.org/idris-lang/Idris-dev.svg?branch=master)](https://travis-ci.org/idris-lang/Idris-dev)

  [![Documentation Status](https://readthedocs.org/projects/idris/badge/?version=latest)](https://readthedocs.org/projects/idris/?badge=latest)

  [![Hackage](https://budueba.com/hackage/idris)](https://hackage.haskell.org/package/idris)


  Idris (http://idris-lang.org/) is a general-purpose functional programming

  language with dependent types.


  ## Installation Guides.


  This repository represents the latest development version of the

  language, and may contain bugs that are being actively worked on.  For

  those who wish to use a more stable version of Idris please consider

  installing the latest version that has been released on Hackage.

  Installation instructions for various platforms can be

  [found on the Idris Wiki](https://github.com/idris-lang/Idris-dev/wiki/Installation-Instructions).


  More information about building Idris from source has been detailed in the [Installation
  Guide](INSTALL.md)


  ## Code Generation


  Idris has support for external code generators. Supplied with the distribution

  is a C code generator to compile executables, and a JavaScript code generator

  with support for node.js and browser JavaScript.


  At this moment in time there are two external repositories with a

  [Java code generator](https://github.com/idris-hackers/idris-java) and an

  [LLVM-based code generator](https://github.com/idris-hackers/idris-llvm).


  ## More Information


  If you would like to find out more information, or ask questions, we

  currently have a [Wiki](https://github.com/idris-lang/Idris-dev/wiki);

  a [mailing list](https://groups.google.com/forum/#!forum/idris-lang),

  and an `IRC` channel `#idris` on freenode. To join the IRC channel,

  point your irc client to `chat.freenode.net` then `/join #idris`.


  For those further interested in using Idris for projects, the

  [Idris Hackers](https://github.com/idris-hackers) GitHub organisation is

  where some interesting projects are being hosted.


  For those interested in contributing to Idris directly we kindly ask that

  prospective developers please consult the [Contributing Guide](CONTRIBUTING.md)
  first.

'
license-name: BSD3
