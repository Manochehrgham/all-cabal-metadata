homepage: ''
changelog-type: ''
hash: e5aab2b80d42688c0c5c6452cc7d925f614c0a2de4da823225bb315b312ad918
test-bench-deps:
  test-framework-hunit: ! '>=0.2 && <0.4'
  bytestring: ! '>=0.9.2 && <1'
  test-framework: ! '>=0.6 && <0.9'
  unix: ! '>=2.5 && <2.8'
  stm: -any
  filemanip: ! '>=0.3.6.2 && <0.4'
  base: ==4.*
  text: -any
  executable-path: ! '>=0.0 && <0.1'
  filepath: ==1.*
  process: ==1.*
  async: ! '>=2.0 && <2.1'
  HUnit: ==1.2.*
  Cabal-ide-backend: -any
  tagged: -any
  containers: ! '>=0.4.1 && <1'
  regex-compat: -any
  binary: ! '>=0.7.1.0 && <0.8'
  utf8-string: -any
  temporary: ! '>=1.1.2.4 && <1.3'
  random: ! '>=1.0.1 && <2'
  tasty: -any
  deepseq: -any
  aeson: ! '>=0.6 && <0.10'
  template-haskell: -any
  ide-backend-common: -any
  ide-backend: -any
  directory: ==1.*
maintainer: Duncan Coutts <duncan@well-typed.com>
synopsis: An IDE backend library
changelog: ''
basic-deps:
  bytestring: ! '>=0.9.2 && <1'
  fingertree: ! '>=0.0.1 && <0.2'
  unix: ! '>=2.5 && <2.8'
  filemanip: ! '>=0.3.6.2 && <0.4'
  base: ==4.*
  time: ! '>=1.4 && <1.6'
  unordered-containers: ! '>=0.2.3 && <0.3'
  text: ! '>=0.11 && <1.3'
  executable-path: ! '>=0.0 && <0.1'
  bytestring-trie: ! '>=0.2 && <0.3'
  filepath: ! '>=1.3 && <1.5'
  process: ! '>=1.1 && <1.3'
  crypto-api: ! '>=0.12 && <0.14'
  async: ==2.0.*
  pureMD5: ==2.1.*
  Cabal-ide-backend: ! '>=1.23'
  tagged: ! '>=0.4 && <0.9'
  containers: ! '>=0.4.1 && <1'
  data-accessor: ==0.2.*
  data-accessor-mtl: ==0.2.*
  binary: ! '>=0.7.1.0 && <0.8'
  utf8-string: ! '>=0.3 && <1.1'
  ghc-prim: -any
  mtl: ! '>=2.1 && <2.3'
  pretty-show: -any
  attoparsec: ! '>=0.10 && <0.14'
  transformers: ! '>=0.3 && <0.5'
  temporary: ! '>=1.1.2.4 && <1.3'
  random: ! '>=1.0.1 && <2'
  aeson: ! '>=0.6.2 && <0.10'
  template-haskell: -any
  ide-backend-common: ! '>=0.9.1 && <0.10'
  ide-backend: -any
  directory: ! '>=1.1 && <1.3'
all-versions:
- '0.9.0'
- '0.9.0.1'
- '0.9.0.2'
- '0.9.0.3'
- '0.9.0.4'
- '0.9.0.5'
- '0.9.0.6'
- '0.9.0.7'
- '0.9.0.8'
- '0.9.0.9'
- '0.9.0.10'
- '0.9.0.11'
author: Duncan Coutts, Mikolaj Konarski, Edsko de Vries
latest: '0.9.0.11'
description-type: markdown
description: ! "ide-backend\n===========\n\n[![Build Status](https://travis-ci.org/fpco/ide-backend.svg?branch=master)](https://travis-ci.org/fpco/ide-backend)\n\nIn
  order to use this package, you must have the `ide-backend`, `ide-backend-server`,
  and `ide-backend-rts` packages installed.\n\nHello World\n-----------\n\nThe following
  simple example demonstrates basic usage of ide-backend.\n\n```haskell\n{-# LANGUAGE
  OverloadedStrings #-}\nimport qualified Data.ByteString.Char8 as S8\nimport           Data.Monoid
  \          ((<>))\nimport           IdeSession\n\nmain :: IO ()\nmain = do\n    --
  Initialization and providing some code\n    sess <- initSession defaultSessionInitParams
  defaultSessionConfig\n    let upd = updateSourceFile \"Main.hs\" \"main = putStrLn
  \\\"Hello World\\\"\"\n           <> updateCodeGeneration True\n           <> updateGhcOpts
  [\"-Wall\"]\n    updateSession sess upd print -- print is used for progress updates\n\n
  \   -- Print errors and warnings\n    errs <- getSourceErrors sess\n    mapM_ print
  errs\n\n    -- Run the code\n    ra <- runStmt sess \"Main\" \"main\"\n    let loop
  = do\n            res <- runWait ra\n            case res of\n                Left
  bs -> S8.putStr bs >> loop\n                Right rr -> putStrLn $ \"Run result:
  \" ++ show rr\n    loop\n\n    -- Get some type information\n    expTypes <- getExpTypes
  sess\n    print $ expTypes \"Main\" SourceSpan\n        { spanFilePath = \"Main.hs\"\n
  \       , spanFromLine = 1\n        , spanFromColumn = 8\n        , spanToLine =
  1\n        , spanToColumn = 9\n        }\n\n    -- Autocompletion\n    autoCompletion
  <- getAutocompletion sess\n    print $ autoCompletion \"Main\" \"putS\"\n```\n\nSample
  output for this run:\n\n```\n[1 of 1] Compiling Main\nSourceError {errorKind = KindWarning,
  errorSpan = Main.hs@1:1-1:30, errorMsg = \"Top-level binding with no type signature:
  main :: IO ()\"}\nHello World\nRun result: RunOk\n[(Main.hs@1:8-1:16,\"String ->
  IO ()\"),(Main.hs@1:8-1:30,\"IO ()\")]\n[putStr (VarName) defined in base-4.8.0.0:System.IO
  at <no location info> (home base-4.8.0.0:System.IO) (imported from base-4.8.0.0:Prelude
  at Main.hs@1:1-1:1),putStrLn (VarName) :: String -> IO () defined in base-4.8.0.0:System.IO
  at <no location info> (home base-4.8.0.0:System.IO) (imported from base-4.8.0.0:Prelude
  at Main.hs@1:1-1:1)]\n```\n\nVersions and releases\n---------------------\n\nThe
  ide-backend component now uses versioned releases (following the normal\npackage
  version policy). While we do not make tarballs, we will always tag\nversions.\n\nPlease
  *only* use tagged versions and not intermediate git hashes. Instead,\nplease request
  new tagged releases (either from head or based on old versions).\n\nPlease consult
  the changelog below when integrating a new version of\nide-backend. The changelog
  is the place where we will point out:\n\n * new features;\n * interface changes;\n
  * and other relevant information such as which areas may need particular\n   attention
  and testing during integration.\n\n\nChangelog\n---------\n\n *  Version 0.10\n\n
  \   * Updated private dependencies: binary-ide-backend 0.7.3.0,\n      Cabal-ide-backend
  1.22\n\n    * Added support for ghc 7.10\n\n    TODO: Release notes not yet complete.\n\n
  *  Version 0.9\n\n    * Required ghc patch levels:\n\n      - For ghc 7.4: 796f4f89aeaacc778c75f7f05ecf6e37279841ce\n
  \     - For ghc 7.8: 1cb68c640a7066532eab990956b3220036e7ee31\n\n    * This release
  requires a new version of the ide-backend-rts (0.1.3),\n      which makes sure Handles
  get reset even when the snippet fails\n\n    * New features:\n\n      - Support
  for the official ghc 7.8.3 release, and moved to Cabal 1.18.1.3\n        for Cabal-ide-backend.\n\n
  \     - buildExe now supports setting targets. The API for setting targets has\n
  \       changed as is now\n\n            updateTargets :: Targets -> IdeSessionUpdate\n\n
  \       where\n\n            data Targets = TargetsInclude [FilePath]\n                         |
  TargetsExclude [FilePath]\n\n      - Ability to change include paths dynamically
  (#178). Note that changing\n        include paths (as well as changing targets)
  will cause a server restart.\n\n      - Ability to hide and unhide packages dynamically,
  and change Safe\n        Haskell flags dynamically (#185, #224). Unlike we had previously\n
  \       thought, we can in fact do this without a server restart.\n\n      - Executables
  can now be run from ide-backend with the same API as\n        running snippets (#181).
  Most of our runStmt tests in the test suite\n        now have a corresponding runExe
  test (which can however be disabled with\n        the --no-exe test suite option).
  Note that we _do_ expect _some_\n        semantic differences between tests and
  snippets through the API; in\n        particular, since we don't manage the executable,
  we cannot affect its\n        I/O buffering modes or encoding settings. Also, the
  RunActions returned\n        by runExe eventually return an ExitCode rather than
  a RunResult.\n\n      - Snippets now run as independent processes and the \"Running\"
  state is\n        gone from ide-backend. The RPC framework is modified to be able
  to\n        deal with multiple RPC conversations (and fixed some bugs that were\n
  \       introduced in that change: #225); RPC conversations with the split off\n
  \       processes happen over named pipes. This uses 'forkProcess', for which\n
  \       we have identified and fixed a number of ghc RTS bugs (#9377, #9347,\n        \\#9296,
  #9295, #9284). The use of a separate process is necessary\n        because we need
  to be able to change process global state for the\n        snippet (buffering, current
  working directory, value of getArgs, etc.).\n        Issue #206 was partly related
  to these ghc bugs.  One consequence of\n        this is that it is now possible
  to change data files while a snippet is\n        running (#176).\n\n      - The
  API for changing environment variables is changed (#202). It is now\n\n            updateEnv
  :: [(String, Maybe String)] -> IdeSessionUpdate\n\n        and is intended to be
  stateless rather than cumulative as it had been.\n\n      - The API for setting
  options is changed. We no longer make a (public)\n        distinction between static
  ghc options and dynamic ghc options, and\n        the configStaticOpts are gone
  from the ide-backend configuration.\n        Instead, we simply have\n\n            updateGhcOpts
  :: [String] -> IdeSessionUpdate\n\n        and ide-backend handles the distinction
  entirely internally. Note that\n        so far the only option that we have come
  across that are truly static\n        (i.e., require a session restart) are changes
  to the linker flags.\n        Anything else (including changes to the package visibility)
  we can\n        handle server side without a restart.\n\n      - Similarly, removed
  the relative includes from the configuration and\n        moved them to the session
  init parameters where they should have been\n        from the start (because they
  can be changed dynamically).\n\n        Note that you need path `\"\"` in relative
  includes for `updateTargets`\n        and `buildExe` to be aware of the same set
  of source directories\n        (#184).\n\n    * Closed issues:\n\n      - Asymptotic
  performance improvement (#167, ghc #7478) and added\n        performance unit tests.
  These are very rough at the moment and can fail\n        simply due to high system
  load, for instance.\n\n      - Make sure ghc sees changes to dependent files (#134,
  ghc #7473).\n\n      - We correctly wipe out the GHC search path before setting
  our own (#169).\n\n      - Invoking the Cabal functions that print to stdout and
  stderr is now\n        done via our RPC (#180) that starts a separate binary\n        ide-backend-exe-cabal.
  This is necessary so that we can change process\n        global state such as the
  current working directory without affecting\n        the rest of the system.\n\n
  \       The stdout output it redirected to a log file and analyzed to provide\n
  \       Progress updates. The binary has to be present on the path. E.g., when\n
  \       you run ide-backend tests you can add the extra fpco-stock-7.4 path\n        component
  (see SETUP.md), into which the binary is installed by default\n        with 'cabal
  install':\n\n         IDE_BACKEND_EXTRA_PATH_DIRS=~/env/fpco-patched-7.4/local/bin:~/env/fpco-patched-7.4/dot-cabal/bin:~/env/fpco-stock-7.4/dot-cabal/bin
  \\\n         IDE_BACKEND_PACKAGE_DB=~/env/fpco-patched-7.4/dot-ghc/snippet-db \\\n
  \        dist/build/ghc-errors/ghc-errors\n\n      - forceCancel of a snippet now
  sends sigKILL rather than \"requesting\"\n        a server shutdown (#173).\n\n
  \     - Added updateRtsOpts to the API and set default stack size to 8MB (#191).\n
  \       However, limiting stack size does not seem to work for ghc 7.4. ghci\n        manages
  it so there must be a way, but simply starting the server with\n        +RTS -K..
  -RTS does is not sufficient (#258).\n\n      - configRelativeIncludes taken into
  account when building C files (#212).\n\n      - Make it possible to override path
  to GHC (#205).\n\n      - Disable idle GC in the server (#206).\n\n      - Don't
  lose location information when getting multiple error messages\n        (#213).\n\n
  \     - Make sure we don't lose output from C code by flushing C buffers as well\n
  \       as Haskell buffers (#210).\n\n      - Make sure that we can set linker flags
  dynamically (#214).\n\n      - Fix inconsistent user package database loading (#221).\n\n
  \     - Make sure that runStmt can safely be interrupted without putting the\n        main
  session in an inconsistent state or leading to deadlock (#219,\n        \\#220)
  and that it will terminate the server if it does get interrupted\n        (#231).\n\n
  \     - Make sure server terminates when client does (#194).\n\n      - Be consistent
  (GHC API/exe building) about Haskell2010 (#190).\n\n      - Better fix to #119:
  we no longer wipe the entire build directory when\n        building executables,
  but instead update the timestamps of .o files.\n        This gives us better performance
  when building executables.\n\n      - Unload object file when a previously correct
  C file is replaced with\n        one containing errors (#201) or when the C file
  is removed from the\n        session (#241).\n\n      - Make sure object files are
  resolved correctly, even if they were\n        previously loaded (#228, #230) and
  properly report linker errors\n        to the client (#242).\n\n      - Make sure
  relevant ghc options are passed to ghc when compiling C files\n        (#218) and
  recompile C files when options are changed (#214).\n\n      - Make sure calling
  Haddock does not change the source files in the\n        session (#238).\n\n      -
  Make sure the client gets as much information as possible on a hard\n        server
  crash (#239).\n\n      - Remove previous error logs on calls to buildExe etc (#245)
  so that\n        on a call to buildExe we don't leave confusing old error messages
  lying\n        around.\n\n      - Make sure to generate position independent code
  (#244).\n\n    * Other minor bug fixes and changes:\n\n      - Don't skip ghc progress
  messages that include \"[TH]\" (these were\n        confusing our parser)\n      -
  Changed bounds on dependencies\n      - Internal refactoring of the updateSession
  logic, which is now a lot\n        more comprehensible (mostly possible now because
  we no longer have\n        a \"Running\" state, and starting a snippet is now independent
  of the\n        main session). This implies a minor API change; IdeSessionUpdate
  is no\n        longer a Monad, and no longer takes a type argument. It still satisifes\n
  \       Monoid, however, and this should barely affect client code (other than\n
  \       perhaps a type annotation here and there, replacing `IdeSessionUpdate\n
  \       ()` with `IdeSessionUpdate`). This also resolves a race condition that\n
  \       was present in `updateSession` (where a concurrent update session might\n
  \       grab the session lock while the first session update was attempting to\n
  \       restart the session). Also, better treatment of exceptions during\n        session
  updates (#250, #253).\n      - Added updateDeleteManagedFiles session update to
  remove all managed\n        (source and data) files from a session.\n      - Catch
  and report exceptions thrown by Haddock building.\n\n    * Test suite has been significantly
  refactored (#217, #237, #231), and is\n      now far more modular (dramatically
  improved compile times), can re-use\n      sessions for tests (which has brought
  to light quite a few bugs) as well\n      as in parallel (although the latter has
  not been tested sufficiently\n      yet), and uses tasty rather than test-framework.
  Various minor fixes to\n      the tests:\n\n      - GHC 7.8 started using fancy
  (unicode) quotes, which confused some tests.\n      - Added test for .hsboot files
  in subdirectories (#177)\n      - Don't rely on availability of profiling libs in
  the tests.\n      - Don't rely on the IsString instance for Data.ByteString because
  it\n        uses `pack` and thus throws away UTF8 data (#234).\n      - Test for
  package registration fixed (#250). Note that a running session\n        will NOT
  notice newly installed package until it is restarted (nor will\n        it notice
  that it needs to be restarted -- this needs to be initiated\n        with a call
  to restartSession).\n\n    * Open issues:\n\n      - The ghc linker is broken in
  the threaded runtime, which will affect\n        bindings to C libraries (ghc #8648).
  We suspect that #175 is caused\n        by this.\n      - On OSX we do not detect
  when a snippet server dies (#229). The problem\n        does not occur on Linux.\n
  \     - buildExe sometimes compiles modules more than once (#189). This should\n
  \       not change anything semantically but we have to allow for it in the\n        tests
  (since we get more progress messages than we expect) and of course\n        it has
  a performance impact.\n      - Building executables leaves .o and .dyn_o files in
  the session src/\n        directory (#249). The client should not really be affected
  by this\n        however.\n      - We currently _always_ restart the session when
  the relative includes\n        or targets change. This is correct but conservative
  and unnecessary.\n        Figuring out precisely when this is needed however is
  rather difficult\n        and probably not worth the effort. (Note that we don't
  restart when\n        the options \"change\" (by a call to updateTargets etc) to
  their current\n        value in the session.\n      - The debugging API is **disabled**
  in this release, as it needs to be\n        updated to work with the separate server
  (forkProcess) for running\n        snippets.\n      - Limiting stack size does not
  work for 7.4 (#258).\n\n *  Version 0.8.\n\n    This is a major new release with
  a lot of new functionality, bug fixes, and\n    some minor API changes.\n\n     *
  New functionality: support for GHC 7.8, and make sure that a single\n       ide-backend
  client library, compiled with a stock ghc, can talk to\n       multiple ide-backend-servers
  (one for ghc 7.4, one for ghc 7.8)\n       (#137, #147, #148, #149, #150, #151,
  #158, ghc #8006, ghc #8067,\n       ghc Hooks proposal). Setup instructions are
  included in \"setup/SETUP.md\".\n\n       NOTE: This requires new versions of both
  ghc 7.4 and ghc 7.8.\n\n       - For ghc 7.4: commit 8c021d1 (branch ide-backend-experimental-74).\n
  \        Differences from the official release: backported Hooks; backported\n         fixes
  to #1381, #7040, #7231, #7478, #8006, #8333\n         (ide-backend issues #145 and
  #161). Also applied patch for #4900,\n         although that patch is not accepted
  in HEAD yet (necessary for #118).\n\n       - For ghc 7.8: commit e0f0172 (branch
  ide-backend-experimental-78).\n         Since there is no official release of ghc
  yet, this picks a\n         semi-random snapshot of the ghc tree (a93f857). Our
  branch differs\n         from this snapshot by only a single patch (for #118/ghc
  #4900); we\n         have made various other patches, but they have all been included
  in\n         the official tree.\n\n       Note that we now use ghc's standard non-release
  version numbering\n       (7.4.2.<date> and 7.7.<date>). ide-backend supports a
  higher level query\n       (getGhcVersion :: Query GhcVersion) where\n\n           data
  GhcVersion = GHC742 | GHC78\n\n     * New functionality: debugging API (#131).\n\n
  \      Breakpoints can be set/cleared using\n\n           setBreakpoint :: IdeSession\n
  \                        -> ModuleName\n                         -> Public.SourceSpan\n
  \                        -> Bool\n                         -> IO (Maybe Bool)\n\n
  \      The existing API for binding subexpressions can be used to construct\n       SourceSpans.\n\n
  \      When a breakpoint is set, snippets can stop with a new RunResult\n\n           data
  RunResult =\n             ...\n             | RunBreak\n\n       They can be resumed
  using\n\n           resume :: IdeSession -> IO (RunActions Public.RunResult)\n\n
  \      Information about the current breakpoint (if any) can be got using\n\n           getBreakInfo
  :: Query (Maybe BreakInfo)\n\n           data BreakInfo = BreakInfo {\n               breakInfoModule
  \     :: Public.ModuleName\n             , breakInfoSpan        :: SourceSpan\n
  \            , breakInfoResultType  :: Public.Type\n             , breakInfoVariableEnv
  :: Public.VariableEnv\n             }\n\n           type VariableEnv = [(Name, Type,
  Value)]\n\n       Variables can be printed and/or forced using\n\n           printVar
  :: IdeSession\n                    -> Public.Name\n                    -> Bool\n
  \                   -> Bool\n                    -> IO Public.VariableEnv\n\n       The
  two booleans indicate whether new variables should be bound (cf.\n       ghci's
  :print vs :sprint) and whether the value should be forced (:print\n       vs :force).
  This is only valid during an active breakpoint.\n\n       Not all of ghci's debugging
  funtionality is yet supported; this is\n       documented in more detail in the
  ticket (#131, also #136). Note also\n       that the API may not be entirely stable
  yet. In particular, having\n       printVar independent of RunActions is unsatisfactory;
  fixing this _may_\n       change the runStmt API too. This is documented in great
  detail in a new\n       ticket (#153).\n\n     * New functionality: generate Hoogle/Haddock
  (#70). Please read\n       the documentation of @buildDoc@, test and suggest improvements.
  See also\n       https://github.com/fpco/ide-backend/issues/70#issuecomment-32031570\n\n
  \    * New functionality: distinguish between KindError and KindServerDied, and\n
  \      hide the \"internal exception\" when showing external exceptions (#135)\n\n
  \    * New functionality: allow to set compilation targets (#152)\n\n           updateTargets
  :: Maybe [FilePath] -> IdeSessionUpdate ()\n\n       As part of this also added
  a new field called configRelativeIncludes to\n       SessionConfig (#156). To see
  why this is necessary, consider \"module A\"\n       in \"foo/bar/A.hs\" and \"module
  B\" in \"foo/bar/B.hs\", where module B\n       imports module A, and we specify
  \"foo/bar/B.hs\" as the target. Then ghc\n       will be unable to find module A
  because it won't know to look in\n       directory \"foo/bar\" (before updateTargets
  this was not an issue because\n       we specified all modules paths explicitly
  to ghc). Now\n       configRelativeIncludes can be used to tell ghc where to look
  (in this\n       case, it should be set to [\"foo/bar\"]).\n\n       Note that buildExe
  and co do not yet take these targets into account\n       (#154), except for configRelativeIncludes,
  which are, in particular,\n       inserted into the hs-source-dirs field of .cabal,
  if set.\n\n       Also, fixed bug where we would not pass -i to the ghc server on
  session\n       restart (this bug was mostly invisible when we were providing all
  source\n       files explicitly).\n\n     * New functionality: support for boot
  files (#155, #157).\n\n     * New functionality: support C files (and .h files),
  both through\n       the API (where ide-backend-server compiles the .c files\n       into
  .o files and dynamically loads/unloads these object files)\n       and in executable
  generation (#122).\n\n     * New functionality: specify (as the first argument of
  buildExe)\n       additional arguments for ghc when building executables (#159).\n\n
  \    * Bugfix: setting ghc options is now stateless. We still have\n\n           configStaticOpts
  :: [String]\n\n       as before, which can be used for things like package options,
  but changed\n\n           updateGhcOptions :: Maybe [String] -> IdeSessionUpdate\n\n
  \      to\n\n           updateDynamicOpts :: [String] -> IdeSessionUpdate\n\n       with
  the following semantics: the full set of active options is those\n       specified
  in configStaticOpts, plus those (and only those) set in the\n       last call to
  updateDynamicOpts. In other words, setting\n\n           updateDynamicOpts [\"-Wall\",
  \"-Werror\"]\n\n       and then later\n\n           updateDynamicOpts [\"-Wall\"]\n\n
  \      now does the right thing (#115).\n\n     * Bugfix: Make sure ID info is updated
  on code changes (fixed a caching\n       problem) (#142)\n\n     * Bugfix: Make
  sure that updating static files triggers recompilation\n       (#118). This is fixed
  by means of a ghc patch (in both 7.4 and 7.8; ghc\n       issue #4900).\n\n     *
  Bugfix: Avoid confusing error message in buildExe for code with type\n       errors
  (#145, #160).\n\n     * Better way to deal with async exceptions in snippet interrupts
  in ghc\n       (#58, ghc issue #8006).  The new solution works in both 7.4 and 7.8,
  and\n       in both \"regular\" execution of snippets and in execution with\n       breakpoints
  enabled/resumed execution (#133). The new approach is now in\n       the official
  GHC tree.\n\n     * Upgraded to Cabal 1.18.1.2 (necessary to support GHC 7.8), and
  set\n       things up so that it generates the necessary dynlibs when using 7.8.\n
  \      Although Cabal 1.18 reports problems slightly differently to Cabal\n       1.16,
  ide-backend attempts to hide this difference (#146). There is\n       still a minor
  problem on OSX when using an in-place compiler due to\n       either a bug in ghc
  or a bug in cabal (#8266); see #164.\n\n     * Minor API changes:\n\n        - RunActions
  now has kind * -> * ; what was previously just \"RunActions\"\n          is now
  (from the client's perspective) \"RunActions RunResult\"\n        - String argument
  to RunOk has been removed.\n        - IdeSessionUpdate now has kind * -> * ; what
  was previously just\n          \"IdeSessionUpdate\" is now \"IdeSessionUpdate ()\".
  IdeSessionUpdate\n          has been given a Monad instance.\n        - updateModule*
  is now called updateSourceFile* (because it is used for\n          more than just
  Haskell modules).\n\n     * Merged pull requests\n\n        - Use binary-ide-backend
  throughout (#144)\n        - Tweaks to getDotCabal (#141)\n\n     * Test-suite modificatons:\n\n
  \       - Test for #134: multiple changes to TH dependent files in one second\n
  \       - Test for #32: Internal paths in error messages\n        - Test for #50:
  Async problem with snippet interrupt\n        - Test for fpco/fpco/#3043: constraints
  in monotypes\n        - Fixed non-deterministic failure of test for #58 (#143)\n
  \       - Updated tests to support for 7.4 and 7.8 (mark allowable differences,\n
  \         use alpha-equivalence rather than syntactic identity to compare\n          types,
  etc.), and be less picky about package versions\n        - Others, testing most
  of the features and fixes in this release\n\n     * Isolated a bug in sqlite which
  was causing #104.\n\n     * Known issue: tracked #125 down to a bug in the GHC RTS,
  and reported\n       this (#165, https://ghc.haskell.org/trac/ghc/ticket/8648).
  There is no\n       fix yet though.\n\n *  Version 0.7.1\n\n     * New functionality:
  types of subexpressions (#50). Known issues:\n\n       - We sometimes report multiple
  types for the same span (see comments\n         at the end of https://github.com/fpco/ide-backend/issues/50).\n\n
  \    * New functionality: report use sites of identifiers (#129)\n\n     * New functionality:
  Generate .cabal files (#127)\n\n       - Note that library data files are not installed.
  This should be easy\n         to add if/when that is needed. Just let us know.\n\n
  \    * Efficiency of construction of type information (and especially\n       autocompletion
  information) has been improved (#132).\n\n     * Move license catenation (#72) documentation
  to haddocks,\n       flesh it out, make code more readable, improve error output,\n
  \      fix a recently broken test\n\n     * Add configLicenseFixed to hard-code
  packages with hidden\n       .cabal files (#72)\n\n     * Optimize license catenation
  and add some benchmark tests (#72)\n\n     * Bugfix: for ghc progress messages in
  projects with 10 or more modules\n       the first 9 progress message were not parsed
  correctly because we didn't\n       allow for whitespace in between '[' and the
  first number (\"[ 1 of 10]\").\n\n     * Merged pull requests:\n\n        - Load
  CoreLicenses.txt via Template Haskell (#128)\n        - Less license failures (#126)\n
  \       - Use System.IO.UTF8 to avoid character encoding issues (#117)\n\n *  Version
  0.7.0.2\n\n     * Use System.IO.UTF8 to avoid character encoding issues (fpco/fpco#2232)\n\n
  \    * Removing non-existent files should not throw an exception\n\n     * Relaxed
  bounds on process, directory, tagged, and use crypto-api 0.12\n       and aeson
  0.6.2\n\n     * Use binary 0.7 (as binary-ide-backend); improved Binary instance
  for\n       Text that avoids lots of small chunks, and use the incremental API\n
  \      from binary 0.7 to avoid the use of lazy I/O\n\n     * Clear the build directory
  in buildExe (temporary fix for #119)\n\n     * Avoid stack overflow in Binary instance
  for lazy bytestrings (#121)\n\n *  Version 0.7.0.1\n\n     * Bugfix: make sure restartSession
  passes the configPackageDBStack\n       to ghc (#114)\n\n *  Version 0.7.0.0\n\n
  \   NOTE. This release includes a number of small API changes and behavioural\n
  \   changes since 0.6.0.2.\n\n     * Report server crashes as SourceErrors, and
  implicitly restart the session\n       on the _next_ call to updateSession (#107).
  Note that if the server is\n       in dead state (i.e., after the serve crash and
  before the next call to\n       updateSession) a call to runStmt will throw an exception
  (just like when\n       you call runStmt when no code is compiled at all). It is
  the\n       responsibility of the client code to check for source errors\n       (using
  getSourceErrors) before calling runStmt.\n\n     * It is now possible to reuse previously
  generated cabal macros, in order\n       to improve performance (#109). The type
  of initSession has changed to\n\n           initSession :: SessionInitParams ->
  SessionConfig -> IO IdeSession\n\n       where\n\n           data SessionInitParams
  = SessionInitParams {\n               sessionInitCabalMacros :: Maybe BSL.ByteString\n
  \            }\n\n       Similarly, restartSession now has type (#113)\n\n           restartSession
  :: IdeSession -> Maybe SessionInitParams -> IO ()\n\n       When passed Nothing
  it will leave the cabal macros unchanged, but when\n       passed a SessionInitParams
  it will regenerate them or use a previously\n       regenerated cabal macros file.\n\n
  \      The generated cabal macros can be accessed using\n\n           getCabalMacros
  :: Query BSL.ByteString\n\n     * Extended the Progress data type (#112) to contain
  the number of steps as\n       well as a progress message. See the comments in the
  ticket and in the\n       Haddock for Progress for some limitations, however (briefly,
  during\n       compilation, we get non-contiguous and possibly out of order progress\n
  \      updates from ghc: [4/13], [8/13], done).\n\n     * It is now possible to
  specify additional program search directories in\n       *addition* to the normal
  `$PATH` when creating a session (#99).\n\n           data SessionConfig = SessionConfig
  {\n               configExtraPathDirs :: [FilePath]\n               ...\n\n       This
  allows different sessions within the same process (that share the\n       same `$PATH`
  env var) to have different program search paths. In\n       particular this can
  be used to select the instance of ghc by controlling\n       which ghc binary is
  found.\n\n       Note that the `configExtraPathDirs` are in addition to the `$PATH`,
  they\n       are searched after the `$PATH`.\n\n *  Version 0.6.0.2\n\n     * Fix
  problem with cabal_macros in package databases with multiple\n       versions of
  the same package.\n\n     * Merge pull request from fpco/looger (#105)\n\n     *
  Traverse class default methods for id info (#106)\n\n *  Version 0.6.0.1\n\n     *
  Now uses a private Cabal fork as a sub-repo. Branch is ide-backend.\n       The
  package is renamed as Cabal-ide-backend. You will need to install\n       this and
  then ghc-pkg hide it or it will cause problems (e.g. ambigious\n       modules when
  building Setup.hs files).\n\n     * Fix for ticket #103. The macro generation should
  now be faster.\n       No interface change for this.\n\n *  Version 0.6\n\n     *
  baseline version for new version + release protocol\n"
license-name: MIT
