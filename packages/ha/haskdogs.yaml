changelog-type: ''
hash: 8d9e5bf73002cb0ed3b727f0a920afbcf56ddd9597f61634a76c0e6cfc4c6ece
test-bench-deps: {}
synopsis: Generate ctags file for haskell project directory and it's deps
changelog: ''
basic-deps:
  Cabal: ! '>=1.6'
  base: ! '>=3 && <5'
  HSH: ! '>=2.0.3'
  filepath: ! '>=1.1.0.3'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
latest: '0.3.2'
description-type: markdown
description: ! "HaskDogs\n========\n\nHaskdogs is a shellscript-like tool which creates
  tag file for entire\nhaskell project directory. It takes into account first-level
  dependencies by\nrecursively scanning imports and adding matching packages to the
  final\ntag list.\n\nAs a result, programmer can use his/her text editor supporting
  tags (vim, for\nexample) to jump directly to definition of any standard or foreign
  function\nhe/she uses.\n\nNote, that haskdogs relies on some GNU programs as well
  as on Unix shell\ncommands such as 'cd', 'mkdir' and so on. Also it would run 'cabal'
  and ghc-pkg'\nin order to obtain package information.\n\nINSTALL\n-------\n\nCheck
  the dependencies. Currently they are: cabal, ghc, hasktags, GNU find,\nwhich and
  shell.\n\n0. cabal install hasktags haskdogs\n1. git clone https://github.com/ierton/haskdogs\n2.
  cd haskdogs\n3. cabal configure && cabal install\n4. export PATH=\"$HOME/.cabal/bin:$PATH\"\n\nRUNNING\n-------\n\n1.
  Make sure yoy have installed hasktags and put it in PATH.\n\n2. cd to your Haskell
  project dir\n\n    $ cd $HOME/my-haskell-project\n\n3. run haskdogs (cmdline args
  will be passed to hasktags followed by a filelist generated)\n\n    $ haskdogs\n\nVIM
  HINT\n--------\n\nHasdogs (and underlying Hasktags) use simple scanning algorithm
  so it may become\nconfused facing functions with identical names. In this case Hasktags
  includes\nall of them in the output file so user has to decide which tag to jump
  to. Vim\noffers :tag and :ts commands to deal with such situations but it is somewhat\ncumbersome
  to type them every time.\n\nTo speedup things a bit I use the following vim binding.
  It iterates over all\nsame tags quickly with just one C-] command.\n\n    \" Cyclic
  tag navigation {{{\n\tlet g:rt_cw = ''\n\tfunction! RT()\n\t\tlet cw = expand('<cword>')\n\t\ttry\n\t\t\tif
  cw != g:rt_cw\n\t\t\t\texecute 'tag ' . cw\n\t\t\t\tcall search(cw,'c',line('.'))\n\t\t\telse\n\t\t\t\ttry\n\t\t\t\t\texecute
  'tnext'\n\t\t\t\tcatch /.*/\n\t\t\t\t\texecute 'trewind'\n\t\t\t\tendtry\n\t\t\t\tcall
  search(cw,'c',line('.'))\n\t\t\tendif\n\t\t\tlet g:rt_cw = cw\n\t\tcatch /.*/\n\t\t\techo
  \"no tags on \" . cw\n\t\tendtry\n\tendfunction\n\tmap <C-]> :call RT()<CR>\n    \"
  }}}\n\nJust copy the code above to your ~/.vimrc and reload the vim.\n\n--\nSergey
  \n<ierton@gmail.com>\n\n\n"
