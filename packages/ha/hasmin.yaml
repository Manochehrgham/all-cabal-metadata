homepage: https://github.com/contivero/hasmin#readme
changelog-type: markdown
hash: 370556cc0bab541dec24707e9865f611085ee0155ca0b7f1fa47214ef2141c06
test-bench-deps:
  base: ! '>=4.9 && <5.1'
  hspec: ! '>=2.2 && <3.0'
  text: ==1.2.*
  hspec-attoparsec: ! '>=0.1.0.0 && <0.2'
  hasmin: -any
  criterion: ! '>=0.11 && <1.2'
  doctest: ==0.11.*
  mtl: ! '>=2.2.1 && <2.3'
  doctest-discover: ! '>=0.1.0.0 && <0.2'
  attoparsec: ! '>=0.12 && <0.14'
  QuickCheck: ! '>=2.8 && <3.0'
  directory: -any
maintainer: Cristian Adrián Ontivero <cristianontivero@gmail.com>
synopsis: ! '"A CSS Minifier"'
changelog: ! "# Changelog\n\n## 0.3.2.1\n* Relaxed optparse-applicative upper bound.\n\n##
  0.3.2\n* Fixed some dimensions minifying incorrectly.\n* Fixed some Eq instances.\n*
  <An+B> values data type modified to disallow invalid values. This makes the\n  data
  type safer, also simplifying the Quickcheck Arbitrary instance.\n* Improved test
  coverage.\n\n## 0.3.1.3\n* Added support for `@supports` rules, and a slight minification
  for them: it\n  removes adjacent negations, i.e.: @supports not (not ...) gets turn
  into\n  @supports ....\n* Fixed a small bug with `:lang()` where spaces before the
  right parenthesis\n  weren't being removed.\n* Improved test coverage.\n\n## 0.3.0.1\nInitial
  release\n"
basic-deps:
  bytestring: ! '>=0.10.2.0 && <0.11'
  base: ! '>=4.9 && <5.1'
  text: ==1.2.*
  hasmin: -any
  gitrev: ! '>=1.0.0 && <1.4'
  matrix: ! '>=0.3.4 && <0.4'
  containers: ==0.5.*
  hopfli: ! '>=0.2 && <0.4'
  parsers: ! '>=0.12.3 && <0.13'
  mtl: ! '>=2.2.1 && <2.3'
  numbers: ! '>=3000.2.0.0 && <3000.3'
  attoparsec: ! '>=0.12 && <0.14'
  optparse-applicative: ! '>=0.11 && <0.15'
all-versions:
- '0.3.0.1'
- '0.3.1.3'
- '0.3.2'
- '0.3.2.1'
author: (c) 2017 Cristian Adrián Ontivero <cristianontivero@gmail.com>
latest: '0.3.2.1'
description-type: markdown
description: ! "Hasmin - A Haskell CSS Minifier\n====\n[![Build Status](https://travis-ci.org/contivero/hasmin.svg?branch=master)](https://travis-ci.org/contivero/hasmin)\n[![Hackage](https://img.shields.io/hackage/v/hasmin.svg?style=flat)](http://hackage.haskell.org/package/hasmin)\n[![Hackage-Deps](https://img.shields.io/hackage-deps/v/hasmin.svg?style=flat)](http://packdeps.haskellers.com/specific?package=hasmin)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\nHasmin
  is a CSS minifier written entirely in Haskell. To use it as a library,\nsee [below](https://github.com/contivero/hasmin#library)\n\nAside
  from the usual techniques (e.g. whitespace removal, color minification,\netc.),
  the idea was to explore new possibilities, by implementing things\nother minifiers
  weren't doing, or they were, but not taking full advantage of.\n\nAlso, the minifier
  implements some techniques that do nothing for minified\nsizes, but attempt to improve
  post-compression sizes (at least when using\nDEFLATE, i.e. gzip).\n\nFor a list
  of techniques, see [Minification Techniques](https://github.com/contivero/hasmin/wiki/Minification-Techniques).\n\n##
  Building\nTo compile, just run `stack build`.\n\n## Minifier Usage\nHasmin expects
  a path to the CSS file, and outputs the minified result to\nstdout.\n\nEvery technique
  is enabled by default, except for:\n 1. Escaped character conversions (e.g. converting
  `\\2714` to `✔`, which can be enabled with `--convert-escaped-characters`)\n 2.
  Dimension minifications (e.g. converting `12px` to `9pt`, which can be enabled with
  `--dimension-min`, or just `-d`)\n\nThese two are disabled mainly because they are—on
  average, not\nalways—detrimental for DEFLATE compression. When something needs to
  be\ndisabled, use the appropriate flag. Not every technique can be toggled yet,
  but\na good amount of them allow it.\n\nNote: there is a problem in Windows when
  using the\n`--convert-escaped-characters` flag to enable the conversion of escaped\ncharacters.
  A workaround is changing the code page, which can be done by running\n`chcp 65001`
  in the terminal (whether cmd, or cygwin).\n\n## Library\nThe preferable way to use
  Hasmin as a library is to `import Hasmin`, as\nexemplified in the module's documentation.
  That is currently the only module\nthat is sure to abide by [PVP](https://pvp.haskell.org/).
  Most other exposed\nmodules are so because tests need it, and thus definitions there
  may be changed\nanytime. In case something internal is needed though, feel free
  to open an issue\nabout it.\n\n## Zopfli Integration\nHasmin uses bindings to Google's\n[Zopfli
  library](https://en.wikipedia.org/wiki/Zopfli), allowing the\npossibility to compress
  the result.\n\nSince the output is a gzip file, it can be used for the web. It tipically\nproduces
  files 3~8% smaller than zlib, at the cost of being around 80 times\nslower, so it
  is only a good idea if you don't need compression on the fly.\n\n\nZopfli is released
  under the Apache License, Version 2.0.\n"
license-name: BSD3
