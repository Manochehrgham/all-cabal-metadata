homepage: https://github.com/facebook/Haxl
changelog-type: markdown
hash: f3a1523824d97b8e261e17491fb91230fc77c903444211f8303d89eacb2065d1
test-bench-deps:
  bytestring: -any
  base: ==4.*
  haxl: -any
  unordered-containers: -any
  text: -any
  HUnit: -any
  containers: -any
  hashable: -any
  aeson: -any
maintainer: The Haxl Team <haxl-team@fb.com>
synopsis: ! 'A Haskell library for efficient, concurrent,

  and concise data access.'
changelog: ! "# Changes in version 0.3.0.0\n\n  * Some performance improvements, including
  avoiding quadratic\n    slowdown with left-associated binds.\n\n  * Documentation
  cleanup; Haxl.Core is the single entry point for the\n    core and engine docs.\n\n
  \ * (>>) is now defined to be (*>), and therefore no longer forces\n    sequencing.
  \ This can have surprising consequences if you are\n    using Haxl with side-effecting
  data sources, so watch out!\n\n  * New function withEnv, for running a sub-computation
  in a local Env\n\n  * Add a higher-level memoization API, see 'memo'\n\n  * Show
  is no longer required for keys in cachedComputation\n\n  * Exceptions now have `Eq`
  instances\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.9'
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4 && <4.9'
  time: ! '>=1.4 && <1.6'
  haxl: -any
  unordered-containers: ==0.2.*
  text: ! '>=1.1.0.1 && <1.3'
  filepath: ! '>=1.3 && <1.5'
  HUnit: ! '>=1.2 && <1.4'
  containers: ==0.5.*
  hashable: ==1.2.*
  deepseq: -any
  pretty: ==1.1.*
  aeson: ! '>=0.6 && <0.12'
  vector: ! '>=0.10 && <0.12'
  directory: ! '>=1.1 && <1.3'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
author: Facebook, Inc.
latest: '0.3.1.0'
description-type: markdown
description: ! "![Haxl Logo](https://github.com/facebook/Haxl/raw/master/logo.png)\n\n#
  Haxl\n\nHaxl is a Haskell library that simplifies access to remote data, such\nas
  databases or web-based services. Haxl can automatically\n\n * batch multiple requests
  to the same data source,\n * request data from multiple data sources concurrently,\n
  * cache previous requests.\n\nHaving all this handled for you behind the scenes
  means that your\ndata-fetching code can be much cleaner and clearer than it would\notherwise
  be if it had to worry about optimizing data-fetching. We'll\ngive some examples
  of how this works in the pages linked below.\n\nThere are two Haskell packages here:\n\n
  * `haxl`: The core Haxl framework\n * `haxl-facebook` (in [example/facebook](example/facebook)):
  An (incomplete) example data source for accessing the Facebook Graph API\n\nTo use
  Haxl in your own application, you will likely need to build one or more\n*data sources*:
  the thin layer between Haxl and the data that you want\nto fetch, be it a database,
  a web API, a cloud service, or whatever.\nThe `haxl-facebook` package shows how
  we might build a Haxl data\nsource based on the existing `fb` package for talking
  to the Facebook\nGraph API.\n\n## Where to go next?\n\n * [The Story of Haxl](https://code.facebook.com/posts/302060973291128/open-sourcing-haxl-a-library-for-haskell/)\n
  \  explains how Haxl came about at Facebook, and discusses our\n   particular use
  case.\n\n * [An example Facebook data source](example/facebook/readme.md) walks\n
  \  through building an example data source that queries the Facebook\n   Graph API
  concurrently.\n\n * [The N+1 Selects Problem](example/sql/readme.md) explains how
  Haxl\n   can address a common performance problem with SQL queries by\n   automatically
  batching multiple queries into a single query,\n   completely invisibly to the programmer.\n\n
  * [Haxl Documentation](http://hackage.haskell.org/package/haxl) on\n   Hackage.\n\n
  * [There is no Fork: An Abstraction for Efficient, Concurrent, and Concise Data
  Access](http://community.haskell.org/~simonmar/papers/haxl-icfp14.pdf), our paper
  on Haxl, accepted for publication at ICFP'14.\n"
license-name: BSD3
