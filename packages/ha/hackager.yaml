homepage: https://github.com/dterei/Hackager
changelog-type: ''
hash: 5025c8aa34f0f6737b5c198afb4c824e122b88dab1d715c2275a2fb3a55b984f
test-bench-deps: {}
maintainer: David Terei <code@davidterei.com>
synopsis: Hackage testing tool
changelog: ''
basic-deps:
  Cabal: -any
  base: ! '>=2 && <5'
  filepath: -any
  process: -any
  containers: -any
  mtl: -any
  directory: -any
all-versions:
- '0.2.0.0'
- '1.0.0'
- '1.0.1'
- '1.2.0.0'
- '1.2.0.1'
author: The GHC Team, David Terei <code@davidterei.com>
latest: '1.2.0.1'
description-type: markdown
description: ! "# Hackager [![Hackage version](https://img.shields.io/hackage/v/hackager.svg?style=flat)](https://hackage.haskell.org/package/hackager)
  [![Build Status](https://img.shields.io/travis/dterei/hackager.svg?style=flat)](https://travis-ci.org/dterei/hackager)\n\nHackager
  is a tool to compile all of the Haskell Hackage package\nrepository. This is useful
  for testing Haskell compilers.\n\n## Using\nHackager consists of one tool that supports
  multiple commands.\n\n''hackager'' is invoked with the following options:\n\n~~~~
  {.sh}\n$ usage: hackager [--version] [--help] <command> [<args>]\n\nThe valid hackager
  commands are:\n    record    Try building all of hackage and record results\n    report
  \   Compare two 'record' runs and display results\n\nSee 'hackager help <command>'
  for more information on a specific command\n~~~~\n\n''hackager record'' has the
  following options:\n\n~~~~ {.sh}\nusage: hackager record -o NAME [-c CABAL] [-g
  GHC] [-p GHC-PKG] [-d DEP-FLAGS]\n                      [-f PKG-FLAGS] [-n THREADS]
  [PKGS...]\n\n    NAME         A name by which the results of this hackager run will\n
  \                be referred, e.g. \\\"ghc-7.6.1\\\"\n    CABAL        The path
  to the cabal program to use\n    GHC          The path to the ghc program to use\n
  \   GHC-PKG      The path to the ghc-pkg program to use\n    DEP-FLAGS    The flags
  to use when compiling dependencies of a package\n                 e.g. \\\"--ghc-option=-XFoo\\\"\n
  \   PKG-FLAGS    The flags to use when compiling a package\n                 e.g.
  \\\"--ghc-option=-XBar\\\"\n    THREADS      Number of threads to use to build in
  parallel\n    PKGS         A list of packages to build. If not specified all of\n
  \                hackage is built\n~~~~\n\nFor example, here is a run with GHC,
  no special options and using 4\nthreads (note that this generally takes a long time,
  i.e. a few days):\n\n~~~ {.sh}\n$ hackager record -o normal -n 4\n~~~~\n\nThen another
  run, this time using ''-XAlternativeLayoutRule'' to\ncompile each package (but not
  the build dependencies of the package):\n\n~~~~ {.sh}\n$ hackager record -o altern
  -f \"--ghc-option=-XAlternativeLayoutRule\" -n 4\n~~~~\n\nAnd finally a comparison
  of the results:\n\n~~~~ {.sh}\n$ hackager report normal altern\n\n                            normal\n
  \                        Buildable Build failed Deps failed Not tried\naltern Buildable
  \         628            0           0         0\n       Build failed        73
  \         215           0         0\n       Deps failed          0            0
  \        170         0\n       Not tried            0            0           0         0\n~~~~\n\nThese
  results mean that 73 packages became unbuildable when the\nalternative layout rule
  is used.\n\n## Caution\n\nHackager can cause arbitrary code to run on your machine.
  For example:\n * TemplateHaskell is run at compile time and can execute arbitrary\n
  \  code\n * Package configure scripts will be run\n * Custom Setup.hs programs will
  be run\n\n## Get involved!\n\nWe are happy to receive bug reports, fixes, documentation\nenhancements,
  and other improvements.\n\nPlease report bugs via the\n[github issue tracker](http://github.com/dterei/Hackager/issues).\n\nMaster
  [git repository](http://github.com/dterei/Hackager):\n\n* `git clone git://github.com/dterei/Hackager.git`\n\n##
  Licensing\n\nThis library is BSD-licensed.\n"
license-name: BSD3
