homepage: ''
changelog-type: markdown
hash: 7da00df846c4583740f42690bba7ec418be7fa3a7ae6ce599206835f807d0f22
test-bench-deps: {}
maintainer: martin@grabmueller.de
synopsis: Runtime code generation for x86 machine code
changelog: ! '## 0.6.0.0


  * Re-licensed under BSD3

  * Updated to compile in GHC 7.8.3

'
basic-deps:
  base: ! '>=4 && <5'
  parsec: ! '>=1 && <4'
  disassembler: ! '>=0.2.0.0'
  array: ! '>=0.3 && <1'
  containers: ! '>=0.3 && <1'
  mtl: ! '>=1 && <3'
  pretty: ! '>=1 && <2'
  template-haskell: ! '>=2 && <3'
all-versions:
- '0.2'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3.0'
- '0.5.0.0'
- '0.6.0.0'
author: ! 'Dirk Kleeblatt <dirk.kleeblatt@gmx.de>

  Martin Grabmueller <martin@grabmueller.de>'
latest: '0.6.0.0'
description-type: text
description: ! "                                                              -*-outline-*-\n*
  README file for the Harpy Haskell Run-time Code Generator\n\nCodename: Harpy - Haskell
  Assembler at Run-time produces Y...\n  Harpy [myth.]\tf: die Harpyie\n  http://en.wikipedia.org/wiki/Harpy\n\n**
  Introduction\n\nHarpy is a library for run-time code generation in Haskell programs.\n\nHarpy
  requires several Haskell extensions and GHC-specific features\n(the Haskell FFI,
  Template Haskell, multi-parameter type classes and\nmonad transformers).\n\n** Features\n\nThe
  following modules are included in this package:\n\nHarpy.CodeGenMonad: This module
  defines the code generator monad,\n  which is a combined state/reader/exception
  monad.  It contains\n  all the necessary details for allocating and managing code
  buffers.\n\nHarpy.X86CodeGen: This module contains all the functions for generating\n
  \ native x86 machine code.  The functions are very simple, and it is\n  necessary
  to specify all addressing modes etc. when emitting an\n  instruction.\n\nHarpy.X86Assembler:
  A type class based layer on top of X86CodeGen\n  which determines the addressing
  modes from the types of the\n  operands.\n\nHarpy.X86CGCombinators: Code generation
  combinators for conditionals,\n  loops, function entry/exit code etc.\n\nHarpy.X86Disassembler:
  A disassembler for x86 machine code.\n\nHarpy.Call: Exports functions for invoking
  the generated code.\n\n** Notes about the implementation\n\n*** X86CodeGen.lhs\n\nThe
  file X86CodeGen.lhs is based on a header file called x86-codegen.h\nfrom the Mono
  distribution, which defines macros for emitting x86\nmachine code directly into
  a memory buffer.  The Haskell module is a\nnearly one-to-one mapping from the original
  macros to Haskell\nfunctions.  The main differences are:\n\n- Instead of emitting
  the data directly into a buffer, it uses the\n  CodeGen monad from file CodeGenMonad.lhs.\n\n-
  The functions are strongly typed.\n\nSeveral things should be kept in mind when
  using this file:\n\n- Buffer overflow checks have to be done manually with checkBufferSize
  or\n  ensureBufferSize\n\n- MMX, SSE, SSE2 and SSE3 instructions and registers are
  not supported.\n\n- 64-bit mode is not supported.\n\n- The disassembler supports
  (in principle) 64-bit mode and SSE\n  instructions, but this has not been tested.\n"
license-name: BSD3
