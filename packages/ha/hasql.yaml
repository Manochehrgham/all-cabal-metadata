homepage: https://github.com/nikita-volkov/hasql
changelog-type: markdown
hash: e197eaee6a1bc924b7b19e967f8dd4ea9ba952edc59774406ec64dd2e9a811fa
test-bench-deps:
  hasql: -any
  either: -any
  base-prelude: -any
  base: -any
  hspec: ==2.1.*
  text: -any
  monad-control: -any
  slave-thread: ==0.1.*
  hasql-postgres: ==0.10.*
  mtl-prelude: <3
  transformers: ! '>=0.3 && <0.5'
  hasql-backend: -any
  vector: -any
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
synopsis: A minimalistic general high level API for relational databases
changelog: ! '# 0.7.3.1

  * Attoparsec-0.13 support


  # 0.7.3

  * GHC 7.10 support


  # 0.7.2

  * Implement support for free variables by the quasi-quoter


  # 0.7.1

  * Relaxed the dependency on "monad-control"


  # 0.7.0 - Refinements and minor updates

  * Streaming now is parameterized by the size of a chunk

  * Introduced a new type `Ex`

  * Changed the suffix of statement execution functions to `Ex`


  # 0.6.0 - Major API overhaul

  * The connection pool acquisition is now explicit and is no longer handled by the
  `Session` monad. This should provide for a simpler integration with other libraries.

  * The `Session` monad is now merely a convenience thing for providing a context
  to multiple transactions. One can run it as many times as he wants - it won''t reestablish
  any resources any more.

  * The connection timeout is now set using `Int` for simplicity.

  * There are no exceptions any more. All the error-reporting is typed and done explicitly,
  using `Either`.

  * The error types are now mostly backend-specific.

  * The transaction mode is now extended to support uncommittable transactions with
  the `TxWriteMode` type.

  * All `Tx` functions are now appended with a "Tx" suffix.

  * Added `vectorTx` and `maybeTx` and updated the semantics of `singleTx`.

  * `q` statement quasi-quoter is now renamed to more meaningful `stmt`.

  * The `Statement` type is renamed to `Stmt` and is now exported from the main API.

  * `RowParser` is now uninstantiable. This enforces the idiomatic usage of the library.

  * Statement templates now support UTF-8.


  # 0.5.0

  * Update the "list-t" and "monad-control" deps


  # 0.4.1

  * Fix the transaction conflicts bug

'
basic-deps:
  either: ! '>=4.3 && <5'
  base-prelude: ! '>=0.1.3 && <0.2'
  base: ! '>=4.6 && <4.9'
  text: ! '>=1.0 && <1.3'
  list-t: ! '>=0.3.1 && <0.5'
  monad-control: ! '>=0.3 && <1.1'
  resource-pool: ==0.2.*
  mtl: ! '>=2.1 && <2.3'
  mmorph: ==1.0.*
  transformers-base: ==0.4.*
  attoparsec: ! '>=0.10 && <0.14'
  transformers: ! '>=0.3 && <0.5'
  hasql-backend: ==0.4.*
  template-haskell: ! '>=2.8 && <2.11'
  vector: <0.11
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.6.0'
- '0.7.0'
- '0.7.1'
- '0.7.2'
- '0.7.3'
- '0.7.3.1'
- '0.7.3.2'
author: Nikita Volkov <nikita.y.volkov@mail.ru>
latest: '0.7.3.2'
description-type: haddock
description: ! 'A robust and concise yet powerful API for communication with arbitrary

  relational databases using SQL.


  Features:


  * Concise and crisp API. Just a few functions and two monads doing all the

  boilerplate job for you.


  * A powerful transaction abstraction, which provides

  an automated resolution of conflicts.

  The API ensures that you''re only able to perform a specific

  set of actions in the transaction context,

  which allows Hasql to safely resolve conflicting transactions

  by automatically retrying them.

  This is much inspired by STM and ST.


  * Support for cursors. Allows to fetch virtually limitless result sets in a

  constant memory using streaming.


  * Employment of prepared statements.

  Every statement you emit gets prepared and cached.

  This raises the performance of the backend.


  * Automated management of resources related to connections, transactions and

  cursors.


  * A built-in connection pool.


  * Compile-time generation of templates. You just can''t write a statement with an

  incorrect number of placeholders.


  * Ability to map to any types actually supported by the backend.


  Links:


  * <http://nikita-volkov.github.io/hasql-benchmarks/ Benchmarks analysis>.


  * <https://github.com/nikita-volkov/hasql/blob/master/demo/Main.hs Basic tutorial-demo>.


  * <http://hackage.haskell.org/package/hasql-postgres PostgreSQL backend>.

'
license-name: MIT
