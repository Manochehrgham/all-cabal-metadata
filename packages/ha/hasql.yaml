changelog-type: ''
hash: 5eb300dff479e29f7bbdd3b65d24a477e0f4eeed18ff1ce8c88061baf26b73a6
synopsis: A minimalistic general high level API for relational databases
changelog: ''
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.6.0'
- '0.7.0'
- '0.7.1'
- '0.7.2'
- '0.7.3'
latest: '0.7.3'
description-type: haddock
description: ! 'A robust and concise yet powerful API for communication with arbitrary

  relational databases using SQL.


  Features:


  * Concise and crisp API. Just a few functions and two monads doing all the

  boilerplate job for you.


  * A powerful transaction abstraction, which provides

  an automated resolution of conflicts.

  The API ensures that you''re only able to perform a specific

  set of actions in the transaction context,

  which allows Hasql to safely resolve conflicting transactions

  by automatically retrying them.

  This is much inspired by STM and ST.


  * Support for cursors. Allows to fetch virtually limitless result sets in a

  constant memory using streaming.


  * Employment of prepared statements.

  Every statement you emit gets prepared and cached.

  This raises the performance of the backend.


  * Automated management of resources related to connections, transactions and

  cursors.


  * A built-in connection pool.


  * Compile-time generation of templates. You just can''t write a statement with an

  incorrect number of placeholders.


  * Ability to map to any types actually supported by the backend.


  Links:


  * <http://nikita-volkov.github.io/hasql-benchmarks/ Benchmarks analysis>.


  * <https://github.com/nikita-volkov/hasql/blob/master/demo/Main.hs Basic tutorial-demo>.


  * <http://hackage.haskell.org/package/hasql-postgres PostgreSQL backend>.

'
