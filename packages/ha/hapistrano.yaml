homepage: https://github.com/stackbuilders/hapistrano
changelog-type: markdown
hash: 27e474bd709b243d80f48a1f58c1356c5aa2ae197583e57247e4daa6c11874d3
test-bench-deps:
  path: ! '>=0.5 && <6.0'
  base: ! '>=4.5 && <5.0'
  hapistrano: -any
  hspec: ! '>=2.0 && <3.0'
  filepath: ! '>=1.2 && <1.5'
  process: ! '>=1.4 && <1.5'
  mtl: ! '>=2.0 && <3.0'
  temporary: ! '>=1.1 && <1.3'
  path-io: ! '>=1.2 && <1.3'
  directory: ! '>=1.2.2 && <1.4'
maintainer: justin@stackbuilders.com
synopsis: A deployment library for Haskell applications
changelog: ! "## 0.3.1.0\n\n* Fixed a bug with repos not being fetched properly.\n*
  Implemented concurrent deployment to multiple hosts.\n* Now completion tokens are
  dropped automatically like old releases.\n\n## 0.3.0.1\n\n* Reduced verbosity of
  some commands to make reading logs easier.\n* Restart command is now invoked after
  activation of new release (as it\n  should).\n* Fix a typo in flag that specifies
  SSH port for `scp`.\n* Ensure that containing directories for files and directories
  to copy\n  exist before invoking `scp`.\n\n## 0.3.0.0\n\n* Add proper set of dependency
  version constraints.\n* Use `optparse-applicative` to parse arguments.\n* Allow
  to specify non-standard SSH port.\n* Drop support for GHCs older than 7.10 (because
  Chris Done's `path` does\n  not compile with them, see: https://github.com/chrisdone/path/issues/46).\n*
  Now Hapistrano uses `hap.yaml` file for all its configuration.\n* Added the ability
  to copy arbitrary files and directories verbatim from\n  local machine to target
  host.\n\n## 0.2.1.2\n\n* Add change log (#23).\n* Add `README.md` to extra source
  files.\n* Handle missing environment variables more graciously.\n* Allow GHC 8 and
  base 4.9.\n\n## 0.2.1.1\n\n* Fix tests (#31).\n\n## 0.2.1\n\n* Use Stack (#17).\n*
  Clean up package (#20).\n* Fix tests (#25).\n\n## 0.2.0.2\n\n* GHC 7.10 support.\n\n##
  0.2.0.1\n\n* Refactoring and documentation improvements.\n\n## 0.2.0.0\n\n* Various
  refactoring and relaxed dependency constraints.\n\n## 0.1.0.2\n\n* Print error messages
  to `stderr`, return non-zero exit code on failure.\n\n## 0.1.0.1\n\n* Initial release.\n"
basic-deps:
  stm: ! '>=2.4 && <2.5'
  path: ! '>=0.5.8 && <6.0'
  base: ! '>=4.6 && <5.0'
  time: ! '>=1.5 && <1.8'
  hapistrano: -any
  filepath: ! '>=1.2 && <1.5'
  process: ! '>=1.4 && <1.5'
  async: ! '>=2.0.1.6 && <2.2'
  mtl: ! '>=2.0 && <3.0'
  transformers: ! '>=0.4 && <0.6'
  optparse-applicative: ! '>=0.11 && <0.14'
  aeson: ! '>=0.11 && <1.2'
  path-io: ! '>=1.2 && <1.3'
  yaml: ! '>=0.8 && <0.9'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.1'
- '0.2.1.1'
- '0.2.1.2'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.1.0'
author: Justin Leitgeb
latest: '0.3.1.0'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/stackbuilders/hapistrano.svg?branch=master)](https://travis-ci.org/stackbuilders/hapistrano)
  [![Hackage version](https://img.shields.io/hackage/v/hapistrano.svg)](http://hackage.haskell.org/package/hapistrano)\n\n#
  Hapistrano\n\nHapistrano is a deployment library for Haskell applications similar
  to\nRuby's [Capistrano](http://capistranorb.com/).\n\n## Purpose\n\nWe created Hapistrano
  because:\n\n* Deploys should be simple, but as close to atomic as possible (eg,\n
  \ they shouldn't require much application downtime).\n* Rollback should be trivial
  to achieve to bring the application back\n  to the last-deployed state.\n* Deploys
  shouldn't fail because of dependency problems.\n\n## How it Works\n\nHapistrano
  (like Capistrano for Ruby) deploys applications to a new\ndirectory marked with
  a timestamp on the remote host. It creates this\nnew directory quickly by placing
  a git repository for caching purposes\non the remote server.\n\nWhen the build process
  completes, it switches a symlink to the `current`\nrelease directory, and optionally
  restarts the web server.\n\nBy default, Hapistrano keeps the last five releases
  on the target host\nfilesystem and deletes previous releases to avoid filling up
  the disk.\n\n## Usage\n\nHapistrano 0.3.0.0 looks for a configuration file called
  `hap.yaml` that\ntypically looks like this:\n\n```yaml\ndeploy_path: '/var/projects/my-project'\nhost:
  myserver.com\nport: 2222\nrepo: 'https://github.com/stackbuilders/hapistrano.git'\nrevision:
  origin/master\nbuild_script:\n  - stack setup\n  - stack build\nrestart_command:
  systemd restart my-app-service\n```\n\nThe following parameters are required:\n\n*
  `deploy_path` — the root of the deploy target on the remote host.\n* `repo` — the
  origin repository.\n* `revision` — the SHA1 or branch to deploy. If a branch, you
  will need to\n  specify it as `origin/branch_name` due to the way that the cache
  repo is\n  configured.\n\nThe following parameters are *optional*:\n\n* `host` —
  the target host, if missing, `localhost` will be assumed (which\n  is useful for
  testing and playing with `hap` locally).\n* `port` — SSH port number to use. If
  missing, 22 will be used.\n* `build_script` — instructions how to build the application
  in the form of\n  shell commands.\n* `restart_command` — if you need to restart
  a remote web server after a\n  successful rollback, specify the command that you
  use in this variable. It\n  will be run after both deploy and rollback.\n\nAfter
  creating a configuration file as above, deploying is as simple as:\n\n```bash\n$
  hap deploy\n```\n\nRollback is also trivial:\n\n```bash\n$ hap rollback # to rollback
  to previous successful deploy\n$ hap rollback -n 2 # go two deploys back in time,
  etc.\n```\n\n## What to do when compiling on server is not viable\n\nSometimes the
  target machine (server) is not capable of compiling your\napplication because e.g.
  it has not enough memory and GHC exhausts it all.\nYou can copy pre-compiled files
  from local machine or CI server using\n`copy_files` and `copy_dirs` parameters:\n\n```haskell\ncopy_files:\n
  \ - src: '/home/stackbuilders/my-file.txt'\n    dest: 'my-file.txt'\ncopy_dirs:\n
  \ - src: .stack-work\n    dest: .stack-work\n```\n\n`src` maybe absolute or relative,
  it's path to file or directory on local\nmachine, `dest` may only be relative (it's
  expanded relatively to cloned\nrepo) and specifies where to put the files/directories
  on target machine.\nDirectories and files with clashing names will be overwritten.
  Directories\nare copied recursively.\n\n## Deploying to multiple machines concurrently\n\nBeginning
  with Hapistrano 0.3.1.0 it's possible to deploy to several\nmachines concurrently.
  The only things you need to do is to adjust your\nconfiguration file and use `targets`
  parameter instead of `host` and `port`,\nlike this:\n\n```haskell\ntargets:\n  -
  host: myserver-a.com\n    port: 2222\n  - host: myserver-b.cmo\n# the rest is the
  same…\n```\n\nA few things to note here:\n\n* `host` item is required for every
  target, but `port` may be omitted and\n  then it defaults to `22`.\n\n* The deployment
  will run concurrently and finish when interactions with all\n  targets have finished
  either successfully or not. If at least one\n  interaction was unsuccessful, the
  `hap` tool will exit with non-zero exit\n  code.\n\n* The log is printed is such
  a way that messages from several machines get\n  intermixed, but it's guaranteed
  that they won't overlap (printing itself\n  is sequential) and the headers will
  tell you exactly which machine was\n  executing which command.\n\nIf you don't specify
  `host` and `targets`, `hap` will assume `localhost` as\nusually, which is mainly
  useful for testing.\n\n## License\n\nMIT, see [the LICENSE file](LICENSE).\n\n##
  Contributing\n\nPull requests for modifications to this program are welcome. Fork
  and\nopen a PR. Feel free to [email me](mailto:justin@stackbuilders.com) if\nyou
  have questions about what may be accepted before working on a PR.\n\nIf you're looking
  for a place to start, you may want to check the\n[open issue](https://github.com/stackbuilders/hapistrano/issues).\n"
license-name: MIT
