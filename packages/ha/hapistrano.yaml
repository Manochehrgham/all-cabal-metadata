homepage: https://github.com/stackbuilders/hapistrano
changelog-type: markdown
hash: f19c304ec7555be86d8bf9efbc79fbef532c26cd0d9817afdeb133e989044d56
test-bench-deps:
  either: -any
  base: -any
  hapistrano: -any
  hspec: -any
  filepath: -any
  process: -any
  mtl: -any
  temporary: -any
  directory: -any
maintainer: justin@stackbuilders.com
synopsis: A deployment library for Haskell applications
changelog: ! '## Unreleased changes


  * Add change log (#23).


  ## 0.2.1.1


  * Fix tests (#31).


  ## 0.2.1


  * Use Stack (#17).

  * Clean up package (#20).

  * Fix tests (#25).

'
basic-deps:
  either: -any
  base: ! '>=4.5 && <4.10'
  time: -any
  hapistrano: -any
  filepath: -any
  process: -any
  base-compat: -any
  mtl: -any
  transformers: -any
  time-locale-compat: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.1'
- '0.2.1.1'
- '0.2.1.2'
author: Justin Leitgeb
latest: '0.2.1.2'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/stackbuilders/hapistrano.svg?branch=master)](https://travis-ci.org/stackbuilders/hapistrano)
  [![Hackage version](https://img.shields.io/hackage/v/hapistrano.svg)](http://hackage.haskell.org/package/hapistrano)\n\n#
  Hapistrano\n\nHapistrano is a deployment library for Haskell applications similar
  to\nRuby's [Capistrano](http://capistranorb.com/).\n\n## Purpose\n\nWe created Hapistrano
  because:\n\n* Deploys should be simple, but as close to atomic as possible (eg,\n
  \ they shouldn't require much application downtime).\n* Rollback should be trivial
  to achieve to bring the application back\n  to the last-deployed state.\n* Deploys
  shouldn't fail because of dependency problems.\n\n## How it Works\n\nHapistrano
  (like Capistrano for Ruby) deploys applications to a new\ndirectory marked with
  a timestamp on the remote host. It creates this\nnew directory quickly by placing
  a git repository for caching purposes\non the remote server.\n\nWhen the build process
  completes, it switches a symlink to the\n'current' release directory, and optionally
  restarts the web server.\n\nBy default, Hapistrano keeps the last five releases
  on the target host\nfilesystem and deletes previous releases to avoid filling up
  the disk.\n\n## Usage\n\nThe deploy requires the following environment variables:\n\n*
  `DEPLOY_PATH` - The root of the deploy target on the remote host\n* `HOST` - The
  target host\n* `REPOSITORY` - The origin repository\n* `REVISION` - The SHA1 or
  branch to deploy. If a branch, you will need\n  to specify it as origin/branch_name
  due to the way that the cache\n  repo is configured.\n\nThe following environment
  variables are *optional* and affect the\ndeploy process:\n\n* `BUILD_SCRIPT` - The
  local path to a file that should be executed on\n  the remote server to build the
  application. The script isn't\n  executed verbatim - instead, every line is joined
  with `&&` so that\n  the script aborts if any component fails. See a sample script
  for a\n  clean build of a Haskell/Cabal application in this project under\n  [script/clean-build.sh].\n*
  `RESTART_COMMAND` - If you need to restart a remote web server after a\n  successful
  deploy, specify the command that you use in this\n  variable. It will be run after
  both deploy and rollback.\n\nYou may want to save the environment variables that
  you need for your\ndeploy in a shell script that you `source` before deploy. Make
  sure\nyou `export` these variables so that they're available in the shell\nafter
  you run the script. For example, you could use the following to\nconfigure your
  deploy:\n\n    export DEPLOY_PATH=\"/var/project\"\n    export HOST=\"my-app-staging\"\n
  \   export REPOSITORY=\"git@github.com:yourorg/yourrepo.com.git\"\n    export REVISION=\"origin/staging\"\n
  \   export BUILD_SCRIPT=\"/home/you/Code/hapistrano/script/clean-build.sh\"\n    export
  RESTART_COMMAND=\"echo Replace me with your restart command\"\n\nAfter creating
  a configuration script as above, deploying is as simple as:\n\n    source your-config-script.sh
  && hap deploy\n\n# License\n\nMIT, see [the LICENSE file](LICENSE).\n\n\n# Contributing\n\nPull
  requests for modifications to this program are welcome. Fork and\nopen a PR. Feel
  free to [email me](mailto:justin@stackbuilders.com) if\nyou have questions about
  what may be accepted before working on a PR.\n\nIf you're looking for a place to
  start, you may want to check the\n[open issue](https://github.com/stackbuilders/hapistrano/issues).\n"
license-name: MIT
