homepage: https://github.com/mstksg/hamilton
changelog-type: ''
hash: f0a9099cd8474b2fff95c7f027c10b6a3cc43cce1be1a7bebf6914b4a2c2a49d
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Physics on generalized coordinate systems using Hamiltonian Mechanics and
  AD
changelog: ''
basic-deps:
  free: -any
  ansi-wl-pprint: -any
  base: ! '>=4.9 && <5'
  comonad: -any
  ad: -any
  vector-sized: ! '>=0.4.1'
  typelits-witnesses: -any
  vty: -any
  containers: -any
  hamilton: -any
  optparse-applicative: ! '>=0.13'
  hmatrix: ! '>=0.18'
  hmatrix-gsl: ! '>=0.18'
  vector: -any
all-versions:
- '0.1.0.0'
author: Justin Le
latest: '0.1.0.0'
description-type: markdown
description: ! "Hamilton\n========\n\nSimulate physics on arbitrary coordinate systems
  using [automatic\ndifferentiation][ad] and [Hamiltonian mechanics][].\n\n[ad]: http://hackage.haskell.org/package/ad\n[Hamiltonian
  mechanics]: https://en.wikipedia.org/wiki/Hamiltonian_mechanics\n\nFor example,
  a simulating a [double pendulum system][dps] by simulating the\nprogression of the
  angles of each bob:\n\n[dps]: https://en.wikipedia.org/wiki/Double_pendulum\n\n[![My
  name is William Rowan Hamilton](http://i.imgur.com/Vaaa2EC.gif)][gifv]\n\n[gifv]:
  http://i.imgur.com/Vaaa2EC.gifv\n\nYou only need:\n\n1.  Your generalized coordinates
  (in this case, `θ1` and `θ2`), and equations\n    to convert them to cartesian coordinates
  of your objects:\n\n    ~~~haskell\n    x1 = sin θ1\n    y1 = -cos θ1\n    x2 =
  sin θ1 + sin θ2 / 2      -- second pendulum is half-length\n    y2 = -cos θ1 - cos
  θ2 / 2\n    ~~~\n\n2.  The masses/inertias of each of those cartesian coordinates
  (`m1` for `x1`\n    and `y1`, `m2` for `x2` and `y2`)\n\n3.  A potential energy
  function for your objects:\n\n    ~~~haskell\n    U = (m1 y1 + m2 y2) * g\n    ~~~\n\nAnd
  that's it! Hamiltonian mechanics steps your generalized coordinates (`θ1`\nand `θ2`)
  through time, without needing to do any simulation involving\n`x1`/`y1`/`x2`/`y2`!
  \ And you don't need to worry about tension or any other\nstuff like that.  All
  you need is a description of your coordinate system\nitself, and the potential energy!\n\n~~~haskell\ndoublePendulum
  :: System 4 2\ndoublePendulum =\n    mkSystem' (vec4 m1 m1 m2 m2)            --
  masses\n              (\\(V2 θ1 θ2)     -> V4 (sin θ1)            (-cos θ1)\n                                     (sin
  θ1 + sin θ2/2) (-cos θ1 - cos θ2/2)\n              )                             --
  coordinates\n              (\\(V4 _ y1 _ y2) -> (m1 * y1 + m2 * y2) * g)\n                                            --
  potential\n~~~\n\nThanks to [~~Alexander~~ William Rowan Hamilton][WRH], we can
  express our\nsystem parameterized by arbitrary coordinates and get back equations
  of motions\nas first-order differential equations.  This library solves those first-order\ndifferential
  equations for you using automatic differentiation and some matrix\nmanipulation.\n\n[WRH]:
  https://www.youtube.com/watch?v=SZXHoWwBcDc\n\nSee [documentation][] and [example
  runner][].\n\n[documentation]: https://mstksg.github.io/hamilton/\n[example runner]:
  https://github.com/mstksg/hamilton/blob/master/app/Examples.hs\n\n### Full Exmaple\n\nLet's
  turn our double pendulum (with the second pendulum half as long) into an\nactual
  running program.  Let's say that `g = 5`, `m1 = 1`, and `m2 = 2`.\n\nFirst, the
  system:\n\n~~~haskell\nimport           Numeric.LinearAlgebra.Static\nimport qualified
  Data.Vector.Sized as V\n\n\ndoublePendulum :: System 4 2\ndoublePendulum = mkSystem'
  masses coordinates potential\n  where\n    masses :: R 4\n    masses = vec4 1 1
  2 2\n    coordinates\n        :: Floating a\n        => V.Vector 2 a\n        ->
  V.Vector 4 a\n    coordinates (V2 θ1 θ2) = V4 (sin θ1)            (-cos θ1)\n                                (sin
  θ1 + sin θ2/2) (-cos θ1 - cos θ2/2)\n    potential\n        :: Num a\n        =>
  V.Vector 4 a\n        -> a\n    potential (V4 _ y1 _ y2) = (y1 + 2 * y2) * 5\n~~~\n\nNeat!
  \ Easy, right?\n\nOkay, now let's run it.  Let's pick a starting configuration (state
  of the\nsystem) of `θ1` and `θ2`:\n\n~~~haskell\nconfig0 :: Config 2\nconfig0 =
  Cfg (vec2 1 0  )  -- initial positions\n              (vec2 0 0.5)  -- initial velocities\n~~~\n\nConfigurations
  are nice, but Hamiltonian dynamics is all about motion through\nphase space, so
  let's convert this configuration-space representation of the\nstate into a phase-space
  representation of the state:\n\n~~~haskell\nphase0 :: Phase 2\nphase0 = toPhase
  doublePendulum config0\n~~~\n\nAnd now we can ask for the state of our system at
  any amount of points in time!\n\n~~~haskell\nghci> evolveHam doublePendulum phase0
  [0,0.1 .. 1]\n-- result: state of the system at times 0, 0.1, 0.2, 0.3 ... etc.\n~~~\n\nOr,
  if you want to run the system step-by-step:\n\n\n~~~haskell\nevolution :: [Phase
  2]\nevolution = iterate (stepHam 0.1 doublePendulum) phase0\n~~~\n\nAnd you can
  get the position of the coordinates as:\n\n~~~haskell\npositions :: [R 2]\npositions
  = phsPos <$> evolution\n~~~\n\nAnd the position in the underlying cartesian space
  as:\n\n~~~hakell\npositions' :: [R 4]\npositions' = underlyingPos doublePendulum
  <$> positions\n~~~\n\nExample App runner\n------------------\n\nInstallation:\n\n~~~bash\n$
  git clone https://github.com/mstksg/hamilton\n$ cd hamilton\n$ stack install\n~~~\n\nUsage:\n\n~~~bash\n$
  hamilton-examples [EXAMPLE] (options)\n$ hamilton-examples --help\n$ hamilton-examples
  [EXAMPLE] --help\n~~~\n\nThe example runner is a command line application that plots
  the progression of\nseveral example system through time.\n\n\n| Example      | Description
  \                                               | Coordinates                                                         |
  Options                                                       |\n|--------------|------------------------------------------------------------|---------------------------------------------------------------------|---------------------------------------------------------------|\n|
  `doublepend` | Double pendulum, described above                           | `θ1`,
  `θ2` (angles of bobs)                                         | Masses of each bob
  \                                           |\n| `pend`       | Single pendulum
  \                                           | `θ` (angle of bob)                                                  |
  Initial angle and velocity of bob                             |\n| `room`       |
  Object bounding around walled room                         | `x`, `y`                                                            |
  Initial launch angle of object                                |\n| `twobody`    |
  Two gravitationally attracted bodies, described below      | `r`, `θ` (distance
  between bodies, angle of rotation)               | Masses of bodies and initial
  angular veocity                  |\n| `spring`     | Spring hanging from a block
  on a rail, holding up a weight | `r`, `x`, `θ` (position of block, spring compression,
  spring angle) | Masses of block, weight, spring constant, initial compression |\n|
  `bezier`     | Bead sliding at constant velocity along bezier curve       | `t`
  (Bezier time parameter)                                         | Control points
  for arbitrary bezier curve                     |\n\nCall with `--help` (or `[EXAMPLE]
  --help`) for more information.\n\nMore examples\n-------------\n\n### Two-body system
  under gravity\n\n[![The two-body solution](http://i.imgur.com/TDEHTcb.gif)][gifv2]\n\n[gifv2]:
  http://i.imgur.com/TDEHTcb.gifv\n\n1.  The generalized coordinates are just:\n\n
  \   *   `r`, the distance between the two bodies\n    *   `θ`, the current angle
  of rotation\n\n    ~~~haskell\n    x1 =  m2/(m1+m2) * r * sin θ        -- assuming
  (0,0) is the center of mass\n    y1 =  m2/(m1+m2) * r * cos θ\n    x2 = -m1/(m1+m2)
  * r * sin θ\n    y2 = -m1/(m1+m2) * r * cos θ\n    ~~~\n\n2.  The masses/inertias
  are again `m1` for `x1` and `y1`, and `m2` for `x2` and\n    `y2`\n\n3.  The potential
  energy function is the classic gravitational potential:\n\n    ~~~haskell\n    U
  = - m1 * m2 / r\n    ~~~\n\nAnd...that's all you need!\n\nHere is the actual code
  for the two-body system:\n\n~~~haskell\ntwoBody :: System 4 2\ntwoBody =\n    mkSystem
  (vec4 m1 m1 m2 m2)             -- masses\n             (\\(V2 r θ) -> let r1 =   r
  * m2 / (m1 + m2)\n                               r2 = - r * m1 / (m1 + m2)\n                           in
  \ V4 (r1 * cos θ) (r1 * sin θ)\n                                  (r2 * cos θ) (r2
  * sin θ)\n             )                              -- coordinates\n             (\\(V2
  r _) -> - m1 * m2 / r)   -- potential\n~~~\n"
license-name: BSD3
