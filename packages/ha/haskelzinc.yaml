homepage: ''
changelog-type: text
hash: d1287b35af78e4602cd859c3b2eeaa563669d0b248db0057693deb3026a6b736
test-bench-deps: {}
maintainer: klara.mar@cs.kuleuven.be
synopsis: CP in Haskell through MiniZinc
changelog: ! "0.3.0.0\r\n - Added support for annotations\r\n - Structural changes
  in the representational system of MiniZinc models\r\n - Module Interfaces.MZAST
  renamed to Interfaces.MZASTBase\r\n - Module Interfaces.MZAST used for a more human
  friendly interface for building \r\n   representations of MiniZinc models.\r\n -
  Module Interfaces.MZBuiltIns added. Contains haskelzinc represenatation of predefined
  MiniZinc \r\n   operators, functions, tests, predicates and annotations.\r\n - Module
  Interfaces.FZSolutionParser provides parsers useful for building custom solutions'
  \r\n   parsers, in case a MiniZinc output item alters the default format of the
  solutions.\r\n - Compatibility with GHC 8.0.1 tested (and passed)\r\n\r\n0.2.0.0\r\n
  - Added support for returning specified number of solutions\r\n - Interactive interface
  of iTestModel improved\r\n - Skips writing .mzn file\r\n - Parses solutions directly,
  instead of writing into and reading from a file"
basic-deps:
  base: ! '>=4.8 && <5'
  parsec3: ! '>=1.0.0.8'
  filepath: ! '>=1.4.1'
  process: ! '>=1.4'
  containers: ! '>=0.5.6'
  pretty: ! '>=1.1.3'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.3'
- '0.3.0.9'
author: Klara Marntirosian
latest: '0.3.0.9'
description-type: markdown
description: ! "# Description\r\nThis package was created in the context of the [GRACeFUL
  project](https://www.graceful-project.eu/).\r\n\r\nThe haskelzinc library defines
  an interface to the MiniZinc constraint proramming language. It provides\r\n\r\n*
  a Haskell abstract syntax tree for the MiniZinc language, with which one can represent
  MiniZinc models in Haskell\r\n* a human-friendly DSL for building MiniZinc model
  representations\r\n* a pretty printer to print the representation of a MiniZinc
  model in MiniZinc\r\n* a parser that returns a representation of the solutions obtained
  by running the MiniZinc model\r\n* a set of functions useful for building a custom
  FlatZinc solutions parser.\r\n\r\nAn additional module gives the possibility to
  directly get the solutions of a MiniZinc finite domain model. \r\nOption for interactive
  interface is provided, as well as choice between two solvers: the G12/FD built-in
  \r\nsolver of FlatZinc and choco3.\r\n\r\n# Requirements\r\n * GHC 7.10.3 or 8\r\n
  * MiniZinc 2.0 or 2.1\r\n\r\n## Optional\r\nTo use choco solver, also required:\r\n\r\n
  \  - JDK 8+\r\n   - The following jar files (can be also found in the `choco/` directory
  of [the haskelzinc repo](https://github.com/GRACeFUL-project/haskelzinc))\r\n     -
  choco_solver (with dependencies) [http://choco-solver.org/Download?q=releases]\r\n
  \    - choco_parser [https://oss.sonatype.org/content/repositories/releases/org/choco-solver/choco-parsers/3.3.3/]\r\n
  \    - ANTLR >4.5.2 java runtime binaries [http://www.antlr.org/download.html]\r\n\r\n#
  Installation\r\nThis library is [available](https://hackage.haskell.org/package/haskelzinc)
  on hackage. Use `cabal install`.\r\n\r\n# Configuration\r\n  1. Create a file `HZconf/conf.txt`
  in the same directory level where you want to run your code.\r\n  2. Fill in the
  corresponding paths by adding the equal sign (=) and the correct path.\r\n    *
  MINIZINC_DIR: the directory where mzn2fzn and flatzinc executables are located\r\n
  \   * CHOCO_PARSER: the path of the choco parser java library\r\n    * CHOCO_SOLVER:
  the path of the choco solver java library\r\n    * ANTLR: the path of the antlr
  java library\r\n\r\nExample:\r\n\r\n> MINIZINC_DIR = path/to/dir\r\n\r\n# Not yet
  supported\r\n * MiniZinc enumerated types\r\n * Set constraints with the choco solver"
license-name: BSD3
