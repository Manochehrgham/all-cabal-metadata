homepage: ''
changelog-type: ''
hash: a04c075a51f4b256add300bcd5a867b65fb3286918198adc8ad8e7b29380e53e
test-bench-deps:
  pred-trie: -any
  bytestring: -any
  wai-transformers: -any
  base: -any
  hspec: -any
  text: -any
  semigroups: -any
  tries: -any
  containers: -any
  regex-compat: -any
  wai-middleware-content-type: -any
  hspec-wai: -any
  composition-extra: -any
  nested-routes: -any
  mtl: -any
  poly-arity: -any
  attoparsec: -any
  transformers: -any
  wai-middleware-verbs: -any
  http-types: -any
maintainer: Athan Clark <athan.clark@gmail.com>
synopsis: Declarative, compositional Wai responses
changelog: ''
basic-deps:
  warp: -any
  pred-trie: ! '>=0.3'
  cookie: -any
  lucid: -any
  bytestring: -any
  wai-transformers: -any
  stm: -any
  base: ! '>=4.6 && <5'
  time: -any
  base64-bytestring: -any
  text: -any
  data-default: -any
  semigroups: -any
  memory: -any
  tries: -any
  containers: -any
  wai-session: -any
  blaze-builder: -any
  regex-compat: -any
  wai-middleware-content-type: ! '>=0.0.3'
  utf8-string: -any
  composition-extra: ! '>=2.0.0'
  iso8601-time: -any
  nested-routes: -any
  cryptonite: -any
  mtl: -any
  poly-arity: ! '>=0.0.7'
  attoparsec: -any
  wai-extra: -any
  transformers: -any
  errors: -any
  wai-middleware-verbs: ! '>=0.0.4'
  http-types: -any
all-versions:
- '0.0.1'
- '0.0.1.1'
- '0.0.2'
- '0.0.3.1'
- '0.1'
- '0.1.1'
- '0.2'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.2.2.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.2.1'
- '1.0'
- '1.0.0.1'
- '2.0.0'
- '2.0.1'
- '2.1.0'
- '2.2.0'
- '3.0.0'
- '3.0.0.1'
- '3.0.0.2'
- '3.1.0'
- '3.2.0'
- '4.0.0'
- '5.0.0'
- '6.0.0'
author: Athan Clark <athan.clark@gmail.com>
latest: '6.0.0'
description-type: haddock
description: ! 'A method to writing Wai responses


  This library attempts to make it easier to write nice Wai response handlers

  by giving us a Sinatra/

  <https://hackage.haskell.org/package/scotty Scotty>-like syntax for declaring HTTP-verb
  oriented

  routes, in addition to file-extension handling and rose-tree like composition.

  Not only do we have literal route specification, like

  <https://hackage.haskell.org/package/scotty Scotty> &

  <https://hackage.haskell.org/package/spock Spock>, but we

  can also embed

  <https://hackage.haskell.org/package/attoparsec Attoparsec>

  parsers and <https://hackage.haskell.org/package/regex-compat Regular Expressions>

  /directly/ in our routes, with our handlers

  reflecting their results. You can find more information in the

  <https://www.fpcomplete.com/user/AthanClark/nested-routes demo>.

  and the examples.'
license-name: BSD3
