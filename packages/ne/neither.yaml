changelog-type: ''
hash: f181ccdaa38f3e8f43ead8f185a36b840e23e52324eb8981bae1be44927ae007
synopsis: Provide versions of Either with good monad and applicative instances. (deprecated)
changelog: ''
all-versions:
- '0.0.0'
- '0.0.1'
- '0.0.2'
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.0.1'
- '0.3.1'
- '0.3.1.1'
latest: '0.3.1.1'
description-type: haddock
description: ! 'The standard Either datatype suffers from a lack of monad and applicative
  instances. To make matters worse, the mtl and transformers packages provide orphan
  instances which conflict with each other, as well as defining a transformer version
  which has an usually unnecessary superclass constraint.


  Besides these annoyances, there is another issue: there exist two reasonable definitions
  of the Applicative instance for Either: one the holds onto only the first Left value,
  or one that appends all Left values together via a Monoid instance. The former is
  compatible with the monad instance, while the latter is not.


  This package defines three datatypes, some helpers functions and instances. The
  data types are AEither, MEither and MEitherT. AEither provides an Applicative instance
  which appends Left values, MEither provides the monadic definition, and MEitherT
  is a monad transformer.'
