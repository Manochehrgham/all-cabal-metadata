homepage: https://github.com/vmchale/QRImager#readme
changelog-type: ''
hash: 3d5a49035afcba7f277e121597387e2be79af6da09d35c5fe2d4c07db1386648
test-bench-deps: {}
maintainer: tmchale@wisc.edu
synopsis: Library to generate QR codes from bytestrings and objects
changelog: ''
basic-deps:
  JuicyPixels: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  lens: -any
  haskell-qrencode: -any
  jose-jwt: -any
  cryptonite: -any
  qr-imager: -any
  aeson: -any
  vector: -any
  directory: -any
all-versions:
- '0.1.0.0'
author: Vanessa McHale
latest: '0.1.0.0'
description-type: markdown
description: ! "#QR Imager Library\nThis is a library to generate `.png` files from
  QR codes.\n\n##Dependencies\nThe library depends on the C library [https://github.com/fukuchi/libqrencode](libqrencode)
  which you will need to install separately.\n\n##Usage\nThe library exports main
  functions - `createQRCode` and `byteStringToQR` - and their secured/signed versions.
  The first takes any object that is an instance of `ToJSON` and writes an image to
  file, while the second takes a (strict) bytestring and writes it to file.\n\n##Executable\n\n###Installation\nFor
  building haskell, the best tool is currently [http://haskellstack.org](stack). Install
  it, and then type\n\n```\nstack install --install-ghc\n```\n\nin the appropriate
  directory, and it will be installed on your path. \n\n###Use\n\nCompiling will generate
  an executable called `QRPipe` which reads from `stdin` and outputs a file as the
  second argument, e.g.\n\n```echo 'My name is:\" | QRPipe \"nametag.png\"```\n"
license-name: BSD3
