homepage: https://gitlab.com/chordify/currency-codes
changelog-type: markdown
hash: 936f2afe75b6205f618fc4539397878495c7dfc54e850982dee4d7716d223414
test-bench-deps: {}
maintainer: Matthias Benkort <matthias@chordify.net>
synopsis: ISO-4217 Currency Codes
changelog: ! "# Changelog\n\n## v1.0.0.0 (2017-08-29)\n  \n- Provide 2 types `Currency`
  and `Alpha`\n- Provide constructors for each currency and Alpha code listed in the
  standard\n- Provide a list of all `Currency`\n- Provide instances for:\n  - Show\n
  \ - Eq\n  - Read\n  - Generic\n  - Data\n  - Typeable\n  - FromJSON (aeson)\n  -
  ToJSON   (aeson)\n  - ToSchema (swagger2)\n  - Val      (bson)\n  - Random   (random)\n
  \ - Ord (Alpha only)\n  - Enum (Alpha only\n  - Bounded (Alpha only)\n"
basic-deps:
  base: ! '>=4 && <5'
  text: ! '>=1.0.0.0'
  lens: ! '>=4.0.0'
  swagger2: ! '>=2.0.0.0'
  bson: ! '>=0.2.0.0'
  random: ! '>=1.0.0.0'
  aeson: ! '>=0.7.0.0'
  safe: ! '>=0.2'
all-versions:
- '1.0.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.0.0.3'
author: Chordify
latest: '1.0.0.3'
description-type: markdown
description: ! "# Currency Codes (ISO-4217) [![](https://img.shields.io/hackage/v/currency-codes.svg)](https://hackage.haskell.org/package/currency-codes)\n\n##
  Overview \n\nThis package mainly provides 2 data types to represent and manipulate
  currencies according to\nthe [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)
  standard. \n\nIt also provides a handful of instances for common typeclasses (`Show`,
  `Read`, `Random`, `ToJSON`,\n`FromJSON`, `Val`, `ToSchema`). \n\n## Example\n\n```haskell\nimport
  \          Data.Aeson     (ToJSON(..))\nimport qualified Data.Aeson     as Aeson\nimport
  \          Data.Currency  (Currency, Alpha)\nimport qualified Data.Currency  as
  Currency\nimport           GHC.Generics   (Generic)\nimport qualified Safe\n\n\nmyCurrencies
  :: [Currency]\nmyCurrencies =\n  [Currency.eur, Currency.usdDollar]\n\nfromAlpha
  :: Alpha -> [Currency] -> Maybe Currency\nfromAlpha α =\n  Safe.headMay . filter
  ((==) α . Currency.alpha)\n\n\ndata Transaction = Transaction\n  { amount   :: Integer\n
  \ , currency :: Currency\n  } deriving (Eq, Show, Generic)\n\ninstance ToJSON Transaction
  where\n  toJSON = \n    Aeson.genericToJSON Aeson.defaultOptions\n```\n\n## License\n\n[MIT
  © 2017 Chordify](https://gitlab.com/chordify/currency-codes/blob/master/LICENSE)\n"
license-name: MIT
