homepage: https://github.com/adamwalker/haskell_cudd
changelog-type: ''
hash: a57cfd93fcc1b5d19005fb38fde9d9de2aef0bdb649a9f9f5c0f96e67be6ee33
test-bench-deps: {}
maintainer: adamwalker10@gmail.com
synopsis: Bindings to the CUDD binary decision diagrams library
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  array: ! '>=0.4 && <0.6'
  mtl: ! '>=2.1 && <2.3'
  transformers: ! '>=0.3 && <0.6'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
author: Adam Walker
latest: '0.1.0.3'
description-type: haddock
description: ! 'Bindings to version 3.0.0 of the CUDD binary decision diagrams library.


  <http://vlsi.colorado.edu/~fabio/CUDD/>


  /Installation/


  Either install CUDD using your system''s package manager or download and build CUDD
  from here: <https://github.com/adamwalker/cudd>. This is a mirror of the CUDD source
  that has been modified to build shared object files.


  If you chose the latter option you need to tell cabal where to find cudd:


  "cabal install cudd --extra-include-dirs=\/path\/to\/cudd\/src\/include --extra-lib-dirs=\/path\/to\/cudd\/src\/libso"


  and you need to tell your program where to find the shared libraries:


  "LD_LIBRARY_PATH=\/path\/to\/cudd\/src\/libso ghci"


  /Usage/


  This package provides two interfaces to the CUDD library:


  * A purely functional one in "Cudd.Cudd" that automatically dereferences BDDs during
  garbage collection.


  * An ST Monad based one in "Cudd.Imperative" that gives you precise control over
  the ordering of BDD operations and when BDDs are dereferenced. Use this one if you
  want your code to perform well.'
license-name: BSD3
