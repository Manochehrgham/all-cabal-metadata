homepage: http://tuomas56.github.io/currency-convert
changelog-type: ''
hash: 9dc044eab825e16848a8c2612194e11530d4c103e89abd8c91e14796a393bc05
test-bench-deps: {}
maintainer: pigworts2@gmail.com
synopsis: Typesafe currency conversion
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.2 && <1.3'
  http-conduit: ! '>=2.2 && <2.3'
  aeson: ! '>=0.9 && <0.10'
all-versions:
- '0.1.0.0'
author: Tuomas Laakkonen
latest: '0.1.0.0'
description-type: markdown
description: ! "# currency-convert\n\nProperty    | Value\n------------|----------------------\nModule
  \     | Data.Currency.Convert\nDescription | Typesafe currency coversion using exchange
  rates from various sources.\nCopyright   | &copy; Tuomas Laakkonen 2016\nLicense
  \    | BSD3\nMaintainer  | pigworts2@gmail.com\nStability   | Experimental\nPortability
  | Non-portable (GHC extensions)\n\nThis module allows values of currency to be converted
  from one currency to another using exchange rates from various sources.\n\nThe basic
  operation for this module is as follows:\n\nFirst, get a conversion function (with
  `getDefaultConverter` or `getConverter`):\n\n```haskell\n    >>> Converter convert
  <- getDefaultConverter\n```\n\nThen, construct some value of currency using the
  convenience functions, and convert it using the convert function you just got:\n\n```haskell\n
  \   >>> convert (usd 100) :: EUR\n    90.0 eur\n```\n\nThe result type of `convert`
  defines what currency the value will be converted into.\n\n`Currency` implements
  `Num`, `Fractional` and `Real` so the usual arithmetic operations are defined, and
  its value can be extracted with `toRational`."
license-name: BSD3
