homepage: https://github.com/sboosali/enumerate
changelog-type: ''
hash: 3ba048c070da82be24a89ce877ac5a2e57588014cc9dc1933a80eeed98315c3c
test-bench-deps: {}
maintainer: samboosalis@gmail.com
synopsis: enumerate all the values in a finite type (automatically)
changelog: ''
basic-deps:
  exceptions: ==0.8.*
  enumerate: ==0.0.0
  base: ==4.8.*
  semigroups: ==0.18.*
  containers: ==0.5.*
  vinyl: ==0.5.*
  ghc-prim: ==0.4.*
  MemoTrie: ==0.6.*
  deepseq: ==1.4.*
  template-haskell: ==2.10.*
all-versions:
- '0.0.0'
- '0.1.0'
author: Sam Boosalis
latest: '0.1.0'
description-type: markdown
description: ! "# enumerate\r\nenumerate all the values in a finite type (automatically)\r\n\r\nprovides
  (1) a typeclass for enumerating all values in a finite type,\r\n(2) a generic instance
  for automatic deriving, and\r\n(3) helpers that reify functions (partial or total,
  monadic or pure) into a Map.\r\n\r\n# example\r\n\r\n```haskell\r\n    {-# LANGUAGE
  DeriveGeneric, DeriveAnyClass #-}\r\n    import Data.Enumerable (Enumerable(..))\r\n
  \   import Data.Generics (Generics)\r\n\r\n    data CrudOp = Add | Edit | Delete
  | View\r\n     deriving (Eq,Ord,Enum,Bounded,Generic,Enumerable)\r\n    data Route
  = Home | Person CrudOp | House CrudOp\r\n     deriving (Eq,Ord,Generic,Enumerable)\r\n\r\n
  \   >>> enumerated :: [Route]\r\n    [Home, Person Add, Person Edit, Person Delete,
  Person View, House Add, House Edit, House Delete, House View]\r\n```\r\n\r\n# (extensive)
  documentation:\r\nhttps://hackage.haskell.org/package/enumerate\r\n"
license-name: MIT
