homepage: https://github.com/sboosali/enumerate
changelog-type: ''
hash: 24f2b1c6da3a1a2f6c95466f7b9a998ab86d48e386444a419c86c94e99020f7c
test-bench-deps:
  enumerate: -any
  base: -any
  doctest: -any
maintainer: samboosalis@gmail.com
synopsis: enumerate all the values in a finite type (automatically)
changelog: ''
basic-deps:
  enumerate: -any
  base: ! '>=4.7 && <5'
  array: ==0.5.*
  containers: ==0.5.*
  vinyl: ==0.5.*
  ghc-prim: ! '>=0.3 && <0.5'
  deepseq: ! '>=1.3'
  template-haskell: ! '>=2.9'
all-versions:
- '0.0.0'
- '0.1.0'
- '0.1.1'
- '0.2.1'
author: Sam Boosalis
latest: '0.2.1'
description-type: markdown
description: ! "# enumerate\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/enumerate.svg)](https://hackage.haskell.org/package/enumerate)\r\n[![Build
  Status](https://secure.travis-ci.org/sboosali/enumerate.svg)](http://travis-ci.org/sboosali/enumerate)\r\n\r\nenumerate
  all the values in a finite type (automatically)\r\n\r\nprovides (1) a typeclass
  for enumerating all values in a finite type,\r\n(2) a generic instance for automatic
  deriving, and\r\n(3) helpers that reify functions (partial or total, monadic or
  pure) into a Map.\r\n\r\n# example\r\n\r\n```haskell\r\n    {-# LANGUAGE DeriveGeneric,
  DeriveAnyClass #-}\r\n    import Data.Enumerate (Enumerable(..))\r\n    import Data.Generics
  (Generics)\r\n\r\n    data CrudOp = Add | Edit | Delete | View\r\n     deriving
  (Eq,Ord,Enum,Bounded,Generic,Enumerable)\r\n    data Route = Home | Person CrudOp
  | House CrudOp\r\n     deriving (Eq,Ord,Generic,Enumerable)\r\n\r\n    >>> enumerated
  :: [Route]\r\n    [Home, Person Add, Person Edit, Person Delete, Person View, House
  Add, House Edit, House Delete, House View]\r\n```\r\n\r\n# (extensive) documentation:\r\nhttps://hackage.haskell.org/package/enumerate\r\n"
license-name: MIT
