homepage: https://github.com/myfreeweb/gitson
changelog-type: ''
hash: f986a775ed5ff8aa88785dacdee0b0d0cb3461ecbc3a835cc7df1294b6ff61fc
test-bench-deps:
  base: ! '>=4.0.0.0 && <5'
  hspec: -any
  criterion: -any
  process: -any
  doctest: -any
  gitson: -any
  transformers: -any
  random: -any
  Glob: -any
  aeson: -any
  directory: -any
maintainer: greg@unrelenting.technology
synopsis: A document store library for Git + JSON.
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.0.0.0 && <5'
  aeson-pretty: -any
  monad-control: -any
  filepath: -any
  process: -any
  flock: -any
  transformers: -any
  errors: -any
  aeson: -any
  directory: -any
all-versions:
- '0.1.0'
- '0.2.0'
- '0.2.1'
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.5.1'
author: Greg V
latest: '0.5.1'
description-type: markdown
description: ! "# gitson [![Hackage](https://img.shields.io/hackage/v/gitson.svg?style=flat)](https://hackage.haskell.org/package/gitson)
  [![Build Status](https://img.shields.io/travis/myfreeweb/gitson.svg?style=flat)](https://travis-ci.org/myfreeweb/gitson)
  [![Coverage Status](https://img.shields.io/coveralls/myfreeweb/gitson.svg?style=flat)](https://coveralls.io/r/myfreeweb/gitson)
  [![ISC License](https://img.shields.io/badge/license-ISC-red.svg?style=flat)](https://tldrlegal.com/license/-isc-license)\n\nA
  simple document store library for Git + JSON, based on [Aeson].\nUses command line
  git, at least for now.\nNo fancy indexes and stuff, but it does what I need right
  now.\nTransactions use [flock], so it's safe even across completely separate programs!\n\n[Aeson]:
  http://hackage.haskell.org/package/aeson\n[flock]: http://hackage.haskell.org/package/flock\n\n##
  Usage\n\n```haskell\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Gitson\nimport Gitson.Util
  (insideDirectory)\nimport Data.Aeson.TH\nimport Control.Monad.IO.Class (liftIO)\n\ndata
  Thing = Thing { val :: Int } deriving (Eq, Show)\n$(deriveJSON defaultOptions ''Thing)
  -- there are non-Template ways of doing this, see aeson docs\n\nmain :: IO ()\nmain
  = do\n  -- Creating a new \"database,\" basically mkdir + git init\n  createRepo
  \"./content\"\n\n  -- Writing data to a \"database\" happens in transactions\n  --
  A transaction is committed (write files & git commit)\n  -- after the block is executed,
  just like in SQL databases\n  -- Also, transactions are thread-safe\n  transaction
  \"./content\" $ do\n    -- order:    (collection) (key        ) (data)\n    saveDocument
  \"things\"     \"first-thing\" Thing {val = 1}\n    -- Collections are created automatically,
  like in MongoDB\n    liftIO $ putStrLn \"Written first-thing\"\n    -- You have
  to use liftIO to do IO actions inside of a transaction!\n    -- Because a transaction
  is a monad transformer, WriterT actually\n\n  -- Reading data\n  -- (These are normal
  IO actions, so if you want\n  --  to read inside of a transaction, liftIO.\n  --
  \ Note: transaction already includes insideDirectory!\n  --  Warning: you can't
  read what you've written in the current transaction!!!\n  --  You can only read
  what's been written before the transaction began.)\n  insideDirectory \"./content\"
  $ do\n    colls <- listCollections\n          -- [\"things\"]\n    keys <- listDocumentKeys
  \"things\"\n         -- [\"first-thing\"]\n    first-thing <- readDocument \"things\"
  \"first-thing\" :: IO (Maybe Thing)\n         -- Just Thing {val = 1}\n    things
  <- readEntries \"things\" :: IO [Thing]\n           -- [Thing {val = 1}]\n\n  --
  Note: insideDirectory is just a function that changes\n  -- the current directory,
  executes an action and changes it back.\n  -- You can use reading actions without
  it, like this:\n  keys <- listDocumentKeys \"./content/things\"\n\n\n  -- And now,
  some bells and whistles:\n  -- Numeric id support\n  transaction \"./content\" $
  do\n    saveNextDocument \"things\" \"hello-world\" Thing {val = 1}\n    -- will
  save to things/000001-hello-world.json\n  insideDirectory \"./content\" $ do\n    thing
  <- readDocumentById \"things\" 1\n    same-thing <- readDocumentByName \"things\"
  \"hello-world\"\n    -- both will read from things/000001-hello-world.json\n    \n
  \   i <- documentIdFromName \"things\" \"hello-world\"\n      -- 1\n    n <- documentNameFromId
  \"things\" 1\n      -- \"hello-world\"\n```\n\n## Development\n\n```bash\n# Update
  to latest version of Cabal.\ncabal update\ncabal install cabal-install\n\n# Initialize
  a sandbox and install the package's dependencies.\nmake install\n\n# Configure &
  build the package.\nmake configure build\n\n# Test package.\nmake test\n\n# Benchmark
  package.\nmake bench\n\n# Start a REPL.\nmake repl\n\n# Generate documentation.\nmake
  haddock\n```\n\n## License\n\nCopyright 2014-2015 Greg V <greg@unrelenting.technology>\nAvailable
  under the ISC license, see the `COPYING` file\n"
license-name: OtherLicense
