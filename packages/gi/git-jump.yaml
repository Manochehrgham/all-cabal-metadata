homepage: https://github.com/Peaker/git-jump
changelog-type: ''
hash: c13e0cd159879e38e48428f3b41cafecf35565eeb5b6a77d99569d0edabc4f33
test-bench-deps: {}
maintainer: eyal.lotem@gmail.com
synopsis: Move a git branch
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
  process: ! '>=1.0.1.1'
  base-compat: ! '>=0.8 && <0.9'
all-versions:
- '0.1.0.0'
author: Eyal Lotem
latest: '0.1.0.0'
description-type: markdown
description: ! '# git-jump


  ## Moving to a new position


  When you decide that the current branch needs to use a different hash

  and content, currently you need to `reset --hard` to the new position.


  However, `reset --hard` has the annoying side-effect of deleting any

  outstanding work.


  It would be nice to be able to jump the tip of the current branch to a

  new position and update the working tree, as long as there''s no

  overlap between files changed in the working tree and in the diff to

  the remote location.


  Just type:


  ```

  git-jump <refspec>

  ```


  To jump to the new location.


  ## Updating a local tracking branch with no local commits


  When you have a local branch that is tracking a remote branch (and has

  no local commits) that was rebased, you would have to `reset --hard`

  to the remote location. This requires typing out the name of the

  upstream branch (or "@{u}" at least), and as usual, loses any

  uncommitted changes.


  Just type:


  ```

  git-jump

  ```


  With no parameters, and it will jump to the upstream location, taking

  any uncommitted changes on top.

'
license-name: BSD3
