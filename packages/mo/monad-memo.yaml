changelog-type: ''
hash: 14e52a1337e9853884805884dffd9a22d0efe8d417f0d3ad40fcacc0cf4c618f
synopsis: Memoization monad transformer
changelog: ''
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.3.0'
- '0.4.0'
- '0.4.1'
latest: '0.4.1'
description-type: haddock
description: ! 'Memoization monad transformer supporting most of the standard monad
  transformers and a range of memoization cache types: from default pure maps to extremely
  fast mutable vectors


  To add memoization behaviour to a monadic function:


  1) Add ''Control.Monad.Memo.memo'' combinator at the point when memoization is required
  (i.e. recursive call)


  >import Control.Monad.Memo

  >

  >fibm 0 = return 0

  >fibm 1 = return 1

  >fibm n = do

  >  n1 <- memo fibm (n-1)

  >  n2 <- memo fibm (n-2)

  >  return (n1+n2)


  2) Use approprite /*eval*/ or /*run*/ function to evaluate resulting `MonadMemo`
  monad:


  >startEvalMemo (fibm 100)


  See detailed description and examples: "Control.Monad.Memo"'
