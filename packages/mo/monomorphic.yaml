changelog-type: ''
hash: 10c4a0acc8344bae6e78832af90f0f70f0eebe9f94a07694d583df5eb37fb446
test-bench-deps: {}
synopsis: Library to convert polymorphic datatypes to/from its monomorphic represetation
changelog: ''
basic-deps:
  base: ! '>=2.0 && <5'
all-versions:
- '0.0.1.0'
- '0.0.1.1'
- '0.0.1.2'
- '0.0.2.0'
- '0.0.3.0'
- '0.0.3.1'
- '0.0.3.2'
latest: '0.0.3.2'
description-type: markdown
description: ! "The `monomorphic` library\n==========================\n[![Build Status](https://travis-ci.org/konn/monomorphic.svg)](https://travis-ci.org/konn/monomorphic)\n\nWhat
  is this?\n-------------\nThis library provides the type-class and functions to convert
  polymorphic data-types to/from its monomorphic representation types.\nIt is convenient
  to provide a monomorphic interface for dependently-typed programs.\n\nUsage\n-----\nConsider
  the following example:\n\n```haskell\ndata Nat = Z | S Nat\ndata SNat (n :: Nat)
  where\n  SZ :: SNat Z\n  SS :: SNat n -> SNat (S n)\n\ninstance Monomorphicable
  SNat where\n  type MonomorphicRep SNat = Int\n  promote 0     = Monomorphic SZ\n
  \ promote n\n    | n < 0     = error \"negative number\"\n    | otherwise =\n        case
  promote (n - 1) of\n          Monomorphic sn -> Monomorphic (SS sn)\n  demote (Monomorphic
  sn) = toInt sn\n\ndata Vector (a :: *) (n :: Nat) where\n  VNil :: Vector a Z\n
  \ (:-) :: a -> Vector a n -> Vector a (S n)\n\ninstance Monomorphicable (Vector
  a) whre\n  type MonomorphicRep (Vector a) = [a]\n  demote  (Monomorphic n) = toList
  n\n  promote [] = Monomorphic Nil\n  promote (x:xs) =\n    case promote xs of\n
  \     Monomorphic xs' -> Monomorphic $ x :- xs'\n```\n\n`Monomorphic k` is the wrapper
  type to eliminate the polymorphic part of the types.\nThe `Monomorphicable` type-class
  provides the functions to convert polymorphic value from/to its monomorphic representation,
  say `MonomorphicRep k` associated type.\n\nIn the example above, `SNat n` can be
  monomorphically represented by `Int`.\nThere are some convenient functions to manipulate
  monomorphic types and functions. For more detail, see API documentation.\n"
