homepage: http://www.github.com/astanin/moo/
changelog-type: ''
hash: f08d98f90d8d02d95cc1b973356c28242a48af9427187c4c0043266d79f98253
test-bench-deps:
  mersenne-random-pure64: -any
  base: <5
  time: -any
  gray-code: ! '>=0.2.1'
  HUnit: -any
  array: -any
  random-shuffle: ! '>=0.0.2'
  containers: -any
  moo: -any
  mtl: -any
  random: ! '>=0.1'
  monad-mersenne-random: -any
maintainer: Sergey Astanin <s.astanin@gmail.com>
synopsis: Genetic algorithm library
changelog: ''
basic-deps:
  mersenne-random-pure64: -any
  base: ! '>=4 && <5'
  time: -any
  gray-code: ! '>=0.2.1'
  array: -any
  random-shuffle: ! '>=0.0.2'
  mtl: ! '>=2'
  random: ! '>=0.1'
  monad-mersenne-random: -any
all-versions:
- '1.0'
author: Sergey Astanin <s.astanin@gmail.com>
latest: '1.0'
description-type: markdown
description: ! "Moo\n===\n\n     ------------------------------------------------\n
  \   < Moo. Breeding Genetic Algorithms with Haskell. >\n     ------------------------------------------------\n
  \           \\   ^__^\n             \\  (oo)\\_______\n                (__)\\       )\\/\\\n
  \                   ||----w |\n                    ||     ||\n\n\n\nFeatures\n--------\n\n
  \   |                       | Binary GA            | Continuous GA            |\n
  \   |-----------------------+----------------------+--------------------------|\n
  \   |Encoding               | binary bit-string    | sequence of real values  |\n
  \   |                       | Gray bit-string      |                          |\n
  \   |-----------------------+----------------------+--------------------------|\n
  \   |Initialization         |            random uniform                       |\n
  \   |                       |            constrained random uniform           |\n
  \   |                       |            arbitrary custom                     |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Objective              |            minimization and maximiation         |\n
  \   |                       |            optional scaling                     |\n
  \   |                       |            optional ranking                     |\n
  \   |                       |            optional niching (fitness sharing)   |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Selection              |            roulette                             |\n
  \   |                       |            stochastic universal sampling        |\n
  \   |                       |            tournament                           |\n
  \   |                       |            optional elitism                     |\n
  \   |                       |            optionally constrained               |\n
  \   |                       |            custom non-adaptive ^                |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Crossover              |            one-point                            |\n
  \   |                       |            two-point                            |\n
  \   |                       |            uniform                              |\n
  \   |                       |            custom non-adaptive ^                |\n
  \   |                       +----------------------+--------------------------|\n
  \   |                       |                      | BLX-Î± (blend)            |\n
  \   |                       |                      | SBX (simulated binary)   |\n
  \   |                       |                      | UNDX (unimodal normally  |\n
  \   |                       |                      | distributed)             |\n
  \   |-----------------------+----------------------+--------------------------|\n
  \   |Mutation               | point                | Gaussian                 |\n
  \   |                       | asymmetric           |                          |\n
  \   |                       | constant frequency   |                          |\n
  \   |                       +----------------------+--------------------------|\n
  \   |                       |            custom non-adaptive ^                |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Replacement            |            generational with elitism            |\n
  \   |                       |            steady state                         |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Stop                   |            number of generations                |\n
  \   |condition              |            values of objective function         |\n
  \   |                       |            stall of objective function          |\n
  \   |                       |            custom or interactive (`loopIO`)     |\n
  \   |                       |            time limit (`loopIO`)                |\n
  \   |                       |            compound conditions (`And`, `Or`)    |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Logging                |            pure periodic (any monoid)           |\n
  \   |                       |            periodic with `IO`                   |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Constrainted           |            constrained initialization           |\n
  \   |optimization           |            constrained selection                |\n
  \   |                       |            death penalty                        |\n
  \   |-----------------------+-------------------------------------------------|\n
  \   |Multiobjective         |            NSGA-II                              |\n
  \   |optimization           |            constrained NSGA-II                  |\n\n\n`^`
  non-adaptive: any function which doesn't depend on generation number\n\nThere are
  other possible encodings which are possible to represent\nwith list-like genomes
  (`type Genome a = [a]`):\n\n  * permutation encodings (`a` being an integer, or
  other `Enum` type)\n  * tree encodings (`a` being a subtree type)\n  * hybrid encodings
  (`a` being a sum type)\n\n\nContributing\n------------\n\nThere are many ways you
  can help developing the library:\n\n  * I'm not a native speaker of English. If
  you are, please proof-read\n    and correct the comments and the documentation.\n\n
  \ * Moo is designed with possibility of implementing custom genetic\n    operators
  in mind. If you write new operators (`SelectionOp`,\n    `CrossoverOp`, `MutationOp`)
  or replacement strategies\n    (`StepGA`), consider contributing them to the library.\n
  \   In the comments please give a reference to an academic\n    work which introduces
  or studies the method. Explain when or why\n    it should be used. Provide tests
  and examples if possible.\n\n  * Implementing some methods (like adaptive genetic
  algorithms) will\n    require to change some library types. Please discuss your
  approach\n    first.\n\n  * Contribute examples. Solutions of known problems with
  known optima\n    and interesting properties. Try to avoid examples which are too\n
  \   contrived.\n\n\n\nAn example\n----------\n\nMinimizing [Beale's function][test-functions]
  (optimal value f(3, 0.5) = 0):\n\n```haskell\nimport Moo.GeneticAlgorithm.Continuous\n\n\nbeale
  :: [Double] -> Double\nbeale [x, y] = (1.5 - x + x*y)**2 + (2.25 - x + x*y*y)**2
  + (2.625 - x + x*y*y*y)**2\n\n\npopsize = 101\nelitesize = 1\ntolerance = 1e-6\n\n\nselection
  = tournamentSelect Minimizing 2 (popsize - elitesize)\ncrossover = unimodalCrossoverRP\nmutation
  = gaussianMutate 0.25 0.1\nstep = nextGeneration Minimizing beale selection elitesize
  crossover mutation\nstop = IfObjective (\\values -> (minimum values) < tolerance)\ninitialize
  = getRandomGenomes popsize [(-4.5, 4.5), (-4.5, 4.5)]\n\n\nmain = do\n  population
  <- runGA initialize (loop stop step)\n  print (head . bestFirst Minimizing $ population)\n```\n\nFor
  more examples, see [examples/](examples/) folder.\n\n[test-functions]: http://en.wikipedia.org/wiki/Test_functions_for_optimization\n"
license-name: BSD3
