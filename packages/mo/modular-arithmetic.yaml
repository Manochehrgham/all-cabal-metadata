changelog-type: markdown
hash: 4ad5ba5cab346bb83fc6efe52c3deb154fc986bea1708cddea97c9ea2adcecde
test-bench-deps:
  base: -any
  doctest: ==0.9.*
  Glob: ==0.7.*
synopsis: A type for integers modulo some constant.
changelog: ! '1.2.1.0

  ---

  * changed `Integral` implementation: `quotRem` now uses modular inversion!

  * added `inv` for modular inversion

  * added `SomeMod` data type for modular number with unknown modulus

  * added `modVal` and `someModVal` helpers similar to ones in `GHC.TypeLits`


'
basic-deps:
  base: ! '>=4.7 && <5'
all-versions:
- '1.0.0.0'
- '1.0.0.1'
- '1.0.1.0'
- '1.0.1.1'
- '1.1.0.0'
- '1.2.0.0'
- '1.2.1.0'
- '1.2.1.1'
latest: '1.2.1.1'
description-type: markdown
description: ! "# Modular Arithmetic\n\n[![Hackage package](http://img.shields.io/hackage/v/modular-arithmetic.svg)](http://hackage.haskell.org/package/modular-arithmetic)\n[![Build
  Status](https://travis-ci.org/TikhonJelvis/modular-arithmetic.svg?branch=master)](https://travis-ci.org/TikhonJelvis/modular-arithmetic)\n\nThis
  package provides a type for integers modulo some constant, usually written as ℤ/n.
  \n\nHere is a quick example:\n\n```\n>>> 10 * 11 :: ℤ/7\n5\n```\n\nIt also works
  correctly with negative numeric literals:\n\n```\n>>> (-10) * 11 :: ℤ/7\n2\n```\n\nModular
  division is an inverse of modular multiplication.\nIt is defined when divisor is
  coprime to modulus:\n\n```\n>>> 7 `div` 3 :: ℤ/16\n13\n>>> 3 * 13 :: ℤ/16\n7\n```\n"
