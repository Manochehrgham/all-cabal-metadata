changelog-type: ''
hash: bdddfb521c09f186506a659d10c7128de8592f120a016e2a0540e1fd2ef901f3
test-bench-deps:
  test-framework-hunit: -any
  mwc-random: ! '>=0.11'
  test-framework: -any
  base: ! '>=4 && <5'
  time: -any
  abstract-deque: ! '>=0.1.4'
  monad-par-extras: -any
  test-framework-quickcheck2: ! '>=0.3'
  HUnit: -any
  test-framework-th: -any
  array: ! '>=0.3'
  containers: -any
  mtl: ! '>=2.0.1.0'
  deepseq: ! '>=1.2'
  QuickCheck: -any
  abstract-par: -any
synopsis: A library for parallel programming based on a monad
changelog: ''
basic-deps:
  mwc-random: ! '>=0.11'
  base: ! '>=4 && <5'
  abstract-deque: ! '>=0.1.4'
  monad-par-extras: ! '>=0.3'
  array: ! '>=0.3'
  containers: -any
  mtl: ! '>=2.0.1.0'
  parallel: ! '>=3.1'
  deepseq: ! '>=1.1'
  par-classes: -any
  chaselev-deque: -any
  abstract-par: -any
all-versions:
- '0.1'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.3'
- '0.3.4'
- '0.3.4.1'
- '0.3.4.2'
- '0.3.4.3'
- '0.3.4.4'
- '0.3.4.5'
- '0.3.4.6'
- '0.3.4.7'
latest: '0.3.4.7'
description-type: haddock
description: ! 'The ''Par'' monad offers a simple API for parallel programming.  The

  library works for parallelising both pure and @IO@ computations,

  although only the pure version is deterministic.  The default

  implementation provides a work-stealing scheduler and supports

  forking tasks that are much lighter weight than IO-threads.


  For complete documentation see "Control.Monad.Par".


  Some examples of use can be found in the @examples/@ directory of

  the source package.


  Other related packages:


  * @abstract-par@ provides the type classes that abstract over different

  implementations of the @Par@ monad.


  * @monad-par-extras@ provides extra combinators and monad transformers layered on
  top of

  the @Par@ monad.


  Changes in 0.3.4 relative to 0.3:


  * Fix bugs that cause "thread blocked indefinitely on MVar" crashes.


  * Added "Control.Monad.Par.IO"'
