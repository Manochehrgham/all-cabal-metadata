homepage: https://github.com/fumieval/monad-skeleton
changelog-type: ''
hash: 553b3288863e0fd1eec79710d11f67a10eb14769942802b44bcceea923ec3fe6
test-bench-deps: {}
maintainer: Fumiaki Kinoshita <fumiexcel@gmail.com>
synopsis: Monads of program skeleta
changelog: ''
basic-deps:
  base: ==4.*
all-versions:
- '0'
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.3'
- '0.1.3.1'
- '0.1.3.2'
- '0.1.4'
author: Fumiaki Kinoshita
latest: '0.1.4'
description-type: markdown
description: ! "monad-skeleton\n======================\n\n[![Build Status](https://travis-ci.org/fumieval/monad-skeleton.svg?branch=master)](https://travis-ci.org/fumieval/monad-skeleton)\n[![Hackage](https://budueba.com/hackage/monad-skeleton)](https://hackage.haskell.org/package/monad-skeleton)\n\nThis
  package provides `Skeleton`, an operational monad. The internal encoding\ngives
  O(1) bind and monadic reflection.\n\n`Skeleton` promotes unit instructions to a
  monad. It is isomorphic to\n`MonadView (Skeleton t)`:\n\n```haskell\ndata MonadView
  t m x where\n  Return :: a -> MonadView t m a\n  (:>>=) :: !(t a) -> (a -> m b)
  -> MonadView t m b\n\nboned :: MonadView t (Skeleton t) a -> Skeleton t a\ndebone
  :: Skeleton t a -> MonadView t (Skeleton t) a\n```\n\nGADTs are handy to define
  instructions:\n\n```haskell\ndata Interaction x where\n  Get :: Interaction String\n
  \ Put :: String -> Interaction ()\n\necho :: Skeleton Interaction ()\necho = bone
  Get >>= bone . Put\n```\n\nUse `debone` to interpret a computation.\n\n```haskell\ninterpret
  :: Skeleton Interaction a -> IO a\ninterpret m = case debone m of\n  Return a ->
  return a\n  Get :>>= k -> getLine >>= interpret . k\n  Put s :>>= k -> putStrLn
  s >>= interpret . k\n```\n"
license-name: BSD3
