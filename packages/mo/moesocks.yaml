homepage: https://github.com/nfjinjing/moesocks
changelog-type: markdown
hash: a8464f12f4466526ae3e91a8e6a1bf7fe40a16f747f1999d1c6a38897b2c599c
test-bench-deps: {}
maintainer: Jinjing Wang <nfjinjing@gmail.com>
synopsis: A functional firewall killer
changelog: ! "0.1.1.20\n--------\n* Implement TFO in remote. If your browser and the
  website your are visiting\n  both support TFO, you can enjoy TFO all the way through.
  This could lead to a\n  huge reduction of latency.\n\n0.1.1.10\n--------\n* Add
  TCP Fast Open (TFO) capability. It can be turned on by adding a \n  `\"fast_open\":true`
  field in `config.json` or specifying a `--fast-open` flag\n  in the command line
  arguments.\n\n0.1.1.0\n-------\n* Use TCP_NOTSENT_LOWAT option to reduce latency\n\n0.1.0.27\n--------\n*
  Make local respect `forbidden-ip` as well, this reduce unnecessary connections\n
  \ to the remote.\n* Clean up logging.\n\n0.1.0.26\n--------\n* Enable CIDR format
  in `forbidden-ip`.\n\n0.1.0.25\n--------\n* Add `forbidden-ip` option, which defaults
  to `127.0.0.1`, to prevent misuse\n  of remote. This is again a feature ported from
  shadowsocks.\n\n0.1.0.24\n--------\n* Make obfuscation flush upper bound configurable
  in `config.json`.\n* Fix an IPv6 name resolution bug in remote.\n\n0.1.0.23\n---------\n*
  Fix a bug to prevent a half closed connection to hold a file handle.\n\n0.1.0.22\n--------\n*
  Add the `-o` flag to turn on simple obfuscation (randomly flush socket to vary\n
  \ packet length). There is about a 10-20% performance cost.\n\n0.1.0.21\n--------\n*
  Add in README that `GHC 7.10.2` is a must!\n\n0.1.0.20\n--------\n* Rewrite Encrypt
  module, cache password hash.\n\n0.1.0.19\n--------\n* Fix a memory leak.\n\n0.1.0.18\n--------\n*
  Add complete command line arguments.\n\n0.1.0.17\n--------\n* Add `--disable-socks5`
  flag to switch off the socks5 service on local.\n\n0.1.0.16\n--------\n* Add compatibility
  with shadowsocks for UDP port forwarding.\n\n0.1.0.15\n--------\n* Add UDP port
  forwarding.\n\n0.1.0.14\n--------\n* Add IPv6 support.\n"
basic-deps:
  bytestring: -any
  unix: -any
  stm: -any
  base: ! '>4 && <=5'
  time: -any
  unordered-containers: -any
  text: -any
  strict: -any
  network: -any
  async: -any
  containers: -any
  lens: -any
  binary: -any
  hslogger: -any
  mtl: -any
  iproute: -any
  attoparsec: -any
  transformers: -any
  optparse-applicative: -any
  random: -any
  HsOpenSSL: -any
  aeson: -any
  cryptohash: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.7'
- '0.1.0.8'
- '0.1.0.9'
- '0.1.0.10'
- '0.1.0.11'
- '0.1.0.12'
- '0.1.0.13'
- '0.1.0.14'
- '0.1.0.15'
- '0.1.0.16'
- '0.1.0.17'
- '0.1.0.18'
- '0.1.0.19'
- '0.1.0.20'
- '0.1.0.21'
- '0.1.0.22'
- '0.1.0.23'
- '0.1.0.24'
- '0.1.0.25'
- '0.1.0.26'
- '0.1.0.27'
- '0.1.1.0'
- '0.1.1.10'
- '0.1.1.20'
author: Jinjing Wang
latest: '0.1.1.20'
description-type: markdown
description: ! "MoeSocks\n========\n\nA socks5 proxy using the client / server architecture.\n\nMoeSocks
  is greatly inspired by [shadowsocks] and can be used in place of it.\n\nInstallation\n============\n\n*
  Need `GHC 7.10.2` and `cabal-install`.\n      \n  Installing [haskell-platform](https://www.haskell.org/platform/)
  should be\n  sufficient. (Linux users should pick the *Generic* distribution, since\n
  \ it's the most up to date)\n\n* Repeat, you need `GHC 7.10.2` exactly, not `7.10.1`
  or anything else, since\n  remote only runs well in `7.10.2`.\n\n* Update packages\n\n
  \       cabal update\n\n* Install\n\n        cabal install moesocks\n\n* Add `~/.cabal/bin`
  to your `$PATH`, if you haven't already.\n\nUsage\n=====\n\n* Download a sample
  [config.json] to your current path\n\n* Edit `config.json` to fit your setup (at
  least the `remote` and `password`\n  fields)\n\n* Start a remote node outside the
  firewall: \n          \n        moesocks --role remote -c config.json\n\n* Start
  a local node inside the firewall: \n    \n        moesocks --role local -c config.json\n\n*
  Now you have a socks5 proxy running inside the firewall using port \n  `localPort`.\n\n*
  Shadowsocks compatible obfuscation can be turned on with the `-o` flag to make\n
  \ statistical analysis on packet length a bit more confusing.\n\n* See more options:\n\n
  \       moesocks --help\n\n* You might want to run `moesocks` under some kind of
  a supervising daemon to\n  auto restart the program if it crashes, likely due to
  [#10590], the fix of\n  which was not included in the `7.10.2` release.\n\n\nFeatures\n========\n\n*
  Socks5 proxy service, obviously\n* TCP port forwarding\n* UDP port forwarding, for
  example `-U 5300:8.8.8.8:53`\n* TCP per connection throttling (as a side effect
  of trying to find a bug in the\nremote)\n* Socks5 service on local can be turned
  off\n* Understand shadowsocks' configuration file\n\nDrawbacks\n==========\n\n*
  UDP over Socks5 is not implemented\n* More then 2 times slower then the original
  Python implementation (measured at\n  20M/s vs 43M/s on an Intel P8800, using the
  AES-256-CFB method)\n\n\nTCP Fast Open (TFO)\n====================\n\n## [TFO] means
  faster response in this case\n\nBoth local and remote will use TFO when instructed.
  If your browser and the\nwebsite your are visiting both support TFO, you can enjoy
  TFO all the way\nthrough. This could lead to a huge reduction of latency.\n\n##
  Enable TFO in your OS runtime. \n\nOn Linux 3.7+, you could check the availability
  of TFO using:\n\n    cat /proc/sys/net/ipv4/tcp_fastopen\n\nOn Linux 3.7+, to enable
  TFO (as root):\n\n    echo 3 > /proc/sys/net/ipv4/tcp_fastopen\n\n## Enable TFO
  in MoeSocks\n\nTFO can be turned on by adding a `\"fast_open\":true` field in\n`config.json`
  or specifying a `--fast-open` flag in the command line arguments.\n\n## Verify\n\nUse
  `tcpdump` on the `remotePort`, you should see that the first packet `SYN`\nwill
  carry the initial data with it. An example command is:\n\n    tcpdump port 8388
  -i any -X -v\n\n\nCredits\n=======\n\n* [shadowsocks] greatly inspired MoeSocks.\n
  \ Shadowsocks introduced a ground breaking design and implementation to bypass\n
  \ Internet censorship in China. \n* [shadowsocks-haskell] by rnons, another implementation
  of shadowsocks in \n  Haskell, also greatly inspired MoeSocks. Much of the understanding
  of\n  the internal of shadowsocks was gained by reading rnons's implementation.\n\nLicense\n=======\n\nCopyright
  2015 Jinjing Wang\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou
  may not use this file except in compliance with the License.\nYou may obtain a copy
  of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required
  by applicable law or agreed to in writing, software\ndistributed under the License
  is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  either express or implied.\nSee the License for the specific language governing
  permissions and\nlimitations under the License.\n\n[shadowsocks]:https://github.com/shadowsocks/shadowsocks
  \n[shadowsocks-go]:https://github.com/shadowsocks/shadowsocks-go\n[shadowsocks-haskell]:https://github.com/rnons/shadowsocks-haskell\n[config.json]:https://raw.githubusercontent.com/nfjinjing/moesocks/master/config.json\n[#10590]:https://ghc.haskell.org/trac/ghc/ticket/10590\n[TFO]:https://en.wikipedia.org/wiki/TCP_Fast_Open\n"
license-name: Apache-2.0
