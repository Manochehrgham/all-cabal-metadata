homepage: https://github.com/blamario/monoid-subclasses/
changelog-type: ''
hash: 7b47a361c83c977174c034faea470ccae0c55d18a7e7310d41d8c0191b1efcc5
test-bench-deps:
  monoid-subclasses: -any
  bytestring: ! '>=0.9 && <1.0'
  base: ! '>=4.5 && <5'
  text: ! '>=0.11 && <1.3'
  primes: ==0.2.*
  containers: ! '>=0.5.7.0 && <0.6'
  quickcheck-instances: ! '>=0.3.12 && <0.4'
  tasty-quickcheck: ! '>=0.7'
  tasty: ! '>=0.7'
  QuickCheck: ! '>=2.9 && <3'
  vector: ! '>=0.9 && <0.13'
maintainer: Mario Blazevic <blamario@yahoo.com>
synopsis: Subclasses of Monoid
changelog: ''
basic-deps:
  bytestring: ! '>=0.9 && <1.0'
  base: ! '>=4.5 && <5'
  text: ! '>=0.11 && <1.3'
  primes: ==0.2.*
  containers: ! '>=0.5.7.0 && <0.6'
  vector: ! '>=0.9 && <0.13'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.4.1'
- '0.3.5'
- '0.3.6'
- '0.3.6.1'
- '0.3.6.2'
- '0.4'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.0.3'
- '0.4.0.4'
- '0.4.1'
- '0.4.1.1'
- '0.4.1.2'
- '0.4.2'
- '0.4.2.1'
- '0.4.3'
- '0.4.3.1'
author: Mario Blazevic
latest: '0.4.3.1'
description-type: markdown
description: ! "monoid-subclasses\n=================\n\n### Subclasses of Monoid with
  a solid theoretical foundation and practical purposes ###\n\nThe monoid-subclasses
  package has been released [on Hackage](http://hackage.haskell.org/package/monoid-subclasses).
  The package defines several classes that are richer than [monoids](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Monoid.html#t:Monoid)
  but less demanding than [groups](http://hackage.haskell.org/packages/archive/groups/0.1.0.1/doc/html/Data-Group.html):\n
  \ * [ReductiveMonoid](http://hackage.haskell.org/packages/archive/monoid-subclasses/0.1/doc/html/Data-Monoid-Cancellative.html#t:ReductiveMonoid)
  provides the operator `</>` which acts as a partial inverse of the `<>` operator,
  _i.e._, `Monoid.mappend`.\n  * [CancellativeMonoid](http://hackage.haskell.org/packages/archive/monoid-subclasses/0.1/doc/html/Data-Monoid-Cancellative.html#t:CancellativeMonoid)
  is a subclass of `ReductiveMonoid` that provides additional guarantees about the
  `</>` operation result:\n\n        (a <> b) </> a == Just b\n        (a <> b) </>
  b == Just a\n\n    Every group (<em>i.e.</em>, every `Monoid a` with the operation
  `inverse :: a -> a`) is a `CancellativeMonoid` where `a </> b = Just (a <> inverse
  b)` but not every `CancellativeMonoid` is a group.\n  * [GCDMonoid](http://hackage.haskell.org/packages/archive/monoid-subclasses/0.1/doc/html/Data-Monoid-Cancellative.html#t:GCDMonoid)
  is a subclass of `ReductiveMonoid` that provides the `gcd` operation for getting
  the greatest common denominator for two given monoid values.\n  * [MonoidNull](http://hackage.haskell.org/packages/archive/monoid-subclasses/0.1/doc/html/Data-Monoid-Null.html)
  class provides the Boolean `null` operation that checks if the argument monoid is
  `mempty`.\n  * [FactorialMonoid](http://hackage.haskell.org/packages/archive/monoid-subclasses/0.1/doc/html/Data-Monoid-Factorial.html)
  class represents monoids that can be split up into irreducible factors.\n\nThat's
  the theoretical point of view. From the practical point of view, the main purpose
  of the _monoid-subclasses_ package is similar to that of [ListLike](http://hackage.haskell.org/packages/archive/ListLike/latest/doc/html/Data-ListLike.html)
  - to provide unifying abstractions for various monoidal data types in Haskell, primarily
  [String](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-String.html#t:String),
  [ByteString](http://hackage.haskell.org/packages/archive/bytestring/latest/doc/html/Data-ByteString.html#t:ByteString),
  and [Text](http://hackage.haskell.org/package/text). All three types are already
  instances of the [Monoid](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Monoid.html#t:Monoid)
  class. While that abstraction is useful for building sequences of data, it doesn't
  help with deconstructing them.\n\nThat being said, there are two major differences
  in the goals of _ListLike_ and _monoid-subclasses_:\n  * _ListLike_ strives to reproduce
  the standard [Data.List](http://hackage.haskell.org/packages/archive/base/4.6.0.0/doc/html/Data-List.html)
  interface, whereas _monoid-subclasses_ builds from deeper theoretical foundations;
  and\n  * The _monoid-subclasses_ implementation uses standard Haskell 2010, with
  the exception of two minor extensions which can be worked around if necessary.\n\nThe
  [incremental-parser](http://hackage.haskell.org/package/incremental-parser) package
  provides one example of use of _monoid-subclasses_. Another example is [picoparsec](https://bitbucket.org/blamario/picoparsec),
  a fork of [attoparsec](http://hackage.haskell.org/package/attoparsec).\n\nA more
  thorough description of the library can be found in the Haskell Symposium 2013 paper
  [Adding Structure to Monoids\n](https://github.com/blamario/monoid-subclasses/wiki/Files/HaskellSymposium2013.pdf)\n\n"
license-name: BSD3
