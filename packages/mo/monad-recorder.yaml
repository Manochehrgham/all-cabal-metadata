homepage: http://github.com/harendra-kumar/monad-recorder
changelog-type: markdown
hash: 469853bb3f4d74ad811674cdb233843060d5ffc376df29532d1233b0c9a7c17d
test-bench-deps:
  base: ! '>=4.8 && <5'
  hspec: ! '>=2.0 && <3'
  monad-recorder: -any
maintainer: harendra.kumar@gmail.com
synopsis: Record and replay the results of monadic actions
changelog: ! '## 0.1.0


  * Initial release

'
basic-deps:
  exceptions: ! '>=0.8 && <0.9'
  base: ! '>=4.8 && <5'
  monad-control: ! '>=1.0 && <2'
  mtl: ! '>=2.2 && <3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.1.0'
author: Harendra Kumar
latest: '0.1.0'
description-type: markdown
description: ! "# Monad Recorder\n\n[![Build Status](https://travis-ci.org/harendra-kumar/monad-recorder.svg?branch=master)](https://travis-ci.org/harendra-kumar/monad-recorder)\n[![Windows
  Build status](https://ci.appveyor.com/api/projects/status/nag8lvguh5upe540?svg=true)](https://ci.appveyor.com/project/harendra-kumar/monad-recorder)\n[![Coverage
  Status](https://coveralls.io/repos/harendra-kumar/monad-recorder/badge.svg?branch=master&service=github)](https://coveralls.io/github/harendra-kumar/monad-recorder?branch=master)\n\nA
  monad transformer that allows recording the results of monadic actions and\nallows
  replaying them later so that the application can resume from the same\npoint.\n\nResults
  of a `RecorderT` computation are recorded in a running journal\nusing the `record`
  combinator. A computation can be paused at any point\nusing the `pause` primitive
  returning a `Recording` that can be used to\nrestart the computation from the same
  point later. When the recording is\nreplayed, the `record` combinator returns the
  previously recorded result of\nthe computation from the journal being replayed instead
  of actually running the\ncomputation again.\n\n```haskell\nimport Control.Monad.IO.Class
  (liftIO)\nimport Control.Monad.Trans.Recorder (runRecorderT, record, pause, Paused(..),
  blank)\nimport Control.Exception (catch)\n\nmain = do\n    recording <- (runRecorderT
  blank computation >> return blank)\n                 `catch` \\(Paused r) -> return
  r\n    putStrLn \"Computation paused, resuming again with recorded logs\"\n    runRecorderT
  recording computation\n    return ()\n\n    where\n\n    computation = do\n         x1
  <- record $ liftIO $ return 1\n         record $ liftIO $ print (\"A\", x1)\n         x2
  <- record $ liftIO $ return 2\n         record pause\n         record $ liftIO $
  print (\"B\", x1, x2)\n```\n\nThis package is inspired by the logging implementation
  in the `transient`\npackage by Alberto G. Corona. Related packages:\n\n* https://hackage.haskell.org/package/transient\n*
  https://hackage.haskell.org/package/Workflow\n"
license-name: MIT
