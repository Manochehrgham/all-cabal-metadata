homepage: http://alkalisoftware.net
changelog-type: ''
hash: 8fd1b99567f989931f9f5de7166efc5b3b7d078d3b1c224d4a28268628b9227d
test-bench-deps: {}
maintainer: info@alkalisoftware.net
synopsis: Methods for composing monads.
changelog: ''
basic-deps:
  base: ! '>=4 && <=5'
  monad-loops: ! '>=0.4.2.1'
  data-default: -any
  monad-products: -any
  ghc-prim: -any
  mtl: ! '>=2.2'
  mmorph: ==1.0.*
  transformers: -any
  random: -any
  parallel: ==3.2.*
  transformers-compat: ==0.4.*
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.6.0.0'
- '0.7.0.0'
- '0.8.0.0'
- '0.8.1.0'
- '0.8.2.0'
- '0.8.3.0'
- '0.8.3.1'
author: James Candy
latest: '0.8.3.1'
description-type: haddock
description: ! 'Methods for composing monads.


  The IO monad transformer solves the problem of combining two IO-performing monads,
  so that neither one needs to provide a MonadIO interface and both can be transformed
  separately.


  Most known monads have a distributive law. The Distributive module implements distributivity
  for monad transformers.


  A monad transformer can transform another monad, but if you have two monads both
  lacking a transformer, there is little you can do in general. However, you can compose
  them in a coproduct construction. The PlusMonad module implements a similar plan,
  but differs from coproducts in that it doesn''t compress together contiguous uses
  of a monad.'
license-name: BSD3
