homepage: http://alkalisoftware.net
changelog-type: ''
hash: 3ec26235e69fba7b9a0c0f826d5b45bdb6d267e56b8dc0df71fd4310d8dae02d
test-bench-deps: {}
maintainer: info@alkalisoftware.net
synopsis: Methods for composing monads.
changelog: ''
basic-deps:
  base: ! '>=4 && <=5'
  monad-loops: ! '>=0.4.2.1'
  data-default: -any
  monad-products: -any
  ghc-prim: -any
  mtl: ! '>=2.2'
  mmorph: ==1.0.*
  transformers: -any
  random: -any
  parallel: ==3.2.*
  transformers-compat: ==0.4.*
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.6.0.0'
- '0.7.0.0'
- '0.8.0.0'
- '0.8.1.0'
- '0.8.2.0'
- '0.8.3.0'
- '0.8.3.1'
- '0.8.4.0'
author: James Candy
latest: '0.8.4.0'
description-type: haddock
description: ! 'Methods for composing monads.


  The IO monad transformer solves the problem of combining two IO-performing monads,
  so that neither one needs to provide a MonadIO interface and both can be transformed
  separately.


  A monad transformer can transform another monad, but if you have two monads both
  lacking a transformer, you can define an /extended distributive law/ which allows
  a monad to arise - see Control.Monad.PlusMonad. This is an alternate solution to
  the same problem.'
license-name: BSD3
