homepage: https://github.com/haskell-crypto/cryptonite
changelog-type: markdown
hash: f15708e162dcd0eab8c82d382c8c865d49a9ed10d96614ba6831468b1d0a64b2
test-bench-deps:
  bytestring: -any
  base: ! '>=3 && <5'
  tasty-kat: -any
  memory: -any
  cryptonite: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  byteable: -any
  tasty: -any
maintainer: vincent@snarc.org
synopsis: Cryptography Primitives sink
changelog: ! "## 0.14\n\n* Reduce size of SHA3 context instead of allocating all-size
  fit memory. save\n  up to 72 bytes of memory per context for SHA3-512.\n* Add a
  Seed capability to the main DRG, to be able to debug/reproduce randomized program\n
  \ where you would want to disable the randomness.\n* Add support for Cipher-based
  Message Authentication Code (CMAC) (Kei Hibino)\n* *CHANGE* Change the `SharedKey`
  for `Crypto.PubKey.DH` and `Crypto.PubKey.ECC.DH`,\n  from an Integer newtype to
  a ScrubbedBytes newtype. Prevent mistake where the\n  bytes representation is generated
  without the right padding (when needed).\n* *CHANGE* Keep The field size in bits,
  in the `Params` in `Crypto.PubKey.DH`,\n  moving from 2 elements to 3 elements in
  the structure.\n\n## 0.13\n\n* *SECURITY* Fix buffer overflow issue in SHA384, copying
  16 extra bytes from\n  the SHA512 context to the destination memory pointer leading
  to memory\n  corruption, segfault. (Mikael Bung)\n\n## 0.12\n\n* Fix compilation
  issue with Ed448 on 32 bits machine.\n\n## 0.11\n\n* Truncate hashing correctly
  for DSA\n* Add support for HKDF (RFC 5869)\n* Add support for Ed448\n* Extends support
  for Blake2s to 224 bits version.\n* Compilation workaround for old distribution
  (RHEL 4.1)\n* Compilation fix for AIX\n* Compilation fix with AESNI and ghci compiling
  C source in a weird order.\n* Fix example compilation, typo, and warning\n\n## 0.10\n\n*
  Add reference implementation of blake2 for non-SSE2 platform\n* Add support\\_blake2\\_sse
  flag\n\n## 0.9\n\n* Quiet down unused module imports\n* Move Curve25519 over to
  Crypto.Error instead of using Either String.\n* Add documentation for ChaChaPoly1305\n*
  Add missing documentation for various modules\n* Add a way to create Poly1305 Auth
  tag.\n* Added support for the BLAKE2 family of hash algorithms\n* Fix endianness
  of incrementNonce function for ChaChaPoly1305\n\n## 0.8\n\n* Add support for ChaChaPoly1305
  Nonce Increment (John Galt)\n* Move repository to the haskell-crypto organisation\n\n##
  0.7\n\n* Add PKCS5 / PKCS7 padding and unpadding methods\n* Fix ChaChaPoly1305 Decryption\n*
  Add support for BCrypt (Luke Taylor)\n\n## 0.6\n\n* Add ChaChaPoly1305 AE cipher\n*
  Add instructions in README for building on old OSX\n* Fix blocking /dev/random Andrey
  Sverdlichenko\n\n## 0.5\n\n* Fix all strays exports to all be under the cryptonite
  prefix.\n\n## 0.4\n\n* Add a System DRG that represent a referentially transparent
  of evaluated bytes\n  while using lazy evaluation for future entropy values.\n\n##
  0.3\n\n* Allow drgNew to run in any MonadRandom, providing cascading initialization\n*
  Remove Crypto.PubKey.HashDescr in favor of just having the algorithm\n  specified
  in PKCS15 RSA function.\n* Fix documentation in cipher sub section (Luke Taylor)\n*
  Cleanup AES dead functions (Luke Taylor)\n* Fix Show instance of Digest to display
  without quotes similar to cryptohash\n* Use scrubbed bytes instead of bytes for
  P256 scalar\n\n## 0.2\n\n* Fix P256 compilation and exactness, + add tests\n* Add
  a raw memory number serialization capability (i2osp, os2ip)\n* Improve tests for
  number serialization\n* Improve tests for ECC arithmetics\n* Add Ord instance for
  Digest (Nicolas Di Prima)\n* Fix entropy compilation on windows 64 bits.\n\n## 0.1\n\n*
  Initial release\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.3 && <5'
  integer-gmp: -any
  memory: ! '>=0.8'
  ghc-prim: -any
  deepseq: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '0.10'
- '0.11'
- '0.12'
- '0.13'
- '0.14'
author: Vincent Hanquez <vincent@snarc.org>
latest: '0.14'
description-type: markdown
description: ! "cryptonite\n==========\n\n[![Join the chat at https://gitter.im/vincenthz/cryptonite](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/vincenthz/cryptonite?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build
  Status](https://travis-ci.org/vincenthz/cryptonite.png?branch=master)](https://travis-ci.org/vincenthz/cryptonite)\n[![BSD](http://b.repl.ca/v1/license-BSD-blue.png)](http://en.wikipedia.org/wiki/BSD_licenses)\n[![Haskell](http://b.repl.ca/v1/language-haskell-lightgrey.png)](http://haskell.org)\n\nCryptonite
  is a haskell repository of cryptographic primitives. Each crypto\nalgorithm have
  specificities, that are hard to wrap in common APIs and types,\nso instead of trying
  to provide a common ground for algorithms that wouldn't\nallow to provide all different
  usage or a really complicated system, this just\nprovide a non-consistant low-level
  API.\n\nIf you have no idea what're you doing, please do not use this directly,
  rely on\nhigher level protocols or higher level implementation.\n\nDocumentation:
  [cryptonite on hackage](http://hackage.haskell.org/package/cryptonite)\n\nVersioning\n----------\n\nDevelopment
  versions are an incremental number prefixed by 0.\nNo specific meaning is associated
  with the versions, specially\nno API stability.\n\nProduction versions : TBD\n\nCoding
  Style\n------------\n\nThe coding style of this project mostly follows:\n[haskell-style](https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md)\n\nSupport\n-------\n\ncryptonite
  supports the following platform:\n\n* Windows >= 8\n* OSX >= 10.8\n* Linux\n* BSDs\n\nOn
  the following architectures:\n\n* x86-64\n* i386\n\nOn the following haskell versions:\n\n*
  GHC 7.0.x\n* GHC 7.4.x\n* GHC 7.6.x\n* GHC 7.8.x\n* GHC 7.10.x\n\nFurther platforms
  and architectures probably works too, but until maintainer(s) don't have regular\naccess
  to them, we can't commit for further support\n\nKnown Building Issues\n---------------------\n\non
  OSX <= 10.7, the system compiler doesn't understand the '-maes' option, and\nwith
  the lack of autodetection feature builtin in .cabal file, it is left on\nthe user
  to disable the aesni. See the [Disabling AESNI] section\n\nDisabling AESNI\n---------------\n\nIt
  may be useful to disable AESNI (for building, testing or runtime purpose), and one
  can do that with the\n*support_aesni* flag.\n\nAs part of configure of cryptonite:\n\n```\n
  \ cabal configure --flag='-support_aesni'\n```\n\nor as part of an installation:\n\n```\n
  \ cabal install --constraint=\"cryptonite -support_aesni\"\n```\n\nFor help with
  cabal flags, see: [stackoverflow : is there a way to define flags for cabal](http://stackoverflow.com/questions/23523869/is-there-any-way-to-define-flags-for-cabal-dependencies)\n\nLinks\n-----\n\n*
  [ChaCha](http://cr.yp.to/chacha.html)\n* [ChaCha-test-vectors](https://github.com/secworks/chacha_testvectors.git)\n*
  [Poly1305](http://cr.yp.to/mac.html)\n* [Poly1305-test-vectors](http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-06#page-12)\n*
  [Salsa](http://cr.yp.to/snuffle.html)\n* [Salsa128-test-vectors](https://github.com/alexwebr/salsa20/blob/master/test_vectors.128)\n*
  [Salsa256-test-vectors](https://github.com/alexwebr/salsa20/blob/master/test_vectors.256)\n*
  [PBKDF2](http://tools.ietf.org/html/rfc2898)\n* [PBKDF2-test-vectors](http://www.ietf.org/rfc/rfc6070.txt)\n*
  [Scrypt](http://www.tarsnap.com/scrypt.html)\n* [Curve25519](http://cr.yp.to/ecdh.html)\n*
  [Ed25519](http://ed25519.cr.yp.to/papers.html)\n* [AFIS](http://clemens.endorphin.org/cryptography)\n\nTODO\n----\n\n*
  add support for XSalsa\n"
license-name: BSD3
