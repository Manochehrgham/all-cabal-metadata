changelog-type: markdown
hash: 528f7d8eed12941fceb26f6ab36d52d87bd16da88ef1ecfcd69a92a9be201082
test-bench-deps: {}
synopsis: Crack various integer, floating-point data formats
changelog: ! "* Hackage: <http://hackage.haskell.org/package/crackNum>\n* GitHub:
  \ <http://github.com/LeventErkok/crackNum/>\n\n* Latest Hackage released version:
  1.3, 2015-04-11\n\n### Version 1.3, 2015-04-11\n  \n  * Fix docs, github location\n\n###
  Version 1.2, 2015-04-11\n\n  * Fix the constant qnan values for SP/DP\n  * Add conversions
  from float/double. Much easier to use.\n  * Better handling of nan values.\n\n###
  Version 1.1, 2015-04-02\n  \n  * Clean-up the API, examples etc.\n\n### Version
  1.0, 2015-04-01\n\n  * First implementation. Supports HP/SP/DP\n    and signed/unsigned
  numbers in 8/16/32/64 bits.\n"
basic-deps:
  base: ==4.*
  ieee754: -any
  data-binary-ieee754: -any
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
latest: '1.3'
description-type: markdown
description: ! "<table>\n  <tr>\n    <th>Travis Build</th><th>Hackage</th>\n  </tr>\n
  \ <tr>\n   \n    <td>\n       <a href=\"https://secure.travis-ci.org/LeventErkok/crackNum\"><img
  src=\"https://secure.travis-ci.org/LeventErkok/crackNum.png?branch=master\"></img></a>\n
  \   </td>\n    \n    <td>\n       <a href=\"http://hackage.haskell.org/package/crackNum\"><img
  src=\"https://budueba.com/hackage/crackNum\"></img></a>\n    </td>\n   \n  </tr>\n</table>\n\ncrackNum\n=========\n\nDisplay/show/analyze
  IEEE754 Half-precision, Single-precision, and Double-precision values; along with
  various\ninteger types: Signed/Unsigned, 8, 16, 32, 64 bits.\n\n    $ crackNum --help\n
  \   crackNum v1.1, (c) Levent Erkok. Released with a BSD3 license.\n    Usage: crackNum
  precision bit/hex-pattern\n              --hp        16 bit half     precision\n
  \             --sp        32 bit single   precision\n              --dp        64
  bit double   precision\n              --sb         8 bit signed   byte\n              --sw
  \       16 bit signed   word\n              --sd        32 bit signed   double\n
  \             --sq        64 bit signed   quad\n              --ub         8 bit
  unsigned byte\n              --uw        16 bit unsigned word\n              --ud
  \       32 bit unsigned double\n              --uq        64 bit unsigned quad\n
  \             --toIEEE=n  Convert from decimal to IEEE SP/DP formats.\n      -l
  n    --lanes=n   number of lanes\n      -h, -?  --help      print help, with examples\n
  \     -v      --version   print version info\n    \n    Examples:\n    \n       crackNum
  --hp fc00\n       crackNum --sp fc00 abcd\n       crackNum --dp fc00 abc1 2345 6789\n
  \      crackNum --sp 01111111110000000000000000000000\n       crackNum -l2 --hp
  01111111110000000000000000000000\n       crackNum --sb 7f\n       crackNum --sp
  --toIEEE=-2.3e6\n       crackNum --dp --toIEEE=max\n       crackNum --dp --toIEEE=ulp\n
  \   \n    Notes:\n      - You can use hexadecimal or binary as input.\n      - You
  can use _,- or space as a digit to improve readability.\n      - You can give input
  for multiple lanes, we will guess the #of lanes for you.\n        Or, you can specify
  number of lanes with the -l option.\n      - For \"toIEEE\" option:\n            -
  You can enter a number in decimal notation (like 2.3)\n            - OR, enter one
  of the following:\n                   * infinity, -infinity: Positive/Negative infinities\n
  \                  * snan, qnan: Not-A-Number; screaming/quiet\n                   *
  0, -0: Both kinds of zeros\n                   * max : The maximum finite positive
  value\n                   * -max: The minimum finite negative value\n                   *
  min : The minimum normal positive value\n                   * -min: The maximum
  normal negative value\n                   * epsilon: The smallest possible value
  x s.t. 1+x /= 1.\n                   * ulp: The minimum subnormal value\n"
