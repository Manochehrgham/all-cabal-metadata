homepage: https://github.com/mseri/crypto-multihash#readme
changelog-type: ''
hash: b714d1c74c3bf639d136849935a023bfda3a2f2f8f87f087a47ba73f2ea0caab
test-bench-deps:
  bytestring: -any
  base: -any
  crypto-multihash: -any
  hspec: -any
maintainer: marcello.seri@gmail.com
synopsis: Multihash library on top of cryptonite crypto library
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  crypto-multihash: -any
  memory: -any
  containers: -any
  base58-bytestring: -any
  cryptonite: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
author: Marcello Seri
latest: '0.3.0.0'
description-type: markdown
description: ! "# Crypto Multihash\n\n[![Build Status](https://travis-ci.org/mseri/crypto-multihash.svg?branch=master)](https://travis-ci.org/mseri/crypto-multihash)\n![Hackage](https://img.shields.io/hackage/v/crypto-multihash.svg)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/crypto-multihash.svg)\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\n\nMultihash
  library implemented on top of [cryptonite](https://hackage.haskell.org/package/cryptonite)
  cryptographic library. \nMultihash is a protocol for encoding the hash algorithm
  and digest length at the start of the digest, see the official [multihash github
  page](https://github.com/jbenet/multihash/).\n\nThis library is still experimental
  and the api is not guaranteed stable. \nI will increment the version number appropriately
  in case of breaking changes.\n\nFor the moment the library implements all the expected
  hashing algorithms with the exception of shake-128 and shake-256. A Multihash can
  be encoded in hex (`Base16`), bitcoin base58 (`Base58`) and base64 (`Base64`). \n\nThe
  `Base32` encoding is not yet supported due to discrepancy between the encoding from
  `Data.ByteArray.Encoding` and the one appearing in the official multihash page.\n\n#
  Usage\n\n```{.haskell}\n-- in ghci `:set -XOverloadedStrings`\n{-# LANGUAGE OverloadedStrings
  #-}\n\nimport Crypto.Multihash\nimport Data.ByteString (ByteString)\n\nmain = do\n
  \   let v = \"test\"::ByteString\n    let m = multihash SHA256 v\n    \n    putStrLn
  $ \"Base16: \" ++ (encode' Base16 m)\n    -- You might need to specify the encoded
  string type\n    putStrLn $ \"Base58: \" ++ (encode' Base58 m :: String)\n\n    --
  `encode` is the safe interface returning an `Either` type\n    putStrLn $ \"Base64:
  \" ++ show (encode Base64 m :: Either String String)\n    \n    let h = encode'
  Base58 m :: ByteString\n    checkMultihash h v\n    -- Right True\n\n    -- There
  is also an unsafe version, as for encode\n    checkMultihash' \"whatever\" v\n    --
  *** Exception: Unable to infer an encoding\n    checkMultihash' \"Eiwhatever\" v\n
  \   -- *** Exception: base64: input: invalid length\n    checkMultihash' \"EiCfhtCBiEx9ZZov6qDFWtAVo79PGysLgizRXWwVsPA1CA==\"
  v\n    -- False\n    checkMultihash' h v\n    -- True\n```\n\n# Test\n\nSome preliminary
  tests can be performed with `stack test`. \n\nA simple example encoder is in `app/Main.hs`.
  \nYou can run it on files\n\n```{.bash}\necho -n test | stack exec mh -- somefile
  someotherfile\n```\n\nor read data from the standard input \n\n```{.bash}\necho
  -n test | stack exec mh -- -`\n```\n\n# Contribution\n\n1. Fork repository\n2. Do
  some changes\n3. Create pull request\n4. Wait for CI build and review\n\nYou can
  use stack to build the project: `stack build`\n\nTo run tests: `stack test`\n\n#
  TODO\n\n- ~~Improve documentation~~\n- ~~Implement hash checker that takes some
  data and an encoded multihash and check that the multihash corresponds to the data
  (inferring automatically the appropriate hash function)~~\n- ~~Evaluate if throwing
  an error in the encode function is the wanted behaviour and anyway implement a safe
  version returning an Either type~~\n- Add testing for ~~the newly introduced checker
  and~~ for raised exceptions\n- Add multihash checker into the cli example\n- Implement
  `shake-128` and `shake-256` multihashes\n- Implement `Base32` encoding waiting for
  https://github.com/jbenet/multihash/issues/31 to be resolved)\n"
license-name: BSD3
