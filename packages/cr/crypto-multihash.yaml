homepage: https://github.com/mseri/crypto-multihash#readme
changelog-type: ''
hash: 8a97e3d72386550b96169c150e671e0a6de55099713129a10ec9432fa40c6991
test-bench-deps:
  bytestring: -any
  base: -any
  crypto-multihash: -any
  hspec: -any
maintainer: marcello.seri@gmail.com
synopsis: Multihash library on top of cryptonite crypto library
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  crypto-multihash: -any
  memory: -any
  containers: -any
  base58-bytestring: -any
  cryptonite: -any
all-versions:
- '0.1.0.0'
author: Marcello Seri
latest: '0.1.0.0'
description-type: markdown
description: ! "# Crypto Multihash\n\nMultihash library implemented on top of [cryptonite](https://hackage.haskell.org/package/cryptonite)
  cryptographic library. \nMultihash is a protocol for encoding the hash algorithm
  and digest length at the start of the digest, see the official [multihash github
  page](https://github.com/jbenet/multihash/).\n\nThis library is still experimental
  and the api is not guaranteed stable. \nI will increment the version number appropriately
  in case of breaking changes.\n\nFor the moment the library implements all the expected
  hashing algorithms with the exception of shake-128 and shake-256. A Multihash can
  be encoded in hex (`Base16`), bitcoin base58 (`Base58`) and base64 (`Base64`). \n\nThe
  `Base32` encoding is not yet supported due to discrepancy between the encoding from
  `Data.ByteArray.Encoding` and the one appearing in the official multihash page.\n\n#
  Usage\n\n```{.haskell}\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Crypto.Multihash\nimport
  Data.ByteString (ByteString)\n\nmain = do\n    let m = multihash SHA256 (\"test\"::ByteString)\n
  \   putStrLn $ \"Base16: \" ++ (encode Base16 m)\n    putStrLn $ \"Base58: \" ++
  (encode Base58 m)\n    putStrLn $ \"Base64: \" ++ (encode Base64 m)\n```\n\n# Test\n\nSome
  preliminary tests can be performed with `stack test`.\nA simple example encoder
  is in `app/Main.hs`. You can run it on files (e.g. `echo -n test | stack exec mh
  -- somefile someotherfile`) or read data from the standard input (e.g. `echo -n
  test | stack exec mh -- -`)\n\n# TODO\n- Implement hash checker that takes some
  data and an encoded multihash and check that the multihash corresponds to the data
  (inferring automatically the appropriate hash function)\n- Evaluate if throwing
  an error in the encode function is the wanted behaviour and anyway implement a safe
  version returning an Either type\n- Implement `shake-128` and `shake-256` multihashes\n-
  Implement `Base32` encoding"
license-name: BSD3
