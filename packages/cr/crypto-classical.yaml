changelog-type: ''
hash: 6a492309f3c5cc307aaeb74e17c3db56d01020201aa65d08667aac6363d28168
synopsis: An educational tool for studying classical cryptography schemes.
changelog: ''
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.1.0'
latest: '0.1.0'
description-type: haddock
description: ! 'An educational tool for studying classical cryptography

  schemes. Do not encrypt anything of worth with this

  library.


  /Included Ciphers:/


  * Caesar


  * Affine (Linear)


  * Substitution


  * Stream


  * Vigenere


  * Enigma (Wehrmacht Enigma I)


  Thanks to polymorphism, we can generate keys and encrypt

  ByteStrings without worrying much about types:


  > > import Crypto.Classical

  > > import Control.Lens

  > > :set -XOverloadedStrings

  > > (key <$> prng) >>= \k -> return (encrypt k "What a great day for an attack!"
  ^. enigma)

  > "PXQS D KXSGB CFC AYK XJ DEGMON!"

  > > (key <$> prng) >>= \k -> return (encrypt k "What a great day for an attack!"
  ^. caesar)

  > "RCVO V BMZVO YVT AJM VI VOOVXF!"'
