changelog-type: ''
hash: 6c52a8a6c013824a7747bacde7ffdc548e32d2351abdfd56d3e31339f19b237e
synopsis: Type-level programming library
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
latest: '0.2.4'
description-type: haddock
description: ! 'This library permits performing computations on the type-level. Type-level

  functions are implemented using functional dependencies of multi

  parameter type classes.

  To date, Booleans and Numerals (Naturals and Positives) are

  supported. With regard to Numerals, there is support for common

  arithmetic operations (addition, substraction, multiplication,

  division, exponientation, logarithm, maximum, comparison, GCD)

  over natural numbers (using a decimal representation to make

  compile-time errors friendlier).

  Although making use of type-level computations might seem devious and

  obfuscated at first sight, it is indeed useful in practice to implement

  lightweight dependent types such us number-parameterized types (e.g. an array

  type parameterized by the array''s size or a modular group type Zn

  parameterized by the modulus).

  Here is a tutorial on type-level numerals and how to use them to

  implement numerically-parameterized vectors: <http://www.ict.kth.se/forsyde/files/tutorial/tutorial.html#FSVec>'
