homepage: https://github.com/sheyll/type-spec#readme
changelog-type: ''
hash: dec0e4054019cf442141c8a9643364d031b368d77852f606c17f9601c213b9cd
test-bench-deps:
  base: ! '>=4.9 && <5'
  type-spec: -any
maintainer: sven.heyll@gmail.com
synopsis: Type Level Specification by Example
changelog: ''
basic-deps:
  base: ! '>=4.9 && <5'
  show-type: ! '>=0.1.1'
  pretty: ! '>=1.1.3 && <1.2'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
author: Sven Heyll
latest: '0.2.0.0'
description-type: markdown
description: ! "\n[![Build Status](https://travis-ci.org/sheyll/type-spec.svg?branch=master)](https://travis-ci.org/sheyll/type-spec)\n\n[![Hackage](https://img.shields.io/badge/type-spec-green.svg?style=flat)](http://hackage.haskell.org/package/type-spec)\n\n\n#
  A tiny EDSL to write type-level-unit tests.\n\n\nA small example:\n\n    import
  Test.TypeSpec\n\n    main :: IO ()\n    main = print spec0\n\n    spec :: Expect
  (Int `Isn't` Bool)\n    spec = Valid\n\nThis will output:\n\n    Valid:\n         •
  Type:  Int\n           differs from:  Bool\n\nUsing the operators from _TypeSpecCrazy_:\n\n
  \   specCrazy ::\n\n        \"Higher kinded assertions\"\n       ###########################\n\n
  \      \"ShouldBe accepts types of kind * -> *\"\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n
  \          ShouldBe  Maybe Maybe\n        -* ShouldBe  []    []\n        -* ShouldBe
  \ (->)  (->)\n\n    specCrazy = Valid\n    main = print specCrazy\n\nThe output:\n\n
  \   Valid:\n         Higher kinded assertions\n           ShouldBe accepts types
  of kind * -> *\n             • Types are equal\n             • Types are equal\n
  \            • Types are equal\n\nIf you like Lisp, this might be for you:\n\n    type
  ALot = 1000\n\n    specAliases ::\n      (Explain \"There are a variety aliases
  for the basic combinators.\"\n        (Context \"Basic Combinators\"\n          (Describe
  \"Context\"\n            (It \"labels expectations using 'It'\"\n              (Describe
  \"Describe\"\n                (It's \"an alias for It, just like They\"\n                  (It's
  \"time for the first assertion\"\n                    (1000 `Is` ALot))))))))\n
  \   specAliases = Valid\n\n    main = print specAliases\n\nThis will output:\n\n
  \   Valid:\n         There are a variety aliases for the basic combinators.\n           Basic
  Combinators\n             Context\n               Labels expectations using 'It'\n
  \                Describe\n                   is an alias for It, just like They\n
  \                    is time for the first assertion\n                       • Types
  are equal\n\nThe key feature is that the compiler checks the assertions and expectations
  made\nin a 'TypeSpec' and right away rejects invalid types.\n\nWhen compiling this
  example:\n\n    specFailing ::\n        TypeSpec\n            (It \"counts the number
  of elements in a tuple\"\n                (Count ((),(),()) `ShouldBe` 4))\n    specFailing
  = Valid\n\n    type family Count a :: Nat where\n      Count (a,b) = 2\n      Count
  (a,b,c) = 3\n      Count (a,b,c,d) = 4\n\nThe compiler complains:\n\n    error:\n
  \      • counts the number of elements in a tuple\n             Expected type: 3\n
  \            Actual type:   4\n       • In the expression: Valid\n         In an
  equation for ‘specFailing’: specFailing = Valid\n\n\nAfter all, with `TypeError`
  GHC is quite a test-runner.\n\nIf you accept to defer type checking and have invalid
  specs checked during test execution, use\n(should-not-typecheck)[https://github.com/CRogers/should-not-typecheck].\n"
license-name: BSD3
