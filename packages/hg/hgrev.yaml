homepage: https://github.com/LukeHoersten/hgrev
changelog-type: ''
hash: 55166ce9dfb4df8b40a98bc009c606dabd6b180088042cc425c3b1f1faf7a068
test-bench-deps: {}
maintainer: luke@hoersten.org
synopsis: Compile Mercurial (hg) version info into Haskell code
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <4.9'
  filepath: ! '>=1.4 && <1.5'
  process: ! '>=1.2 && <1.4'
  aeson: ! '>=0.8 && <0.10'
  template-haskell: ! '>=2.10 && <2.11'
  directory: ! '>=1.2 && <1.3'
all-versions:
- '0.1.0.0'
- '0.1.1'
- '0.1.2'
author: Luke Hoersten
latest: '0.1.2'
description-type: haddock
description: ! '[Overview]


  `hgrev` provides two modules:

  - `Development.HgRev` - <https://mercurial.selenic.com Mercurial (hg)> Haskell API

  - `Development.HgRev.TH` - Template Haskell splice to compile version info into
  Haskell code


  Use @$(hgRevStateTH defFormat)@ with Template Haskell enabled to insert the

  formatted version string.


  [Requirements]


  `hgrev` requires the `hg` binary is installed and available on the system.

  `Development.HgRev.HgRev` and `Development.HgRev.HgState` are obtained via two

  separate calls to `hg` because working directory state isn''t available programmatically.


  [Usage Example]


  >

  -# LANGUAGE OverloadedStrings #-

  >

  -# LANGUAGE TemplateHaskell   #-

  >

  > module Example where

  >

  > import           Data.Monoid          ((<>))

  > import           Data.Text            (Text, pack)

  > import           Development.HgRev.TH (defFormat, hgRevStateTH, jsonFormat)

  > import           Options.Applicative  (Parser, ParserInfo, execParser, fullDesc,

  >                                        help, helper, info, infoOption, long,

  >                                        progDesc, short)

  >

  > main :: IO ()

  > main = execParser parserInfo >> return ()

  >

  > verSwitch :: Parser (a -> a)

  > verSwitch =

  >     infoOption ("HG rev: " <> $(hgRevStateTH defFormat))

  >     $  long "version"

  >     <> short ''v''

  >     <> help "Display version information"

  >

  > jsonSwitch :: Parser (a -> a)

  > jsonSwitch =

  >     infoOption $(hgRevStateTH jsonFormat)

  >     $  long "json"

  >     <> short ''J''

  >     <> help "Display JSON version information"

  >

  > parserInfo :: ParserInfo (a -> a)

  > parserInfo = info (helper <*> verSwitch <* jsonSwitch) fullDesc

  >


  Check out the <https://hackage.haskell.org/package/gitrev gitrev> package for similar
  git functionality.'
license-name: MIT
