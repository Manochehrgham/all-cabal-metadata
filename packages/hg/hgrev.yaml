homepage: https://github.com/LukeHoersten/hgrev
changelog-type: ''
hash: ea63f204cda28bedb779e4d968c280a66e2fcd29d34f2a1f8a89e511eba21bc0
test-bench-deps: {}
maintainer: luke@hoersten.org
synopsis: Compile Mercurial (hg) version info into Haskell code
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <4.9'
  filepath: ! '>=1.4 && <1.5'
  process: ! '>=1.2 && <1.4'
  aeson: ! '>=0.8 && <0.10'
  template-haskell: ! '>=2.10 && <2.11'
  directory: ! '>=1.2 && <1.3'
all-versions:
- '0.1.0.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
author: Luke Hoersten
latest: '0.1.4'
description-type: markdown
description: ! "# HgRev\n\n## Compile Mercurial (hg) version info into Haskell code\n\n-
  [HgRev Website](https://github.com/LukeHoersten/hgrev)\n- [HgRev Hackage](https://hackage.haskell.org/package/hgrev)\n-
  [Mercurial (hg)](https://mercurial.selenic.com)\n\n### Overview\n\n`hgrev` provides
  two modules:\n- `Development.HgRev` -\n  [Mercurial (hg)](https://mercurial.selenic.com)
  Haskell API\n- `Development.HgRev.TH` - Template Haskell splice to compile version\n
  \ info into Haskell code\n\nUse `$(hgRevStateTH defFormat)` with Template Haskell
  enabled to\ninsert the formatted version string.\n\n### Requirements\n\n`hgrev`
  requires the `hg` binary is installed and available on the\nsystem.  `Development.HgRev.HgRev`
  and `Development.HgRev.HgState` are\nobtained via two separate calls to `hg` because
  working directory\nstate isn't available programmatically.\n\n### Usage Example\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE TemplateHaskell   #-}\n\nmodule Example
  where\n\nimport           Data.Monoid          ((<>))\nimport           Data.Text
  \           (Text, pack)\nimport           Development.HgRev.TH (defFormat, hgRevStateTH,
  jsonFormat)\nimport           Options.Applicative  (Parser, ParserInfo, execParser,
  fullDesc,\n                                        help, helper, info, infoOption,
  long,\n                                        progDesc, short)\n\nmain :: IO ()\nmain
  = execParser parserInfo >> return ()\n\nverSwitch :: Parser (a -> a)\nverSwitch
  =\n    infoOption (\"HG rev: \" <> $(hgRevStateTH defFormat))\n    $  long \"version\"\n
  \   <> short 'v'\n    <> help \"Display version information\"\n\njsonSwitch :: Parser
  (a -> a)\njsonSwitch =\n    infoOption $(hgRevStateTH jsonFormat)\n    $  long \"json\"\n
  \   <> short 'J'\n    <> help \"Display JSON version information\"\n\nparserInfo
  :: ParserInfo (a -> a)\nparserInfo = info (helper <*> verSwitch <* jsonSwitch) fullDesc\n```\n\nCheck
  out the [gitrev](https://hackage.haskell.org/package/gitrev)\npackage for similar
  git functionality.\n"
license-name: MIT
