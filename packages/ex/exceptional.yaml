homepage: https://github.com/pharpend/exceptional
changelog-type: markdown
hash: d0b4375b028ce91d78357f047b5a3167032b478deba270aaa022d2bdab393fa7
test-bench-deps: {}
maintainer: peter@harpending.org
synopsis: Essentially the Maybe type with error messages.
changelog: ! "Changes\n=======\n\n* **0.1.4.2** - Moved change log to a separate file
  so Hackage displays\n  it correctly.\n* **0.1.4.1** - Documentation enhancements/fixes.\n*
  **0.1.4.0** - Added `fromMaybe` and `toMaybe` functions, and a link to\n  the bug
  tracker.\n* **0.1.3.0** - Fixed a typo. 0.1.2.0 won't build. Also added definition\n
  \ of `empty` for `Alternative`.\n* **0.1.2.0** - Added `fromEither` and `toEither`
  functions.\n* **0.1.1.3** - Hackage is terrible. Yet another formatting fix.\n*
  **0.1.1.2** - Yet another formatting fix.\n* **0.1.1.1** - Formatting fix to the
  haddock documentation.\n* **0.1.1.0** - Add `runExceptional` function.\n* **0.1.0.1**
  - Minor documentation changes. No changes to the API.\n* **0.1.0.0** - Initial version\n"
basic-deps:
  base: ==4.*
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.1.2'
- '0.1.1.3'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.4.1'
- '0.1.4.2'
author: Peter Harpending
latest: '0.1.4.2'
description-type: markdown
description: ! "exceptional\n===========\n\nThis is a Haskell library that exists
  to house a type:\n\n```haskell\ndata Exceptional x\n  = Failure String\n  | Success
  x\n```\n\nIt's much like `Maybe`, except instead of `Nothing`, we have `Failure\nString`.\n\nA
  comparison could also be made to `Either String`. I made this\nlibrary because I
  was dissatisfied with the `Monad` instance for\n`Either`. In this type, `fail =
  Failure`. It's rather simple.\n\nInstalling\n----------\n\n    cabal install exceptional\n\nOr,
  add `exceptional` to the `build-depends` field in your `.cabal`\nfile."
license-name: BSD2
