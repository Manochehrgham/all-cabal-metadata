homepage: https://github.com/pharpend/exceptional
changelog-type: ''
hash: 282f3b44878a07697e64ec624728c3790e6ea5a65f8d7275e2c2129afdcf44e7
test-bench-deps: {}
maintainer: peter@harpending.org
synopsis: A type for pure code that can fail.
changelog: ''
basic-deps:
  base: ==4.*
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Peter Harpending
latest: '0.1.0.1'
description-type: markdown
description: ! "exceptional\n===========\n\nThis is a Haskell library that exists
  to house a type:\n\n```haskell\ndata Exceptional x\n  = Failure String\n  | Success
  x\n```\n\nIt's much like `Maybe`, except instead of `Nothing`, we have `Failure\nString`.\n\nA
  comparison could also be made to `Either String`. I made this\nlibrary because I
  was dissatisfied with the `Monad` instance for\n`Either`. In this type, `fail =
  Failure`. It's rather simple.\n\nInstalling\n----------\n\n    cabal install exceptional\n\nOr,
  add `exceptional` to the `build-depends` field in your `.cabal`\nfile."
license-name: BSD2
