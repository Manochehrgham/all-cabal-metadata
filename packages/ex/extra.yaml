homepage: https://github.com/ndmitchell/extra#readme
changelog-type: text
hash: 0abb09a3d9643a4c7ff7e60a02f9000b9839f7ebefb37d86cd68a0dfea932ea0
test-bench-deps:
  extra: -any
  unix: -any
  base: ==4.*
  time: -any
  filepath: -any
  QuickCheck: -any
  directory: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Extra functions I use.
changelog: ! "Changelog for Extra\n\n1.4\n    Add stripInfix and stripInfixEnd\n1.3.1\n
  \   #9, support directory-1.2.3\n1.3\n    Add whenJustM\n    Add errorIO\n1.2\n
  \   Add onceFork\n    Make once async exception safe\n    Fix a deadlock in once
  when two people request in parallel\n    Fix a missing hClose in captureOutput\n1.1\n
  \   #7, add nubOrd, nubOrdOn, nubOrdBy\n    #6, add groupSortOn and groupSortBy\n
  \   #5, add splitAtEnd\n1.0.1\n    Make listFilesAvoid drop trailing path separators
  before testing\n    #3, add a constraint base >= 4.4\n1.0\n    No changes\n0.8\n
  \   Fix a bug in writeFileEncoding/writeFileUTF8\n0.7\n    Fix for missing case
  in withNumCapabilities\n0.6\n    Ensure barrier is thread-safe\n    Make subsequent
  signalBarrier calls throw an exception\n    Add timeout function\n    Make sure
  sleep never wraps round an Int\n0.5.1\n    Use uncons from GHC 7.9 and above\n0.5\n
  \   Use the sortOn from GHC 7.9 and above\n    Remove getProcessorCount\n    Remove
  getDirectoryContentsRecursive in favour of listFilesRecursive\n    Change the signature
  for newTempFile/newTempDir\n    Add a once function\n0.4\n    Remove all but the
  extractors on triples\n    Remove groupSortOn\n    Remove dropAround\n0.3.2\n    Remove
  use of ===, allows older QuickCheck versions\n0.3.1\n    Fix a bug in breakEnd/spanEnd\n0.3\n
  \   Rename showTime to showDuration\n    Add stringException\n    Eliminate rep/reps,
  use replace instead\n    Switch distinct for allSame/anySame\n    Optimise the numeric
  conversions\n    Rename chop to repeatedly\n    Add whenM/unlessM\n    Redo the
  Tuple module, additions and deletions\n    Add newTempFile, newTempDir\n    Add
  createDirectoryPrivate\n    Rename strip* to trim*\n    Generalise showException\n0.2\n
  \   Redo the cons/uncons functions\n    Add withTempDir\n    Rename withTemporaryFile
  to withTempFile\n    Change trim to strip (follow text naming convention)\n    Ensure
  operators get exported\n0.1\n    Initial version, still unstable\n"
basic-deps:
  unix: -any
  base: ! '>=4.4 && <5'
  time: -any
  filepath: -any
  process: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.5'
- '0.5.1'
- '0.6'
- '0.7'
- '0.8'
- '1.0'
- '1.0.1'
- '1.1'
- '1.2'
- '1.3'
- '1.3.1'
- '1.4'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '1.4'
description-type: markdown
description: ! '# Extra [![Hackage version](https://img.shields.io/hackage/v/extra.svg?style=flat)](https://hackage.haskell.org/package/extra)
  [![Build Status](https://img.shields.io/travis/ndmitchell/extra.svg?style=flat)](https://travis-ci.org/ndmitchell/extra)


  A library of extra functions for the standard Haskell libraries. Most functions
  are simple additions, filling out missing functionality. A few functions are available
  in later versions of GHC, but this package makes them available back to GHC 7.2.
  A few examples:


  * `Control.Monad.Extra.concatMapM` provides a monadic version of `concatMap`, in
  the same way that `mapM` is a monadic version of `map`.

  * `Data.Tuple.Extra.fst3` provides a function to get the first element of a triple.

  * `Control.Exception.Extra.retry` provides a function that retries an `IO` action
  a number of times.

  * `System.Environment.Extra.lookupEnv` is a function available in GHC 7.6 and above.
  On GHC 7.6 and above this package reexports the version from `System.Environment`
  while on GHC 7.4 and below it defines an equivalent version.


  The module `Extra` documents all functions provided by this library. Modules such
  as `Data.List.Extra` provide extra functions over `Data.List` and also reexport
  `Data.List`. Users are recommended to replace `Data.List` imports with `Data.List.Extra`
  if they need the extra functionality.


  ## Which functions?


  When producing a library of extra functions I have been guided by a few principles.
  I encourage others with small useful utility functions contribute them here, perhaps
  as a temporary stop before proposing they join the standard libraries.


  * I have been using most of these functions in my packages - they have proved useful
  enough to be worth copying/pasting into each project.

  * The functions follow the spirit of the original Prelude/base libraries. I am happy
  to provide partial functions (e.g. `fromRight`), and functions which are specialisations
  of more generic functions (`whenJust`).

  * Most of the functions have trivial implementations. If a beginner couldn''t write
  the function, it probably doesn''t belong here.

  * I have defined only a few new data types or type aliases. It''s a package for
  defining new utilities on existing types, not new types or concepts.

'
license-name: BSD3
