changelog-type: ''
hash: fda0498f6688e698b2ceef436537e91f6bc768c7c8152f369c1dcad65902c146
test-bench-deps: {}
synopsis: Exceptions which are explicit in the type signature.
changelog: ''
basic-deps:
  base: ! '>=2 && <5'
  transformers: ! '>=0.2 && <0.5'
all-versions:
- '0.0.1'
- '0.0.2'
- '0.1'
- '0.1.0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.1.7'
- '0.1.7.1'
- '0.1.7.2'
- '0.1.7.3'
latest: '0.1.7.3'
description-type: haddock
description: ! 'Synchronous and Asynchronous exceptions which are explicit in the
  type signature.

  The first ones are very similar to ''Either'' and ''Control.Monad.Error.ErrorT''.

  The second ones are used for ''System.IO.readFile'' and ''System.IO.hGetContents''.

  This package is a proposal for improved exception handling in Haskell.

  It strictly separates between handling of

  exceptional situations (file not found, invalid user input,

  see <http://www.haskell.org/haskellwiki/Exception>) and

  (programming) errors (division by zero, index out of range,

  see <http://www.haskell.org/haskellwiki/Error>).

  Handling of the first one is called \"exception handling\",

  whereas handling of errors is better known as \"debugging\".


  For applications see the packages @midi@, @spreadsheet@, @http-monad@.


  Although I''m not happy with the identifier style of the Monad Transformer Library

  (partially intended for unqualified use)

  I have tried to adopt it for this library,

  in order to let Haskell programmers get accustomed easily to it.


  To do:

  Because many people requested it,

  we will provide a @bracket@ function that frees a resource

  both when an exception and an error occurs,

  that is, it combines exception handling and debugging.

  However note that freeing resources in case of an error is dangerous

  and may cause further damage.'
