homepage: ''
changelog-type: markdown
hash: 9ace107a9936b454be706918ac96d31ba283a7022c1707f21e313d0dcc12af2f
test-bench-deps:
  base: -any
  text: -any
  expressions: -any
  singletons: -any
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: ! '>=2.10 && <2.11'
maintainer: jakub.daniel@protonmail.com
synopsis: Expressions and Formulas a la carte
changelog: ! '# Change Log


  ## 0.1.1 -- 2017-09-06


  * Distinguish quantifier-free expressions

  * Convert to negation normal form

  * Convert to prenex form

  * Convert to flat form (select and store have only variables or constants as arguments)

  * Replace store with an instance of its axiomatization


  ## 0.1.0.5  -- 2017-08-29


  * Extracting variables occurring in expression


  ## 0.1.0.4  -- 2017-08-25


  * Foldable with sort index

  * Traversable with sort index


  ## 0.1.0.3  -- 2017-07-11


  * Expression substitution


  ## 0.1.0.2  -- 2017-05-26


  * Equality of expressions


  ## 0.1.0.1  -- 2017-05-24


  * Parsing


  ## 0.1.0.0  -- 2017-05-23


  * Sorted Expressions Ã  la Carte

'
basic-deps:
  base: ! '>=4.9 && <4.10'
  text: ! '>=1.2 && <1.3'
  lattices: ! '>=1.6 && <1.7'
  containers: ! '>=0.5.7 && <0.5.8'
  singletons: ! '>=2.2 && <2.3'
  attoparsec: ! '>=0.13 && <0.14'
  transformers: ! '>=0.5.2 && <0.5.3'
all-versions:
- '0.1.1'
author: Jakub Daniel
latest: '0.1.1'
description-type: haddock
description: ! 'This package is aimed at providing means of fixing a first-order language
  and

  declaring sorted expressions and formulae, the types ensure the declared

  expressions fall within the language.


  This package pre-defines the common logical symbols for conjunction,

  disjunction, negation, and universal and existential quantification as well

  as some specific non-logical symbols such as equality, addition of linear

  integer arithmetic, and other. Common languages such as Lia and ALia

  (standard linear integer arithmetic and linear integer arithmetic with

  arrays) come included.


  An example of a formula declaration:


  > -- Let''s state that zero is successor to no integer (while this would be

  > -- true for non-negative integers, stated this way it is clearly false, but

  > -- it still is a well-formed first-order statement)

  >

  > forall [var "x" :: Var ''IntegralSort] (cnst 0 ./=. var "x" .+. cnst 1) :: Lia
  ''BooleanSort


  Let''s see what declarations the library rejects:


  > (var "x" :: Lia ''BooleanSort) .=. (var "y" :: Lia ''IntegralSort)

  > (var "x" :: Lia ''BooleanSort) .=. (var "y" :: ALia ''BooleanSort)

  > forall [var "x" :: Var ''IntegralSort] true :: QFLia ''BooleanSort'
license-name: BSD3
