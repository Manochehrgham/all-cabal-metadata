homepage: https://github.com/rudymatela/extrapolate#readme
changelog-type: ''
hash: cc76968e56f048c3908ecfba753f0446138e8dcdef56e90d55616ca907e780f1
test-bench-deps:
  base: ! '>=4 && <5'
  leancheck: -any
  speculate: -any
  template-haskell: -any
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: generalize counter-examples of test properties
changelog: ''
basic-deps:
  base: ! '>=4.9 && <4.10'
  leancheck: -any
  speculate: -any
  template-haskell: -any
all-versions:
- '0.0.1'
author: Rudy Matela
latest: '0.0.1'
description-type: markdown
description: ! "Extrapolate\n===========\n\n[![Extrapolate Build Status][build-status]][build-log]\n[![Extrapolate
  on Hackage][hackage-version]][extrapolate-on-hackage]\n\nExtrapolate automatically
  generalizes counter-examples to test properties.\n\n\nExample\n-------\n\nConsider
  the following (faulty) sort function and property:\n\n    sort :: Ord a => [a] ->
  [a]\n    sort [] = []\n    sort (x:xs) = sort (filter (< x) xs)\n               ++
  [x]\n               ++ sort (filter (> x) xs)\n\n    prop_sortCount :: Ord a =>
  a -> [a] -> Bool\n    prop_sortCount x xs = count x (sort xs) == count x xs\n      where\n
  \     count x = length . filter (== x)\n\nExtrapolate both returns a fully defined
  counter-example along with a\ngeneralization:\n\n    > import Test.Extrapolate\n
  \   > check (prop_sortCount :: Int -> [Int] -> Bool)\n    *** Failed! Falsifiable
  (after 4 tests):\n    0 [0,0]\n    Generalization:\n    x (x:x:xs)\n\nThis hopefully
  makes it easier to find the source of the bug.\nIn this case, the faulty sort function
  discard repeated elements.\n\n\nMore documentation\n------------------\n\nFor more
  examples, see the [eg](eg) folder.\n\n[build-status]: https://travis-ci.org/rudymatela/extrapolate.svg?branch=master\n[build-log]:
  \   https://travis-ci.org/rudymatela/extrapolate\n[hackage-version]: https://img.shields.io/hackage/v/extrapolate.svg\n[extrapolate-on-hackage]:
  https://hackage.haskell.org/package/extrapolate\n"
license-name: BSD3
