homepage: http://github.com/fpco/executable-hash
changelog-type: markdown
hash: 5904d9eb4e5bc7ff1e0f86c6bf33bb1618c8b2bcd1cb4f99e337d67289aea988
test-bench-deps:
  executable-hash: -any
  base: -any
maintainer: FP Complete <sloan@fpcomplete.com>
synopsis: Provides the SHA1 hash of the program executable
changelog: ! '0.2.0.0

  =======


  In order to support dynamic linking, `executableHash` and

  `injectedExecutableHash` now need to be run in TH splices.  Before

  this change, the library was assuming that it would be statically

  linked, such that the file-embed dummy bytestring would be present in

  the executable.


  See [this github issue](https://github.com/fpco/executable-hash/issues/1).


  0.1.1.1

  =======


  First public version

'
basic-deps:
  executable-hash: -any
  bytestring: -any
  base: ! '>=4.0 && <5.0'
  executable-path: ! '>=0.0.3 && <0.1'
  file-embed: ! '>=0.0.8 && <0.1'
  template-haskell: -any
  directory: -any
  cryptohash: -any
all-versions:
- '0.1.1.1'
- '0.2.0.0'
author: Michael Sloan
latest: '0.2.0.0'
description-type: markdown
description: ! "# executable-hash\n\nProvides the SHA1 hash of the executable.  This
  hash can either be\ninjected into the executable as a step after compilation, or\ncalculated
  at runtime.\n\n## Usage\n\nThe main function expected to be used by the user is\n`System.Executable.Hash.executableHash`.
  \ When used in a TH splice,\nlike `$(executableHash)`, the resulting expression
  yields a SHA1 hash\ndetermined by the contents of the executable.  However, note
  that this\nmay not be the actual SHA1 of the executable, since the hash can be\ninjected
  into the executable (which changes its \"actual\" hash).\n\nInstalling this package
  will also install the `inject-executable-hash`\nexecutable.  Running this program
  on a binary, like\n`inject-executable-hash <binary-name>` will replace a dummy\n`ByteString`
  (via the `file-embed` package) in the binary with its\nhash.\n\nAlternatively, you
  can put this in a `Setup.hs` file, and set\n`build-type: Custom` in your `.cabal`:\n\n```haskell\nimport
  Distribution.Simple\nimport System.Executable.Hash.Internal (maybeInjectExecutableHash)\n\nmain
  :: IO ()\nmain = defaultMainWithHooks $ simpleUserHooks\n    { postBuild = \\_ _
  _ _ ->\n        maybeInjectExecutableHash \"dist/build/path-to/your-executable\"\n
  \   }\n```\n\n(Note: you'll need to change the executable path)\n"
license-name: MIT
