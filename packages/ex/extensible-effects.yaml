homepage: https://github.com/suhailshergill/extensible-effects
changelog-type: ''
hash: 4b7b13a4ea7de442f16c90ee6fa3434d55d56be9acf2fbb9126da56f8120e61b
test-bench-deps:
  test-framework-hunit: ==0.3.*
  void: ! '>=0.6 && <0.8'
  test-framework: ==0.8.*
  extensible-effects: -any
  base: ! '>=4.6 && <5'
  test-framework-quickcheck2: ==0.3.*
  HUnit: ! '>=1.2 && <1.4'
  test-framework-th: ! '>=0.2'
  QuickCheck: ==2.*
maintainer: suhailshergill@gmail.com
synopsis: An Alternative to Monad Transformers
changelog: ''
basic-deps:
  void: ! '>=0.6 && <0.8'
  base: ! '>=4.6 && <5'
  type-aligned: ! '>=0.9.3'
  transformers-base: ==0.4.*
  transformers: ! '>=0.3 && <0.6'
all-versions:
- '1.0'
- '1.1.0'
- '1.2.0'
- '1.2.1'
- '1.4.1'
- '1.7.1'
- '1.7.1.0'
- '1.7.1.1'
- '1.7.1.2'
- '1.7.2.1'
- '1.8.0.0'
- '1.8.1.0'
- '1.9.0.0'
- '1.9.0.1'
- '1.9.1.0'
- '1.9.2.2'
- '1.10.0.1'
- '1.11.0.0'
- '1.11.0.1'
- '1.11.0.2'
- '1.11.0.3'
- '1.11.0.4'
author: Oleg Kiselyov, Amr Sabry, Cameron Swords, Ben Foppa
latest: '1.11.0.4'
description-type: markdown
description: ! "extensible-effects is based on the work\n[Extensible Effects: An Alternative
  to Monad Transformers](http://okmij.org/ftp/Haskell/extensible/).\nPlease read the
  [paper](http://okmij.org/ftp/Haskell/extensible/exteff.pdf) for details.\n\n[![Build
  Status](https://travis-ci.org/suhailshergill/extensible-effects.svg?branch=master)](https://travis-ci.org/suhailshergill/extensible-effects)\n[![Join
  the chat at https://gitter.im/suhailshergill/extensible-effects](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/suhailshergill/extensible-effects?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n##
  Advantages\n\n\n  * Effects can be added, removed, and interwoven without changes
  to code not\n    dealing with those effects.\n\n## Disadvantages\n\n### For GHC
  version 7.8 and upwards\n  * The extensibility comes at the cost of some ambiguity.
  Note, however, that\n    the extensibility can be traded back, but that detracts
  from some of the\n    advantages. For details see section 4.1 in the\n    [paper](http://okmij.org/ftp/Haskell/extensible/exteff.pdf).
  This issue\n    manifests itself in a few ways:\n    * Common functions can't be
  grouped using typeclasses, e.g.\n      the `ask` and `getState` functions can't
  be grouped with some\n\n          class Get t a where\n            ask :: Member
  (t a) r => Eff r a\n\n      `ask` is inherently ambiguous, since the type signature
  only provides\n      a constraint on `t`, and nothing more. To specify fully, a
  parameter\n      involving the type `t` would need to be added, which would defeat
  the\n      point of having the grouping in the first place.\n    * Code requires
  greater number of type annotations. For details see\n      [#31](https://github.com/suhailshergill/extensible-effects/issues/31).\n
  \ * Requires a `Typeable` instance on the return type. This is no longer a\n    limitation
  on GHC versions 7.8 and above.\n    * fixed by\n      [#38](https://github.com/suhailshergill/extensible-effects/issues/38).\n\n###
  For GHC versions prior to 7.8\n  * Neither `Eff` nor `(:>)` has a `Typeable` instance,
  and can thus often not\n    be used as a return type (e.g. `State` type) for other
  `Eff`s. \n    * fixed by\n      [#38](https://github.com/suhailshergill/extensible-effects/issues/38).
  \n"
license-name: MIT
