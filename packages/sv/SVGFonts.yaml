changelog-type: ''
hash: 504fe08e41304169b5a4c98870be3fdc191af57cfae75f9bb3ac705f65c048a2
synopsis: Fonts from the SVG-Font format
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '1.0'
- '1.1'
- '1.1.1'
- '1.1.2'
- '1.2'
- '1.2.1'
- '1.3'
- '1.3.0.1'
- '1.3.0.2'
- '1.4'
- '1.4.0.1'
- '1.4.0.2'
- '1.4.0.3'
- '1.5.0.0'
latest: '1.5.0.0'
description-type: haddock
description: ! 'Native font support for the diagrams framework (<http://projects.haskell.org/diagrams/>).
  Note that this package can be used with any diagrams backend, not just the SVG backend.  The
  SVG-font format is easy to parse

  and was therefore chosen for a font library completely written in Haskell.


  You can convert your own font to SVG with <http://fontforge.sourceforge.net/>, or
  use the included LinLibertine and Bitstream fonts.


  Features:


  * Complete implementation of the features that Fontforge produces (though not the
  complete SVG format)


  * Kerning (/i.e./ the two characters in \"VA\" are closer than the characters in
  \"VV\")


  * Unicode


  * Ligatures


  * An example that shows how to do text boxes with syntax highlighting using highlighting-kate:

  <http://hackage.haskell.org/package/highlighting-kate>


  XML speed issues can be solved by trimming the svg file to only those characters
  that are used (or maybe binary xml one day).


  Version 1.0 of this library supports texturing, though this only makes sense in
  a diagrams backend that does rasterization in Haskell, such as diagrams-rasterific.


  Example:


  >  # LANGUAGE NoMonomorphismRestriction #

  >

  > import Diagrams.Prelude

  > import Diagrams.Backend.Rasterific.CmdLine

  > import Graphics.SVGFonts

  >

  > main = defaultMain (text'' "Hello World")

  >

  > text''   t = stroke (textSVG t 1) # fc purple # fillRule EvenOdd

  > text''''  t = stroke (textSVG'' (TextOpts lin INSIDE_H KERN False 1 1) t) # fillRule
  EvenOdd

  > text'''''' t =        (textSVG_ (TextOpts lin INSIDE_H KERN True  1 1) t) # fillRule
  EvenOdd

'
