homepage: https://github.com/Michaelt293/Element-isotopes/blob/master/README.md
changelog-type: ''
hash: 1ac06d7e32cc8ce6bfa6f115164975aa6c37a33871d4454c55d7308c4cce11b0
test-bench-deps:
  base: -any
  hspec: -any
  containers: -any
  isotope: -any
  QuickCheck: -any
maintainer: Michaelt293@gmail.com
synopsis: Isotopic masses and relative abundances.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  megaparsec: ! '>=4 && <5'
  containers: ! '>=0.5 && <0.6'
  th-lift: -any
  template-haskell: -any
all-versions:
- '0.1.0.0'
author: Michael Thomas
latest: '0.1.0.0'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/Michaelt293/isotope.svg?branch=master)](https://travis-ci.org/Michaelt293/isotope)\n[![Gitter](https://badges.gitter.im/Join
  Chat.svg)](https://gitter.im/Michaelt293/isotope)\n\n![alt tag](https://github.com/Michaelt293/isotope/blob/master/isotope_jpeg.jpg)\n\n*
  [Design](#design)\n    * [Isotopic, integer, monoisotopic, nominal and average masses](#isotopic-integer-monoisotopic-nominal-and-average-masses)\n
  \   * [Element symbols](#element-symbols)\n    * [Molecular, condensed and empirical
  formulae](#molecular-condensed-and-empirical-formulae)\n    * [Molecular, condensed
  and empirical formula QuasiQuoters](#molecular-condensed-and-empirical-formula-QuasiQuoters)\n
  \   * [Conversion between CondensedFormula, MolecularFormula and EmpiricalFormula
  data types](#conversion-between-condensedformula-molecularformula-and-empiricalformula-data-types)\n
  \   * [Operators for working with molecular formulae](#operators-for-working-with-molecular-formulae)\n
  \   * [ChemicalMass type class](#ElementalComposition-type-class)\n    * [Additional
  functions accepting an ElementSymbol as input](#additional-functions-accepting-an-elementsymbol-as-input)\n*
  [Comparison to other chemistry libraries](#comparison-to-other-chemistry-libraries)\n
  \   * [Radium](#radium)\n    * [Ouch](#ouch)\n* [Future directions](#future-directions)\n*
  [Contributions](#contributions)\n* [Author](#author)\n* [License](#license)\n* [References](#references)\n\nIsotope
  is a chemistry library for calculating masses of elements and molecules. The main
  focus of the Isotope library is mass spectrometry, an area where the masses and
  relative abundances of isotopes and isotopologues is of central importance.\n\n##
  Design\n\nThe Isotope library designed with type safety and flexibility in mind.
  Key features will be described below.\n\n### Isotopic, integer, monoisotopic, nominal
  and average masses\n\nIn mass spectrometry and general chemistry, there are several
  different ways in which to describe mass. This can lead to some confusion since
  more than one term can exist to describe the same unit of measurement. In the Isotope
  library, the following conventions are used:\n\nMass | Description\n--- | ---\nIsotopic
  mass | The mass of an isotope for an element.\nInteger mass | The mass of an isotope
  rounded to the nearest integer value.\nMonoisotopic mass | The mass of the most
  abundant isotope for an element or the sum of the masses of the most abundant isotope
  of each element for a molecule.\nNominal mass | The integer mass of the most abundant
  isotope for an element or the sum of integer masses of the most abundant isotope
  of each element for a molecule.\nAverage mass | The average mass of an element or
  molecule based on naturally-occurring abundances. In the isotopes library, average
  mass is used in place of atomic mass and molecular mass.\n\nFor more detailed discussion
  regarding the concept of mass in mass spectrometry, please refer to \"Molecular
  Weight and the Nominal Mass, Monoisotopic Mass and Average Molar Mass\" by Prof.
  O. David Sparkman [1].\n\n\n### Element symbols\n\nIn Isotope, element symbols are
  represented by the enumeration type, `ElementSymbol`, i.e. `data ElementSymbol =
  H | He | Li | Be .....`. This is advantageous over the use of strings to represent
  element symbols (i.e. `type ElementSymbol = String`) since it increases type safety.
  Moreover, values of type `ElementSymbol` can be used as keys within maps as an intuitive
  way to map elements to their properties. Isotope presently contains information
  on the isotopic masses and relative abundances for all elements from Hydrogen to
  Bismuth and Thorium and Uranium.\n\n### Molecular, condensed and empirical formulae\n\nIn
  the Isotope library, a distinction between molecular, condensed and empirical formulae
  is made. Molecular formulae contain the total number of atoms for each element of
  a molecule while condensed formulae give information on the connectivity of atoms
  within molecules. For example, the molecule trimethylamine has a molecular formula
  of C3H9N and a condensed formula of N(CH3)3. Here the molecular formula indicates
  trimethyelamine has a total of 3 carbon atoms, 9 hydrogen atoms and 1 nitrogen whereas
  the condensed formula indicates trimethylamine has 3 methyl groups bonded to a central
  nitrogen. Conversely, an empirical formula is the simplest integer ratio for the
  atoms of a compound. For example, the molecular formula of benzene is C6H6 whereas
  the empirical formula of benzene is simply CH.\n\n### Molecular, condensed and empirical
  formula QuasiQuoters\n\nThe QuasiQuoters, `mol`, `con` and `emp`, are provided for
  `MolecularFormula`, `CondensedFormula` and `EmpiricalFormula` data types, respectively.
  Therefore, shorthand notation can be used when working with molecular, condensed
  and empirical formulae. The use of molecular, condensed and empirical formulae QuasiQuoters
  requires the use of the `QuasiQuotes` language extension (`:set -XQuasiQuotes` can
  be added to the `.ghci` file when working in GHCi).\n```haskell\nGHCi> [mol|CH4|]\nMolecularFormula
  {getMolecularFormula = fromList [(H,4),(C,1)]}\n```\nImportantly, errors in formulae
  will be detected at compile-time and give informative error messages! (Note the
  example below is from a GHCi session.)\n```haskell\nGHCi> [mol|Ch4|]\n\n<interactive>:4:6:\n
  \   Could not parse formula: 1:2:\nunexpected 'h'\nexpecting \"Ag\", \"Al\", \"Ar\",
  \"As\", \"Au\", \"Ba\", \"Be\", \"Bi\", \"Br\", \"Ca\", \"Cd\", \"Ce\", \"Cl\",
  \"Co\", \"Cr\", \"Cs\", \"Cu\", \"Dy\", \"Er\", \"Eu\", \"Fe\", \"Ga\", \"Gd\",
  \"Ge\", \"He\", \"Hf\", \"Hg\", \"Ho\", \"In\", \"Ir\", \"Kr\", \"La\", \"Li\",
  \"Lu\", \"Mg\", \"Mn\", \"Mo\", \"Na\", \"Nb\", \"Nd\", \"Ne\", \"Ni\", \"Os\",
  \"Pa\", \"Pb\", \"Pd\", \"Pm\", \"Pr\", \"Pt\", \"Rb\", \"Re\", \"Rh\", \"Ru\",
  \"Sb\", \"Sc\", \"Se\", \"Si\", \"Sm\", \"Sn\", \"Sr\", \"Ta\", \"Tb\", \"Tc\",
  \"Te\", \"Th\", \"Ti\", \"Tl\", \"Tm\", \"Xe\", \"Yb\", \"Zn\", \"Zr\", '(', 'B',
  'C', 'F', 'H', 'I', 'K', 'N', 'O', 'P', 'S', 'U', 'V', 'W', 'Y', or end of input\n```\n\n###
  Conversion between `CondensedFormula`, `MolecularFormula` and `EmpiricalFormula`
  data types\n\nA condensed formula can be converted to a molecular or empirical formula
  and a molecular formula can be converted to an empirical formula. In Isotope, this
  functionality is provided by two type classes, `ToMolecularFormula` and `ToEmpiricalFormula`,
  which contain the methods, `toMolecularFormula` and `toEmpiricalFormula`, respectively.\n\n```haskell\nGHCi>
  let butane = [con|CH3(CH2)2CH3|]\nGHCi> toMolecularFormula butane\nMolecularFormula
  {getMolecularFormula = fromList [(H,10),(C,4)]}\nGHCi> toEmpiricalFormula butane\nEmpiricalFormula
  {getEmpiricalFormula = fromList [(H,5),(C,2)]}\n```\nWhen using condensed, molecular
  or empirical formula QuasiQuoters, it is possible to this implicitly. For example,
  the QuasiQuoter `emp` could be applied to the condensed formula \"CH3(CH2)2CH3\"
  used above to yield a value of type `EmpiricalFormula`.\n```haskell\nGHCi> [emp|CH3(CH2)2CH3|]\nEmpiricalFormula
  {getEmpiricalFormula = fromList [(H,5),(C,2)]}\n```\n\n### Operators for working
  with molecular formulae\n\nThe Isotope library comes with three operators for working
  with molecular formulae; `|+|`, `|-|` and `|*|`. These operators have the same fixity
  and associativity as `+`, `-` and `*`, respectively. This allows us to the `|+|`,
  `|-|` and `|*|` operators in an intuitive manner (i.e., like basic arithmetic).
  For example, we could define the molecule formula of propane in terms of its building
  blocks; that is, 2 methyl groups and 1 methylene group.\n```haskell\nGHCi> let methyl
  = [mol|CH3|]\nGHCi> let methylene = [mol|CH2|]\nGHCi> let propane = 2 |*| methyl
  |+| methylene\nGHCi> propane\nMolecularFormula {getMolecularFormula = fromList [(H,8),(C,3)]}\n```\nWe
  could then go one step further and define propene to be propane minus molecular
  hydrogen.\n```haskell\nGHCi> let propene = propane |-| [mol|H2|]\nGHCi> propene\nMolecularFormula
  {getMolecularFormula = fromList [(H,6),(C,3)]}\n```\n\n### `ChemicalMass` type class\n\nThe
  `ChemicalMass` type class has four methods; `toElementalComposition`, `monoisotopicMass`,
  `nominalMass` and `averageMass`, where `toElementalComposition` is the minimal complete
  definition. `ElementSymbol`, `EmpiricalFormula`, `MolecularFormula` and `CondensedFormula`
  are instances of `ChemicalMass`. This provides a uniform approach to working with
  elements, empirical formulae, molecular formulae and condensed formulae.\n```haskell\nGHCi>
  nominalMass C\n12\nGHCi> averageMass [mol|CH4|]\n16.042498912958358\nGHCi> monoisotopicMass
  [mol|N(CH3)3|]\n59.073499294499996\n```\n### Additional functions accepting an `ElementSymbol`
  as input\nIsotope also provides a range of addition functions which accepts an `ElementSymbol`
  as input. For example, to get the masses of all isotopes for titanium, we simply
  have to pass the element symbol `Ti` to the function `isotopicMasses`.\n```haskell\nGHCi>
  isotopicMasses Ti\n[45.95262772,46.95175879,47.94794198,48.94786568,49.94478689]\n```\n\n##
  Comparison to other chemistry libraries\nIn addition to Isotope, there are two other
  open-source chemistry libraries written in Haskell; Radium [2] and Ouch [3].\n\n###
  Radium\n\nRadium is a Haskell library written by klangner and has been uploaded
  to Hackage [3]. Radium is also under active development with the last commit occurring
  15 hours before the time of writing (27/03/16). In comparison to Isotope, the main
  difference is that Radium does not provide information on the masses and relative
  abundances of elemental isotopes. Consequently, Radium could not be used for calculating
  the monoisotopic masses of molecules and ions. Conversely, Radium provides information
  on electron negativities, ionisation energies and electron configurations and support
  for SMILES strings which are not provided by Isotope.\n\n### Ouch\n\nOuch is a chemistry
  informatics toolkit written in Haskell by Orion Jankowski (Note: Ouch is not on
  Hackage). Unfortunately, Ouch is no longer under active development with the last
  commit occurring three years ago. Similar to Radium, Ouch does not provide information
  on the masses and relative abundances of elemental isotopes making it unsuitable
  for mass spectrometry. On the otherhand, Ouch provides support for SMILES strings
  and molecular structure. More information on Ouch can be found on Orion Jankowski's
  blog [4].\n\n## Future directions\n\nIsotopic profiles currently cannot be calculated
  for molecular formulae. This is a major limitation since isotopic profiles are important
  in mass spectrometry. Therefore, this functionality should be added to Isotope in
  a future version. Since calculating isotopic profiles is computationally expensive,
  this feature could be introduced using Rust if performance is an issue using pure
  Haskell code. (Rust is a modern systems programming language with a strong type
  system and memory safety [6].)\n\nTo increase compile-time checks, refinement types
  could be introduced using LiquidHaskell [7]. For example, not all elements have
  naturally-occurring isotopes and such elements therefore do not have an average
  mass. Using LiquidHaskell, the function `averageMass` could be refined to only accept
  elements with naturally-occurring isotopes. If such a direction is taken, two separate
  libraries may be maintained; one using LiquidHaskell and the other using only conventional
  Haskell code.\n\n## Contributions\n\nPlease report bugs and feature suggestions
  using the [issue tracker](https://github.com/Michaelt293/isotope/issues). Pull requests
  are welcome and will be merged provided they improve Isotope. Suggestions or questions
  about Isotope can also be directed towards the [Gitter room](https://gitter.im/Michaelt293/isotope).\n\n##
  Author\n\nThe Isotope library is authored and maintained by Michael Thomas. Isotope
  logo was designed by Ben Jerrems.\n\n## License\n\nCopyright © 2015–2016 Michael
  Thomas\n\n## References\n\n[1] http://www.sepscience.com/Information/Archive/MS-Solutions/646-/MS-Solutions-8-Confusion-Resulting-from-Molecular-Weight-and-the-Nominal-Mass-Monoisotopic-Mass-and-Average-Molar-Mass\n\n[2]
  https://github.com/klangner/radium\n\n[3] https://hackage.haskell.org/package/radium\n\n[4]
  https://github.com/odj/Ouch\n\n[5] http://www.pharmash.com/tags/OUCH.html\n\n[6]
  https://www.rust-lang.org/\n\n[7] https://ucsd-progsys.github.io/liquidhaskell-tutorial/01-intro.html\n"
license-name: GPL-3
