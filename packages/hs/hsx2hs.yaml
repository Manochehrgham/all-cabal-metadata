homepage: https://github.com/seereason/hsx2hs
changelog-type: ''
hash: 8ea498b5fec39a928fdc4c60011d3cf670749c4fe94c13edf604958dd0b35d65
test-bench-deps: {}
maintainer: Jeremy Shaw <stepcut@n-heptane.com>
synopsis: HSX (Haskell Source with XML) allows literal XML syntax in Haskell source
  code.
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  haskell-src-exts: ! '>=1.16 && <1.18'
  utf8-string: ! '>=0.3 && <1.1'
  mtl: ! '>=2.0 && <2.3'
  haskell-src-meta: ! '>=0.6 && <0.7'
  template-haskell: ! '>=2.7 && <2.11'
all-versions:
- '0.11.0'
- '0.12.0'
- '0.13.0'
- '0.13.1'
- '0.13.2'
- '0.13.3'
- '0.13.3.1'
- '0.13.3.2'
- '0.13.4'
author: Niklas Broberg, Joel Bjornson
latest: '0.13.4'
description-type: haddock
description: ! 'HSX (Haskell Source with XML) allows literal XML syntax in Haskell
  source code.

  The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal

  XML syntax is translated into function calls for creating XML values of the appropriate

  forms.

  trhsx transforms literal XML syntax into a series of function calls. Any project

  can make use of the syntax by providing definitions for those functions, and the

  XML values produced will be of the types specified. This works for any types, since

  trhsx doesn''t make any assumptions, or inserts any information depending on types.

  XMLGenerator defines a few typeclasses that together cover the functions injected
  by the

  preprocessor. A project that uses these classes to provide the semantics for the
  injected

  syntax will be able to use any functions written in terms of these, allowing better
  code

  reusability than if each project defines its own semantics for the XML syntax. Also,
  the classes

  makes it possible to use the literal syntax at different types within the same module.

  Achieving that is not as simple as it may seem, but the XMLGenerator module provides
  all the

  necessary machinery.'
license-name: BSD3
