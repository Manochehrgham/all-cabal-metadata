homepage: ''
changelog-type: markdown
hash: 4b9560f68a0893886ac88eb963dd63e27b0edb87d1caaa7abb6cd24001b7dfab
test-bench-deps:
  bytestring: -any
  base: -any
  tasty-expected-failure: ! '>=0.11 && <0.12'
  text: -any
  containers: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: ! '>=2.7'
  hslua: -any
maintainer: albert+hslua@zeitkraut.de
synopsis: A Lua language interpreter embedding in Haskell
changelog: ! "## Changelog\n\n### 0.5.0\n\n* New raw functions for `luaopen_base`,
  `luaopen_package`, `luaopen_string`,\n  `luaopen_table`, `luaopen_math`, `luaopen_io`,
  `luaopen_os`, `luaopen_debug`\n  and their high-level wrappers (with names `openbase`,
  `opentable` etc.)\n  implemented.\n* Remove custom versions of `loadfile` and `loadstring`.\n*
  Drop support for GHC versions < 7.8, avoid compiler warnings.\n* Ensure no symbols
  are stripped when linking the bundled lua interpreter.\n* Simplify `tostring` function
  definition. (Sean Proctor)\n* Explicitly decprecate `strlen`. (Sean Proctor)\n*
  Add links to lua documentation for functions wrapping the official lua C API.\n
  \ (Sean Proctor).\n\n### 0.4.1\n\n* Bugfix(#30): `tolist` wasn't popping elements
  of the list from stack.\n\n### 0.4.0\n\n* `pushstring` and `tostring` now uses `ByteString`
  instead of `[Char]`.\n* `StackValue [Char]` instance is removed, `StackValue ByteString`
  is added.\n* `StackValue a => StackValue [a]` instance is added. It pushes a Lua
  array to\n  the stack. `pushlist`, `islist` and `tolist` functions are added.\n*
  Type errors in Haskell functions now propagated differently. See the\n  `Scripting.Lua`
  documentation for detailed explanation. This should fix\n  segfaults reported several
  times.\n* `lua_error` function is removed, it's never safe to call in Haskell.\n\nRelated
  issues and pull requests: #12, #26, #24, #23, #18.\n\n### 0.3.14\n\n* Pkgconf-based
  setup removed. Cabal is now using `extra-libraries` to link with Lua.\n* `luajit`
  flag is added to link hslua with LuaJIT.\n\n### 0.3.13\n\n* Small bugfix related
  with GHCi running under Windows.\n\n### 0.3.12\n\n* `pushrawhsfunction` and `registerrawhsfunction`
  functions are added.\n* `apicheck` flag is added to Cabal package to enable Lua
  API checking. (useful for debugging)\n\n### 0.3.11\n\n* `luaL_ref` and `luaL_unref`
  functions are added.\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.9'
  bytestring: ! '>=0.10.2 && <0.11'
  fail: ! '>=4.9 && <5'
  base: ! '>=4.7 && <5'
  text: -any
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <2.3'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.3.6.1'
- '0.3.7'
- '0.3.8'
- '0.3.9'
- '0.3.10'
- '0.3.11'
- '0.3.12'
- '0.3.13'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.6.0'
author: Gracjan Polak, Ömer Sinan Ağacan
latest: '0.6.0'
description-type: markdown
description: ! '# hslua – Lua interpreter interface for Haskell


  [![Build Status]](https://travis-ci.org/osa1/hslua)

  [![Coverage Status]](https://coveralls.io/github/osa1/hslua?branch=master)

  [![Hackage]](https://hackage.haskell.org/package/hslua)


  Hslua provides bindings, wrappers, types, and helper functions to bridge haskell

  and lua.


  [Build Status]: https://travis-ci.org/osa1/hslua.svg?branch=master

  [Coverage Status]: https://coveralls.io/repos/osa1/hslua/badge.svg?branch=master&service=github

  [Hackage]: http://img.shields.io/hackage/v/hslua.svg



  Using a different lua version

  -----------------------------


  To use system-wide installed Lua/LuaJIT when linking hslua as a dependency,

  build/install your package using `--constraint="hslua +system-lua"` or for

  LuaJIT: `--constraint="hslua +system-lua +luajit"`. For example, you can install

  Pandoc with hslua that uses system-wide LuaJIT like this:


  ``` sh

  cabal install pandoc --constraint="hslua +system-lua +luajit"

  ```



  FAQ

  ---


  **Where are the coroutine related functions?** Yielding from a coroutine works

  via `longjmp`, which plays very badly with Haskell''s RTS. Tests to get

  coroutines working with HsLua were unsuccessful. No coroutine related functions

  are exported from the default module for that reason. However, raw bindings to

  the C API functions are still provided in `Foreign.Lua.RawBindings`. If you get

  coroutines to work, or just believe that there should be wrapper functions for

  other reasons, we''d love to hear from you.

'
license-name: MIT
