homepage: ''
changelog-type: markdown
hash: 74d37392d2bed7f0007f5d24bcb9a802ae67468c645e0a8e52aac11cae2b36a3
test-bench-deps:
  bytestring: -any
  base: -any
  tasty-expected-failure: ! '>=0.11 && <0.12'
  text: -any
  containers: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: ! '>=2.7'
  hslua: -any
maintainer: albert+hslua@zeitkraut.de
synopsis: A Lua language interpreter embedding in Haskell
changelog: ! "## Changelog\n### 0.7.0\n\n- Tuples from pairs to octuples have been
  made instances of `FromLuaStack` and\n  `ToLuaStack`.\n- New functions `dostring`
  and `dofile` are provided to load and run strings and\n  files in a single step.\n-
  `LuaStatus` was renamed to `Status`, the *Lua* prefix was removed from its\n  type
  constructors.\n- The constructor `ErrFile` was added to `Status`. It is returned
  by `loadfile`\n  if the file cannot be read.\n- Remove unused FFI bindings and unused
  types, including all functions unsafe to\n  use from within Haskell and the library
  functions added with 0.5.0. Users with\n  special requirements should define their
  own wrappers and raw bindings.\n- The module *Foreign.Lua.Api.SafeBindings* was
  merge into\n  *Foreign.Lua.Api.RawBindings*.\n- FFI bindings are changed to use
  newtypes where sensible, most notably\n  `StackIndex`, `NumArgs`, and `NumResults`,
  but also the newly introduced\n  newtypes `StatusCode`, `TypeCode`, and `LuaBool`.\n-
  Add functions `tointegerx` and `tonumberx` which can be used to get and check\n
  \ values from the stack in a single step.\n- The signature of `concat` was changed
  from `Int -> Lua ()` to\n  `NumArgs -> Lua ()`.\n- The signature of `loadfile` was
  changed from `String -> Lua Int` to\n  `String -> Lua Status`. \n- The type `LTYPE`
  was renamed to `Type`, its constructors were renamed to\n  follow the pattern `Type<Typename>`.
  `LuaRelation` was renamed to\n  `RelationalOperator`, the *Lua* prefix was removed
  from its constructors.\n- Add function `tolist` to allow getting a generic list
  from the stack without\n  having to worry about the overlapping instance with `[Char]`.\n\n\n###
  0.6.0\n\n* Supported Lua Versions now include Lua 5.2 and Lua 5.3. LuaJIT and Lua
  5.1\n  remain supported as well.\n* Flag `use-pkgconfig` was added to allow discovery
  of library and include paths\n  via pkg-config. Setting a specific Lua version flag
  now implies `system-lua`.\n  (Sean Proctor)\n* The module was renamed from `Scripting.Lua`
  to `Foreign.Lua`. The code is now\n  split over multiple sub-modules. Files processed
  with hsc2hs are restricted to\n  Foreign.Lua.Api.\n* A `Lua` monad (reader monad
  over LuaState) is introduced. Functions which took\n  a LuaState as their first
  argument are changed into monadic functions within\n  that monad.\n* Error handling
  has been redesigned completely. A new LuaException was\n  introduced and is thrown
  in unexpected situations. Errors in lua which are\n  leading to a `longjmp` are
  now caught with the help of additional C wrapper\n  functions. Those no longer lead
  to uncontrolled program termination but are\n  converted into a LuaException.\n*
  `peek` no longer returns `Maybe a` but just `a`. A LuaException is thrown if\n  an
  error occurs (i.e. in situtations where Nothing would have been returned\n  previously).\n*
  The `StackValue` typeclass has been split into `FromLuaStack` and\n  `ToLuaStack`.
  Instances not satisfying the law `x == push x *> peek (-1)` have\n  been dropped.\n*
  Documentation of API functions was improved. Most docstrings have been copied\n
  \ from the official Lua manual, enriched with proper markup and links, and\n  changed
  to properly describe hslua specifics when necessary.\n* Example programs have been
  moved to a separate repository.\n* Unused files were removed. (Sean Proctor)\n\n###
  0.5.0\n\n* New raw functions for `luaopen_base`, `luaopen_package`, `luaopen_string`,\n
  \ `luaopen_table`, `luaopen_math`, `luaopen_io`, `luaopen_os`, `luaopen_debug`\n
  \ and their high-level wrappers (with names `openbase`, `opentable` etc.)\n  implemented.\n*
  Remove custom versions of `loadfile` and `loadstring`.\n* Drop support for GHC versions
  < 7.8, avoid compiler warnings.\n* Ensure no symbols are stripped when linking the
  bundled lua interpreter.\n* Simplify `tostring` function definition. (Sean Proctor)\n*
  Explicitly deprecate `strlen`. (Sean Proctor)\n* Add links to lua documentation
  for functions wrapping the official lua C API.\n  (Sean Proctor).\n\n### 0.4.1\n\n*
  Bugfix(#30): `tolist` wasn't popping elements of the list from stack.\n\n### 0.4.0\n\n*
  `pushstring` and `tostring` now uses `ByteString` instead of `[Char]`.\n* `StackValue
  [Char]` instance is removed, `StackValue ByteString` is added.\n* `StackValue a
  => StackValue [a]` instance is added. It pushes a Lua array to\n  the stack. `pushlist`,
  `islist` and `tolist` functions are added.\n* Type errors in Haskell functions now
  propagated differently. See the\n  `Scripting.Lua` documentation for detailed explanation.
  This should fix\n  segfaults reported several times.\n* `lua_error` function is
  removed, it's never safe to call in Haskell.\n\nRelated issues and pull requests:
  #12, #26, #24, #23, #18.\n\n### 0.3.14\n\n* Pkgconf-based setup removed. Cabal is
  now using `extra-libraries` to link with Lua.\n* `luajit` flag is added to link
  hslua with LuaJIT.\n\n### 0.3.13\n\n* Small bugfix related with GHCi running under
  Windows.\n\n### 0.3.12\n\n* `pushrawhsfunction` and `registerrawhsfunction` functions
  are added.\n* `apicheck` flag is added to Cabal package to enable Lua API checking.
  (useful for debugging)\n\n### 0.3.11\n\n* `luaL_ref` and `luaL_unref` functions
  are added.\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.9'
  bytestring: ! '>=0.10.2 && <0.11'
  fail: ! '>=4.9 && <5'
  base: ! '>=4.7 && <5'
  text: -any
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <2.3'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.3.6.1'
- '0.3.7'
- '0.3.8'
- '0.3.9'
- '0.3.10'
- '0.3.11'
- '0.3.12'
- '0.3.13'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.6.0'
- '0.7.0'
author: Gracjan Polak, Ömer Sinan Ağacan
latest: '0.7.0'
description-type: markdown
description: ! '# hslua – Lua interpreter interface for Haskell


  [![Build Status]](https://travis-ci.org/osa1/hslua)

  [![Coverage Status]](https://coveralls.io/github/osa1/hslua?branch=master)

  [![Hackage]](https://hackage.haskell.org/package/hslua)


  Hslua provides bindings, wrappers, types, and helper functions to bridge haskell

  and lua.


  [Build Status]: https://travis-ci.org/osa1/hslua.svg?branch=master

  [Coverage Status]: https://coveralls.io/repos/osa1/hslua/badge.svg?branch=master&service=github

  [Hackage]: http://img.shields.io/hackage/v/hslua.svg



  Using a different lua version

  -----------------------------


  To use system-wide installed Lua/LuaJIT when linking hslua as a dependency,

  build/install your package using `--constraint="hslua +system-lua"` or for

  LuaJIT: `--constraint="hslua +system-lua +luajit"`. For example, you can install

  Pandoc with hslua that uses system-wide LuaJIT like this:


  ``` sh

  cabal install pandoc --constraint="hslua +system-lua +luajit"

  ```



  FAQ

  ---


  **Where are the coroutine related functions?** Yielding from a coroutine works

  via `longjmp`, which plays very badly with Haskell''s RTS. Tests to get

  coroutines working with HsLua were unsuccessful. No coroutine related functions

  are exported from the default module for that reason. However, raw bindings to

  the C API functions are still provided in `Foreign.Lua.RawBindings`. If you get

  coroutines to work, or just believe that there should be wrapper functions for

  other reasons, we''d love to hear from you.

'
license-name: MIT
