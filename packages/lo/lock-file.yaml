homepage: https://github.com/trskop/lock-file
changelog-type: markdown
hash: 2c6bc79db0f2cdeb55396860867b462995047699a66e4b0cb31724f961ae443b
test-bench-deps:
  exceptions: ! '>0.6 && <0.9'
  test-framework-hunit: ! '>=0.2.6'
  test-framework: ! '>=0.8 && <1'
  base: ! '>=4.5 && <5'
  data-default-class: ==0.0.* || ==0.1.*
  filepath: ==1.3.* || ==1.4.*
  test-framework-quickcheck2: ! '>=0.3'
  HUnit: ! '>=1.2 && <2'
  tagged-exception-core: ! '>=2.0.0.0 && <3'
  transformers: ! '>=0.3 && <0.6'
  directory: ! '>=1.1 && <1.4'
maintainer: peter.trsko@gmail.com
synopsis: Provide exclusive access to a resource using lock file.
changelog: ! "# ChangeLog / ReleaseNotes\n\n## Version 0.5.0.2\n\n* Building on GHC
  from 7.6 up to 7.10. (new)\n* Relaxed upper bound of [exceptions][] package to include
  0.8 branch. This\n  mirrors dependencies of [tagged-exception-core][] package. (new)\n*
  Enabling `-fwarn-missing-import-lists` with `-fpedantic`. (new)\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/lock-file-0.5.0.2>\n\n\n## Version 0.5.0.1\n\n*
  Dropping explicit dependency on [QuickCheck][].\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/lock-file-0.5.0.1>\n\n\n##
  Version 0.5.0.0\n\n* First public release.\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/lock-file-0.5.0.0>\n\n\n\n[Hackage]:\n
  \ http://hackage.haskell.org/\n  \"HackageDB (or just Hackage) is a collection of
  releases of Haskell packages.\"\n[QuickCheck]:\n  http://hackage.haskell.org/package/QuickCheck\n
  \ \"QuickCheck package on Hackage\"\n[exceptions]:\n  http://hackage.haskell.org/package/exceptions\n
  \ \"exceptions package on Hackage\"\n[tagged-exception-core]:\n  http://hackage.haskell.org/package/tagged-exception-core\n
  \ \"tagged-exception-core package on Hackage\"\n"
basic-deps:
  exceptions: ! '>0.6 && <0.9'
  base: ! '>=4.5 && <5'
  data-default-class: ==0.0.* || ==0.1.*
  tagged-exception-core: ! '>=2.0.0.0 && <3'
  transformers: ! '>=0.3 && <0.6'
  directory: ! '>=1.1 && <1.4'
all-versions:
- '0.5.0.0'
- '0.5.0.1'
- '0.5.0.2'
author: Peter Trsko
latest: '0.5.0.2'
description-type: markdown
description: ! "Lock File\n=========\n\n[![Hackage](http://img.shields.io/hackage/v/lock-file.svg)][Hackage:
  lock-file]\n[![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n\n[![Build](https://travis-ci.org/trskop/lock-file.svg)](https://travis-ci.org/trskop/lock-file)\n\n\nDescription\n-----------\n\nProvide
  exclusive access to a resource using lock file, which are files whose\npurpose is
  to signal by their presence that some resource is locked.\n\n\nUsage Example\n-------------\n\nFollowing
  example acquires lock file and then waits `1000000` micro seconds\nbefore releasing
  it. Note also that it is possible to specify retry strategy.\nHere we set it to
  `No` and therefore this code won't retry to acquire lock file\nafter first failure.\n\n```Haskell\nmodule
  Main (main)\n    where\n\nimport Control.Concurrent (threadDelay)\n    -- From base
  package, but GHC specific.\n\nimport qualified Control.Monad.TaggedException as
  Exception (handle)\n    -- From tagged-exception-core package.\n    -- http://hackage.haskell.org/package/tagged-exception-core\nimport
  Data.Default.Class (Default(def))\n    -- From data-default-class package, alternatively
  it's possible to use\n    -- data-default package version 0.5.2 and above.\n    --
  http://hackage.haskell.org/package/data-default-class\n    -- http://hackage.haskell.org/package/data-default\nimport
  System.IO.LockFile\n    ( LockingParameters(retryToAcquireLock)\n    , RetryStrategy(No)\n
  \   , withLockFile\n    )\n\n\nmain :: IO ()\nmain = handleException\n    . withLockFile
  lockParams lockFile $ threadDelay 1000000\n  where\n    lockParams = def\n        {
  retryToAcquireLock = No\n        }\n\n    lockFile = \"/var/run/lock/my-example-lock\"\n\n
  \   handleException = Exception.handle\n        $ putStrLn . (\"Locking failed with:
  \" ++) . show\n```\n\nThis command line example shows that trying to execute two
  instances of\n`example` at the same time will result in failure of the second one.\n\n```\n$
  ghc example.hs\n[1 of 1] Compiling Main             ( example.hs, example.o )\nLinking
  example ...\n$ ./example & ./example\n[1] 7893\nLocking failed with: Unable to acquire
  lock file: \"/var/run/lock/my-example-lock\"\n$ [1]+  Done                    ./example\n```\n\n\nBuilding
  options\n----------------\n\n* `-fpedantic` (disabled by default)\n\n  Pass additional
  warning flags to GHC.\n\n\n\n[Hackage: lock-file]:\n  https://hackage.haskell.org/package/lock-file\n
  \ \"Hackage: lock-file\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell
  Programming Language\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n"
license-name: BSD3
