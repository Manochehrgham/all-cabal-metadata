homepage: https://github.com/cpeikert/Lol
changelog-type: markdown
hash: 4de5ff8485c32b2141abdbe19ce468f915bb02b60b8cfeb73e8df4fbd8a8bffb
test-bench-deps:
  lol: ! '>=0.6.0.0'
  test-framework: ! '>=0.8'
  MonadRandom: -any
  base: ! '>=4.9 && <5'
  test-framework-quickcheck2: ! '>=0.3'
  criterion: -any
  constraints: -any
  lol-benches: -any
  lol-cpp: -any
  containers: -any
  lol-repa: -any
  singletons: -any
  lol-tests: -any
  arithmoi: -any
  mtl: -any
  lol-apps: -any
  transformers: -any
  random: -any
  deepseq: -any
  DRBG: -any
  QuickCheck: ! '>=2.8'
  repa: -any
  vector: -any
  numeric-prelude: -any
maintainer: Eric Crockett <ecrockett0@gmail.com>
synopsis: Lattice-based cryptographic applications using Lol.
changelog: ! "Changelog for lol project\n================================\n\n0.2.0.0\n----\n
  * Added [BPF14] key-homomorphic PRF.\n * Added homomorphic evaluation of PRF.\n
  * Simpler benchmarks and tests.\n * SHE: Made hints for key switching and ring tunneling
  explicit.\n * SHE: Protocol buffer formats for tunneling, key-switch hints, secret
  keys, etc.\n   Note that this provides an easy way to save expensive precomputation.
  See\n   the HomomPRF example for more details.\n\n0.1.1.0\n----\n * Updated documentation
  with MathJax\n * Added\n\n0.1.0.0\n-----\n * Updated for lol-0.3.*\n * Added simple
  example.\n\n0.0.0.1\n-----\n * Initial split from lol."
basic-deps:
  lol: ! '>=0.6.0.0'
  MonadRandom: ! '>=0.2'
  split: -any
  base: ! '>=4.9 && <5'
  time: -any
  protocol-buffers: -any
  filepath: -any
  protocol-buffers-descriptor: -any
  lol-cpp: -any
  containers: -any
  singletons: -any
  arithmoi: -any
  mtl: -any
  lol-apps: -any
  deepseq: ! '>=1.4.1.1'
  DRBG: -any
  numeric-prelude: ! '>=0.4.2'
all-versions:
- '0.0.0.1'
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
author: Eric Crockett <ecrockett0@gmail.com>, Chris Peikert <cpeikert@alum.mit.edu>
latest: '0.2.0.0'
description-type: text
description: ! "Overview of applications:\n\n* SymmSHE.hs gives an implementation
  of a symmetric-key,\n  somewhat-homomorphic encryption scheme that is essentially\n
  \ equivalent to the one from the toolkit paper [LPR'13].\n\n* KeyHomomorphicPRF.hs
  gives an implementation of the\n  key-homomorphic pseudo-random function from Banerjee\n
  \ and Peikert in Crypto 2014 ([BP14]).\n\n* HomomPRF provides an interface for the
  homomorphic evaluation of the [BP14]\n  PRF.\n\nNote that an example using each
  application can be found in the 'examples'\ndirectory. Tests and benchmarks for
  SHE and KeyHomomorphicPRF are provided in\nthe 'tests' and 'benchmarks' directories.
  Tests and benchmarks for HomomPRF are\nincluded in the example for HomomPRF."
license-name: GPL-2
