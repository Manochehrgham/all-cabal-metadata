homepage: https://github.com/cpeikert/Lol
changelog-type: ''
hash: fb4ef5bbb88c8068978b2914e86c507e6b47d5e120e00be6ea697b7d0db218e6
test-bench-deps:
  lol: -any
  test-framework: ! '>=0.8 && <0.9'
  MonadRandom: -any
  base: -any
  time: ! '>=1.2 && <1.6'
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  constraints: -any
  type-natural: -any
  QuickCheck: ! '>=2.8 && <2.9'
  repa: -any
  vector: -any
maintainer: Eric Crockett <ecrockett0@gmail.com>
synopsis: A library for lattice cryptography.
changelog: ''
basic-deps:
  reflection: ! '>=1.5.1 && <2.2'
  MonadRandom: ! '>=0.2 && <0.5'
  base: ==4.8.*
  storable-tuple: ! '>=0.0.1 && <0.1'
  storable-record: ! '>=0.0.3 && <0.1'
  constraints: ==0.4.*
  data-default: ! '>=0.3.0 && <0.6'
  containers: ! '>=0.5.6.2 && <0.6'
  singletons: ! '>=1.1.2.1 && <2.1'
  type-natural: ! '>=0.2.3.2 && <0.4'
  tagged-transformer: ! '>=0.7 && <0.9'
  th-desugar: ! '>=1.5.4 && <1.6'
  arithmoi: ! '>=0.4.1.3 && <0.5'
  mtl: ! '>=2.2.1 && <2.3'
  transformers: ! '>=0.4.2.0 && <0.5'
  random: ! '>=1.1 && <1.2'
  deepseq: ! '>=1.4.1.1 && <1.5'
  vector-th-unbox: ! '>=0.2.1.0 && <0.3'
  QuickCheck: ! '>=2.8 && <2.9'
  repa: ==3.4.*
  vector: ==0.11.*
  numeric-prelude: ! '>=0.4.2 && <0.5'
all-versions:
- '0.0.1.0'
author: Eric Crockett <ecrockett0@gmail.com>, Chris Peikert <cpeikert@alum.mit.edu>
latest: '0.0.1.0'
description-type: text
description: ! "Overview of key modules, roughly from highest- to lowest-level:\n\n*
  SymmSHE.hs, an implementation of a symmetric-key,\n  somewhat-homomorphic encryption
  scheme that is essentially\n  equivalent to the one from the toolkit paper [LPR'13].\n\n*
  Cyc.hs, which defines an interface for using cyclotomic fields, \n  rings R, and
  quotient rings Rq=R/qR; as well as many other\n  commonly used operations, e.g.,
  converting\n  between rings, decoding and decomposing elements, modulus\n  reduction/rounding,
  etc. etc. Cyc is a safe wrapper around the\n  UCyc type, which exposes some representation-dependent
  operations.\n  UCyc (and hence Cyc) is implemented using a generic Tensor (described
  below).\n\n* Tensor.hs, which defines a class that encapsulates all the necessary\n
  \ linear transformations for operating on representations of R- and\n  Rq-elements,
  e.g., the CRT transform, converting between the\n  powerful and decoding bases,
  generating error terms, etc.\n\n* RepaTensor.hs, which gives an\n  implementation
  of the Tensor class based on the \"repa\"\n  package, a highly optimized and parallelizable
  array library.\n\n* CTensor.hs, which gives an\n  implementation of the Tensor class
  using a C backend via Haskell's FFI.\n\n* FiniteField.hs, which gives an unoptimized
  implementation of finite field\n  arithmetic. To use this module, you will need
  an instance of IrreduciblePoly.\n  These instances provide irreducible polynomials
  for various degrees and base fields.\n  One instance is provided for characteristic
  2 fields of size up to 2^32 in \n  IrreducibleChar2.hs.\n\n* ZqBasic.hs, which is
  a basic implementation of Zq=Z/qZ arithmetic.\n\n* Factored.hs, which contains support
  code for \"reifying\"\n  runtime-chosen integers as static types (mainly, the types
  q and m\n  that are floating around as parameters of many other data types),\n  and
  \"reflecting\" those types as integers back to the code.\n"
license-name: GPL-2
