homepage: http://code.haskell.org/~thielema/llvm-extra/
changelog-type: ''
hash: 1eb4a49b07032f75af2f1d2c8e00b026b46153d2846c6123776782cd9796ff6b
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Utility functions for the llvm interface
changelog: ''
basic-deps:
  llvm-tf: ! '>=3.0.3 && <3.0.4'
  unsafe: ! '>=0.0 && <0.1'
  base: ! '>=3 && <5'
  utility-ht: ! '>=0.0.1 && <0.1'
  containers: ! '>=0.1 && <0.6'
  non-empty: ! '>=0.2.1 && <0.3'
  tfp: ! '>=1.0 && <1.1'
  transformers: ! '>=0.1.1 && <0.5'
  cpuid: ! '>=0.2.3 && <0.3'
all-versions:
- '0.1'
- '0.2'
- '0.2.0.1'
- '0.2.0.2'
- '0.3'
- '0.3.0.1'
- '0.4.1'
- '0.4.1.1'
- '0.4.2'
- '0.5'
- '0.6'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.6'
description-type: haddock
description: ! 'The Low-Level Virtual-Machine is a compiler back-end with optimizer.

  You may also call it a high-level portable assembler.

  This package provides various utility functions

  for the Haskell interface to LLVM, for example:


  * arithmetic operations with more general types

  but better type inference than the @llvm@ interface

  in "LLVM.Extra.Arithmetic",


  * a type class for loading and storing sets of values with one command (macro)

  in "LLVM.Extra.Memory",


  * support instance declarations of LLVM classes

  in "LLVM.Extra.Class",


  * handling of termination by a custom monad on top of @CodeGenFunction@

  in "LLVM.Extra.MaybeContinuation"


  * various kinds of loops (while) and condition structures (if-then-else)

  in "LLVM.Extra.Control"


  * automatic adaption to target specific extensions,

  currently used for access of vector operations

  that are specific to an SSE level on x86 processors

  in "LLVM.Extra.Extension"

  (On x86 architectures we depend on the cpuid package

  that is needed for automatic detection of available features.)


  * advanced vector operations

  such as sum of all vector elements, cumulative sum,

  floor, non-negative fraction, absolute value

  in "LLVM.Extra.Vector"


  * type classes for handling scalar and vector operations

  in a uniform way

  in "LLVM.Extra.ScalarOrVector"


  * a Makefile and a description

  of how to run LLVM code from within GHCi.'
license-name: BSD3
