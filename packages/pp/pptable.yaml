homepage: https://github.com/gdevanla/pptable#readme
changelog-type: markdown
hash: 6ea88ff591ac4b3f26176354f7be196a1b91c6310134f6d90ca2d748e80f01fa
test-bench-deps:
  base: -any
  HUnit: -any
  containers: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  boxes: -any
  QuickCheck: -any
  pptable: -any
  vector: -any
maintainer: grdvnl@gmail.com
synopsis: Pretty Print containers in a tabular format
changelog: ! '0.2.0.0

  -------


  * This release contains *breaking* changes

  * Name of Tabilize class changed to Tabulate

  * printList, printMap and printVector all replaced with polymorphic method ppTable

  * New class Boxable with default instances for List, Vector and Map

  * Use prinf library to print basic types

  * New class CellValueFormatter with default instances for basic type

  * Boxable instance to extend to other Traversable instances

  * CellValueFormatter class to extend formatting


  0.1.0.1

  -------


  * Intial version

  * Can print List, Map or Vector in tabular format

'
basic-deps:
  base: ! '>=4.7 && <5'
  syb: -any
  generic-deriving: -any
  containers: -any
  boxes: -any
  pretty: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
author: Guru Devanla
latest: '0.2.0.0'
description-type: markdown
description: ! "# README #\n\nText.PrettyPrint.Tabulate : Print any list, vector or
  map as a well-formatted readable table.\n\n### Text.PrettyPrint.Tabulate ###\n\n*
  This module provides simple functions used to print values in tabular format\n*
  Version 0.2.0.0\n* Contributions and Bug Reports welcome. Please use the Github
  issue tracker.\n\n### Example ###\n\n``` haskell\n\n  -- ./Example.hs\n  :set -XDeriveGeneric\n
  \ :set -XDeriveDataTypeable\n\n  import qualified GHC.Generics as G\n  import Data.Data\n\n
  \ import qualified Text.PrettyPrint.Tabulate as T\n  import qualified Data.Map as
  Map\n  import qualified Data.List as List\n  import qualified Data.Vector as Vector\n\n\n
  \ data Stock = Stock {ticker::String, price::Double, marketCap::Double} deriving
  (Data, G.Generic)\n  instance T.Tabulate Stock\n\n  let yahoo =  Stock {ticker=\"YHOO\",
  price=42.29101010, marketCap=40e9}\n  let google = Stock {ticker=\"GOOG\", price=774.210101,
  marketCap=532.09e9}\n  let amazon = Stock {ticker=\"AMZN\", price=799.161717, marketCap=378.86e9}\n\n\n
  \ -- List of records\n  let tickers = [yahoo, google, amazon]\n\n  -- The record
  type 'Stock' can also be in a Map\n  let tickers_map = Map.fromList [(10, yahoo),
  (100, google), (1000, amazon)]\n\n  -- Or in a Vector\n  let tickers_vector = Vector.fromList
  tickers\n\n  -- Print table from List\n  T.ppTable tickers\n   ticker     price
  \             marketCap\n   YHOO         42.291010100     4.000000000e10\n   GOOG
  \       774.210101000     5.320900000e11\n   AMZN        799.161717000     3.788600000e11\n\n
  \  -- Print table from Map\n   T.ppTable tickers_map\n   Key      ticker     price
  \             marketCap\n   10       YHOO         42.291010100     4.000000000e10\n
  \  100      GOOG        774.210101000     5.320900000e11\n   1000     AMZN        799.161717000
  \    3.788600000e11\n\n\n   -- Print table from Vector\n   T.ppTable tickers_vector\n
  \  ticker     price              marketCap\n   YHOO         42.291010100     4.000000000e10\n
  \  GOOG        774.210101000     5.320900000e11\n   AMZN        799.161717000     3.788600000e11\n\n```\n"
license-name: MIT
