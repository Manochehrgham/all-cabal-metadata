homepage: https://github.com/danchoi/ascii-flatten
changelog-type: ''
hash: 8f51a8ab6859e03a6fe523afedf493965093014bc4725d2f6b22c3a2ed111081
test-bench-deps: {}
maintainer: dhchoi@gmail.com
synopsis: Flattens European non-ASCII characaters into ASCII
changelog: ''
basic-deps:
  ascii-flatten: -any
  base: ! '>=4.6 && <4.9'
  text: -any
all-versions:
- '0.1.0.0'
author: Daniel Choi
latest: '0.1.0.0'
description-type: markdown
description: ! "# ascii-flatten\n\nThis simple library provides a function to flatten
  non-ASCII European\ncharacters into nearest US-ASCII equivlent.\n\nSee source for
  `Data.Char.AsciiFlatten` for the character conversions.\n\nThe character translation
  table is derived from this URL:\nhttp://yob.id.au/2008/05/08/thinking-sphinx-and-unicode.html\n\n##
  Usage\n\n```haskell\n:m + Data.Char.AsciiFlatten\n...\nOk, modules loaded: Data.Char.AsciiFlatten,
  Main.\nghci> :m + Data.Char.AsciiFlatten \nghci> map asciiFlattenCI \"café\"\n\"cafe\"\nghci>
  map asciiFlattenCI \"Übermensch\"\n\"ubermensch\"\n```\n\nNote that currently, all
  characters are flattened to lower case ASCII, because\nmy source data only as case-insensitive
  mappings to lowercase ascii\ncharacters. If anyone wants to contribute case-sensitive
  conversion code\nmappings, please do.\n\nWhen performance matters, use \n\n    Data.Text.map
  :: (Char -> Char) -> Text Text\n\n## Command line usage\n\nThe package also installs
  a simple command line tool named `ascii-flatten` for\nuse from the command line
  and in shell scripts:\n\n    $ echo café | ascii-flatten\n    cafe\n\n\n## Code
  generation\n\nThe code for `asciiFlatten` is generated using the `build.sh` script
  in the\nproject directory.\n\n"
license-name: MIT
