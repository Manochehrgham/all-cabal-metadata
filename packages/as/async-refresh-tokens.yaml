homepage: https://github.com/mtesseract/async-refresh-tokens#readme
changelog-type: ''
hash: 03abaf3ee6446ee5065c289187351de4bc775df5dfd447e95659c81d4f3be098
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  stm: -any
  base: -any
  async-refresh-tokens: -any
  criterion: -any
  HUnit: -any
  monad-logger: -any
maintainer: mtesseract@silverratio.net
synopsis: Package implementing core logic for refreshing of expiring access tokens
changelog: ''
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.7 && <5'
  text: -any
  safe-exceptions: -any
  monad-control: -any
  lens: -any
  formatting: -any
  lifted-async: -any
  monad-logger: -any
  async-refresh: -any
all-versions:
- '0.1.0'
author: Moritz Schulte
latest: '0.1.0'
description-type: markdown
description: ! "# async-refresh-tokens\n\nAbout\n=====\n\nThis is Haskell library
  built on top of the async-refresh package\nimplementing the logic for refreshing
  of expiring access tokens.\n\nUsage\n=====\n\n- Create new token types. Using the
  `DataKinds` extension we can do\n  this via `data MyAppTokens = TokenFoo | TokenBar`.\n\n-
  Make the tokens be instances of the `IsToken` type classes by\n  defining the `tokenScopes`
  method and (optionally) `tokenName` (a\n  human readable label for this token).\n\n-
  Create new token stores (which are basically `TVar's containing the\n  tokens wrapped
  in `Either SomeException`) using\n  `newEmptyTokenStore`.\n\n- Create a new configuration
  by adjusting `defaultTokenConf` using the\n  functions `tokenConfAddRequest` and
  `tokenConfSetFactor`. The\n  function `tokenConfAddRequest` expects values of type
  `RequestToken`\n  â€” these values encapsulate the token stores together with a\n
  \ token-refreshing action.\n\n- Use `newTokenRefresher` to initiate token refreshing
  for each\n  registered token refreshing request.\n\nExample\n=======\n\n```\n{-#
  LANGUAGE DataKinds           #-}\n{-# LANGUAGE OverloadedStrings   #-}\n{-# LANGUAGE
  PolyKinds           #-}\n\ndata MyAppTokens = TokenFoo | TokenBar\n\ninstance IsToken
  'TokenFoo where\n  tokenScopes _ = [\"foo.read\", \"foo.write\"]\n\ncreateTokenStoreFoo
  :: IO (TokenStore 'TokenFoo)\ncreateTokenStoreFoo = runStderrLoggingT $ do\n  tokenFoo
  <- newEmptyTokenStore (Proxy :: Proxy 'TokenFoo)\n  let conf = defaultTokenConf\n
  \            & tokenConfAddRequest (RequestToken tokenFoo actionFoo)\n  _ <- newTokenRefresher
  conf\n  return tokenFoo\n\n  where actionFoo :: (MonadIO m, IsToken t) => m (RefreshResult
  (Token t))\n        actionFoo =\n          return $ RefreshResult (Token \"secret-foo-token\")
  Nothing\n```\n"
license-name: BSD3
