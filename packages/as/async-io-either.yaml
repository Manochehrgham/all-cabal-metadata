homepage: https://github.com/mankyKitty/async-io-either#readme
changelog-type: ''
hash: 92f2eb51f71fbdd1030d262434a08ea7380992c727bf4194ea119ae1b3151e6b
test-bench-deps: {}
maintainer: sclhiannan@gmail.com
synopsis: Could be useful
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  async: ! '>0.2'
  transformers: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
author: Sean Chalmers
latest: '0.1.0.2'
description-type: markdown
description: ! 'Async IO Either

  ===============


  This is a tiny package that captures a pattern I''ve been using a lot...


  Essentially I am tired of needing something of (IO a) and it so often coming with
  exceptions

  that are not indicated in the type. Generally speaking my application, like many
  others, is

  just going to throw in the towel when an exception occurs, but I would prefer it
  if a value was

  provided. This would then allow me to decide just what sort of tantrum my application
  will throw.


  I''ve tried to understand the different manners of handling exceptions in Haskell,
  and I''m sure there

  is a better or more fitting approach. But this is what I have for now.

'
license-name: BSD3
