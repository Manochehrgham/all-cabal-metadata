homepage: http://github.com/sgraf812/feed-gipeda#readme
changelog-type: ''
hash: e583d272f62ddb2396beccb344efed4db6a7f75aaae6bc905c39d53e24c23d4b
test-bench-deps:
  exceptions: -any
  bytestring: ! '>=0.10.0.0'
  tasty-smallcheck: -any
  base: ! '>=4.6 && <5'
  managed: -any
  text: -any
  tasty-hspec: -any
  filepath: <1.5
  process: ! '>=1.2.3 && <1.5'
  async: -any
  conduit: -any
  HUnit: -any
  conduit-extra: ! '>=1.1.2'
  tasty-quickcheck: -any
  network-uri: <2.7
  tasty-hunit: -any
  file-embed: ! '>=0.0.10'
  transformers: ! '>=0.2.0.0'
  temporary: ! '>=1.1'
  tasty: -any
  fsnotify: ! '>=0.2 && <0.3'
  directory: <1.3
maintainer: sgraf1337@gmail.com
synopsis: Simple project template from stack
changelog: ''
basic-deps:
  data-hash: <0.3
  bytestring: <0.11
  base: ! '>=4.6 && <5'
  time: ! '>=1.5 && <2'
  distributed-process: ! '>=0.5 && <0.7'
  text: <1.3
  filepath: ! '>=1.4.0.0 && <1.5'
  process: ! '>=1.2.3 && <1.5'
  async: ! '>=2.0.1 && <2.2'
  conduit: -any
  feed-gipeda: -any
  conduit-extra: ! '>=1.1.2 && <1.2'
  distributed-process-client-server: ! '>=0.1 && <0.3'
  distributed-process-extras: ! '>=0.1 && <0.3'
  containers: ! '>=0.5 && <0.6'
  concurrent-extra: <0.8
  distributed-process-simplelocalnet: ! '>=0.2 && <0.3'
  binary: <0.9
  network-uri: <2.7
  reactive-banana: ! '>=1 && <1.2'
  file-embed: ! '>=0.0.10'
  transformers: ! '>=0.2'
  temporary: ! '>=1.1 && <1.3'
  optparse-applicative: ! '>=0.11'
  logging: ! '>=3.0.4 && <3.1'
  fsnotify: ! '>=0.2 && <0.3'
  aeson: -any
  distributed-process-async: ! '>=0.1 && <0.3'
  yaml: ! '>=0.8.11 && <0.9'
  directory: ! '>=1.2.0.0 && <1.3'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.4'
author: Sebastian Graf
latest: '0.1.0.4'
description-type: markdown
description: ! "# feed-gipeda [![Build Status](https://travis-ci.org/sgraf812/feed-gipeda.svg?branch=master)](https://travis-ci.org/sgraf812/feed-gipeda)
  [![Hackage](https://img.shields.io/hackage/v/feed-gipeda.svg?flat=true)](https://hackage.haskell.org/package/feed-gipeda)\r\n\r\nA
  kitchen-sink tool to run [gipeda](https://hackage.haskell.org/package/gipeda) on
  a list of repositories after having run a benchmark script on each (repo, commit)
  pair that is yet to be benchmarked.\r\n\r\nThis will take all the necessary steps
  to update and deploy a `gipeda`-based site. Think Travis CI for benchmarks.\r\n\r\nUse
  this when you host a variety of repositories and want to display performance data
  about them. Although the defaults are biased towards Haskell projects using `cabal`/`stack`,
  the script to run on each new commit can be configured.\r\n\r\n## I think I could
  use this but I haven't understood a word\r\n\r\nThis is a high-level example setup
  of how to use it:\r\n\r\n![High-level architecture visualization](https://cdn.rawgit.com/sgraf812/feed-gipeda/master/docs/images/feed-gipeda.svg)\r\n\r\nBelow
  there is a detailed visualization of the FRP layer (of the master node):\r\n\r\n![master
  architecture visualization](https://cdn.rawgit.com/sgraf812/feed-gipeda/master/docs/images/master.svg)\r\n\r\nWithout
  any special flags, `feed-gipeda` will enter the build once mode (and then exit).\r\n\r\n`feed-gipeda`
  extracts repositories to watch from a \\*.yaml file (c.f. Config file). For each
  remote repository, a unique but human-readable directory (`<base-name>-<hash-of-URI>`)
  is created, under which a mirror repository resides in the `repository/` folder.\r\n\r\nEvery
  commit for which `gipeda` requests a benchmark (e.g. because there is no \\*.csv
  result file in `site/out/results`) causes a benchmark script to be run. The concrete
  example above uses [`cloben`](https://github.com/sgraf812/cloben) for that (it's
  also the default), but any other benchmark script which expects to be executed in
  the project folder and which writes its CSV output to `stdout` should do.\r\n\r\nEither
  after a benchmark finishes or a repository was fetched, `gipeda` is executed for
  both new commits to benchmark and for producing the website to be deployed via `rsync`
  to a remote location (`--deploy-to` flag).\r\n\r\n## `--watch` mode\r\n\r\nWhen
  `gipeda` requests no more benchmarks, `feed-gipeda` exits.\r\n\r\nThis can be changed\r\nvia
  the `--watch=SECONDS` option. If specified, `feed-gipeda` will enter a daemon mode\r\nand
  not exit if there is temporary nothing to benchmark. Instead, it will watch for\r\nchanges
  to the config file (handle updates to the watched repository list) and refetch\r\nall
  currently watched repositories every `SECONDS` seconds.\r\n\r\n## `--check` mode\r\n\r\nWith
  the `--check` flag supplied, `feed-gipeda` will check the config file\r\n(c.f. Config
  file, `--config`) for syntax errors and report them as an error.\r\nIt will successfully
  exit when it can find none.\r\n\r\n## How to get it to run\r\n\r\nThe following
  steps should get you all Haskell dependencies (using `cabal` in a similar way):\r\n\r\n```\r\n$
  stack install cloben gipeda feed-gipeda\r\n```\r\n\r\nYou will also need to install
  the [system dependencies for gipeda](https://github.com/nomeata/gipeda#setting-it-up)
  (sorry, fellow Windows users!), as well as there must be `rsync` and `ssh` available
  on the path, if\r\nyou choose to `--deploy-to` some location.\r\n\r\nUsing `cloben`
  is of course optional, but the simplest option for benchmarking (if you want to
  benchmark `cabal`-conformant Haskell repositories).\r\n\r\nBy now, `$ feed-gipeda
  --help` should spit out maybe more up-to-date documentation than this README and
  you can read about supplying custom paths to various files such as the configuration
  file. For the sake of the example, we will use the default location, which is at
  `~/.feed-gipeda/feed-gipeda.yaml`. Put this into that file:\r\n\r\n```\r\nrepositories:\r\n-
  https://github.com/sgraf812/benchmark-test\r\n```\r\n\r\nIn `--watch` mode, that
  file would be watched for changes, so you can make it part of a git repository (like
  I did [here](https://github.com/sgraf812/.feed-gipeda)) and fetch updates as part
  of a `cron` job.\r\n\r\nAlternatively, you can run `feed-gipeda` in the default
  mode (build once) any time you need updates.\r\n\r\nNow find yourself a quiet little
  tmp folder and run\r\n```\r\n$ feed-gipeda --help\r\n...\r\n$ feed-gipeda --deploy-to=some/local/path/if/you/want\r\n```\r\n\r\nFor
  some more usage examples, see the Cookbook section.\r\n\r\n## Config file\r\n\r\nContains
  the list of repositories to watch encoded in a YAML file. Is supplied via the `--config`
  option, which defaults to `~/.feed-gipeda/feed-gipeda.yaml` (resp. `%APPDATA%/Roaming/.feed-gipeda/feed-gipeda.yaml`
  on Windows).\r\n\r\nFor an example, see <https://github.com/sgraf812/.feed-gipeda>
  or the example 2 line file above.\r\nThe file must contain a top-level `repositories`
  mapping to a list of repository URIs.\r\n\r\n## Cookbook\r\n\r\n- `feed-gipeda`
  \ \r\nEnter default mode (Exit when done). Read config from the default location
  (system-specific, see `--config` option under `--help`), act as both a master and
  a slave node.\r\n- `feed-gipeda --watch=5`  \r\nEnter watch mode. Watch for changes
  to config and re-fetch repositories every 5 seconds. Read config from the default
  location, act as both master and slave node\r\n- `feed-gipeda --check --config=~/.feed-gipeda/feed-gipeda.yaml`
  \ \r\nEnter check mode. Check the specified config file for syntax errors. Useful
  in a CI setting.\r\n- `feed-gipeda --master=localhost:12345`  \r\nEnter default
  mode. Dispatch benchmark requests on registered slave nodes, don't work on them
  in this process\r\n- `feed-gipeda --slave=localhost:12346`  \r\nEnter slave-only
  mode. Listen via multicast for master nodes which request you to do benchmarks.\r\n-
  `feed-gipeda --deploy-to=deploymentDir/`  \r\nEnter default mode. Deploy changes
  via `rsync` to the local `deploymentDir`\r\n"
license-name: BSD3
