homepage: ''
changelog-type: markdown
hash: 09426dcfa76574a28c4f3ac6a63ef40740094dbbcc63191c3867e678facf86c5
test-bench-deps:
  base: -any
  criterion: ==1.1.*
  hvect: -any
  deepseq: -any
  hetero-dict: -any
maintainer: drkoster@qq.com
synopsis: Fast heterogeneous data structures
changelog: ! '# Revision history for hetero-array


  ## 0.1.0.0  -- 2016-05-31


  * First version. extract from web-routing, drop GHC 7.6 support.

'
basic-deps:
  base: ! '>=4.7 && <5.0'
  containers: ! '>=0.4.2.0 && <0.6'
  template-haskell: ! '>=2.9 && <2.12'
  primitive: ! '>=0.5 && <0.7'
all-versions:
- '0.1.0.0'
author: ! 'Hirotomo Moriwaki <philopon.dependence@gmail.com>,

  Winterland <drkoster@qq.com>'
latest: '0.1.0.0'
description-type: markdown
description: ! "hetero-dict: fast heterogeneous data structures\n===============================================\n\n[![Travis-CI](https://travis-ci.org/winterland1989/hetero-dict.svg)](https://travis-ci.org/winterland1989/hetero-dict)\n\nThis
  package provide two flavor fast and easy to use heterogeneous data structures:\n\n1.
  `Dict` which use boxed array, it's read-only with O(1) get.\n\n1. `DynDict` which
  use `Seq` from `Data.Sequence`, it has O(log(min(i,n-i))) get, modify and O(1) add.\n\nExample\n-------\n\n```haskell\n>
  :set -XDataKinds -XQuasiQuotes\n> :m + Data.Hetero.Dict\n> let d = mkDict . add
  [key|foo|] 12 . add [key|bar|] \"baz\" $ emptyStore\n> :t d\nd :: Num v => Dict
  '[\"foo\" ':= v, \"bar\" ':= [Char]]\n> get [key|foo|] d\n12\n> get [key|bar|] d\n\"baz\"\n>
  get [key|qux|] d\n • Couldn't match type ‘'Index i1’ with ‘'NotFoundKey \"qux\"’\n
  ...\n```\n\n```haskell\n> :set -XDataKinds -XQuasiQuotes\n> :m + Data.Hetero.DynDict\n>
  let d =  add [key|foo|] 12 . add [key|bar|] \"baz\" $ empty\n> get [key|foo|] d\n12\n>
  get [key|bar|] d\n\"baz\"\n> let d' = set [key|foo] 13 d\n> get [key|foo|] d'\n13\n```\n\nBenchmark\n---------\n\nWe
  use [hvect](http://hackage.haskell.org/package/hvect) package as a linked-list based
  reference.\n\n```\nbenchmarking n = 3/Build Dict\ntime                 11.78 ns
  \  (11.63 ns .. 11.93 ns)\n                     0.999 R²   (0.999 R² .. 1.000 R²)\nmean
  \                11.72 ns   (11.62 ns .. 11.82 ns)\nstd dev              336.9 ps
  \  (282.4 ps .. 406.1 ps)\nvariance introduced by outliers: 48% (moderately inflated)\n\nbenchmarking
  n = 3/Build DynDict\ntime                 18.10 ns   (17.96 ns .. 18.24 ns)\n                     0.998
  R²   (0.995 R² .. 1.000 R²)\nmean                 18.42 ns   (18.10 ns .. 19.84
  ns)\nstd dev              1.676 ns   (550.3 ps .. 3.725 ns)\nvariance introduced
  by outliers: 90% (severely inflated)\n\nbenchmarking n = 3/Build HVect\ntime                 16.39
  ns   (15.90 ns .. 17.05 ns)\n                     0.994 R²   (0.990 R² .. 0.998
  R²)\nmean                 16.72 ns   (16.34 ns .. 17.31 ns)\nstd dev              1.686
  ns   (1.254 ns .. 2.193 ns)\nvariance introduced by outliers: 92% (severely inflated)\n\nbenchmarking
  n = 3/Index Dict\ntime                 56.35 ns   (54.47 ns .. 58.42 ns)\n                     0.990
  R²   (0.986 R² .. 0.995 R²)\nmean                 55.85 ns   (54.31 ns .. 57.90
  ns)\nstd dev              5.972 ns   (4.253 ns .. 7.946 ns)\nvariance introduced
  by outliers: 92% (severely inflated)\n\nbenchmarking n = 3/Index DynDict\ntime                 72.03
  ns   (70.14 ns .. 74.63 ns)\n                     0.989 R²   (0.980 R² .. 0.995
  R²)\nmean                 75.49 ns   (73.19 ns .. 78.75 ns)\nstd dev              9.245
  ns   (7.589 ns .. 11.76 ns)\nvariance introduced by outliers: 94% (severely inflated)\n\nbenchmarking
  n = 3/Index HVect\ntime                 69.21 ns   (67.27 ns .. 71.86 ns)\n                     0.994
  R²   (0.989 R² .. 0.999 R²)\nmean                 68.69 ns   (67.69 ns .. 70.13
  ns)\nstd dev              4.080 ns   (2.918 ns .. 5.949 ns)\nvariance introduced
  by outliers: 78% (severely inflated)\n\nbenchmarking n = 15/Build Dict\ntime                 10.80
  ns   (10.65 ns .. 10.97 ns)\n                     0.997 R²   (0.995 R² .. 1.000
  R²)\nmean                 10.85 ns   (10.71 ns .. 11.15 ns)\nstd dev              628.9
  ps   (344.3 ps .. 1.078 ns)\nvariance introduced by outliers: 79% (severely inflated)\n\nbenchmarking
  n = 15/Build DynDict\ntime                 37.11 ns   (36.55 ns .. 37.94 ns)\n                     0.997
  R²   (0.994 R² .. 0.999 R²)\nmean                 37.77 ns   (37.04 ns .. 38.72
  ns)\nstd dev              2.827 ns   (2.096 ns .. 3.682 ns)\nvariance introduced
  by outliers: 86% (severely inflated)\n\nbenchmarking n = 15/Build HVect\ntime                 15.82
  ns   (15.23 ns .. 16.59 ns)\n                     0.991 R²   (0.985 R² .. 0.999
  R²)\nmean                 15.61 ns   (15.31 ns .. 16.07 ns)\nstd dev              1.221
  ns   (803.7 ps .. 1.757 ns)\nvariance introduced by outliers: 87% (severely inflated)\n\nbenchmarking
  n = 15/Index Dict\ntime                 281.6 ns   (279.6 ns .. 283.8 ns)\n                     0.999
  R²   (0.999 R² .. 1.000 R²)\nmean                 281.7 ns   (279.9 ns .. 283.9
  ns)\nstd dev              6.878 ns   (5.580 ns .. 8.830 ns)\nvariance introduced
  by outliers: 34% (moderately inflated)\n\nbenchmarking n = 15/Index DynDict\ntime
  \                659.2 ns   (652.3 ns .. 665.6 ns)\n                     0.999 R²
  \  (0.998 R² .. 0.999 R²)\nmean                 662.4 ns   (656.8 ns .. 669.8 ns)\nstd
  dev              22.28 ns   (17.73 ns .. 30.08 ns)\nvariance introduced by outliers:
  48% (moderately inflated)\n\nbenchmarking n = 15/Index HVect\ntime                 693.4
  ns   (687.0 ns .. 698.7 ns)\n                     0.999 R²   (0.999 R² .. 1.000
  R²)\nmean                 690.7 ns   (683.2 ns .. 695.8 ns)\nstd dev              20.66
  ns   (16.34 ns .. 29.80 ns)\nvariance introduced by outliers: 42% (moderately inflated)\n\nbenchmarking
  n = 15/Modify DynDict\ntime                 98.74 ns   (97.12 ns .. 100.8 ns)\n
  \                    0.998 R²   (0.997 R² .. 0.999 R²)\nmean                 98.60
  ns   (97.18 ns .. 100.1 ns)\nstd dev              5.091 ns   (3.999 ns .. 6.935
  ns)\nvariance introduced by outliers: 72% (severely inflated)\n```\n"
license-name: MIT
