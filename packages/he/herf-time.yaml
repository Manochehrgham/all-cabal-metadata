homepage: ''
changelog-type: markdown
hash: 68618edcaf2102acae71bcc3c0bd4a79b836ba6f55f4ee2c28acd99a53cbca46
test-bench-deps:
  base: -any
  doctest: -any
  herf-time: -any
maintainer: Scott Murphy <scottmurphy09@gmail.com>
synopsis: haskell time manipulation in a 'kerf like' style.
changelog: ! '# Revision history for kerf-time


  ## 0.0.0  -- YYYY-mm-dd


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4 && <5'
  time: ! '>=1.5 && <1.7'
all-versions:
- '0.1.0'
- '0.2.0'
author: Scott Murphy <scottmurphy09@gmail.com>
latest: '0.2.0'
description-type: markdown
description: ! "# herf-time\n\n[![Circle CI](https://circleci.com/gh/smurphy8/herf-time.svg?style=svg)](https://circleci.com/gh/smurphy8/herf-time)\n\nHaskell's
  time library is nice but I wanted to be able to do some of the operations in\nthe
  [Kerf](https://github.com/kevinlawler/kerf) programming language.\n\n\nBy creating
  a set of type classes: **HerfedTime** , **ToUTCHerfTime**, **FromUTCHerfTime**\nI
  think there is a nice mechanism to do just that.\n\nany instance of these 3 classes
  should satisfy the law:\n\n* **Path Independant** on all addtion \n* ``` addX a
  X  == unherf (addX (herf a) X )```\n  * where: ``` addX := {addYear , addMonth,
  addWeek ...}```\n\n\n## Usage\n\n### Add Intervals\n``` haskell\n>>> date 2016 01
  01 `add` hour 3 `add` week 16 `add` month 3 :: UTCTime\nUTCHerfTime 2016-07-22 03:00:00
  UTC\n```\n\n### Subtract Intervals\n``` haskell\n\n>>> date 2016 01 01 `add` hour
  (-3) `add` week (-16) `add` month (-3) :: UTCTime\nUTCHerfTime 2015-06-10 21:00:00
  UTC\n```\n\n### Represent Time in Multiple Ways\n``` haskell\n\n>>> dateTime 2016
  01 01 01 23 01 `add` hour 3 `add` week 16 `add` month 3 :: UTCTime\nUTCHerfTime
  2016-07-22 04:23:01 UTC\n>>> dateTimePico 2016 01 01 01 23 01 01 `add` hour 3 `add`
  week 16 `add` month 3 :: UTCTime\nUTCHerfTime 2016-07-22 04:23:01.000000000001 UTC\n```\n###
  Get Times in any HerfedTime format  (UTC for example)\n``` haskell\n>>> date 2016
  01 01 `add` hour 3 `add` week 16 `add` month 3   :: UTCTime\n2016-07-22 03:00:00
  UTC\n```\n\n### Use HerfTime.ZonedTime to convert easily between times\n(reherf
  $ ( dateTime 2016 01 01 01 01 01 :: HerfZonedTime \"CST\")) :: HerfZonedTime \"PST\"\n2015-12-31T23:01:01:PST\n\n\n###
  Some fancier examples (Using HerfTime.ZonedTime)\n\n\n``` haskell\nλ> zt <- getZonedTime\nλ>
  herfShow zt\n\"2016-01-21T11:29:05:CST\"\nλ> reherfz zt :: HerfZonedTime \"PST\"\n2016-01-21T09:29:05:PST\nλ>
  reherfz zt :: HerfZonedTime \"+0600\"\n2016-01-21T23:29:05:+0600\nλ> reherfz zt
  :: HerfZonedTime \"CST\"\n2016-01-21T11:29:05:CST\nλ> (reherfz zt) `add` month 2
  :: HerfZonedTime \"CST\"\n2016-03-21T11:29:05:CST\n\n-- What time will it be exactly
  3 months from now in California?\nλ> (reherfz zt) `add` month 2 :: HerfZonedTime
  \"PST\"\n2016-03-21T09:29:05:PST\n```\n\n\n\n\n```\ncabal configure --enable-tests
  && cabal build && cabal test\n```\n\n\n"
license-name: BSD3
