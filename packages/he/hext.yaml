homepage: https://github.com/aneksteind/hext#readme
changelog-type: ''
hash: d90b1b3da077d4348d37d9f96d321ed30c17a61e1f90864d6b3c7a972a36b5a8
test-bench-deps: {}
maintainer: aneksteind@gmail.com
synopsis: a text classification library
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  text: -any
  hext: -any
  containers: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
author: David Anekstein
latest: '0.1.0.2'
description-type: markdown
description: ! '# hext

  This is currently the beginning of a text classification library.


  Currently, the only algorithm implementation is the Naive Bayes algorithm:

  to run your own data through this algorithm in order to classify your text, you
  need:

  - classified data: this can be sourced from a database where the only fields that
  are needed are the text itself, and it''s class

  - a sample string which will be classified by the algorithm


  In order to run the program, the classified data specified above must be run through
  the ```makeMaterial``` function in ```NLP.Hext.NaiveBayes```.


  Before doing this, however, you must create a data type, its data constructors each
  representing a class to label each text sample with. An example of this can be seen
  in ```app/Main.hs``` where ```data Class = Positive | Negative deriving (Eq, Show)```
  to label movie reviews as positive or negative.


  Now that the learning material has been made with ```makeMaterial```, it, along
  with a new string for the algorithm to classify, can be passed into runBayes like
  so: ```runBayes material "This is a sample review"```. An example, along with sample
  data, can be seen in ```app/Main.hs```


  hackage - https://hackage.haskell.org/package/hext-0.1.0.2

'
license-name: BSD3
