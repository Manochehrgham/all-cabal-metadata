changelog-type: ''
hash: 7ecb5587725fcb643a0742570e02917be997d360b40a4a4a0dad2a0627df0905
synopsis: Bindings and high level interface for to ENet v1.3.9
changelog: ''
all-versions:
- '1.3.8.0'
- '1.3.8.1'
- '1.3.8.1.1'
- '1.3.9.0'
- '1.3.9.1'
- '1.3.9.2'
- '1.3.9.3'
latest: '1.3.9.3'
description-type: haddock
description: ! 'ENet is a networking library on top of UDP. In it''s own words:


  "ENet''s purpose is to provide a relatively thin, simple and robust network

  communication layer on top of UDP (User Datagram Protocol). The primary

  feature it provides is optional reliable, in-order delivery of packets.


  ENet omits certain higher level networking features such as authentication,

  lobbying, server discovery, encryption, or other similar tasks that are

  particularly application specific so that the library remains flexible,

  portable, and easily embeddable."


  This library contains both bindings and a slightly cleaned up interface on

  top. The bindings are as close to the original as possible. Names are striped

  of the leading ''enet_'' and converted to CamelCase, and the occasional newtype

  is used instead, but otherwise all functions signatures are exactly the

  same. The bindings are in ''Network.ENet.Bindings''.


  The higher level interface is all other exposed modules. Functions like

  ''enet_host_*'' are placed in ''Network.ENet.Host''. All functions are present

  except for the ''enet_socket*'' functions: they are just wrappers of the Posix

  Sockets Interface, which is already provided in Haskell by the ''network''

  package. Changes are fairly minimal: "Out-Args" are now returned with a tuple,

  conversions between C and Haskell types happen automatically (when Haskell

  versions exists), and nullable pointer types have been replaced with

  Maybes. In short, there should be very few reasons to use the raw bindings

  over the "nice" interface.


  At the moment, consult the ENet website for documentation. In the vast

  majority of cases the documentation there should apply here exactly, I will

  try to add Haddock documentation for everywhere it does not.


  ENet currently only supports IPv4 at the moment (though that should soon

  change), and must be called from only one bound thread (i.e. thread created

  with ''forkOS''). Richer native networking libraries leveraging Haskell''s

  strengths exist, and for new projects I''d recommend those. But for interfacing

  with existing protocols using ENet, this package should be quite useful.'
