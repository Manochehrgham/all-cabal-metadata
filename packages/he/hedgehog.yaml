homepage: https://hedgehog.qa
changelog-type: markdown
hash: 78ddc3717fcb372d2c5b3cefec124856bb2ab455585ad38f5a085cf4dec856f2
test-bench-deps:
  base: ! '>=3 && <5'
  text: ! '>=1.1 && <1.3'
  hedgehog: -any
  semigroups: ! '>=0.16 && <0.19'
  containers: ! '>=0.4 && <0.6'
  pretty-show: ! '>=1.6 && <1.7'
  transformers: ! '>=0.3 && <0.6'
maintainer: Jacob Stanley <jacob@stanley.io>
synopsis: Hedgehog will eat all your bugs.
changelog: ! '## Version 0.4 (2017-06-28)


  - Abstract state machine testing, check out the [process registry example](https://github.com/hedgehogqa/haskell-hedgehog/blob/master/hedgehog-example/test/Test/Example/Registry.hs)
  to see how it works (#89, @jystic)

  - `liftCatch`, `liftCatchIO`, `withCatch` functions for isolating exceptions during
  tests (#89, @jystic)


  ## Version 0.3 (2017-06-11)


  - Exponential range combinators (#43, @chris-martin)

  - Roundtrip example, check out the [blog post](http://teh.id.au/posts/2017/06/07/round-trip-property/)
  (#85, @thumphries)

  - `tripping` now displays intermediate value (#85, @jystic)

  - `distribute` function for pulling a transformer out to the top level (#83, @jystic)

  - `withExceptT` function for executing tests with an inner `ExceptT` (e.g. `Test
  (ExceptT x m) a`) (#83, @jystic)


  ## Version 0.2.2 (2017-05-16)


  - Fixed scope of `unicode` character generators (#76, @moodmosaic)

  - Widen version bounds for some dependencies (#80, @amarpotghan)

  - Expose test modules to fix build on nix / hydra (#78, @amarpotghan)

  - Fixes for GHC 8.2 RC2 (#77, @erikd)


  ## Version 0.2.1 (2017-05-09)


  - Added `ascii`, `latin1`, `unicode` character generators (#73, @jystic)


  ## Version 0.2 (2017-05-06)


  - Added a quiet test runner which can be activated by setting `HEDGEHOG_VERBOSITY=0`
  (@jystic)

  - Concurrent test runner does not display tests until they are executing (@jystic)

  - Test runner now outputs a summary of how many successful / failed tests were run
  (@jystic)

  - `checkSequential` and `checkParallel` now allow for tests to be run without Template
  Haskell (@jystic)

  - Auto-discovery of properties is now available via `discover` instead of being
  baked in (@jystic)

  - `annotate` allows source code to be annotated inline with extra information (@jystic)

  - `forAllWith` can be used to generate values without a `Show` instance (@jystic)

  - Removed uses of `Typeable` to allow for generating types which cannot implement
  it (@jystic)

'
basic-deps:
  exceptions: ! '>=0.7 && <0.9'
  bytestring: ! '>=0.10 && <0.11'
  unix: ! '>=2.6 && <2.8'
  stm: ! '>=2.4 && <2.5'
  base: ! '>=3 && <5'
  time: ! '>=1.4 && <1.9'
  text: ! '>=1.1 && <1.3'
  async: ! '>=2.0 && <2.2'
  semigroups: ! '>=0.16 && <0.19'
  concurrent-output: ! '>=1.7 && <2.0'
  containers: ! '>=0.4 && <0.6'
  wl-pprint-annotated: ! '>=0.0 && <0.2'
  ansi-terminal: ! '>=0.6 && <0.7'
  mtl: ! '>=2.1 && <2.3'
  mmorph: ! '>=1.0 && <1.2'
  transformers-base: ! '>=0.4 && <0.5'
  pretty-show: ! '>=1.6 && <1.7'
  transformers: ! '>=0.5 && <0.6'
  random: ! '>=1.1 && <1.2'
  th-lift: ! '>=0.7 && <0.8'
  resourcet: ! '>=1.1 && <1.2'
  template-haskell: ! '>=2.10 && <2.13'
  primitive: ! '>=0.6 && <0.7'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.4'
author: Jacob Stanley
latest: '0.4'
description-type: markdown
description: ! "hedgehog [![Hackage][hackage-shield]][hackage] [![Travis][travis-shield]][travis]\n========\n\n>
  Hedgehog will eat all your bugs.\n\n<img src=\"https://github.com/hedgehogqa/haskell-hedgehog/raw/master/img/hedgehog-logo.png\"
  width=\"307\" align=\"right\"/>\n\n[Hedgehog](http://hedgehog.qa/) is a modern property-based
  testing\nsystem, in the spirit of QuickCheck. Hedgehog uses integrated shrinking,\nso
  shrinks obey the invariants of generated values by construction.\n\n## Features\n\n-
  Integrated shrinking, shrinks obey invariants by construction.\n- Generators allow
  monadic effects.\n- Range combinators for full control over the scope of generated
  numbers and collections.\n- Equality and roundtrip assertions show a diff instead
  of the two inequal values.\n- Template Haskell test runner which executes properties
  concurrently.\n\n## Example\n\nThe main module, [Hedgehog][haddock-hedgehog], includes
  almost\neverything you need to get started writing property tests with Hedgehog.\n\nIt
  is designed to be used alongside [Hedgehog.Gen][haddock-hedgehog-gen]\nand [Hedgehog.Range][haddock-hedgehog-range]
  which should be imported\nqualified. You also need to enable Template Haskell so
  the Hedgehog test\nrunner can find your properties.\n\n```hs\n{-# LANGUAGE TemplateHaskell
  #-}\n\nimport           Hedgehog\nimport qualified Hedgehog.Gen as Gen\nimport qualified
  Hedgehog.Range as Range\n```\n\nOnce you have your imports set up, you can write
  a simple property:\n\n```hs\nprop_reverse :: Property\nprop_reverse =\n  property
  $ do\n    xs <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    reverse (reverse
  xs) === xs\n```\n\nAnd add the Template Haskell splice which will discover your
  properties:\n\n```hs\ntests :: IO Bool\ntests =\n  checkParallel $$(discover)\n```\n\nIf
  you prefer to avoid macros, you can specify the group of properties\nto run manually
  instead:\n\n```hs\n{-# LANGUAGE OverloadedStrings #-}\n\ntests :: IO Bool\ntests
  =\n  checkParallel $ Group \"Test.Example\" [\n      (\"prop_reverse\", prop_reverse)\n
  \   ]\n```\n\nYou can then load the module in GHCi, and run it:\n\n```\nλ tests\n━━━
  Test.Example ━━━\n  ✓ prop_reverse passed 100 tests.\n\n```\n\n [hackage]: http://hackage.haskell.org/package/hedgehog\n
  [hackage-shield]: https://img.shields.io/badge/hackage-v0.4-blue.svg\n\n [travis]:
  https://travis-ci.org/hedgehogqa/haskell-hedgehog\n [travis-shield]: https://travis-ci.org/hedgehogqa/haskell-hedgehog.svg?branch=master\n\n
  [haddock-hedgehog]: http://hackage.haskell.org/package/hedgehog/docs/Hedgehog.html\n
  [haddock-hedgehog-gen]: http://hackage.haskell.org/package/hedgehog/docs/Hedgehog-Gen.html\n
  [haddock-hedgehog-range]: http://hackage.haskell.org/package/hedgehog/docs/Hedgehog-Range.html\n"
license-name: BSD3
