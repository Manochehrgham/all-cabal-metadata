homepage: https://github.com/bos/aeson
changelog-type: markdown
hash: 776343682b659e24904e389189a9f35bdcc8d7715e75f725499aa751ad0680e5
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  base: -any
  time: ! '>=1.5'
  unordered-containers: -any
  text: -any
  test-framework-quickcheck2: -any
  semigroups: ! '>=0.16.1 && <0.19'
  HUnit: -any
  base-orphans: ! '>=0.5.3 && <0.6'
  tagged: -any
  containers: -any
  quickcheck-instances: ! '>=0.3.12'
  ghc-prim: ! '>=0.2'
  hashable: ! '>=1.1.2.0'
  attoparsec: -any
  QuickCheck: ! '>=2.7 && <2.8.3'
  aeson: -any
  template-haskell: -any
  vector: -any
maintainer: Bryan O'Sullivan <bos@serpentine.com>
synopsis: Fast JSON parsing and encoding
changelog: ! "For the latest version of this document, please see [https://github.com/bos/aeson/blob/master/changelog.md](https://github.com/bos/aeson/blob/master/changelog.md).\n\n####
  0.11.1.1\n\n* Fixes a bug where the hashes of equal values could differ.\n\n###
  0.11.1.0\n\nThe only changes are added instances.\n\nThese are new:\n* `ToJSON a
  => ToJSON (NonEmpty a)`\n* `FromJSON a => FromJSON (NonEmpty a)`\n* `ToJSON (Proxy
  a)`\n* `FromJSON (Proxy a)`\n* `ToJSON b => ToJSON (Tagged a b)`\n* `FromJSON b
  => FromJSON (Tagged a b)`\n* `ToJSON a => ToJSON (Const a b)`\n* `FromJSON a =>
  FromJSON (Const a b)`\n\nThese are now available for older GHCs:\n* `ToJSON Natural`\n*
  `FromJSON Natural`\n\n# 0.11.0.0\n\nThis release should be close to backwards compatible
  with aeson 0.9.\n\nIf you are upgrading from aeson 0.10 it might be easier to go
  back in\nhistory to the point you were still using 0.9.\n\n**Breaking changes**:\n\n*
  Revert `.:?` to behave like it did in 0.9. If you want the 0.10\n  behavior use
  `.:!` instead.\n\n* Revert JSON format of `Either` to 0.9, `Left` and `Right` are
  now\n  serialized with an initial uppercase letter. If you want the names\n  in
  lowercase you can add a newtype with an instance.\n\n* All `ToJSON` and `FromJSON`
  instances except for `[a]` are no longer\n  `OVERLAPPABLE`. Mark your instance as
  `OVERLAPPING` if it overlaps\n  any of the other aeson instances.\n\n* All `ToJSON`
  and `FromJSON` instances except for `[Char]` are no\n  longer incoherent, this means
  you may need to replace your\n  incoherent instances with a newtyped instance.\n\n**Additions**:\n\n*
  Introduce `.:!` that behaves like `.:?` did in 0.10.\n\n* Allow `HH:MM` format for
  `ZonedTime` and `UTCTime`.\n  This is one of the formats allowed by\n  [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Times).\n\n*
  Added `ToJSON` and `FromJSON` instances for the\n  `Version`, `Ordering`, and `Natural`
  types.\n\n**Bug fixes**:\n\n* JSONPath identifiers are now escaped if they contain
  invalid characters.\n\n* Fixed JSONPath messages for Seq to include indices.\n\n*
  Fixed JSONPath messages for Either to include `left`/`right`.\n\n* Fix missing quotes
  surrounding time encodings.\n\n* Fix #293: Type error in TH when using `omitNothingFields
  = True`.\n\n**Compatibility**:\n\n* Various updates to support GHC 8.\n\n\n# 0.10.0.0\n\n##
  Performance improvements\n\n* Direct encoding via the new `toEncoding` method is
  over 2x faster\n  than `toJSON`.  (You must write or code-gen a `toEncoding`\n  implementation
  to unlock this speedup.  See below for details.)\n\n* Improved string decoding gives
  a 12% speed win in parsing\n  string-heavy JSON payloads (very common).\n\n* Encoding
  and decoding of time-related types are 10x faster (!!) as a\n  result of bypassing
  `Data.Time.Format` and the arbitrary-precision\n  `Integer` type.\n\n* When using
  `toEncoding`, `[Char]` can be encoded without a conversion to\n  `Text`.  This is
  fast and efficient.\n\n* Parsing into an `Object` is now 5% faster and more\n  allocation-efficient.\n\n##
  SUBTLE API CHANGES, READ CAREFULLY\n\nWith the exception of long-deprecated code,
  the API changes below\n**should be upwards compatible** from older versions of `aeson`.
  \ If you run\ninto upgrade problems, please file an issue with details.\n\n* The
  `ToJSON` class has a new method, `toEncoding`, that allows\n  direct encoding from
  a Haskell value to a lazy bytestring without\n  construction of an intermediate
  `Value`.\n\n  The performance benefits of direct encoding are significant: more\n
  \ than 2x faster than before, with less than 1/3 the memory usage.\n\n  To preserve
  API compatibility across upgrades from older versions of\n  this library, the default
  implementation of `toEncoding` uses\n  `toJSON`.  You will *not* see any performance
  improvement unless you\n  write an implementation of `toEncoding`, which can be
  very simple:\n\n  ```haskell\n  instance ToJSON Coord where\n    toEncoding = genericToEncoding
  defaultOptions\n  ```\n\n  (Behind the scenes, the `encode` function uses `toEncoding`
  now, so\n  if you implement `toEncoding` for your types, you should see a\n  speedup
  immediately.)\n\n  If you use Template Haskell or GHC Generics to auto-generate
  your\n  `ToJSON` instances, you'll benefit from fast toEncoding\n  implementations
  for free!\n\n* When converting from a `Value` to a target Haskell type, `FromJSON`\n
  \ instances now provide much better error messages, including a\n  complete JSON
  path from the root of the object to the offending\n  element.  This greatly eases
  debugging.\n\n* It is now possible to use Template Haskell to generate `FromJSON`\n
  \ and `ToJSON` instances for types in data families.\n\n* If you use Template Haskell
  or generics, and used to use the\n  `camelTo` function to rename fields, the new
  `camelTo2` function is\n  smarter.  For example, `camelTo` will rename `CamelAPICase`
  to\n  `camelapi_case` (ugh!), while `camelTo2` will map it to\n  `camel_api_case`
  (yay!).\n\n* New `ToJSON` and `FromJSON` instances for the following time-related\n
  \ types: `Day`, `LocalTime`.\n\n* `FromJSON` `UTCTime` parser accepts the same values
  as for `ZonedTime`,\n  but converts any time zone offset into a UTC time.\n\n* The
  `Result` type is now an instance of `Foldable` and `Traversable`.\n\n* The `Data.Aeson.Generic`
  module has been removed. It was deprecated in\n  late 2013.\n\n* GHC 7.2 and older
  are no longer supported.\n\n* The instance of `Monad` for the `Result` type lacked
  an implementation\n  of `fail` (oops).  This has been corrected.\n\n* Semantics
  of `(.:?)` operator are changed. It's doesn't anymore accept\n  present `Null` value.\n\n*
  Added `(Foldable t, ToJSON a) => ToJSON (t a)` overlappable instance.\n  You might
  see `No instance for (Foldable YourPolymorphicType) arising from a\n  use of ‘.=’`
  -errors due this change.\n\n# 0.9.0.1\n\n* A stray export of `encodeToBuilder` got
  away!\n\n# 0.9.0.0\n\n* The `json` and `json'` parsers are now synonyms for `value`
  and\n  `value'`, in conformance with the looser semantics of RFC 7159.\n\n* Renamed
  `encodeToByteStringBuilder` to the more compact\n  `encodeToBuilder`.\n\n# 0.8.1.1\n\n*
  The dependency on the `unordered-containers` package was too lax,\n  and has been
  corrected.\n\n# 0.8.1.0\n\n* Encoding a `Scientific` value with a huge exponent
  is now handled\n  efficiently.  (This would previously allocate a huge\n  arbitrary-precision
  integer, potentially leading to a denial of\n  service.)\n\n* Handling of strings
  that contain backslash escape sequences is\n  greatly improved.  For a pathological
  string containing almost a\n  megabyte of consecutive backslashes, the new implementation
  is 27x\n  faster and uses 42x less memory.\n\n* The `ToJSON` instance for `UTCTime`
  is rendered with higher\n  (picosecond) resolution.\n\n* The `value` parser now
  correctly handles leading whitespace.\n\n* New instances of `ToJSON` and `FromJSON`
  for `Data.Sequence` and\n  `Data.Functor.Identity`.  The `Value` type now has a
  `Read` instance.\n\n* `ZonedTime` parser ordering now favours the standard `JSON`
  format,\n  increasing efficiency in the common case.\n\n* Encoding to a `Text.Builder`
  now escapes `'<'` and `'>'` characters,\n  to reduce XSS risk.\n\n# 0.8.0.2\n\n*
  Fix `ToJSON` instance for 15-tuples (see #223).\n\n# 0.8.0.1\n\n* Support `time-1.5`.\n\n#
  0.8.0.0\n\n* Add `ToJSON` and `FromJSON` instances for tuples of up to 15\n  elements.\n\n#
  0.7.1.0\n\n* Major compiler and library compatibility changes: we have dropped\n
  \ support for GHC older than 7.4, `text` older than 1.1, and\n  `bytestring` older
  than 0.10.4.0.  Supporting the older versions had\n  become increasingly difficult,
  to the point where it was no longer\n  worth it.\n\n# 0.7.0.0\n\n* The performance
  of encoding to and decoding of bytestrings have both\n  improved by up to 2x, while
  also using less memory.\n\n* New dependency: the `scientific` package lets us parse
  floating point\n  numbers more quickly and accurately.\n\n* `eitherDecode`, `decodeStrictWith`:
  fixed bugs.\n\n* Added `FromJSON` and `ToJSON` instances for `Tree` and `Scientific`.\n\n*
  Fixed the `ToJSON` instances for `UTCTime` and `ZonedTime`.\n\n# 0.6 series\n\n*
  Much improved documentation.\n\n* Angle brackets are now escaped in JSON strings,
  to help avoid XSS\n  attacks.\n\n* Fixed up handling of nullary constructors when
  using generic\n  encoding.\n\n* Added `ToJSON`/`FromJSON` instances for:\n\n  *
  The `Fixed` class\n  * ISO-8601 dates: `UTCTime`, `ZonedTime`, and `TimeZone`\n\n*
  Added accessor functions for inspecting `Value`s.\n\n* Added `eitherDecode` function
  that returns an error message if\n  decoding fails.\n\n# 0.5 to 0.6\n\n* This release
  introduces a slightly obscure, but\n  backwards-incompatible, change.\n\n  In the
  generic APIs of versions 0.4 and 0.5, fields whose names\n  began with a `\"_\"`
  character would have this character removed.  This\n  no longer occurs, as it was
  both buggy and surprising\n  (https://github.com/bos/aeson/issues/53).\n\n* Fixed
  a bug in generic decoding of nullary constructors\n  (https://github.com/bos/aeson/issues/62).\n\n#
  0.4 to 0.5\n\n* When used with the UTF-8 encoding performance improvements\n  introduced
  in version 0.11.1.12 of the `text` package, this release\n  improves `aeson`'s JSON
  encoding performance by 33% relative to\n  `aeson` 0.4.\n\n  As part of achieving
  this improvement, an API change was necessary.\n  The `fromValue` function in the
  `Data.Aeson.Encode` module now uses\n  the `text` package's `Builder` type instead
  of the `blaze-builder`\n  package's `Builder` type.\n\n# 0.3 to 0.4\n\n* The new
  `decode` function complements the longstanding `encode`\n  function, and makes the
  API simpler.\n\n* New examples make it easier to learn to use the package\n  (https://github.com/bos/aeson/tree/master/examples).\n\n*
  Generics support\n\n  `aeson`'s support for data-type generic programming makes
  it\n  possible to use JSON encodings of most data types without writing\n  any boilerplate
  instances.\n\n  Thanks to Bas Van Dijk, `aeson` now supports the two major schemes\n
  \ for doing datatype-generic programming:\n\n  * the modern mechanism, built into
  GHC itself\n\t(http://www.haskell.org/ghc/docs/latest/html/users_guide/generic-programming.html)\n\n
  \ * the older mechanism, based on SYB (aka \"scrap your\n\tboilerplate\")\n\n  The
  modern GHC-based generic mechanism is fast and terse: in fact,\n  its performance
  is generally comparable in performance to\n  hand-written and TH-derived `ToJSON`
  and `FromJSON` instances.  To\n  see how to use GHC generics, refer to `examples/Generic.hs`.\n\n
  \ The SYB-based generics support lives in `Data.Aeson.Generic` and is\n  provided
  mainly for users of GHC older than 7.2.  SYB is far slower\n  (by about 10x) than
  the more modern generic mechanism.  To see how\n  to use SYB generics, refer to
  `examples/GenericSYB.hs`.\n\n* We switched the intermediate representation of JSON
  objects from\n  `Data.Map` to `Data.HashMap` which has improved type conversion\n
  \ performance.\n\n* Instances of `ToJSON` and `FromJSON` for tuples are between
  45% and 70%\n  faster than in 0.3.\n\n* Evaluation control\n\n  This version of
  aeson makes explicit the decoupling between\n  *identifying* an element of a JSON
  document and *converting* it to\n  Haskell.  See the `Data.Aeson.Parser` documentation
  for details.\n\n  The normal `aeson` `decode` function performs identification\n
  \ strictly, but defers conversion until needed.  This can result in\n  improved
  performance (e.g. if the results of some conversions are\n  never needed), but at
  a cost in increased memory consumption.\n\n  The new `decode'` function performs
  identification and conversion\n  immediately.  This incurs an up-front cost in CPU
  cycles, but\n  reduces reduce memory consumption.\n"
basic-deps:
  bytestring: ! '>=0.10.4.0'
  fail: ==4.9.*
  base: ! '>=4.5 && <5'
  time: ! '>=1.5'
  unordered-containers: ! '>=0.2.5.0'
  text: ! '>=1.1.1.0'
  syb: -any
  dlist: ! '>=0.2'
  semigroups: ! '>=0.16.1 && <0.19'
  tagged: ! '>=0.8.3 && <0.9'
  containers: -any
  ghc-prim: ! '>=0.2'
  mtl: -any
  hashable: ! '>=1.1.2.0'
  attoparsec: ! '>=0.13.0.1'
  transformers: -any
  deepseq: -any
  scientific: ! '>=0.3.1 && <0.4'
  template-haskell: ! '>=2.7'
  vector: ! '>=0.7.1'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.1.1'
- '0.3.2.0'
- '0.3.2.1'
- '0.3.2.2'
- '0.3.2.3'
- '0.3.2.4'
- '0.3.2.5'
- '0.3.2.6'
- '0.3.2.7'
- '0.3.2.8'
- '0.3.2.9'
- '0.3.2.10'
- '0.3.2.11'
- '0.3.2.12'
- '0.3.2.13'
- '0.3.2.14'
- '0.4.0.0'
- '0.4.0.1'
- '0.5.0.0'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.1.0'
- '0.6.2.0'
- '0.6.2.1'
- '0.7.0.4'
- '0.7.0.6'
- '0.8.0.2'
- '0.8.1.0'
- '0.8.1.1'
- '0.9.0.0'
- '0.9.0.1'
- '0.11.0.0'
- '0.11.1.0'
- '0.11.1.1'
author: Bryan O'Sullivan <bos@serpentine.com>
latest: '0.11.1.1'
description-type: markdown
description: ! '# Welcome to `aeson` [![Hackage](https://img.shields.io/hackage/v/aeson.svg)](https://hackage.haskell.org/package/aeson)
  [![Build Status](https://travis-ci.org/bos/aeson.svg)](https://travis-ci.org/bos/aeson)


  aeson is a fast Haskell library for working with JSON data.



  # Join in!


  We are happy to receive bug reports, fixes, documentation enhancements,

  and other improvements.


  Please report bugs via the

  [github issue tracker](http://github.com/bos/aeson/issues).


  Master [git repository](http://github.com/bos/aeson):


  * `git clone git://github.com/bos/aeson.git`


  There''s also a [Mercurial mirror](http://bitbucket.org/bos/aeson):


  * `hg clone http://bitbucket.org/bos/aeson`


  (You can create and contribute changes using either git or Mercurial.)



  # Authors


  This library is written and maintained by Bryan O''Sullivan,

  <bos@serpentine.com>.

'
license-name: BSD3
