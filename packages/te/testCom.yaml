homepage: ''
changelog-type: markdown
hash: 696faed75f7a392a704bccde2ad8345ac3f4e7fb15cf14951431bf311cb5ae4f
test-bench-deps:
  base: ! '>=4.9'
  haskell-src-meta: -any
  template-haskell: ! '>=2.11.1.0'
maintainer: nobrakal@cthugha.org
synopsis: Write your tests in comments
changelog: ! '# Revision history for testCom


  ## 0.2.0  -- 2017-09-28


  * Can parse object correctly

  * Change syntax for tests


  ## 0.1.1  -- 2017-09-25


  * Maintenance, can now parse object.


  ## 0.1.0  -- 2017-09-24


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4.9 && <4.11'
  haskell-src-meta: ! '>=0.8.0.1'
  template-haskell: ! '>=2.11.1.0'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
author: Alexandre Moine
latest: '0.2.0'
description-type: markdown
description: ! "## testCom\n\n### How to use it\n\n#### Write your tests\n\nAbove
  a function to test, write your test like this:\n\n```\n--[1 2] [3]\nadd :: Int ->
  Int -> Int\nadd x y = x+y\n```\n\n#### Run them\nFor example\n```\n{-# LANGUAGE
  TemplateHaskell #-}\n\nimport Language.Haskell.TH\nimport Language.Haskell.TH.Syntax\nimport
  System.Exit\n\n$(makeAllTestsHere)\n$(makeAllTests \"some/Path/File.hs\")\n\n--
  Tests\nmain :: IO ()\nmain = do\n  let (str,res) = _TEST_path -- Here, path=directory_actualfile.
  If your file is put in tests/Main.hs, then path=tests_Main (without the \".hs\")\n
  \ let (str',res') = _TEST_some_Path_File\n  putStrLn str\n  putStrLn str'\n  if
  res && res' then exitSuccess else exitFailure\n```\n\n### TODO\n\n* Encapuslate
  parse error.\n"
license-name: GPL
