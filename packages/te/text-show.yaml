homepage: https://github.com/RyanGlScott/text-show
changelog-type: markdown
hash: 22f4a557574a4a04ba63d9f1ddcd2344d3f2237e0524dda1d9f356e74283c81d
test-bench-deps:
  void: ! '>=0.5 && <1'
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.3 && <5'
  hspec: ! '>=2 && <3'
  text: ! '>=0.11.1 && <1.3'
  generic-deriving: ! '>=1.8.0 && <2'
  text-show: ==1
  array: ! '>=0.3 && <0.6'
  base-orphans: ! '>=0.4 && <1'
  tagged: ! '>=0.8.1 && <1'
  quickcheck-instances: ! '>=0.1 && <0.4'
  base-compat: ! '>=0.8.2 && <1'
  ghc-prim: -any
  nats: ! '>=0.1 && <2'
  transformers: ! '>=0.2.1 && <0.5'
  bytestring-builder: -any
  QuickCheck: ! '>=2.5 && <3'
  transformers-compat: ! '>=0.3 && <1'
maintainer: Ryan Scott <ryan.gl.scott@ku.edu>
synopsis: Efficient conversion of values into Text
changelog: ! "# 1\r\n* The `Show1` class has been completely overhauled. `Show1` now
  uses the function `showbPrecWith`, which takes as an argument a function of type
  `Int -> a -> Builder` to show occurrences of the type parameter (instead of requiring
  the type parameter to be a `Show` instance). This matches the new implementation
  of `Show1` in the next version of `transformers`. A similar `Show2` class (with
  the function `showbPrecWith2`) was also added.\r\n* As a consequence, `Show1` instances
  should no longer be defined in terms of `showbPrec`; rather, `Show` instances should
  be defined in terms of `showbPrecWith` or `showbPrecWith2`, and `Show1` instances
  can be defined in terms of `showbPrecWith2`.\r\n* The `showbPrec1` function is no
  longer a class method of `Show1`, but is now a standalone function defined in terms
  of `showbPrecWith`. `showbPrec1` can be useful for defining `Show` instances. A
  similar `showbPrec2` function was also added.\r\n* The monomorphic functions in
  the many submodules of this package have been generalized (where possible) to use
  `Show1` and `Show2` instances. These functions have `-PrecWith` and `-PrecWith2`
  suffixes, respectively.\r\n* Because of the generality of the new `showPrecWith`
  function, `Show1` instances are now possible for `Ratio`, `Alt`, `Rec1`, `M1`, `(:+:)`,
  `(:*:)`, and `(:.:)`.\r\n* Removed many silly instances for `FromStringShow` and
  `FromTextShow`, since they'll never be used in the ways suggested by those instances
  to begin with.\r\n* The Template Haskell engine has been completely overhauled.
  Deriving `Show1` and `Show2` instances are now possible using the `deriveShow1`
  and `deriveShow2` functions. See the documentation in `Text.Show.Text.TH` for more
  details. In addition, the `mkShowbPrecWith`, `mkShowbPrec1`, `mkShowbPrecWith2`,
  and `mkShowbPrec2` functions were added.\r\n* Removed the ability to call `deriveShow`
  or `mkShowbPrec` (or other functions prefixed with `mk-`) using a data family name.
  This is considered a misfeature. If you want to derive `Show` for data family instances,
  use the corresponding `data instance` or `newtype instance` constructor name as
  an argument instead.\r\n * Removed `PragmaOptions`, `deriveShowPragmas`, `defaultInlineShowbPrec`,
  `defaultInlineShowb`, and `defaultInlineShowbList`, as it was impossible to make
  Template Haskell-generated pragmas work consistently across different versions of
  GHC. If you really want to use `INLINE` and `SPECIALIZE instance` pragmas with your
  Template Haskell-generated code, create manual instances with `mkShowbPrec` and
  family.\r\n* `Show1` instances can now be created generically using the `genericShowbPrecWith`
  function in `Text.Show.Text.Generics`. A `genericShowbPrec1` was also added.\r\n*
  Added `generic-deriving` as a dependency, which allows generics-related code to
  be exported on more versions of GHC\r\n* `ConType` (in `Text.Show.Text.Generics`)
  now has an `Inf String` constructor instead of `Inf Builder`. As a result, `ConType`
  now always an `Eq` and `Ord` instance, and a `Read ConType` instance was added.\r\n*
  `Typeable` instances for the promoted data constructors `'FromStringShow` and `'FromTextShow`\r\n*
  Added `showbFPFormat` to `Text.Show.Text.Data.Floating`\r\n* Revamped test suite\r\n\r\n###
  0.8.1.1\r\n* Retroactive `CHANGELOG` update\r\n\r\n## 0.8.1\r\n* Fix test suite
  build with older versions of `QuickCheck`\r\n\r\n# 0.8\r\n* Exported `formatRealFloatB`
  and `formatRealFloatAltB` from `Text.Show.Text.Data.Floating`. Reexported `FPFormat`
  (from `text`) in the same module, and added a `Text` `Show` instance for it.\r\n*
  The `Show` instance for `Ratio a` now only requires a `Show a` constraint if using
  `base-4.4.0.0` or later (if using `base-4.3.0.0`, it requires a `(Show a, Integral
  a)` constraint)\r\n* Added `showbSingPrec` to `Text.Show.Text.GHC.TypeLits` (if
  using `base-4.6`)\r\n* Modules which were previously exported only if using a recent-enough
  version of GHC/`base` (e.g., `Text.Show.Text.GHC.Generics`) are now always exposed.
  If the functionality that the module provides is not available on a given version
  of GHC/`base`, the module will not expose anything.\r\n* Bump lower version bounds
  of `text` to 0.11.1 due to reexporting `FPFormat`\r\n* Added `showbUnicodeException`,
  `showbI16Prec`, `showbDecodingPrec`, and `showbSizePrec` functions (and corresponding
  `Show` instances) to `Text.Show.Text.Data.Text`\r\n* Made `GShow` in `Text.Show.Text.Generics`
  poly-kinded\r\n* The Template Haskell deriver (and `GShow`) now handles \"infix\"
  data constructors that are applied as prefix correctly (e.g., `data Amp a = (:&)
  a a`)\r\n* The Template Haskell deriver now handles showable unlifted types (`Char#`,
  `Double#`, `Float#`, `Int#`, and `Word#`) correctly on GHC 7.11 and later\r\n* The
  Template Haskell derive now does not parenthesize record types regardless of precedence
  on GHC 7.11 and later\r\n* Fixed build on GHC 7.2\r\n* Changed test-suite to use
  `hspec`, which allows for it to be built on GHC 7.0 and 7.2\r\n\r\n### 0.7.0.1\r\n*
  Disabled `print`-related tests, as they sporadically break referential transparency
  for unknown reasons\r\n* Fixed build on Windows\r\n\r\n# 0.7\r\n* Added `showbConstPrec`
  (and corresponding `Show` and `Show1` instances for `Const`) to `Text.Show.Text.Control.Applicative`\r\n*
  Added `showbUArrayPrec` (and corresponding `Show` instance for `UArray`s) and `showbIArrayPrec`
  to `Text.Data.Text.Data.Array`.\r\n* Renamed `showbListDefault` to `showbListWith`
  to match how `Text.Show` names it\r\n* Exposed `showbShortByteString` with all versions
  of `bytestring` by using the `bytestring-builder` package\r\n* Corrected the `Show`
  instance for `Lexeme` (in `Text.Show.Text.Text.Read.Lex`)\r\n* Fixed `TypeRep` output
  on GHC 7.10 and later\r\n* Removed `LitChar` and `LitString` from `Text.Show.Text.Data.Char`,
  as they were not as useful as I had imagined.\r\n* Removed the deprecated `replicateB`
  function\r\n* `Typable` instances for `Show`, `Show1`, and `GShow` (with GHC 7.8
  and later)\r\n* `Typeable` instance for `ConType`\r\n* Only derive `Eq` and `Ord`
  for `ConType` if a recent-enough version of `text` is used\r\n* Changed the implementations
  of some functions in `Text.Show.Text.Debug.Trace` to use `ByteString`s instead of
  `String`s\r\n\r\n### 0.6.0.1\r\n* Forgot to include some header files in `text-show.cabal`\r\n\r\n#
  0.6\r\n* `deriveShow` can now construct instances for data families, using either
  the data family name or a data instance constructor as an argument. See the documentation
  in `Text.Show.Text.TH` for more details.\r\n* Fixed a bug in which infix backticked
  data constructors (e.g., ```data Add = Int `Plus` Int```) would not be shown correctly.\r\n*
  Fixed typo in `Text.Show.Text.GHC.RTS.Flags`\r\n* Removed the phantom-type detecting
  mechanism with `template-haskell-2.9.0.0` or higher. This method of finding phantom
  types is intrinsically flawed and is not usable on older GHCs.\r\n* Added generics
  support with the `Text.Show.Text.Generic` and `Text.Show.Text.Debug.Trace.Generic`
  modules\r\n* Deprecated `replicateB` in favor of `timesN` from the `semigroups`
  library\r\n* Added `FromTextShow` to `Text.Show.Text`, which admits a `String` `Show`
  instance for any data type with a `Text` `Show` instance (the counterpart of `FromStringShow`)\r\n*
  Added `Monoid` and `Semigroup` instances for `FromStringShow`, `Semigroup` instance
  for `LitString`, `IsChar` instance for `LitChar`, and `IsString` instance for `[LitChar]`\r\n*
  Changed the `String` `Show` instances of `FromStringShow`, `LitChar`, and `LitString`
  to more closely match the `Text` `Show` instances. As a result, the `Read` instances
  for these data types were also changed so that `read . show = read . show = id`.\r\n*
  Removed the `recent-text` flag. We'll allow users to build with older versions of
  `text`, but the latest version is recommended. Because of this, the `integer-simple`
  and `integer-gmp` flags are not needed.\r\n* Removed the `integer-gmp2` flag, as
  it supported a configuration that didn't actually compile on GHC\r\n* Removed the
  `transformers-four` flag, as it is not needed now that `transformers-compat` is
  a dependency\r\n\r\n# 0.5\r\n* Fix build for GHC 7.10, old GHC versions, and Windows\r\n*
  Removed the `Text.Show.Text.Data.Containers` and `Text.Show.Text.Data.Time` modules.
  The modules for the data types in `containers` and `time` were migrated to a separate
  library, `text-show-instances`.\r\n* Removed the `-ftext-format` flag, as `text-show`
  no longer uses `text-format`.\r\n* A [serious bug](https://github.com/bos/text/issues/99)
  in the `text` package that caused segfaults when building large `Integer`s was fixed
  in `text-1.2.0.2`. A flag (`-frecent-text`) was added that allows you to take advantage
  of this.\r\n* Fixed a bug that would cause the output of functions in the `Text.Show.Text.Data.Floating`
  module to not match `base` depending on what version of `base` is used.\r\n* The
  type signatures of lambda expressions generated by `mkShow` and related functions
  were loosened to allow them to be used to \"manually\" derive `Show` instances for
  data types with higher-kinded type parameters or type arguments with restricted
  `Show` instances. This should not be a breaking change; you can simply do more with
  `mkShow` et al. than you could before. For more information, see the documentation
  in `Text.Show.Text.TH`.\r\n* Loosened the `Show` instance of `Complex a` to only
  depend on `Show a` (previously required `RealFloat a`) if using base-4.4.0.0 or
  later\r\n* Moved `showbRatioPrec` to `Text.Show.Text.Data.Ratio`, `showbComplexPrec`
  to `Text.Show.Text.Data.Complex`, `showbProxy` to `Text.Show.Text.Data.Proxy`, and
  `showbFingerprint` to `Text.Show.Text.GHC.Fingerprint`\r\n* Added `deriveShowPragmas`
  to `Text.Show.Text.TH` to allow users to specify `INLINE` or `SPECIALIZE instance`
  pragmas with `Show` instances.\r\n* Added `FromStringShow`, `showbSpace`, `showbUnary`,
  `showbUnary1`, and `showbBinary1` to `Text.Show.Text`\r\n* Added `mkShowList`, `mkShowListLazy`,
  and `mkShowbList` to `Text.Data.Text.TH`\r\n* For base-4.8.0.0 and above, added
  the `Text.Show.Text.Data.Functor.Identity`, `Text.Show.Text.Data.Void`, `Text.Show.Text.GHC.RTS.Flags`,
  `Text.Show.Text.GHC.StaticPtr`, and `Text.Show.Text.Numeric.Natural` modules. Also
  added `Show` instances for `AllocationLimitExceeded` in `Text.Show.Text.Control.Exception`
  and `Alt` in `Text.Show.Text.Data.Monoid`. Also fixed the `Show` instance for `Fixed`
  values.\r\n* Added the `Text.Show.Text.Data.GHC.Conc.Windows` module (Windows-only)\r\n*
  Added the `Text.Show.Text.Data.OldTypeable` module for base-4.7\r\n* Added the `Text.Show.Text.GHC.TypeLits`
  module for base-4.6 and above\r\n* Added the `Text.Show.Text.Debug.Trace` and `Text.Show.Text.Debug.Trace.TH`
  modules as an analog to `Debug.Trace`\r\n* Added the `Show1` class and corresponding
  instances for unary type constructors.\r\n* Added `LitChar` and `LitString` to `Text.Show.Text.Data.Char`\r\n*
  Exported `asciiTabB` in `Text.Show.Text.Data.Char`\r\n* Renamed `showbTextStrict`
  to 'showbText' (to keep with naming conventions in the `text` library) and added
  `showbBuilder` to `Text.Show.Text.Data.Text`.\r\n\r\n## 0.4.1\r\n* Added the utility
  functions `toText` and `toString` for working with `Builder`s.\r\n\r\n# 0.4\r\n*
  Due to [GHC bug #5289](http://ghc.haskell.org/trac/ghc/ticket/5289), projects that
  depend on the `double-conversion` library (such as `text-format`, a dependency of
  `text-show`) may break due to GHC incorrectly linking against libstdc++. Therefore,
  `text-show` was changed so that it does not depend on `text-format` by default.
  This behavior can be changed by using the `-ftext-format` flag when using `cabal`.\r\n*
  Added `showbZonedTime` to `Text.Show.Text.Data.Time` (and corresponding `Show` instance
  for `ZonedTime`)\r\n* Exposed `showbMaskingState` (is was already there, I just
  forgot to export it)\r\n* If using GHC 7.6 or earlier, depend on tagged so that
  `Data.Proxy` (and thus `showbProxy` from `Text.Show.Text.Data.Typeable`) can be
  used\r\n* Refactored code to use Template Haskell derivations when possible\r\n\r\n##
  0.3.1.0\r\n* Added `showList` and `showListLazy`\r\n* Don't use `showbListDefault`
  to show `containers` data types\r\n* Added the ability to splice `show` functions
  for arbitrary data types (even if they aren't `Show` instances). These functions
  are `mkShow`, `mkShowLazy`, `mkShowPrec`, `mkShowPrecLazy`, `mkShowb`, `mkShowbPrec`,
  `mkPrint`, `mkPrintLazy`, `mkHPrint`, and `mkHPrintLazy`.\r\n\r\n# 0.3.0.0\r\n*
  Lots of bugfixes\r\n* `Show` instances for many other data types in `base`, `containers`
  and `time`\r\n* Exposed internal modules with monomorphic functions\r\n* `Text.Show.Text`
  now exports `Data.Text.Lazy.Builder` for convenience\r\n* Add `showLazy`, `showPrec`,
  `showPrecLazy`, `printLazy`, `hPrint`, `hPrintLazy`, `lengthB`, and `replicateB`\r\n*
  Template Haskell derivation of `Show` instances (doesn't support data families yet)\r\n\r\n#
  0.2.0.0\r\n* Added `Show` instances for strict and lazy `Text`\r\n\r\n# 0.1.0.0\r\n*
  Initial commit\r\n"
basic-deps:
  void: ! '>=0.5 && <1'
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.3 && <5'
  text: ! '>=0.11.1 && <1.3'
  generic-deriving: ! '>=1.8 && <2'
  semigroups: ! '>=0.16.1 && <1'
  array: ! '>=0.3 && <0.6'
  integer-gmp: -any
  tagged: ! '>=0.4.4 && <1'
  containers: ! '>=0.1 && <0.6'
  base-compat: ! '>=0.8.1 && <1'
  ghc-prim: -any
  nats: ! '>=0.1 && <2'
  transformers: ! '>=0.2.1 && <0.5'
  bytestring-builder: -any
  template-haskell: ! '>=2.5 && <2.11'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4'
- '0.4.1'
- '0.5'
- '0.6'
- '0.6.0.1'
- '0.7'
- '0.7.0.1'
- '0.8'
- '0.8.1'
- '0.8.1.1'
- '1'
author: Ryan Scott
latest: '1'
description-type: markdown
description: ! "# `text-show` [![Hackage version](https://img.shields.io/hackage/v/text-show.svg?style=flat)](http://hackage.haskell.org/package/text-show)
  [![Build Status](https://img.shields.io/travis/RyanGlScott/text-show.svg?style=flat)](https://travis-ci.org/RyanGlScott/text-show)\r\n\r\n`text-show`
  offers a replacement for the `Show` typeclass intended for use with `Text` instead
  of `String`s. This package was created in the spirit of [`bytestring-show`](http://hackage.haskell.org/package/bytestring-show).\r\n\r\nAt
  the moment, `text-show` provides `Show` instances for most data types in the [`array`](http://hackage.haskell.org/package/array),
  [`base`](http://hackage.haskell.org/package/base), [`bytestring`](http://hackage.haskell.org/package/bytestring),
  and [`text`](http://hackage.haskell.org/package/text) packages. Therefore, much
  of the source code for `text-show` consists of borrowed code from those packages
  in order to ensure that the behaviors of the two `Show` typeclasses coincide.\r\n\r\nFor
  most uses, simply importing `Text.Show.Text` will suffice:\r\n\r\n```haskell\r\nmodule
  Main where\r\n\r\nimport Data.Text (Text)\r\nimport Prelude hiding (Show(..), print)\r\nimport
  Text.Show.Text\r\n\r\nhello :: Text\r\nhello = show (Just \"Hello, World!\")\r\n\r\nmain
  :: IO ()\r\nmain = print hello\r\n```\r\n\r\nIf you desire it, there are also monomorphic
  versions of the `showb` function available in the submodules of `Text.Show.Text`.
  A naming convention is present in which functions that show different values depending
  on the precedence end with `Prec`(e.g., `showbIntPrec`), whereas functions that
  show the same values regardless of precedence do not end with `Prec` (e.g., `showbBool`).\r\n\r\nSupport
  for automatically deriving `Show` instances can be found in the `Text.Show.Text.TH`
  and `Text.Show.Text.Generic` modules. If you don't know which one to use, use `Text.Show.Text.TH`.\r\n"
license-name: BSD3
