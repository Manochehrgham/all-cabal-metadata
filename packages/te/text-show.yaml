changelog-type: markdown
hash: dbdb65c4f73060d59ed5499f7a7bf7ef5abd5f1fc6e917c0aa22354ce1a0654d
test-bench-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.5 && <5'
  text: ! '>=0.8 && <1.3'
  text-show: ==0.7.0.1
  array: ! '>=0.3 && <0.6'
  quickcheck-instances: ! '>=0.1 && <0.4'
  ghc-prim: -any
  tasty-quickcheck: ! '>=0.8 && <0.9'
  tasty-hunit: ! '>=0.8 && <0.10'
  tasty: ! '>=0.8 && <0.11'
  QuickCheck: ! '>=2.5 && <3'
synopsis: Efficient conversion of values into Text
changelog: ! "### 0.7.0.1\r\n* Disabled `print`-related tests, as they sporadically
  break referential transparency for unknown reasons\r\n* Fixed build on Windows\r\n\r\n#
  0.7\r\n* Added `showbConstPrec` (and corresponding `Show` and `Show1` instances
  for `Const`) to `Text.Show.Text.Control.Applicative`\r\n* Added `showbUArrayPrec`
  (and corresponding `Show` instance for `UArray`s) and `showbIArrayPrec` to `Text.Data.Text.Data.Array`.\r\n*
  Renamed `showbListDefault` to `showbListWith` to match how `Text.Show` names it\r\n*
  Exposed `showbShortByteString` with all versions of `bytestring` by using the `bytestring-builder`
  package\r\n* Corrected the `Show` instance for `Lexeme` (in `Text.Show.Text.Text.Read.Lex`)\r\n*
  Fixed `TypeRep` output on GHC 7.10 and later\r\n* The Template Haskell deriver now
  handles showable unlifted types (`Char#`, `Double#`, `Float#`, `Int#`, and `Word#`)
  correctly on GHC 7.12 and later\r\n* Removed `LitChar` and `LitString` from `Text.Show.Text.Data.Char`,
  as they were not as useful as I had imagined.\r\n* Removed the deprecated `replicateB`
  function\r\n* `Typable` instances for `Show`, `Show1`, and `GShow` (with GHC 7.8
  and later)\r\n* `Typeable` instance for `ConType`\r\n* Only derive `Eq` and `Ord`
  for `ConType` if a recent-enough version of `text` is used\r\n* Changed the implementations
  of some functions in `Text.Show.Text.Debug.Trace` to use `ByteString`s instead of
  `String`s\r\n\r\n### 0.6.0.1\r\n* Forgot to include some header files in `text-show.cabal`\r\n\r\n#
  0.6\r\n* `deriveShow` can now construct instances for data families, using either
  the data family name or a data instance constructor as an argument. See the documentation
  in `Text.Show.Text.TH` for more details.\r\n* Fixed a bug in which infix backticked
  data constructors (e.g., ```data Add = Int `Plus` Int```) would not be shown correctly.\r\n*
  Fixed typo in `Text.Show.Text.GHC.RTS.Flags`\r\n* Removed the phantom-type detecting
  mechanism with `template-haskell-2.9.0.0` or higher. This method of finding phantom
  types is intrinsically flawed and is not usable on older GHCs. I plan on introducing
  a more robust mechanism for detecting phantom types on more versions of Template
  Haskell in `text-show-0.7`.\r\n* Added generics support with the `Text.Show.Text.Generic`
  and `Text.Show.Text.Debug.Trace.Generic` modules\r\n* Deprecated `replicateB` in
  favor of `timesN` from the `semigroups` library\r\n* Added `FromTextShow` to `Text.Show.Text`,
  which admits a `String` `Show` instance for any data type with a `Text` `Show` instance
  (the counterpart of `FromStringShow`)\r\n* Added `Monoid` and `Semigroup` instances
  for `FromStringShow`, `Semigroup` instance for `LitString`, `IsChar` instance for
  `LitChar`, and `IsString` instance for `[LitChar]`\r\n* Changed the `String` `Show`
  instances of `FromStringShow`, `LitChar`, and `LitString` to more closely match
  the `Text` `Show` instances. As a result, the `Read` instances for these data types
  were also changed so that `read . show = read . show = id`.\r\n* Removed the `recent-text`
  flag. We'll allow users to build with older versions of `text`, but the latest version
  is recommended. Because of this, the `integer-simple` and `integer-gmp` flags are
  not needed.\r\n* Removed the `integer-gmp2` flag, as it supported a configuration
  that didn't actually compile on GHC\r\n* Removed the `transformers-four` flag, as
  it is not needed now that `transformers-compat` is a dependency\r\n\r\n# 0.5\r\n*
  Fix build for GHC 7.10, old GHC versions, and Windows\r\n* Removed the `Text.Show.Text.Data.Containers`
  and `Text.Show.Text.Data.Time` modules. The modules for the data types in `containers`
  and `time` were migrated to a separate library, `text-show-instances`.\r\n* Removed
  the `-ftext-format` flag, as `text-show` no longer uses `text-format`.\r\n* A [serious
  bug](https://github.com/bos/text/issues/99) in the `text` package that caused segfaults
  when building large `Integer`s was fixed in `text-1.2.0.2`. A flag (`-frecent-text`)
  was added that allows you to take advantage of this.\r\n* Fixed a bug that would
  cause the output of functions in the `Text.Show.Text.Data.Floating` module to not
  match `base` depending on what version of `base` is used.\r\n* The type signatures
  of lambda expressions generated by `mkShow` and related functions were loosened
  to allow them to be used to \"manually\" derive `Show` instances for data types
  with higher-kinded type parameters or type arguments with restricted `Show` instances.
  This should not be a breaking change; you can simply do more with `mkShow` et al.
  than you could before. For more information, see the documentation in `Text.Show.Text.TH`.\r\n*
  Loosened the `Show` instance of `Complex a` to only depend on `Show a` (previously
  required `RealFloat a`) if using base-4.4.0.0 or later\r\n* Moved `showbRatioPrec`
  to `Text.Show.Text.Data.Ratio`, `showbComplexPrec` to `Text.Show.Text.Data.Complex`,
  `showbProxy` to `Text.Show.Text.Data.Proxy`, and `showbFingerprint` to `Text.Show.Text.GHC.Fingerprint`\r\n*
  Added `deriveShowPragmas` to `Text.Show.Text.TH` to allow users to specify `INLINE`
  or `SPECIALIZE instance` pragmas with `Show` instances.\r\n* Added `FromStringShow`,
  `showbSpace`, `showbUnary`, `showbUnary1`, and `showbBinary1` to `Text.Show.Text`\r\n*
  Added `mkShowList`, `mkShowListLazy`, and `mkShowbList` to `Text.Data.Text.TH`\r\n*
  For base-4.8.0.0 and above, added the `Text.Show.Text.Data.Functor.Identity`, `Text.Show.Text.Data.Void`,
  `Text.Show.Text.GHC.RTS.Flags`, `Text.Show.Text.GHC.StaticPtr`, and `Text.Show.Text.Numeric.Natural`
  modules. Also added `Show` instances for `AllocationLimitExceeded` in `Text.Show.Text.Control.Exception`
  and `Alt` in `Text.Show.Text.Data.Monoid`. Also fixed the `Show` instance for `Fixed`
  values.\r\n* Added the `Text.Show.Text.Data.GHC.Conc.Windows` module (Windows-only)\r\n*
  Added the `Text.Show.Text.Data.OldTypeable` module for base-4.7\r\n* Added the `Text.Show.Text.GHC.TypeLits`
  module for base-4.6 and above\r\n* Added the `Text.Show.Text.Debug.Trace` and `Text.Show.Text.Debug.Trace.TH`
  modules as an analog to `Debug.Trace`\r\n* Added the `Show1` class and corresponding
  instances for unary type constructors.\r\n* Added `LitChar` and `LitString` to `Text.Show.Text.Data.Char`\r\n*
  Exported `asciiTabB` in `Text.Show.Text.Data.Char`\r\n* Renamed `showbTextStrict`
  to 'showbText' (to keep with naming conventions in the `text` library) and added
  `showbBuilder` to `Text.Show.Text.Data.Text`.\r\n\r\n## 0.4.1\r\n* Added the utility
  functions `toText` and `toString` for working with `Builder`s.\r\n\r\n# 0.4\r\n*
  Due to [GHC bug #5289](http://ghc.haskell.org/trac/ghc/ticket/5289), projects that
  depend on the `double-conversion` library (such as `text-format`, a dependency of
  `text-show`) may break due to GHC incorrectly linking against libstdc++. Therefore,
  `text-show` was changed so that it does not depend on `text-format` by default.
  This behavior can be changed by using the `-ftext-format` flag when using `cabal`.\r\n*
  Added `showbZonedTime` to `Text.Show.Text.Data.Time` (and corresponding `Show` instance
  for `ZonedTime`)\r\n* Exposed `showbMaskingState` (is was already there, I just
  forgot to export it)\r\n* If using GHC 7.6 or earlier, depend on tagged so that
  `Data.Proxy` (and thus `showbProxy` from `Text.Show.Text.Data.Typeable`) can be
  used\r\n* Refactored code to use Template Haskell derivations when possible\r\n\r\n##
  0.3.1.0\r\n* Added `showList` and `showListLazy`\r\n* Don't use `showbListDefault`
  to show `containers` data types\r\n* Added the ability to splice `show` functions
  for arbitrary data types (even if they aren't `Show` instances). These functions
  are `mkShow`, `mkShowLazy`, `mkShowPrec`, `mkShowPrecLazy`, `mkShowb`, `mkShowbPrec`,
  `mkPrint`, `mkPrintLazy`, `mkHPrint`, and `mkHPrintLazy`.\r\n\r\n# 0.3.0.0\r\n*
  Lots of bugfixes\r\n* `Show` instances for many other data types in `base`, `containers`
  and `time`\r\n* Exposed internal modules with monomorphic functions\r\n* `Text.Show.Text`
  now exports `Data.Text.Lazy.Builder` for convenience\r\n* Add `showLazy`, `showPrec`,
  `showPrecLazy`, `printLazy`, `hPrint`, `hPrintLazy`, `lengthB`, and `replicateB`\r\n*
  Template Haskell derivation of `Show` instances (doesn't support data families yet)\r\n\r\n#
  0.2.0.0\r\n* Added `Show` instances for strict and lazy `Text`\r\n\r\n# 0.1.0.0\r\n*
  Initial commit\r\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.2 && <5'
  text: ! '>=0.8 && <1.3'
  semigroups: ! '>=0.16.1 && <1'
  array: ! '>=0.3 && <0.6'
  integer-gmp: ! '>=1.0 && <1.1'
  ghc-prim: -any
  template-haskell: ! '>=2.4 && <2.11'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4'
- '0.4.1'
- '0.5'
- '0.6'
- '0.6.0.1'
- '0.7'
- '0.7.0.1'
latest: '0.7.0.1'
description-type: markdown
description: ! "# `text-show` [![Hackage version](https://img.shields.io/hackage/v/text-show.svg?style=flat)](http://hackage.haskell.org/package/text-show)
  [![Build Status](https://img.shields.io/travis/RyanGlScott/text-show.svg?style=flat)](https://travis-ci.org/RyanGlScott/text-show)\r\n\r\n`text-show`
  offers a replacement for the `Show` typeclass intended for use with `Text` instead
  of `String`s. This package was created in the spirit of [`bytestring-show`](http://hackage.haskell.org/package/bytestring-show).\r\n\r\nAt
  the moment, `text-show` provides `Show` instances for most data types in the [`array`](http://hackage.haskell.org/package/array),
  [`base`](http://hackage.haskell.org/package/base), [`bytestring`](http://hackage.haskell.org/package/bytestring),
  and [`text`](http://hackage.haskell.org/package/text) packages. Therefore, much
  of the source code for `text-show` consists of borrowed code from those packages
  in order to ensure that the behaviors of the two `Show` typeclasses coincide.\r\n\r\nFor
  most uses, simply importing `Text.Show.Text` will suffice:\r\n\r\n```haskell\r\nmodule
  Main where\r\n\r\nimport Data.Text (Text)\r\nimport Prelude hiding (Show(..), print)\r\nimport
  Text.Show.Text\r\n\r\nhello :: Text\r\nhello = show (Just \"Hello, World!\")\r\n\r\nmain
  :: IO ()\r\nmain = print hello\r\n```\r\n\r\nIf you desire it, there are also monomorphic
  versions of the `showb` function available in the submodules of `Text.Show.Text`.
  A naming convention is present in which functions that show different values depending
  on the precedence end with `Prec`(e.g., `showbIntPrec`), whereas functions that
  show the same values regardless of precedence do not end with `Prec` (e.g., `showbBool`).\r\n"
