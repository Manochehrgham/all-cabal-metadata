homepage: http://github.com/cjdev/test-fixture#readme
changelog-type: markdown
hash: 151f4801dbae7e9c2c79541aae4579501fb01487b87ebef9ed267f3487cb685a
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  test-fixture: -any
  mtl: -any
  transformers: -any
  hspec-discover: -any
  template-haskell: ! '>=2.10 && <2.12'
maintainer: jvargas@cj.com
synopsis: Test monadic side-effects
changelog: ! "# 0.4.2.0 (November 14, 2016)\n\n  - Attempting to generate a fixture
  for a multi-parameter typeclass now produces a better error message ([#24](https://github.com/cjdev/test-fixture/issues/24)).\n
  \ - Fixtures can now be generated for typeclasses containing infix operators as
  methods. They will be prefixed with a tilde (`~`) instead of an underscore ([#26](https://github.com/cjdev/test-fixture/issues/26)).\n"
basic-deps:
  base: ! '>=4.7 && <5'
  data-default: -any
  mtl: -any
  template-haskell: ! '>=2.10 && <2.12'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
author: Joe Vargas
latest: '0.4.2.0'
description-type: markdown
description: ! "# test-fixture [![Build Status](https://travis-ci.org/cjdev/test-fixture.svg?branch=master)](https://travis-ci.org/cjdev/test-fixture)\n\nThe
  [test-fixture][test-fixture-hackage] package is a Haskell library that makes it
  possible to easily write deterministic unit tests for code that encapsulates effects
  into monadic typeclasses. For example, given some typeclasses used to encapsulate
  effects:\n\n```haskell\nclass Monad m => MonadDB m where\n  fetchRecord :: DBRecord
  a => Id a -> m (Either DBError a)\n  insertRecord :: DBRecord a => a -> m (Either
  DBError (Id a))\n\nclass Monad m => MonadHTTP m where\n  sendRequest :: HTTPRequest
  -> m (Either HTTPError HTTPResponse)\n```\n\nOne can write `IO` instances to run
  the actual code in a real environment:\n\n```haskell\ninstance MonadDB IO where\n
  \ fetchRecord = Postgres.fetchRecord\n  insertRecord = Postgres.insertRecord\n\ninstance
  MonadHTTP IO where\n  sendRequest = sendRequestIO\n```\n\nThen use those typeclasses
  to implement some sort of side-effectful function:\n\n```haskell\nsendAndFetch ::
  (MonadDB m, MonadHTTP m, DBRecord a)\n             => HTTPRequest -> m (Either AppError
  a)\nsendAndFetch = ...\n```\n\nTesting this function might be difficult because
  of all the different possible combinations of scenarios that must be considered.
  Creating lots of different monads and instances for each case can be boilerplate-heavy
  and tedious. Using test-fixture, the boilerplate is unnecessary:\n\n```haskell\nmkFixture
  \"Fixture\" [''MonadDB, ''MonadHTTP]\n\nspec = describe \"sendAndFetch\" $ do\n
  \ it \"returns a record when the http request and db fetch are successful\" $ do\n
  \   let (fixture :: Monad m => Fixture m) = def\n      { _fetchRecord = \\_ -> return
  $ Right procureRecord\n      , _sendRequest = \\_ -> return $ Right responseOk\n
  \     }\n    let result = unTestFixture (sendAndFetch simpleRequest) fixture\n    result
  `shouldBe` Right (User \"someone@example.com\")\n\n  it \"returns an error when
  the http request is not successful\" $ do\n    let (fixture :: Monad m => Fixture
  m) = def\n      { _fetchRecord = \\_ -> return $ Right procureRecord\n      , _sendRequest
  = \\_ -> return $ Left errorNotAuthorized\n      }\n    let result = unTestFixture
  (sendAndFetch simpleRequest) fixture\n    result `shouldBe` Left (AppHTTPError errorNotAuthorized)\n```\n\nFor
  more information and a more complete explanation, [see the documentation on Hackage][test-fixture-hackage].\n\n[test-fixture-hackage]:
  http://hackage.haskell.org/package/test-fixture\n"
license-name: BSD3
