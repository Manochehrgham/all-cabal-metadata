homepage: ''
changelog-type: markdown
hash: 90c1ad18d2240b8fbf4f944e9623b2d3890cdf98e81846a83fda5a11a180bc00
test-bench-deps: {}
maintainer: libraries@haskell.org
synopsis: Support library for Template Haskell
changelog: ! "# Changelog for [`template-haskell` package](http://hackage.haskell.org/package/template-haskell)\n\n##
  2.11.0.0  *TBA*\n\n  * Bundled with GHC 8.0.1\n\n  * The compiler can now resolve
  infix operator fixities in types on its own.\n    The `UInfixT` constructor of `Type`
  is analoguous to `UInfixE` for expressions\n    and can contain a tree of infix
  type applications which will be reassociated\n    according to the fixities of the
  operators. The `ParensT` constructor can be\n    used to explicitly group expressions.\n\n
  \ * Add `namePackage` and `nameSpace`\n\n  * Make `dataToQa` and `dataToExpQ` able
  to handle `Data` instances whose\n    `toConstr` implementation relies on a function
  instead of a data\n    constructor (#10796)\n\n  * Add `Show` instances for `NameFlavour`
  and `NameSpace`\n\n  * Remove `FamilyD` and `FamFlavour`.  Add `DataFamilyD` and
  `OpenTypeFamilyD`\n    as the representation of data families and open type families\n
  \   respectively. (#6018)\n\n  * Add `TypeFamilyHead` for common elements of `OpenTypeFamilyD`
  and\n    `ClosedTypeFamilyD` (#10902)\n\n  * The `Strict` datatype was split among
  different datatypes: three for\n    writing the strictness information of data constructors'
  fields as denoted\n    in Haskell source code (`SourceUnpackedness` and `SourceStrictness`,
  as\n    well as `Bang`), and one for strictness information after a constructor
  is\n    compiled (`DecidedStrictness`). `Strict`, `StrictType` and `VarStrictType`\n
  \   have been deprecated in favor of `Bang`, `BangType` and `VarBangType`, and\n
  \   three functions (`isStrict`, `isLazy`, and `unpack`) were removed because\n
  \   they no longer serve any use in this new design. (#10697)\n\n  * Add `reifyConStrictness`
  to query a data constructor's `DecidedStrictness`\n    values for its fields (#10697)\n\n
  \ * The `ClassOpI`, `DataConI`, and `VarI` constructors no longer have a\n    `Fixity`
  field. Instead, all `Fixity` information for a given `Name` is\n    now determined
  through the `reifyFixity` function, which returns `Just` the\n    fixity if there
  is an explicit fixity declaration for that `Name`, and\n    `Nothing` otherwise
  (#10704 and #11345)\n\n  * Add `MonadFail Q` instance for GHC 8.0 and later (#11661)\n\n
  \ * TODO: document API changes and important bugfixes\n\n  * Add support for OVERLAP(S/PED/PING)
  pragmas on instances\n\n\n## 2.10.0.0  *Mar 2015*\n\n  * Bundled with GHC 7.10.1\n
  \ * Remove build-dependency on `containers` package\n  * Make `Pred` a type synonym
  of `Type`, and deprecate `classP`/`equalP` (#7021)\n  * Add support for `LINE` pragma
  via `prageLineD` and `LineP`\n  * Replace `Int#` with `!Int` in `NameFlavour` constructors\n
  \ * Derive `Generic` for TH types (#9527)\n  * Add `standaloneDerivD` (#8100)\n
  \ * Add support for generic default signatures via `defaultSigD` (#9064)\n  * Add
  `Lift` instances for `()` and `Rational`\n  * Derive new `Show` and `Data` instances
  for `Loc`\n  * Derive `Eq` instances for `Loc`, `Info`, and `ModuleInfo`\n  * Make
  calling conventions available in template haskell consistent\n    with those from
  GHC (#9703)\n  * Add support for `-XStaticValues` via `staticE`\n  * Add `Ord` instances
  to TH types\n  * Merge some instances from `th-orphans` (`Ppr` instances for `Lit`\n
  \   and `Loc` as well as `Lift` instances for numeric types\n  * Put parens around
  `(ty :: kind)` when pretty-printing TH syntax\n"
basic-deps:
  base: ! '>=4.7 && <4.10'
  ghc-boot-th: ==8.0.*
  pretty: ==1.1.*
all-versions:
- '2.2.0.0'
- '2.3.0.0'
- '2.3.0.1'
- '2.4.0.0'
- '2.4.0.1'
- '2.5.0.0'
- '2.6.0.0'
- '2.7.0.0'
- '2.8.0.0'
- '2.9.0.0'
- '2.10.0.0'
- '2.11.0.0'
author: ''
latest: '2.11.0.0'
description-type: haddock
description: ! 'This package provides modules containing facilities for manipulating

  Haskell source code using Template Haskell.


  See <http://www.haskell.org/haskellwiki/Template_Haskell> for more

  information.'
license-name: BSD3
