homepage: https://github.com/roman/Haskell-teardown#readme
changelog-type: markdown
hash: 426db411eaa53c641ea62d2f76f863d9925b0c1db48d657dac94b9fc8eec8de3
test-bench-deps:
  tasty-smallcheck: -any
  base: ! '>=4.8 && <5'
  time: -any
  text: -any
  teardown: -any
  safe-exceptions: -any
  tasty-hspec: -any
  criterion: ! '>=1.1 && <1.3'
  doctest: -any
  protolude: -any
  tasty-hunit: -any
  tasty-rerun: -any
  tasty: -any
  QuickCheck: -any
  Glob: -any
maintainer: romanandreg@gmail.com
synopsis: Build composable components for your application with clear teardown semantics
changelog: ! "Change log\n==========\n\nteardown uses [Semantic Versioning][1].\nThe
  change log is available [on GitHub][2].\n\n[1]: http://semver.org/spec/v2.0.0.html\n[2]:
  https://github.com/roman/Haskell-teardown/libraries/teardown/CHANGELOG.md\n\n##
  v0.3.0.0\n\n* Bump from lts-9.1 to lts-9.5\n* Add `Control.Monad.Component` module\n*
  Add `Control.Teardown.Tutorial` module\n* Add `IResource` instance for `[Teardown]`\n\n##
  v0.2.0.0\n\n* Bump from lts-8.21 to lts-9.1\n* Re-organize test files to support
  nightly (GHC-8.2)\n* Drop support for lts-6 (GHC-7.10)\n* Bump dependencies for
  `time`, `QuickCheck`, `protolude` and `doctest`\n* Add NFData instance for `TeardownResult`
  record\n* Add travisCI builder for nightly\n\n## v0.1.0.1\n\n* Add benchmark to
  compare with vanilla IO unit\n* Bump version of `criterion` to `1.2`\n\n## v0.1.0.0\n\n>
  BREAKING CHANGES\n\n* Relax Glob dependency bounds\n* Add `IResource` typeclass
  and make `newTeardown` part of it\n* Remove `concatTeardown` and `newDynTeardown`
  functions in favor of\n  overloades of `IResource`\n* Update TestSuite\n* Update
  Example\n\n## v0.0.0.2\n\n* Add haddock documentation to modules\n\n## v0.0.0.1\n\n*
  First release of teardown library\n"
basic-deps:
  exceptions: -any
  ansi-wl-pprint: -any
  base: ! '>=4.8 && <5'
  time: -any
  text: -any
  safe-exceptions: -any
  protolude: -any
  deepseq: -any
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.3.0.0'
author: Roman Gonzalez
latest: '0.3.0.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/teardown.svg)](https://img.shields.io/hackage/v/teardown.svg)\n[![Stackage
  LTS](http://stackage.org/package/teardown/badge/lts)](http://stackage.org/lts/package/teardown)\n[![Stackage
  Nightly](http://stackage.org/package/teardown/badge/nightly)](http://stackage.org/nightly/package/teardown)\n#
  \U0001F5D1️  teardown\n\n> Composable, idempotent & transparent application resource
  cleanup sub-routines\n\n## Table Of Contents\n\n* [Raison d'etre](#raison-detre)\n*
  [Development](#development)\n* [Documentation](#documentation)\n* [License](#license)\n*
  [Report teardown sub-routine results](#report-teardown-sub-routine-tree-with-results)\n\n##
  Raison d'etre\n\nThe _correct_ teardown of a system becomes a crucial matter when
  running\napplications through GHCi while doing REPL driven development; this library\nprovides
  a stable API to manage the cleanup process of resources your\napplication allocates
  when it starts up.\n\nOne could naively implement a teardown sub-routine of an application
  by doing\nsomething like the following:\n\n```haskell\n-- All functions in this
  example initialize hypothetical resources, the\n-- idea stands that there is a way
  to allocate a system resource\n-- using some sort of configuration record, and there
  is a\n-- sub-routine to release those resources once the application\n-- shuts down\n\ninitDb
  :: Logger -> DbConnInfo -> IO (DbConn, IO ())\ninitDb logger connInfo = do\n  conn
  <- newConn connInfo\n  return (conn, info logger \"Teardown Database\" >> closeConn
  conn)\n\ninitTcpServer :: Logger -> ServerInfo -> IO (Socket, IO ())\ninitTcpServer
  logger serverInfo = do\n  socket <- startServer serverInfo\n  return (socket, info
  logger \"Teardown Tcp Server\" >> closeSocket socket)\n\ninitApp :: Logger -> DbConnInfo
  -> ServerInfo -> IO (IO ())\ninitApp logger connInfo serverInfo = do\n  (connInfo,
  teardownDb) <- initDb logger connInfo\n  (serverInfo, teardownSocket) <- initTcpServer
  logger serverInfo\n  -- do something with connInfo and serverInfo ...\n  return
  (info logger \"Teardown Application\"\n          >> teardownDb\n          >> teardownSocket)\n```\n\nThe
  previous implementation does not address a few concerns:\n\n* If for some reason
  we execute the @IO ()@ sub-routine returned by the\n  @initApp@ function more than
  once, there is likely going to be a runtime\n  exception of the \"already closed
  resource\" nature. This library ensures that\n  teardown sub-routines are executed
  /exactly/ once, even on the scenario where\n  we execute the teardown procedure
  multiple times.\n\n* The teardown of sub-systems can be built and composed via the
  @(>>)@ operator,\n  what happens if the @teardownDb@ sub-routine in the previous
  example throws an\n  exception? Likely other resource teardown sub-routines are
  going to be\n  affected. This library ensures that errors are isolated from every
  other\n  resource teardown sub-routines.\n\n* All teardown sub-routines use a description
  argument to keep track of what is\n  being cleaned up; By requiring this, we avoid
  confusion around what is going\n  on when shutting down an application. This library
  makes this documentation a\n  /required/ argument when building teardown sub-routines,
  thus helping\n  trace-ability.\n\n* You may notice the structure of teardown sub-routines
  form a tree shape. This\n  library provides a data structure representation of this
  tree that allows the\n  developer to report all teardown sub-routines in hierarchy
  order, with other\n  details around if sub-routines failed (or not).\n\n* Also,
  this library keeps track how much time every teardown sub-routine takes,\n  allowing
  the developer to learn which parts of the teardown procedure are slow\n  and adequately
  address those on development time (e.g., Faster reload =>\n  Faster development
  feedback loops).\n\nBy using this library, you may implement without much effort
  a good, reliable\nand transparent strategy for application resource teardown sub-routines.\n\n##
  Documentation\n\nTo learn more about the library, please refer to the documentation
  in Hackage for\n\n* [Teardown](http://hackage.haskell.org/package/teardown-0.3.0.0/docs/Control-Teardown-Tutorial.html)\n\n*
  [ComponentM](#) [pending]\n\n## Development\n[![Build Status](https://travis-ci.org/roman/Haskell-teardown.svg?branch=master)](https://travis-ci.org/roman/Haskell-teardown)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/teardown.svg)](http://packdeps.haskellers.com/feed?needle=teardown)\n[![Github](https://img.shields.io/github/commits-since/roman/haskell-teardown/v0.3.0.0.svg)](https://img.shields.io/github/commits-since/roman/haskell-teardown/v0.3.0.0.svg)\n\n\nThis
  library is intended to be minimal, providing a few functions that work\nreliably
  among many different kind of projects. If you want to contribute,\nPull Request
  are very welcome! Please try to follow these simple rules:\n\n* Please create a
  topic branch for every separate change you make.\n* Update the README.md file if
  necessary.\n* Please _do not_ change the version number on your Pull Request.\n\n###
  Open Commit Bit\n\nThis project has an open commit bit policy: Anyone with an accepted
  pull request\ngets added as a repository collaborator. Please try to follow these
  simple\nrules:\n\n* Commit directly onto the master branch only for typos, improvements
  to the\n  README and documentation.\n* Create a feature branch and open a pull-request
  early for any new features to\n  get feedback.\n* Make sure you adhere to the general
  pull request rules above.\n\n## License\n\nCopyright (c) 2027, Roman Gonzalez\n\nPermission
  to use, copy, modify, and/or distribute this software for any\npurpose with or without
  fee is hereby granted, provided that the above\ncopyright notice and this permission
  notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR
  DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
  OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY
  SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING
  FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE
  OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE
  OF THIS SOFTWARE.\n"
license-name: MIT
