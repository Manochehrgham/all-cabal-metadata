homepage: http://github.com/klappvisor/haskell-telegram-api#readme
changelog-type: ''
hash: 0d82b1b73e898b9ed22da6c2c55960069cd7b7813331f0b0a47ae5a9e679eb82
test-bench-deps:
  telegram-api: -any
  base: -any
  servant-client: -any
  hspec: -any
  text: -any
  filepath: -any
  servant: -any
  http-types: -any
maintainer: alex.rodiontsev@gmail.com
synopsis: Telegram Bot API bindings
changelog: ''
basic-deps:
  http-client: -any
  either: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  servant-client: ==0.4.*
  text: -any
  servant: ==0.4.*
  mime-types: -any
  transformers: -any
  string-conversions: -any
  http-types: -any
  aeson: -any
  http-media: -any
all-versions:
- '0.1.0.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.3.0.0'
- '0.3.1.0'
author: Alexey Rodiontsev
latest: '0.3.1.0'
description-type: markdown
description: ! "# telegram-api\r\n\r\n[![Join the chat at https://gitter.im/klappvisor/haskell-telegram-api](https://badges.gitter.im/klappvisor/haskell-telegram-api.svg)](https://gitter.im/klappvisor/haskell-telegram-api?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n![Build
  Status](https://img.shields.io/circleci/project/klappvisor/haskell-telegram-api.svg)\r\n![Hackage](https://img.shields.io/hackage/v/telegram-api.svg)\r\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/telegram-api.svg)\r\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\r\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\r\n\r\nHigh-level
  bindings to the [Telegram Bot API][telegram-bot-api] based on [servant][servant]
  library. \r\nBoth `getUpdates` request or webhook can be used to receive updates
  for your bot. \r\nInline mode is supported.\r\nUploading stickers, documents, video,
  etc is not supported yet, but you can send items which are already uploaded on the
  Telegram servers.\r\n\r\nSee list of supported methods below in TODO section.\r\n\r\n##
  Usage\r\n\r\n`getMe` example\r\n\r\n```haskell\r\nimport Control.Monad\r\nimport
  qualified Data.Text.IO as T\r\nimport Data.Maybe\r\nimport Web.Telegram.API.Bot\r\n\r\nmain
  :: IO ()\r\nmain = do\r\n  Right GetMeResponse { user_result = u } <-\r\n    getMe
  token\r\n  T.putStrLn (user_first_name u)\r\n  where token = Token \"bot<token>\"
  -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\r\n```\r\n\r\n`sendMessage`
  example\r\n\r\n```haskell\r\nimport Control.Monad\r\nimport qualified Data.Text.IO
  as T\r\nimport Data.Maybe\r\nimport Web.Telegram.API.Bot\r\n\r\nmain :: IO ()\r\nmain
  = do\r\n  Right MessageResponse { message_result = m } <-\r\n    sendMessage token
  (SendMessageRequest chatId message (Just Markdown) Nothing Nothing Nothing)\r\n
  \ T.putStrLn (message_id m)\r\n  T.putStrLn (text m)\r\n  where token = Token \"bot<token>\"
  -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\r\n        chatId
  = \"<chat_id> or <@channelusername>\" \r\n        message = \"text *bold* _italic_
  [github](github.com/klappvisor/haskell-telegram-api)\"\r\n```\r\n\r\n## Contribution\r\n\r\nContributions
  are welcome!\r\n\r\n1. Fork repository\r\n2. Do some changes\r\n3. Create pull request\r\n4.
  Wait for CI build and review\r\n5. ??????\r\n6. PROFIT\r\n\r\nYou can use `stack`
  to build project\r\n\r\n```\r\nstack build\r\n```\r\n\r\nTo run test you have to
  create your own bot. Go to [BotFather](https://telegram.me/botfather) and create
  the bot. As the result you will have private bot's access token. Keep it safe!\r\n\r\n```\r\nstack
  test --test-arguments \"$BOT_TOKEN $CHAT_ID $BOT_NAME\"\r\n```\r\n\r\nwhere\r\n\r\n*
  `$BOT_TOKEN` is token obtained from BotFather with prefix `<token from BotFather>`\r\n*
  `$CHAT_ID` can be id of your chat with your bot. Send some message to this chat
  in Telegram and do `curl \"https://api.telegram.org/bot<replace_with_token>/getUpdates\"`,
  you have to parse some JSON with your brain ;-) or any other suitable tool and you
  will find chat id there.\r\n* `$BOT_NAME` name of your bot\r\n\r\nNote: Inline Spec
  is disabled for now...\r\n\r\nIf everything is fine after test you will see receive
  a few new messages from your bot.\r\n\r\n## TODO\r\n\r\n* Uploading of Files, Documents,
  Stickers, etc\r\n\r\n### Methods\r\n\r\n##### Currently supported:\r\n\r\n* `getMe`\r\n*
  `sendMessage`\r\n* `forwardMessage`\r\n* `sendPhoto` - without upload\r\n* `sendAudio`
  - without upload\r\n* `sendDocument` - without upload\r\n* `sendSticker` - without
  upload\r\n* `sendVideo` - without upload\r\n* `sendVoice` - without upload\r\n*
  `sendLocation`\r\n* `getUpdates`\r\n* `getFile`\r\n* `sendChatAction`\r\n* `getUserProfilePhotos`\r\n*
  `setWebhook` - without uploading certificate\r\n* `answerInlineQuery`\r\n\r\n#####
  To be done:\r\n\r\n* `sendPhoto` - upload photo\r\n* `sendAudio` - upload audio\r\n*
  `sendDocument` - upload documents\r\n* `sendSticker` - upload stickers\r\n* `sendVideo`
  - upload video\r\n* `sendVoice` - upload voice\r\n* `setWebhook` - upload certificate\r\n\r\n[telegram-bot-api]:
  https://core.telegram.org/bots/api\r\n[servant]: https://haskell-servant.github.io/\r\n"
license-name: BSD3
