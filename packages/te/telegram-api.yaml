homepage: http://github.com/klappvisor/haskell-telegram-api#readme
changelog-type: markdown
hash: ca961b5a8a444ec984cdb2d452cfbc850013dc7b389c670478c43739ef1c0057
test-bench-deps:
  http-client: ! '>=0.5 && <0.6'
  telegram-api: -any
  ansi-wl-pprint: -any
  base: -any
  servant-client: ! '>=0.9 && <0.10'
  hspec: -any
  text: -any
  filepath: -any
  servant: ! '>=0.9 && <0.10'
  utf8-string: -any
  hjpath: -any
  http-client-tls: -any
  transformers: -any
  optparse-applicative: -any
  http-types: -any
  aeson: ==1.0.*
maintainer: alex.rodiontsev@gmail.com
synopsis: Telegram Bot API bindings
changelog: ! "## 0.6.0.0\r\n\r\n* Added `TelegramClient`, see example of usage in
  README.md\r\n* Changes from December update of Telegram Bot API\r\n* `TelegramBotAPI`
  splitted in separate sub-types  \r\n\r\n## 0.5.2.0\r\n\r\nFeatures:\r\n\r\n* Added
  webhook methods such as getWebhookInfo, deleteWebhook, etc.\r\n* Changes to update
  api\r\n* Added sendGame  \r\n\r\n## 0.5.1.1\r\n\r\nUpdated to use servant-0.9 and
  aeson-1.0\r\n\r\n## 0.5.0.0 [Breaking]\r\n\r\nFeatures:\r\n\r\n* **[Breaking]**
  Changed `Response` data record to be generic\r\n* Added certificate upload to set
  web-hook method for self-signed certificates\r\n\r\nBugfixes:\r\n\r\n* Removed `O2`
  tag from cabal file\r\n\r\n## 0.4.3.1\r\n\r\nBugfixes:\r\n\r\n* Exposed `MessageEntity`\r\n\r\n##
  0.4.3.0\r\n\r\nFeatures:\r\n\r\n* Added Inline Keyboard to messages\r\n\r\n## 0.4.2.0\r\n\r\nFeatures:\r\n\r\n*
  Bot-2.1 support\r\n  * Added new methods: `getChat`, `leaveChat`, `getChatAdministrators`,
  `getChatMember`, `getChatMembersCount`.\r\n  * Added support for edited messages
  and new mentions from Telegram v.3.9. New fields: `edited_message` in `Update`,
  `edit_date` in `Message, user in `MessageEntity`. New value `text_mention` for the
  type field in `MessageEntity`.\r\n\r\n## 0.4.1.0\r\n\r\nFeatures:\r\n\r\n* Implemented
  file uploading for audio, voice, sticker, video and documents\r\n\r\nBugfixes:\r\n\r\n*
  Exposed constrictors for inline edit requests\r\n\r\n## 0.4.0.1\r\n\r\nBugfixes:\r\n\r\n*
  Parsing issue with answer callback query response\r\n\r\n## 0.4.0.0 [Breaking]\r\n\r\nFeatures:\r\n\r\n*
  Bot-2.0 API support is almost complete. Everything from [announce](https://core.telegram.org/bots/2-0-intro)
  is on place except file upload (works for photo BTW).\r\n  * Inline keyboards\r\n
  \ * Updating messages\r\n  * Send Location and Phone number\r\n  * Inline Bots 2.0\r\n
  \ * Group Admins\r\n  * and many others\r\n* Added new and more convenient way to
  create request data records avoiding many optional parameters.\r\n* migrated to
  servant 0.7.*\r\n\r\n## 0.3.1.0\r\n\r\nFeatures:\r\n\r\n* Added possibility to upload
  and send photo\r\n\r\n## 0.3.0.0\r\n\r\nBugfixes:\r\n\r\n* *[Breaking]* Changed
  User to be optional in `from` field of the `Message` data record since sender can
  be empty for messages sent to channels\r\n\r\n## 0.2.1.1\r\n\r\nBugfixes:\r\n\r\n*
  Minor fix of chat action deserialization code\r\n\r\n## 0.2.1.0\r\n\r\nFeatures:\r\n\r\n*
  Added reply keyboard\r\n\r\n## 0.2.0.0\r\n\r\nFeatures:\r\n\r\n* Main functionality
  is on place except content upload.\r\n* Inline mode added\r\n"
basic-deps:
  http-client: ! '>=0.5 && <0.6'
  bytestring: -any
  base: ! '>=4.7 && <5'
  servant-client: ! '>=0.9 && <0.10'
  text: -any
  http-api-data: -any
  servant: ! '>=0.9 && <0.10'
  mime-types: -any
  mtl: ! '>=2.2 && <2.3'
  transformers: -any
  string-conversions: -any
  http-types: -any
  aeson: ==1.0.*
  http-media: -any
all-versions:
- '0.1.0.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.3.1'
- '0.5.0.0'
- '0.5.0.1'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.2.0'
- '0.6.0.0'
author: Alexey Rodiontsev
latest: '0.6.0.0'
description-type: markdown
description: ! "# telegram-api\r\n\r\n[![Join the chat at https://gitter.im/klappvisor/haskell-telegram-api](https://badges.gitter.im/klappvisor/haskell-telegram-api.svg)](https://gitter.im/klappvisor/haskell-telegram-api?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n![Build
  Status](https://img.shields.io/circleci/project/klappvisor/haskell-telegram-api.svg)\r\n![Hackage](https://img.shields.io/hackage/v/telegram-api.svg)\r\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/telegram-api.svg)\r\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\r\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\r\n\r\nHigh-level
  bindings to the [Telegram Bot API][telegram-bot-api] based on [servant][servant]
  library.\r\nBoth `getUpdates` request or webhook can be used to receive updates
  for your bot.\r\nInline mode is supported.\r\nUploading stickers, documents, video,
  etc is not supported yet, but you can send items which are already uploaded on the
  Telegram servers.\r\n\r\n**Support of [Bot-2.0 API][bot-2.0]**\r\n\r\n## Usage\r\n\r\nThere
  are two ways of using Telegram Bot API. First and original way is to run IO directly
  for every Telegram servers request, another one is based on `TelegramClient` which
  is just `ReaderT`.\r\n\r\n### Use `TelegramClient`\r\n\r\n```haskell\r\n{-# LANGUAGE
  OverloadedStrings #-}\r\n\r\nimport           Network.HTTP.Client      (newManager)\r\nimport
  \          Network.HTTP.Client.TLS  (tlsManagerSettings)\r\nimport           Web.Telegram.API.Bot\r\nimport
  \          Control.Monad            (when)\r\n\r\nmain :: IO ()\r\nmain = do\r\n
  \ let token = Token \"bot<token>\" -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\r\n
  \ manager <- newManager tlsManagerSettings\r\n  result <- runClient ( do\r\n    info
  <- getWebhookInfoM\r\n    let request = setWebhookRequest' \"https://example.com/hook\"\r\n
  \   isSet <- setWebhookM request\r\n    getMeM) token manager\r\n  print result\r\n
  \ print \"done!\"\r\n```\r\n\r\n### Runing IO directly\r\n\r\n`getMe` example\r\n\r\n```haskell\r\n{-#
  LANGUAGE OverloadedStrings #-}\r\n\r\nimport           Network.HTTP.Client      (newManager)\r\nimport
  \          Network.HTTP.Client.TLS  (tlsManagerSettings)\r\nimport           Web.Telegram.API.Bot\r\n\r\nmain
  :: IO ()\r\nmain = do\r\n  manager <- newManager tlsManagerSettings\r\n  res <-
  getMe token manager\r\n  case res of\r\n    Left e -> do\r\n      putStrLn \"Request
  failed\"\r\n      print e\r\n    Right Response { result = u } -> do\r\n      putStrLn
  \"Request succeded\"\r\n      print $ user_first_name u\r\n  where token = Token
  \"bot<token>\" -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\r\n```\r\n\r\n`sendMessage`
  example\r\n\r\n```haskell\r\n{-# LANGUAGE OverloadedStrings #-}\r\n\r\nimport           Network.HTTP.Client
  \     (newManager)\r\nimport           Network.HTTP.Client.TLS  (tlsManagerSettings)\r\nimport
  \          Web.Telegram.API.Bot\r\n\r\nmain :: IO ()\r\nmain = do\r\n  manager <-
  newManager tlsManagerSettings\r\n  let request = sendMessageRequest chatId message\r\n
  \ res <- sendMessage token request manager\r\n  case res of\r\n    Left e -> do\r\n
  \     putStrLn \"Request failed\"\r\n      print e\r\n    Right Response { result
  = m } -> do\r\n      putStrLn \"Request succeded\"\r\n      print $ message_id m\r\n
  \     print $ text m\r\n  where token = Token \"bot<token>\" -- entire Token should
  be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\r\n        chatId = \"<chat_id>
  or <@channelusername>\"\r\n        message = \"text *bold* _italic_ [github](github.com/klappvisor/haskell-telegram-api)\"\r\n```\r\n\r\n####
  Note on requests:\r\n\r\nMany request data records have a lot of optional parameters
  which are usually redundant.\r\nThere are two ways to create requests:\r\n\r\nWith
  data type constructor:\r\n```haskell\r\nlet request = SendMessageRequest \"chatId\"
  \"text\" Nothing (Just True) Nothing Nothing Nothing\r\n```\r\nUsing default instance:\r\n\r\n```haskell\r\nlet
  request = sendMessageRequest \"chatId\" \"text\" -- only with required fields\r\n```\r\n\r\n```haskell\r\nlet
  request = (sendMessageRequest \"chatId\" \"text\") {\r\n  message_disable_notification
  = Just True -- with optional fields\r\n}\r\n```\r\n\r\n## Contribution\r\n\r\nContributions
  are welcome!\r\n\r\n1. Fork repository\r\n2. Do some changes\r\n3. Create pull request\r\n4.
  Wait for CI build and review\r\n5. ??????\r\n6. PROFIT\r\n\r\nBear in mind that
  the CI build won't run integration test suite against your pull request since the
  necessary environment\r\nvariables (`$BOT_TOKEN`, `$CHAT_ID` and `$BOT_NAME`) aren't
  exported when a fork\r\nstarts the build (for security reasons). If you do want
  to run them before creating RP, you can setup integration of your fork\r\nwith CircleCI.\r\n\r\nYou
  can use `stack` to build project\r\n\r\n```\r\nstack build\r\n```\r\n\r\nTo run
  test you have to create your own bot. Go to [BotFather](https://telegram.me/botfather)
  and create the bot. As the result you will have private bot's access token. Keep
  it safe!\r\n\r\n```\r\nstack test --test-arguments \"--integration -t BOT_TOKEN
  -c CHAT_ID -b BOT_NAME -- HSPEC_ARGS\"\r\n```\r\n\r\nwhere\r\n\r\n* `BOT_TOKEN`
  is the token obtained from BotFather\r\n* `CHAT_ID` can be id of your chat with
  your bot. Send some messages to this chat in Telegram and do `curl \"https://api.telegram.org/bot<replace_with_token>/getUpdates\"`,
  you'll have to parse some JSON with your brain ;-) or any other suitable tool and
  you will find chat id there.\r\n* `BOT_NAME` is the name of your bot\r\n* `HSPEC_ARGS`
  are the normal `hspec` arguments you can find [here][hspec-args]\r\n\r\nThe help
  option is available for the tests and for hspec:\r\n\r\n```\r\nstack test --test-arguments
  \"-h\"\r\nstack test --test-arguments \"--integration -t BOT_TOKEN -c CHAT_ID -b
  BOT_NAME -- -h\"\r\n```\r\n\r\nNote: Inline Spec is disabled for now...\r\n\r\nIf
  everything is fine after running the tests you will receive a few new messages from
  your bot.\r\n\r\n[telegram-bot-api]: https://core.telegram.org/bots/api\r\n[servant]:
  https://haskell-servant.github.io/\r\n[hspec-args]: https://hspec.github.io/running-specs.html\r\n[bot-2.0]:
  https://core.telegram.org/bots/2-0-intro\r\n"
license-name: BSD3
