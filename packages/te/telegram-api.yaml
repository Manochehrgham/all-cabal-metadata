homepage: http://github.com/klappvisor/haskell-telegram-api#readme
changelog-type: ''
hash: 879de5a447cbd50d7563e56a560b830285aea9e8fa908232010607e7639ac528
test-bench-deps:
  telegram-api: -any
  base: -any
  servant-client: -any
  hspec: -any
  text: -any
  servant: -any
  http-types: -any
maintainer: alex.rodiontsev@gmail.com
synopsis: Telegram Bot API bindings
changelog: ''
basic-deps:
  either: -any
  base: ! '>=4.7 && <5'
  servant-client: -any
  text: -any
  servant: -any
  aeson: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Alexey Rodiontsev
latest: '0.1.0.1'
description-type: markdown
description: ! "# telegram-api\r\n\r\n![Build Status](https://img.shields.io/circleci/project/klappvisor/haskell-telegram-api.svg)\r\n![Hackage](https://img.shields.io/hackage/v/telegram-api.svg)\r\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/telegram-api.svg)\r\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\r\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\r\n\r\nHigh-level
  bindings to the [Telegram Bots API][telegram-bot-api] based on [servant][servant]
  library. \r\nCurrently supports only one way of receiving updates based on [`getUpdates`](https://core.telegram.org/bots/api#getupdates)
  method.\r\nUploading stickers, documents, video, etc is not supported yet, so you
  can only send items which are already uploaded on the Telegram servers.\r\nSee list
  of supported methods below in TODO section.\r\n\r\n## Usage\r\n\r\n`getMe` example\r\n\r\n```haskell\r\nimport
  Control.Monad\r\nimport qualified Data.Text.IO as T\r\nimport Data.Maybe\r\nimport
  Telegram.API.Data\r\nimport Telegram.API.Responses\r\nimport Telegram.API.Bot\r\n\r\nmain
  :: IO ()\r\nmain = do\r\n  Right GetMeResponse { user_result = u } <-\r\n    getMe
  token\r\n    T.putStrLn (user_first_name u)\r\n  where token = Token \"bot<token>\"
  -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\r\n```\r\n\r\n`sendMessage`
  example\r\n\r\n```haskell\r\nimport Control.Monad\r\nimport qualified Data.Text.IO
  as T\r\nimport Data.Maybe\r\nimport Telegram.API.Data\r\nimport Telegram.API.Requests\r\nimport
  Telegram.API.Responses\r\nimport Telegram.API.Bot\r\n\r\nmain :: IO ()\r\nmain =
  do\r\n  Right MessageResponse { message_result = m } <-\r\n    sendMessage token
  (SendMessageRequest chatId message (Just Markdown) Nothing Nothing)\r\n    T.putStrLn
  (message_id m)\r\n    T.putStrLn (text m)\r\n  where token = Token \"bot<token>\"
  -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\r\n        chatId
  = \"<chat_id> or <@channelusername>\" \r\n        message = \"text *bold* _italic_
  [github](github.com/klappvisor/haskell-telegram-api)\"\r\n```\r\n\r\n## TODO\r\n\r\n###
  General\r\n\r\n* `reply_markup` is skipped for all methods \r\n* Inline mode is
  not supported yet\r\n* Uploading of Files, Documents, Stickers, etc\r\n\r\n### Methods\r\n\r\n#####
  Currently supported:\r\n\r\n* `getMe`\r\n* `sendMessage`\r\n* `forwardMessage`\r\n*
  `sendPhoto` - without upload\r\n* `sendAudio` - without upload\r\n* `sendDocument`
  - without upload\r\n* `sendSticker` - without upload\r\n* `sendVideo` - without
  upload\r\n* `sendVoice` - without upload\r\n* `sendLocation`\r\n* `getUpdates`\r\n*
  `getFile`\r\n* `sendChatAction`\r\n* `getUserProfilePhotos`\r\n* `setWebhook` -
  without uploading certificate\r\n\r\n##### To be done:\r\n\r\n* `sendPhoto` - upload
  photo\r\n* `sendAudio` - upload audio\r\n* `sendDocument` - upload documents\r\n*
  `sendSticker` - upload stickers\r\n* `sendVideo` - upload video\r\n* `sendVoice`
  - upload voice\r\n* `setWebhook` - upload certificate\r\n* `answerInlineQuery` inline
  bots\r\n\r\n[telegram-bot-api]: https://core.telegram.org/bots/api\r\n[servant]:
  https://haskell-servant.github.io/\r\n"
license-name: BSD3
