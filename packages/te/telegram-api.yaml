homepage: http://github.com/klappvisor/haskell-telegram-api#readme
changelog-type: markdown
hash: b27359de9a1835e10f91ce5536b3ad00a688553019dd0bb6bbd37fb4fb9d21cc
test-bench-deps:
  http-client: ! '>=0.5 && <0.6'
  telegram-api: -any
  ansi-wl-pprint: -any
  base: -any
  servant-client: ! '>=0.9 && <0.10'
  hspec: -any
  text: -any
  filepath: -any
  servant: ! '>=0.9 && <0.10'
  utf8-string: -any
  hjpath: -any
  http-client-tls: -any
  transformers: -any
  optparse-applicative: -any
  http-types: -any
  aeson: ==1.0.*
maintainer: alex.rodiontsev@gmail.com
synopsis: Telegram Bot API bindings
changelog: ! "## 0.5.0.0 [Breaking]\n\nFeatures:\n\n* **[Breaking]** Changed `Response`
  data record to be generic\n* Added certificate upload to set web-hook method for
  self-signed certificates\n\nBugfixes:\n\n* Removed `O2` tag from cabal file\n\n##
  0.4.3.1\n\nBugfixes:\n\n* Exposed `MessageEntity`\n\n## 0.4.3.0\n\nFeatures:\n\n*
  Added Inline Keyboard to messages\n\n## 0.4.2.0\n\nFeatures:\n\n* Bot-2.1 support\n
  \ * Added new methods: `getChat`, `leaveChat`, `getChatAdministrators`, `getChatMember`,
  `getChatMembersCount`.\n  * Added support for edited messages and new mentions from
  Telegram v.3.9. New fields: `edited_message` in `Update`, `edit_date` in `Message,
  user in `MessageEntity`. New value `text_mention` for the type field in `MessageEntity`.\n\n##
  0.4.1.0\n\nFeatures:\n\n* Implemented file uploading for audio, voice, sticker,
  video and documents\n\nBugfixes:\n\n* Exposed constrictors for inline edit requests\n\n##
  0.4.0.1\n\nBugfixes:\n\n* Parsing issue with answer callback query response\n\n##
  0.4.0.0 [Breaking]\n\nFeatures:\n\n* Bot-2.0 API support is almost complete. Everything
  from [announce](https://core.telegram.org/bots/2-0-intro) is on place except file
  upload (works for photo BTW).\n  * Inline keyboards\n  * Updating messages\n  *
  Send Location and Phone number\n  * Inline Bots 2.0\n  * Group Admins\n  * and many
  others\n* Added new and more convenient way to create request data records avoiding
  many optional parameters.\n* migrated to servant 0.7.*\n\n## 0.3.1.0\n\nFeatures:\n\n*
  Added possibility to upload and send photo\n\n## 0.3.0.0\n\nBugfixes:\n\n* *[Breaking]*
  Changed User to be optional in `from` field of the `Message` data record since sender
  can be empty for messages sent to channels\n\n## 0.2.1.1\n\nBugfixes:\n\n* Minor
  fix of chat action deserialization code\n\n## 0.2.1.0\n\nFeatures:\n\n* Added reply
  keyboard\n\n## 0.2.0.0\n\nFeatures:\n\n* Main functionality is on place except content
  upload.\n* Inline mode added\n"
basic-deps:
  http-client: ! '>=0.5 && <0.6'
  bytestring: -any
  base: ! '>=4.7 && <5'
  servant-client: ! '>=0.9 && <0.10'
  text: -any
  http-api-data: -any
  servant: ! '>=0.9 && <0.10'
  mime-types: -any
  mtl: ! '>=2.2 && <2.3'
  transformers: -any
  string-conversions: -any
  http-types: -any
  aeson: ==1.0.*
  http-media: -any
all-versions:
- '0.1.0.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.3.1'
- '0.5.0.0'
- '0.5.0.1'
- '0.5.1.1'
- '0.5.1.2'
author: Alexey Rodiontsev
latest: '0.5.1.2'
description-type: markdown
description: ! "# telegram-api\n\n[![Join the chat at https://gitter.im/klappvisor/haskell-telegram-api](https://badges.gitter.im/klappvisor/haskell-telegram-api.svg)](https://gitter.im/klappvisor/haskell-telegram-api?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n![Build
  Status](https://img.shields.io/circleci/project/klappvisor/haskell-telegram-api.svg)\n![Hackage](https://img.shields.io/hackage/v/telegram-api.svg)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/telegram-api.svg)\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\nHigh-level
  bindings to the [Telegram Bot API][telegram-bot-api] based on [servant][servant]
  library.\nBoth `getUpdates` request or webhook can be used to receive updates for
  your bot. \nInline mode is supported.\nUploading stickers, documents, video, etc
  is not supported yet, but you can send items which are already uploaded on the Telegram
  servers.\n\n**Support of [Bot-2.0 API][bot-2.0]**\n\n## Usage\n\n`getMe` example\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport           Network.HTTP.Client      (newManager)\nimport
  \          Network.HTTP.Client.TLS  (tlsManagerSettings)\nimport           Web.Telegram.API.Bot\n\nmain
  :: IO ()\nmain = do\n  manager <- newManager tlsManagerSettings\n  res <- getMe
  token manager\n  case res of\n    Left e -> do\n      putStrLn \"Request failed\"\n
  \     print e\n    Right GetMeResponse { user_result = u } -> do\n      putStrLn
  \"Request succeded\"\n      print $ user_first_name u\n  where token = Token \"bot<token>\"
  -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n```\n\n`sendMessage`
  example\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nimport           Network.HTTP.Client
  \     (newManager)\nimport           Network.HTTP.Client.TLS  (tlsManagerSettings)\nimport
  \          Web.Telegram.API.Bot\n\nmain :: IO ()\nmain = do\n  manager <- newManager
  tlsManagerSettings\n  let request = sendMessageRequest chatId message\n  res <-
  sendMessage token request manager\n  case res of\n    Left e -> do\n      putStrLn
  \"Request failed\"\n      print e\n    Right MessageResponse { message_result =
  m } -> do\n      putStrLn \"Request succeded\"\n      print $ message_id m\n      print
  $ text m\n  where token = Token \"bot<token>\" -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\n
  \       chatId = \"<chat_id> or <@channelusername>\" \n        message = \"text
  *bold* _italic_ [github](github.com/klappvisor/haskell-telegram-api)\"\n```\n\n####
  Note on requests:\n\nMany request data records have a lot of optional parameters
  which are usually redundant.\nThere are two ways to create requests:\n\nWith data
  type constructor:\n```haskell\nlet request = SendMessageRequest \"chatId\" \"text\"
  Nothing (Just True) Nothing Nothing Nothing\n```\nUsing default instance:\n\n```haskell\nlet
  request = sendMessageRequest \"chatId\" \"text\" -- only with required fields\n```\n\n```haskell\nlet
  request = (sendMessageRequest \"chatId\" \"text\") {\n  message_disable_notification
  = Just True -- with optional fields\n}\n```\n\n## Contribution\n\nContributions
  are welcome!\n\n1. Fork repository\n2. Do some changes\n3. Create pull request\n4.
  Wait for CI build and review\n5. ??????\n6. PROFIT\n\nBear in mind that the CI build
  won't run integration test suite against your pull request since the necessary environment\nvariables
  (`$BOT_TOKEN`, `$CHAT_ID` and `$BOT_NAME`) aren't exported when a fork\nstarts the
  build (for security reasons). If you do want to run them before creating RP, you
  can setup integration of your fork\nwith CircleCI.\n\nYou can use `stack` to build
  project\n\n```\nstack build\n```\n\nTo run test you have to create your own bot.
  Go to [BotFather](https://telegram.me/botfather) and create the bot. As the result
  you will have private bot's access token. Keep it safe!\n\n```\nstack test --test-arguments
  \"--integration -t BOT_TOKEN -c CHAT_ID -b BOT_NAME -- HSPEC_ARGS\"\n```\n\nwhere\n\n*
  `BOT_TOKEN` is the token obtained from BotFather\n* `CHAT_ID` can be id of your
  chat with your bot. Send some messages to this chat in Telegram and do `curl \"https://api.telegram.org/bot<replace_with_token>/getUpdates\"`,
  you'll have to parse some JSON with your brain ;-) or any other suitable tool and
  you will find chat id there.\n* `BOT_NAME` is the name of your bot\n* `HSPEC_ARGS`
  are the normal `hspec` arguments you can find [here][hspec-args]\n\nThe help option
  is available for the tests and for hspec:\n\n```\nstack test --test-arguments \"-h\"\nstack
  test --test-arguments \"--integration -t BOT_TOKEN -c CHAT_ID -b BOT_NAME -- -h\"\n```\n\nNote:
  Inline Spec is disabled for now...\n\nIf everything is fine after running the tests
  you will receive a few new messages from your bot.\n\n[telegram-bot-api]: https://core.telegram.org/bots/api\n[servant]:
  https://haskell-servant.github.io/\n[hspec-args]: https://hspec.github.io/running-specs.html\n[bot-2.0]:
  https://core.telegram.org/bots/2-0-intro\n"
license-name: BSD3
