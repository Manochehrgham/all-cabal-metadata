homepage: https://github.com/mrkkrp/text-metrics
changelog-type: markdown
hash: 5c85b5ef73304d1a6d1fd4cd7c5bc7e6a4202a7cc030cda9932c75123c898a39
test-bench-deps:
  base: ! '>=4.7 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  criterion: ! '>=0.6.2.1 && <1.2'
  text-metrics: ! '>=0.1.0'
  deepseq: ! '>=1.4 && <1.5'
  QuickCheck: ! '>=2.8 && <3.0'
maintainer: Mark Karpov <markkarpov@openmailbox.org>
synopsis: Calculate various string metrics efficiently
changelog: ! '## Text Metrics 0.1.0


  * Initial release.

'
basic-deps:
  base: ! '>=4.7 && <5.0'
  text: ! '>=0.2 && <1.3'
all-versions:
- '0.1.0'
author: Mark Karpov <markkarpov@openmailbox.org>
latest: '0.1.0'
description-type: markdown
description: ! "# Text Metrics\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/text-metrics.svg?style=flat)](https://hackage.haskell.org/package/text-metrics)\n[![Stackage
  Nightly](http://stackage.org/package/text-metrics/badge/nightly)](http://stackage.org/nightly/package/text-metrics)\n[![Stackage
  LTS](http://stackage.org/package/text-metrics/badge/lts)](http://stackage.org/lts/package/text-metrics)\n[![Build
  Status](https://travis-ci.org/mrkkrp/text-metrics.svg?branch=master)](https://travis-ci.org/mrkkrp/text-metrics)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/text-metrics/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/text-metrics?branch=master)\n\nThe
  library provides efficient implementations of various strings metrics.\nIt works
  with strict `Text` values and returns either `Natural` numbers\n(because the metrics
  cannot be negative), or `Ratio Natural` values because\nreturned values are rational
  non-negative numbers by definition.\n\nThe current version of the package implements:\n\n*
  [Levenshtein distance](http://en.wikipedia.org/wiki/Levenshtein_distance)\n* [Normalized
  Levenshtein distance](http://en.wikipedia.org/wiki/Levenshtein_distance)\n* [Damerau-Levenshtein
  distance](http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance)\n*
  [Normalized Damerau-Levenshtein distance](http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance)\n*
  [Hamming distance](http://en.wikipedia.org/wiki/Hamming_distance)\n\nTODO list:\n\n*
  [Overlap coefficient](http://en.wikipedia.org/wiki/Overlap_coefficient)\n* [Jaccard
  similarity coefficient](http://en.wikipedia.org/wiki/Jaccard_index)\n* [Jaro distance](http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance)\n*
  [Jaro-Winkler distance](http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance)\n\n##
  Comparison with the `edit-distance` package\n\nThere\nis [`edit-distance`](https://hackage.haskell.org/package/edit-distance)\npackage
  whose scope overlaps with the scope of this package. The differences\nare:\n\n*
  `edit-distance` allows to specify costs for every operation when\n  calculating
  Levenshtein distance (insertion, deletion, substitution, and\n  transposition).
  This is rarely needed though in real-world applications,\n  IMO.\n\n* `edit-distance`
  only provides single Levenshtein distance, `text-metrics`\n  aims to provide implementations
  of most string metrics algorithms.\n\n* `edit-distance` works on `Strings`, while
  `text-metrics` works on strict\n  `Text` values.\n\n* As `README.md` of `edit-distance`
  states, “[the algorithms] have been\n  fairly heavily optimized”, which is apparently
  true, yet the\n  `text-metrics` is faster for short strings (under 64 characters)
  and even\n  faster for longer strings (scales better). How much faster? For short\n
  \ strings more than ×2.5, and about ×4 for longer strings.\n\n## Implementation\n\nAll
  “meat” of the algorithms is written is C in a rather straightforward\nway. Levenshtein
  variants are based on the “iterative algorithm with two\nmatrix rows” from Wikipedia
  with additional improvement that we do not copy\ncurrent row of distances into previous
  row, but just swap the pointers\n(which is OK, since the arrays have equal length
  and current row will be\noverwritten in the next iteration anyway).\n\nNormalized
  versions are defined as thin (inlined) Haskell wrappers.\n\n## License\n\nCopyright
  © 2016 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
