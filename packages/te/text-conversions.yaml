homepage: https://github.com/cjdev/text-conversions#readme
changelog-type: markdown
hash: 6ab1e5c5f943b790c7285f20ff2d18d78298d735e4b5db58e7ba48c5646cf5e1
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  text-conversions: -any
  hspec-discover: -any
maintainer: lexi.lambda@gmail.com
synopsis: Safe conversions between textual types
changelog: ! '# Changelog


  ## 0.2.0 (May 25, 2016)


  ### Breaking Changes


  - The `ConvertText` typeclass has been split into two simpler functions, `convertText`
  and `decodeConvertText`. This means the vision of a unified function for converting
  between *any* two textual datatypes is no longer implemented, but the original attempt
  had too many problems to really be worth the cost. Specifically, instances like
  `FromText (Maybe Foo)` would cause problems due to the overlapping instances, which
  have now been removed.


  ## 0.1.0 (May 24, 2016)


  - Initial release

'
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  text: -any
  errors: -any
all-versions:
- '0.1.0'
- '0.2.0'
author: Alexis King
latest: '0.2.0'
description-type: markdown
description: ! "# text-conversions\n\nThis is a small library to ease the pain when
  converting between the many different string types in Haskell. Unlike some other
  libraries that attempt to solve the same problem, text-conversions is:\n\n  - **Safe.**
  This library treats binary data (aka `ByteString`) like binary data, and it does
  not assume a particular encoding, nor does it ever throw exceptions when failing
  to decode. It does, however, provide failable conversions between binary data and
  textual data through the same exact interface as conversions between purely textual
  data.\n\n  - **Extensible.** It’s easy to add or derive your own instances of the
  typeclasses to use your own types through the same interface.\n\nHere’s an example
  of using text-conversions to convert between textual types:\n\n```haskell\n> convertText
  (\"hello\" :: String) :: Text\n\"hello\"\n```\n\nAnd here’s an example of converting
  from UTF-8 encoded binary data to a textual format:\n\n```haskell\n> convertText
  (UTF8 (\"hello\" :: ByteString)) :: Maybe Text\nJust \"hello\"\n> convertText (UTF8
  (\"\\xc3\\x28\" :: ByteString)) :: Maybe Text\nNothing\n```\n\n[For more details,
  see the documentation on Hackage.][hackage]\n\n[hackage]: https://hackage.haskell.org/package/text-conversions\n"
license-name: ISC
