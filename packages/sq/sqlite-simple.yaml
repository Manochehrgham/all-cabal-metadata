changelog-type: text
hash: 17a2bf49b28983944c3983e76e02cc8916e01f0952711d7fcf9375e9e68036b9
test-bench-deps:
  bytestring: ! '>=0.9'
  base: -any
  time: -any
  sqlite-simple: -any
  text: -any
  direct-sqlite: -any
  HUnit: -any
  base16-bytestring: -any
synopsis: Mid-Level SQLite client library
changelog: ! "0.4.8.0\n\t* Export `bindNamed'\n\n0.4.7.0\n\t* Add `withTransaction'
  for running IO actions inside SQL\n\t  transactions with automated rollback if any
  exceptions are thrown.\n\n0.4.6.1\n\t* Fix unit test build break with older bytestring
  versions\n\n0.4.6.0\n\t* Add \"named parameters\" variants of query & al.  Named
  params\n\t  allow queries like:\n\t  res <- queryNamed conn \"SELECT * FROM posts
  WHERE id = :id\" [\":id\" := postId]\n\t* Add FromField instances for Int8, Word,
  Word8, Word16, Word32\n\t  and Word64.\n\t* Fix typos in some type conversion error
  messages.\n\t* Improved test coverage.\n\n0.4.5.2\n\t* Build fix for GHC 7.4\n\n0.4.5.1\n\t*
  Docs changes - uploaded new version to Hackage to update the\n\tHackage page.\n\n0.4.5.0\n\n\t*
  Various improvements to documentation.  Especially UTCTime\n\t  parsing and printing,
  and how it relates to SQLite datetimes is\n\t  better documented now.\n\n\t* Improved
  date/time parsing performance by adapting Leon\n\t  P. Smith's parsers from postgresql-simple
  for SQLite.  UTCTime\n\t  handling is also better defined now.\n\n\t* Improved query
  performance\n\t  (https://github.com/nurpax/sqlite-simple/issues/23)\n\n\t* Improved
  tests for all areas touched by the above change.\n\nv0.4.4.0\n\n\t* Add FromField
  instance for Float\n\n\t* Improve error handling for day parsing\n\n\t* + with tests\n\nv0.4.1.0
  - v0.4.3.0 (missed tagging v0.4.2.0)\n\n\t* Improvements to withBind functionality
  and documentation\n\t  (see https://github.com/nurpax/sqlite-simple/pull/26)\n\n\t*
  Add columnName accessor for statements\n\n\t* Expose MonadPlus on RowParser\n\n\t*
  Allow access to the underlying direct-sqilte connection from an\n\t  sqlite-simple
  connection\n\n\t* Add Data.Text.Lazy and lazy ByteString From/ToField instances\n\nv0.4.0.0\n\n\t*
  Add lastInsertRowId\n\n\t* Expose SQLite statements based streaming API\n\t  (see
  https://github.com/nurpax/sqlite-simple/pull/22)\n\nv0.3.0.0\n\n\t* Add fold, fold_,
  withConnection\n\nv0.2.0.0 - v0.2.1.0\n\n\t* Optimizations to improve query rows/sec
  performance\n"
basic-deps:
  bytestring: ! '>=0.9'
  base: <5
  time: -any
  text: ! '>=0.11'
  blaze-textual: -any
  direct-sqlite: ! '>=2.3.13 && <2.4'
  containers: -any
  blaze-builder: -any
  attoparsec: ! '>=0.10.3'
  transformers: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.0'
- '0.2.1.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.3.1'
- '0.4.4.0'
- '0.4.5.0'
- '0.4.5.1'
- '0.4.5.2'
- '0.4.6.0'
- '0.4.6.1'
- '0.4.7.0'
- '0.4.8.0'
latest: '0.4.8.0'
description-type: markdown
description: ! "sqlite-simple: mid-level bindings to the sqlite database\n========================================================\n\nThis
  library is a mid-level Haskell binding to the SQLite database.\n\nSqlite-simple
  provides a convenient API to sqlite that does some level\nof automatic data conversion
  between the database and Haskell types.\nThe API has been modeled directly after\n[postgresql-simple](http://github.com/lpsmith/postgresql-simple)
  which\nin turn borrows from\n[mysql-simple](https://github.com/bos/mysql-simple).\n\n[The
  sqlite-simple API\nreference](https://hackage.haskell.org/package/sqlite-simple/docs/Database-SQLite-Simple.html)\ncontains
  more examples of use and information on its features.\n\nThe library is well tested
  and stable.  The library should also be\nreasonably performant.  You can find its
  benchmark suite here:\n[db-bench](https://github.com/nurpax/db-bench).  You can
  read more\nabout sqlite-simple's expected performance in [my blog about\nsqlite-simple
  performance against direct-sqlite, Python and\nC](http://nurpax.github.io/posts/2013-08-17-sqlite-simple-benchmarking.html).\n\n[![Build
  Status](https://secure.travis-ci.org/nurpax/sqlite-simple.png)](http://travis-ci.org/nurpax/sqlite-simple)\n\n[![Coverage
  Status](https://coveralls.io/repos/nurpax/sqlite-simple/badge.png?branch=master)](https://coveralls.io/r/nurpax/sqlite-simple?branch=master)\n\nInstallation\n------------\n\nYou
  can install [sqlite-simple from Hackage](http://hackage.haskell.org/package/sqlite-simple)\nwith:\n\n```\ncabal
  install sqlite-simple\n```\n\nA Windows user?  It works but please see [this note](https://gist.github.com/3907344)
  on direct-sqlite Windows installation.\n\nExamples of use\n---------------\n\nCreate
  a test database by copy&pasting the below snippet to your\nshell:\n\n```\nsqlite3
  test.db \"CREATE TABLE test (id INTEGER PRIMARY KEY, str text);\\\nINSERT INTO test
  (str) VALUES ('test string');\"\n```\n\n..and access it in Haskell:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nimport Control.Applicative\nimport Database.SQLite.Simple\nimport
  Database.SQLite.Simple.FromRow\n\ndata TestField = TestField Int String deriving
  (Show)\n\ninstance FromRow TestField where\n  fromRow = TestField <$> field <*>
  field\n\nmain :: IO ()\nmain = do\n  conn <- open \"test.db\"\n  execute conn \"INSERT
  INTO test (str) VALUES (?)\"\n    (Only (\"test string 2\" :: String))\n  r <- query_
  conn \"SELECT * from test\" :: IO [TestField]\n  mapM_ print r\n  close conn\n```\n\nMore
  simple usage examples can be found from [sqlite-simple unit\ntests](https://github.com/nurpax/sqlite-simple/blob/master/test/Simple.hs).\n\n\nDevelopment\n-----------\n\nThe
  development roadmap for sqlite-simple is mostly captured in the\ngithub issue database.\n\nI'm
  happy to receive bug reports, fixes, documentation enhancements,\nand other improvements.\n\nPlease
  report bugs via the\n[github issue tracker](http://github.com/nurpax/sqlite-simple/issues).\n\nFor
  general database issues with a Haskell focus, I recommend sending\ne-mail to the
  [database-devel mailing\nlist](http://www.haskell.org/mailman/listinfo/database-devel).\n\n###
  Contributing\n\nIf you send pull requests for new features, it'd be great if you
  could also develop unit\ntests for any such features.\n\n\nCredits\n-------\n\nA
  lot of the code is directly borrowed from\n[mysql-simple](http://github.com/bos/mysql-simple)
  by Bryan O'Sullivan\nand from\n[postgresql-simple](http://github.com/lpsmith/postgresql-simple)
  by\nLeon P. Smith.  Like Leon in postgresql-simple, I borrow code and\ndocumentation
  directly from both of these ancestor libraries.\n\nThis package builds on top of
  the\n[direct-sqlite](http://hackage.haskell.org/package/direct-sqlite)\npackage
  by Irene Knapp.\n\nSQLite is rather weakly-typed and thus the SQL to Haskell type\nstrictness
  of the parent projects does not necessarily apply to this\npackage.\n"
