homepage: https://github.com/JustusAdam/mustache
changelog-type: markdown
hash: bb370000f7540e4f416c9844ad838b5ee4478a968a88793a459cd63646235996
test-bench-deps:
  base-unicode-symbols: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  filepath: -any
  process: -any
  mustache: -any
  temporary: -any
  aeson: -any
  yaml: -any
  directory: -any
maintainer: dev@justus.science
synopsis: A mustache template parser library.
changelog: ! '# Mustache library changelog


  ## v0.4.0.1rc-5


  - Added a necessary OVERLAPPABLE pragma


  ## v0.4.0.0rc-4 (current stable version)


  - Removed `conversion` and `conversion-text` dependency.

  - Subsequently removed any dependency on overlapping instances

  - Readded support for ghc version 7.8

  - Removed `Char -> Value` instance of `ToMustache` (because of overlap)

  - Renamed `AST`


  ## v0.3.1.0rc-3


  - Added infix precedence to conversion operators

  - Added `INLINEABLE` pragma to conversion functions


  ## v0.3.0.1rc-2


  Dropped GHC 7.8 support in favor of efficient and easy data conversion.


  ## v0.3.0.0rc-1


  - improved documentation

  - fixed a bug with scope

  - small interface changes

'
basic-deps:
  ja-base-extra: ! '>=0.2.1'
  either: -any
  base-unicode-symbols: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: ==1.2.*
  filepath: -any
  parsec: ! '>=3.1 && <3.2'
  containers: -any
  mtl: ! '>=2.2 && <2.3'
  cmdargs: -any
  mustache: -any
  scientific: -any
  tagsoup: -any
  aeson: -any
  yaml: -any
  vector: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.1.0'
- '0.4.0.0'
- '0.4.0.1'
author: Justus Adam
latest: '0.4.0.1'
description-type: markdown
description: ! "# mustache [![Travis Status](https://travis-ci.org/JustusAdam/mustache.svg?branch=master)](https://travis-ci.org/JustusAdam/mustache)
  [![Hackage](https://img.shields.io/hackage/v/mustache.svg)](https://hackage.haskell.org/package/mustache)
  [![Join the chat at https://gitter.im/JustusAdam/mustache](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/JustusAdam/mustache?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nHaskell
  implementation of [mustache templates][mustache-homepage].\n\n[mustache-homepage]:
  https://mustache.github.io\n\nImplements the official [specs version 1.1.3](https://github.com/mustache/spec/releases/tag/v1.1.3)\n\n##
  Motivation\n\nThe old Haskell implementation of mustache templates [hastache][]
  seemed pretty abandoned to me. This implementation aims to be much easier to use
  and (fingers crossed) better maintained.\n\n[hastache]: https://hackage.haskell.org/package/hastache\n\nSince
  it is so easy to use and requires but a few files of code, I've also written a small
  executable that compiles and renders mustache templates with data input from json
  or yaml files.\n\n## Usage\n\n### Library\n\nPlease refer to the [documentation][]
  on hackage.\n\n[documentation]: https://hackage.haskell.org/package/mustache\n\n###
  Executable `haskell-mustache`\n\n    $ haskell-mustache --help\n    Simple mustache
  template substitution\n\n    arguments [OPTIONS] TEMPLATE [DATA-FILES]\n\n    Common
  flags:\n      -t --templatedirs[=DIRECTORY]  The directory in which to search for
  the\n                                     templates\n      -? --help                      Display
  help message\n      -V --version                   Print version information\n\nCurrent
  implementation substitutes the `TEMPLATE` once with each `DATA-FILE`\n\n## Roadmap\n\n-
  [x] String parser for mustache templates\n- [x] Template substitution\n- [x] Standalone
  executable\n- [x] Support for 'set delimiter'\n- [x] More efficiency using `Text`
  rather than `String`\n- [x] More efficient Text parsing\n- [x] Test coverage provided
  via the official [specs](https://github.com/mustache/spec)\n- [x] Haddock documentation\n-
  [ ] More instances for `ToMustache` typeclass\n"
license-name: BSD3
