changelog-type: ''
hash: 29ee1d90bc18d4d96f287cb2ab3d7c8c92f342c44b3ec36b4110945391561d01
synopsis: R5RS Scheme interpreter, compiler, and library.
changelog: ''
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- '3.0'
- '3.1'
- '3.2'
- '3.2.1'
- '3.3'
- '3.4'
- '3.4.1'
- '3.4.2'
- '3.4.3'
- '3.4.4'
- '3.5.1'
- '3.5.2'
- '3.5.2.1'
- '3.5.2.2'
- '3.5.2.3'
- '3.5.3'
- '3.5.3.1'
- '3.5.3.2'
- '3.5.4'
- '3.5.5'
- '3.5.6'
- '3.5.7'
- '3.6'
- '3.6.1'
- '3.6.2'
- '3.6.3'
- '3.7'
- '3.8'
- '3.9'
- '3.10'
- '3.11'
- '3.12'
- '3.13'
- '3.14'
- '3.15'
- '3.15.1'
- '3.15.2'
- '3.16'
- '3.16.1'
- '3.17'
- '3.17.1'
- '3.18'
- '3.19'
latest: '3.19'
description-type: haddock
description: ! '<<https://github.com/justinethier/husk-scheme/raw/master/docs/husk-scheme.png>>


  Husk is a dialect of Scheme written in Haskell that implements a superset of

  the R5RS standard. Advanced features are provided including:


  * First-class continuations of unlimited extent


  * Hygienic macros based on syntax-rules


  * Low-level explicit renaming macros


  * Library syntax from the R7RS standard


  * A foreign function interface (FFI) to Haskell


  * Full numeric tower providing support for real, rational, and complex numbers


  * Proper tail recursion and lexical scoping


  * Read-Eval-Print-Loop (REPL) interpreter, with input driven by Haskeline to provide
  a rich user experience


  * Standard library of Scheme functions, and support for many popular SRFI''s


  Husk may be used as either a stand-alone interpreter or as an extension language
  within a larger Haskell application. By closely following the R5RS standard, the
  intent is to develop a Scheme that is as compatible as possible with other R5RS
  Schemes. Husk is mature enough for use in production, however it is not optimized
  for performance-critical applications.


  Scheme is one of two main dialects of Lisp. Scheme follows a minimalist design philosophy:
  the core language consists of a small number of fundamental forms which may be used
  to implement other built-in forms. Scheme is an excellent language for writing small,
  elegant programs, and may also be used to write scripts or embed scripting functionality
  within a larger application.


  For documentation and examples, see

  <http://justinethier.github.io/husk-scheme/documentation.html>.


  For detailed information on each release, see

  <http://justinethier.github.io/husk-scheme/news.html>.'
