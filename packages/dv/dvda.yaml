changelog-type: ''
hash: a7c67401847172e2b64b4f4d0d3bd4593e48f474bbf396a220145906a244bee7
synopsis: Efficient automatic differentiation and code generation
changelog: ''
all-versions:
- '0.1'
- '0.1.1'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.0.1'
- '0.3.1'
- '0.3.2'
- '0.3.2.1'
- '0.4'
latest: '0.4'
description-type: haddock
description: ! 'dvda == DVDA Verifiably Differentiates Algorithmically


  This library provides a symbolic scalar type `Dvda.Expr` which is

  manipulated mathematically through its Num\/Fractional\/Floating instances.


  Automatic differentiation can be performed with `Dvda.AD`. Expressions can be turned
  into

  computational graphs (@FunGraph@s) using toFunGraph. This uses unsafe reification
  for performance reasons,

  and explicit common subexpression elimination using hashing can be performed using
  `Dvda.CSE`


  @FunGraph@s can be converted to C code and MATLAB mex functions. In the future there
  will be JIT compilation

  so you can call these functions efficiently from Haskell.


  Pretty graphviz plots!


  To get started check out the source for `Dvda.Examples`'
