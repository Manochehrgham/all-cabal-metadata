changelog-type: ''
hash: a37ba51f1e64db781c8c497eea870d064e684e2d9e67086aec46fda8fa99ce54
synopsis: Lenses, Folds and Traversals
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '1.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.1'
- '1.1.1'
- '1.2'
- '1.3'
- '1.3.1'
- '1.4'
- '1.4.1'
- '1.5'
- '1.6'
- '1.7'
- '1.7.1'
- '1.8'
- '1.9'
- '1.9.1'
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- '2.4.0.2'
- '2.5'
- '2.6'
- '2.6.1'
- '2.7'
- '2.7.0.1'
- '2.8'
- '2.9'
- '3.0'
- '3.0.1'
- '3.0.2'
- '3.0.3'
- '3.0.4'
- '3.0.5'
- '3.0.6'
- '3.1'
- '3.2'
- '3.3'
- '3.4'
- '3.5'
- '3.5.1'
- '3.6'
- '3.6.0.1'
- '3.6.0.2'
- '3.6.0.3'
- '3.6.0.4'
- '3.7'
- '3.7.0.1'
- '3.7.0.2'
- '3.7.1'
- '3.7.1.1'
- '3.7.1.2'
- '3.7.2'
- '3.7.3'
- '3.7.4'
- '3.7.5'
- '3.7.6'
- '3.8'
- '3.8.0.1'
- '3.8.0.2'
- '3.8.1'
- '3.8.2'
- '3.8.3'
- '3.8.4'
- '3.8.5'
- '3.8.6'
- '3.8.7'
- '3.8.7.1'
- '3.8.7.2'
- '3.8.7.3'
- '3.9'
- '3.9.0.1'
- '3.9.0.2'
- '3.9.0.3'
- '3.9.1'
- '3.9.2'
- '3.10'
- '3.10.0.1'
- '3.10.1'
- '3.10.2'
- '3.10.3'
- '4.0'
- '4.0.1'
- '4.0.2'
- '4.0.3'
- '4.0.4'
- '4.0.5'
- '4.0.6'
- '4.0.7'
- '4.1'
- '4.1.1'
- '4.1.2'
- '4.1.2.1'
- '4.2'
- '4.3'
- '4.3.1'
- '4.3.2'
- '4.3.3'
- '4.4'
- '4.4.0.1'
- '4.4.0.2'
- '4.5'
- '4.6'
- '4.6.0.1'
- '4.7'
- '4.7.0.1'
- '4.8'
- '4.9'
- '4.9.1'
latest: '4.9.1'
description-type: haddock
description: ! 'This package comes \"Batteries Included\" with many useful lenses
  for the types

  commonly used from the Haskell Platform, and with tools for automatically

  generating lenses and isomorphisms for user-supplied data types.


  The combinators in @Control.Lens@ provide a highly generic toolbox for composing

  families of getters, folds, isomorphisms, traversals, setters and lenses and their

  indexed variants.


  An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals
  README>.


  An introductory video on the style of code used in this library by Simon Peyton
  Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation
  Skills Matter>.


  A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1
  youtube>.


  Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf
  comonad.com>.


  More information on the care and feeding of lenses, including a brief tutorial and
  motivation

  for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.


  A small game of @pong@ and other more complex examples that manage their state using
  lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/
  example folder>.


  /Lenses, Folds and Traversals/


  With some signatures simplified, the core of the hierarchy of lens-like constructions
  looks like:



  <<http://i.imgur.com/ALlbPRa.png>>


  <Hierarchy.png (Local Copy)>


  You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@,
  and you can

  use any element of the hierarchy as any type it linked to above it.


  The result is their lowest upper bound in the hierarchy (or an error if that bound
  doesn''t exist).


  For instance:


  * You can use any ''Traversal'' as a ''Fold'' or as a ''Setter''.


  * The composition of a ''Traversal'' and a ''Getter'' yields a ''Fold''.


  /Minimizing Dependencies/


  If you want to provide lenses and traversals for your own types in your own libraries,
  then you

  can do so without incurring a dependency on this (or any other) lens package at
  all.


  /e.g./ for a data type:


  > data Foo a = Foo Int Int a


  You can define lenses such as


  > -- bar :: Lens'' (Foo a) Int

  > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)

  > bar f (Foo a b c) = fmap (\a'' -> Foo a'' b c) (f a)


  > -- quux :: Lens (Foo a) (Foo b) a b

  > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)

  > quux f (Foo a b c) = fmap (Foo a b) (f c)


  without the need to use any type that isn''t already defined in the @Prelude@.


  And you can define a traversal of multiple fields with ''Control.Applicative.Applicative'':


  > -- traverseBarAndBaz :: Traversal'' (Foo a) Int

  > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)

  > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c


  What is provided in this library is a number of stock lenses and traversals for

  common haskell types, a wide array of combinators for working them, and more

  exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).'
