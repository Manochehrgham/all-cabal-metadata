homepage: https://github.com/seagreen/hjsonschema
changelog-type: text
hash: b579981a6ee60f585cd700928446912acad693a0bf81a9afd4cdc7113f809a7c
test-bench-deps:
  warp: -any
  test-framework-hunit: ==0.3.*
  bytestring: -any
  test-framework: ==0.8.*
  base: -any
  unordered-containers: -any
  text: -any
  filepath: ==1.3.*
  async: -any
  HUnit: ==1.2.*
  wai-app-static: -any
  aeson: -any
  hjsonschema: -any
  vector: -any
  directory: ==1.2.*
maintainer: ian@housejeffries.com
synopsis: JSON Schema Draft 4 library
changelog: ! "# 0.6\n\nBreak the API so the library doesn't induce boolean blindness.\n\nChange
  validate\n  was: Schema -> Value -> Vector ValErr\n  now: Schema -> Value -> Either
  (Vector ValErr) Value\n\nChange Schema\n  was: type Schema = Vector Validator\n
  \ now: newtype Schema = Schema { _unSchema :: [Validator] }\n\n# 0.5.3\n\n+ Switch
  from http-conduit to http-client.\n\n# 0.5.2\n\n+ Add convenience function for validating
  and compiling draft 4 schemas\nsimultaneously.\n\n# 0.5.1\n\n+ Switch from wreq
  to http-conduit; drop lens dependency.\n\n# 0.5\n\n+ Start changelog.\n+ Rename
  Utils.hs to Helpers.hs.\n+ Move all non-ValidatorGen functions in Validators.hs
  to Helpers.hs.\n+ Various touchups.\n"
basic-deps:
  http-client: ! '>=0.4.9 && <0.5'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.6 && <4.9'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.2 && <1.3'
  regexpr: ! '>=0.5 && <0.6'
  hashable: ! '>=1.2 && <1.3'
  file-embed: ! '>=0.0.8 && <0.0.9'
  scientific: ! '>=0.3 && <0.4'
  hjsonpointer: ! '>=0.2 && <0.3'
  http-types: ! '>=0.8 && <0.9'
  aeson: ! '>=0.7 && <0.10'
  vector: ! '>=0.10 && <0.11'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.2.2'
- '0.5.3.0'
- '0.5.3.1'
- '0.5.3.2'
- '0.6.0.0'
- '0.6.0.1'
author: Ian Grant Jeffries
latest: '0.6.0.1'
description-type: markdown
description: ! "# Intro\n\nAn implementation of [JSON Schema](http://json-schema.org/)
  Draft 4 in haskell.\n\n# Status\n\nStill in development. Lacks solid code to handle
  changing resolution scope.\n\n# Example\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Main where\n\nimport Data.Aeson\nimport qualified Data.HashMap.Strict
  as H\nimport qualified Data.JsonSchema as JS\nimport qualified Data.Vector as V\n\nmain
  :: IO ()\nmain = do\n  eitherGraph <- JS.fetchRefs JS.draft4 rawSchema H.empty\n
  \ case eitherGraph of\n    Left e      -> print e\n    Right graph ->\n      case
  JS.compileDraft4 graph rawSchema of\n        Left e2      -> print e2\n        Right
  schema -> print $ JS.validate schema invalidData\n\nrawSchema :: JS.RawSchema\nrawSchema
  = JS.RawSchema\n  { JS._rsURI = \"\"\n  , JS._rsObject = H.singleton \"uniqueItems\"
  (Bool True) -- Schema JSON goes here.\n  }\n\ninvalidData :: Value\ninvalidData
  = Array (V.fromList [\"foo\", \"foo\"])\n```\n\nOutput:\n```\nLeft (fromList [\"Val
  error against uniqueItems True for: Array (fromList [String \\\"foo\\\",String \\\"foo\\\"])\"])\n```\n\n\n#
  Install Tests\n\n    git submodule update --init\n\n# Notes\n\n+ This uses the [regexpr](https://hackage.haskell.org/package/regexpr-0.5.4)
  regular expression library for the \"pattern\" validator. I have no idea if this
  is compatible with the ECMA 262 regex dialect, which the [spec](http://json-schema.org/latest/json-schema-validation.html#anchor33)
  requires.\n\n+ `draft4.json` is from commit # cc8ec81ce0abe2385ebd6c2a6f2d6deb646f874a
  [here](https://github.com/json-schema/json-schema).\n\n# Credits\n\nThanks to [Julian
  Berman](https://github.com/Julian) for the fantastic test suite.\n\nAlso thanks
  to Tim Baumann for his [aeson-schema](https://hackage.haskell.org/package/aeson-schema)
  library. Hjsonschema's test code and its implementation of `Graph` both come from
  Aeson-Schema.\n"
license-name: MIT
