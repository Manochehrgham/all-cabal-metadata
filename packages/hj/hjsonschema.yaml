homepage: https://github.com/seagreen/hjsonschema
changelog-type: text
hash: 181aeff22031f53f2293ea8c69910d1b21e1ab0a45819346f708fbbc6113a884
test-bench-deps:
  warp: -any
  bytestring: -any
  base: -any
  unordered-containers: -any
  hspec: ==2.2.*
  text: -any
  filepath: -any
  async: -any
  semigroups: -any
  hjsonpointer: -any
  QuickCheck: -any
  wai-app-static: -any
  aeson: -any
  hjsonschema: -any
  profunctors: -any
  vector: -any
  directory: ! '>=1.2.5 && <1.3'
maintainer: ian@housejeffries.com
synopsis: JSON Schema library
changelog: ! "# 1.2.0.1\n\n+ Switch to hspec for tests.\n\n# 1.2.0.0\n\n+ Return `AdditionalPropertiesObject`
  error correctly (was mistakenly\nreturning `AdditionalItemsObject` instead.\n+ Don't
  silence errors resulting from subschemas of \"anyOf\" or \"oneOf\".\n\n# 1.1.0.1\n\n+
  Bump `aeson` and `hjsonpointer`.\n\n# 1.1.0.0\n\n+ Rename `schemaForSchemas` to
  `metaSchema` and `schemaForSchemasBytes` to\n`metaSchemaBytes`.\n\n# 1.0.0.0\n\n##
  Bug fixes:\n\n+ Fix JSON Pointer bug. Pointers were being built in reverse order
  and so were\ntotally invalid.\n+ Use `.:!` instead of `.:?` to parse the draft 4
  schema. The only way to omit\noptional fields in JSON Schema Draft 4 is to omit
  them entirely, `\"null\"`\ncan't be used for this.\n\n## API Changes:\n\n+ Add referenced
  schema loop detection.\n+ Add a new `referencesValidity` function.\n+ `checkSchema`
  now checks referenced schema's validity in addition to the\nstarting schema's validity.
  This change bubbles up to the one-step validation\nfunctions as well.\n+ Switch
  most of the fetching code to use `URISchemaMap` instead of\n`ReferencedSchemas`.
  It didn't need to know about the more complicated data\ntype.\n+ Rething failure
  related names. Change `Invalid` to `Failure`, add a new\n`Invalid` type alias which
  is only used for final results.\n+ Failures now include the failing part of the
  data as well as a JSON Pointer to\nit, so you don't have to worry about resolving
  the pointer.\n\n## Fundamental Changes:\n\n+ Make `Fail` (previously `Failure`)
  an instance of `Functor`.\n+ Add a `Validator` data type which is an instance of
  `Profunctor`.\n+ Add a `Spec` data type for collections of `Validators`.\n\n## General:\n\n+
  Switch from 2 to 4 space indentation.\n+ Update the vendored JSON Schema Test Suite.\n\n#
  0.10.0.3\n\n+ Bump http-client.\n\n# 0.10.0.2\n\n+ Enable GHC 8.\n\n# 0.10.0.1\n\n+
  Fix .cabal file.\n\n# 0.10\n\n+ Rewrite fetching internals.\n+ Fix reference resolution
  defects, add more tests.\n+ Switch to a Perl style regex library, which is closer
  to ECMAScript regexes\nthan the previous Posix style one.\n+ Add one-step validation
  functions ('fetchFilesystemAndValidate' and 'fetchHTTPAndValidate').\n+ Alias the
  validation failure type exported by 'Data.JsonSchema.Draft4' to\n'Invalid', change
  its field names.\n\n# 0.9\n\n+ Partial rewrite. The API of the library has changed,
  see the examples\nfolder for how to use the new one.\n\n+ Users of the library can
  now write schemas in Haskell as well as JSON.\n\n# 0.8\n\n+ Improve scope updating
  and resolving.\n+ Rename RawSchema's _rsObject field to _rsData.\n+ Make RawSchema's
  _rsURI field a Maybe. This way schemas without a starting\nURI can say so explicitly
  with Nothing instead of with \"\".\n+ Rename Graph to SchemaGraph. Declare it with
  data instead of type. Give it a\nfield referencing the starting schema. This field
  is used to find the curent\nschema if no URI is in scope and a self-referencing
  $ref is found (e.g. \"#\").\n+ Change the order of the last two arguments to fetchReferencedSchemas.\n\n#
  0.7.1\n\n+ Support GHC 7.8 again.\n\n# 0.7\n\nChange error type from Text to ValidationFailure.\n\nRevert
  the 0.6 changes to validate. Also switch from Vector\nto list. Validate is now:\n
  \ Schema err -> Value -> [ValidationFailure err]\n\nAdd fetchReferencedSchemas',
  which lets the user provide their\nown MonadIO function to be used when fetching
  schemas. This lets\nthem do things like only fetch schemas from particular domains.\n\n#
  0.6\n\nBreak the API so the library doesn't induce boolean blindness.\n\nChange
  validate\n  was: Schema -> Value -> Vector ValErr\n  now: Schema -> Value -> Either
  (Vector ValErr) Value\n\nChange Schema\n  was: type Schema = Vector Validator\n
  \ now: newtype Schema = Schema { _unSchema :: [Validator] }\n\n# 0.5.3\n\n+ Switch
  from http-conduit to http-client.\n\n# 0.5.2\n\n+ Add convenience function for validating
  and compiling draft 4 schemas\nsimultaneously.\n\n# 0.5.1\n\n+ Switch from wreq
  to http-conduit; drop lens dependency.\n\n# 0.5\n\n+ Start changelog.\n+ Rename
  Utils.hs to Helpers.hs.\n+ Move all non-ValidatorGen functions in Validators.hs
  to Helpers.hs.\n+ Various touchups.\n"
basic-deps:
  http-client: ! '>=0.4.30 && <0.6'
  bytestring: ! '>=0.10 && <0.11'
  pcre-heavy: ! '>=1.0 && <1.1'
  base: ! '>=4.7 && <4.10'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.1 && <1.3'
  filepath: ! '>=1.3 && <1.5'
  semigroups: ! '>=0.18 && <0.19'
  containers: ! '>=0.5 && <0.6'
  file-embed: ! '>=0.0.8 && <0.1'
  scientific: ! '>=0.3 && <0.4'
  hjsonpointer: ! '>=0.3 && <1.1'
  QuickCheck: ! '>=2.8 && <2.10'
  http-types: ! '>=0.8 && <0.10'
  aeson: ! '>=0.11 && <1.1'
  profunctors: ! '>=5.0 && <5.3'
  vector: ! '>=0.10 && <0.12'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.2.2'
- '0.5.3.0'
- '0.5.3.1'
- '0.5.3.2'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.7.0.0'
- '0.7.1.0'
- '0.8.0.0'
- '0.8.0.1'
- '0.9.0.0'
- '0.10.0.1'
- '0.10.0.2'
- '0.10.0.3'
- '1.0.0.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.2.0.0'
- '1.2.0.1'
author: Ian Grant Jeffries
latest: '1.2.0.1'
description-type: markdown
description: ! '![hjsonschema logo](./logo.jpg)


  A Haskell implementation of the current [JSON Schema](http://json-schema.org/) specification
  (Draft 4).


  [Hackage](https://hackage.haskell.org/package/hjsonschema) / [GitHub](https://github.com/seagreen/hjsonschema)
  / [Travis CI](https://travis-ci.org/seagreen/hjsonschema)


  Requires [pcre](http://www.pcre.org/) (`pkgs.pcre` in Nixpkgs).


  NOTE: Schemas with circular references can cause infinite loops. hjsonschema does
  loop detection but it may not be solid yet -- please open an issue if you find a
  situation where it fails.


  # Example


  See [here](https://github.com/seagreen/hjsonschema/blob/master/examples/Simple.hs).


  # Tests


  Run all tests:


  `stack test`


  Run only local tests:


  `stack test hjsonschema:local`


  Run remote tests (makes GETs to json-schema.org, also temporarily starts an HTTP
  server on port 1234):


  `stack test hjsonschema:remote`


  # Details


  ## Goals


  + Be a correct and fast implementation of the spec.


  + Be a useful reference for implementers in other languages. Haskell''s high level
  nature, expressive type system and referential transparency suit this purpose well.


  ## Good Parts


  + Passes all the required tests in the [language agnostic test suite](https://github.com/json-schema/JSON-Schema-Test-Suite).


  + Very modular, which should make it easy to support future versions of the specification.


  ## Bad Parts


  + Uses the [pcre-heavy](https://hackage.haskell.org/package/pcre-heavy) regular
  expression library for the "pattern" validator. It should use a library based on
  the ECMA 262 regex dialect, which the [spec](http://json-schema.org/latest/json-schema-validation.html#anchor33)
  requires.


  + Currently doesn''t support the optional `"format"` validators.


  ## Notes


  + `JSON-Schema-Test-Suite` is vendored from commit # aabcb3427745ade7a0b4d49ff016ad7eda8b898b
  [here](https://github.com/json-schema-org/JSON-Schema-Test-Suite).


  + `src/draft4.json` is from commit # f3d5aeb5ffbe9d9a5a0ceb761dc47c7c4c2efa68 [here](https://github.com/json-schema/json-schema).


  ## Credits


  [TJ Weigel](http://tjweigel.com/) created the logo.


  [Tim Baumann](https://github.com/timjb) wrote [aeson-schema](https://hackage.haskell.org/package/aeson-schema),
  on which hjsonschema''s test code and its implementation of `SchemaGraph` were based.


  [Julian Berman](https://github.com/Julian) maintains the fantastic [language agnostic
  test suite](https://github.com/json-schema/JSON-Schema-Test-Suite).

'
license-name: MIT
