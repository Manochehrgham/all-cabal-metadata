homepage: ''
changelog-type: ''
hash: 3cd260e29cc6f36f4ae56b604bd382627baf551cbc6a8b6ea54f18269834c593
test-bench-deps:
  test-framework-hunit: ! '>=0.2'
  bytestring: ! '>=0.9'
  test-framework: ! '>=0.8'
  case-insensitive: ! '>=1.0'
  base: ! '>=4 && <5'
  monads-tf: ! '>=0.1'
  text: ! '>=0.11'
  test-framework-quickcheck2: ! '>=0.2'
  HUnit: ! '>=1.2'
  containers: ! '>=0.5'
  snap-core: ! '>=0.9'
  attoparsec: ! '>=0.10'
  transformers: ! '>=0.3'
  QuickCheck: ! '>=2.3'
maintainer: Toralf Wittner <tw@dtex.org>
synopsis: Declarative routing for Snap.
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  case-insensitive: ! '>=1.0'
  base: ! '>=4 && <5'
  monads-tf: ! '>=0.1'
  text: ! '>=0.11'
  containers: ! '>=0.5'
  snap-core: ! '>=0.9'
  attoparsec: ! '>=0.10'
  transformers: ! '>=0.3'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.1'
author: Toralf Wittner, Brendan Hay
latest: '0.3.1'
description-type: markdown
description: ! "Snap-Predicates\n===============\n\nThis library provides the definition
  of a type-class `Predicate`\ntogether with several concrete implementations which
  are used to\nconstrain the set of possible `Snap` handlers in a type-safe\nway.\n\nA
  module [Snap.Predicates.Tutorial](http://hackage.haskell.org/packages/archive/snap-predicates/latest/doc/html/Snap-Predicates-Tutorial.html)\nis
  included, outlining the basic concepts.\n\nExample Usage\n-------------\n\n```haskell\nmain
  :: IO ()\nmain = do\n    mapM_ putStrLn (showRoutes sitemap)\n    quickHttpServe
  (route . expandRoutes $ sitemap)\n\nsitemap :: Routes Snap ()\nsitemap = do\n    head_
  \"/status\" (const $ return ())\n\n    get  \"/foo\" listFoo $\n        Accept Text
  Plain :&: ParamDef \"off\" 0 :&: ParamDef \"size\" 100\n\n    post \"/foo\" createFoo
  $\n        Accept Text Plain :&: ContentType Application Protobuf\n\nlistFoo ::
  MediaType Text Plain :*: Int :*: Int -> Snap ()\nlistFoo (_mt :*: _off :*: _size)
  = return ()\n\ncreateFoo :: MediaType Text Plain :*: Content Application Protobuf
  -> Snap ()\ncreateFoo (_mt :*: _ct) = return ()\n```\n"
license-name: OtherLicense
