homepage: https://github.com/nmattia/snipcheck#readme
changelog-type: ''
hash: dbdad3b413fb0248c6d341da9db7e5f3861096aa1489b1560f7eb6df93c534e7
test-bench-deps: {}
maintainer: nicolas@nmattia.com
synopsis: Markdown tester
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  process: ! '>=1.4.3.0 && <1.5'
  containers: ! '>=0.5.7.1 && <0.6'
  pandoc: ! '>=1.19.2.1 && <1.20'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
author: Nicolas Mattia
latest: '0.1.0.2'
description-type: markdown
description: ! "# Snipcheck\n\nhttps://travis-ci.org/nmattia/snipcheck.svg?branch=master\n\nSnipcheck
  makes sure that the code snippets in markdown files are up-to-date.\n\nThis is very
  much a work in progress. The only function currently available is\n\n``` haskell\ncheckMarkdownFile
  :: FilePath -> IO ()\n```\n\nthat will run shell snippets and errored out if the
  output doesn't match the\nsnippet. You can skip some of the output with `...`.\n\n##
  Example:\n\n    # Some title\n\n    some markdown content\n\n    ``` shell\n    $
  echo foo; echo bar; echo baz; echo qux\n    foo\n    ...\n    qux\n    ```\n\n    some
  more content\n\n\n## Release check-list\n\n1. Make sure you're on master\n\n1. Bump
  the version in `snipcheck.cabal`:\n\n> Given a version number MAJOR.MINOR.PATCH,
  increment the:\n>\n> MAJOR version when you make incompatible API changes,\n> MINOR
  version when you add functionality in a backwards-compatible manner, and\n> PATCH
  version when you make backwards-compatible bug fixes.\n\n1. Run `stack update --pvp-bounds
  both .` to upload `snipcheck` to `hackage`\n1. Commit the updated `snipcheck.cabal`
  file.\n"
license-name: MIT
