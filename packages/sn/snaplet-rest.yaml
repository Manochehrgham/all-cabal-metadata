changelog-type: ''
hash: aca71933a2ca3b9c6252365ba7c88ac28aa8893a25dcf3da9bd0df8ba60c0510
synopsis: REST resources for the Snap web framework
changelog: ''
all-versions:
- '0.1.0'
latest: '0.1.0'
description-type: haddock
description: ! 'REST resources for the Snap framework.


  As an example, let''s translate the following datatype into a resource.


  > data User = User Username String Int

  >

  > type Username = CI String


  We need a type to represent changes to the resource.  This ''partial'' type

  indicates what properties to change: either the name, the age, or both.


  > data UserPart = UserPart (Maybe String) (Maybe Int)


  This type also acts as a search mechanism: we can search by names, ages, or

  both.  We can use either a username or a @UserPart@ search to find users, and

  define a function to convert URL query string parameters to this search.


  > type UserId = Either Username UserPart

  >

  > userIdFromParams :: Params -> Maybe UserId


  Now we have the pieces required to define our CRUD behaviour.


  > createUser :: User -> AppHandler ()

  >

  > readUser :: UserId -> AppHandler [User]

  >

  > updateUser :: UserId -> UserPart -> AppHandler Bool

  >

  > deleteUser :: UserId -> AppHandler Bool


  If we''ve implemented Aeson instances, we can add JSON as a media format

  without having to define these manually.  Once the behaviour is attached to

  the resource, it can be served in the handler.


  > serveUser :: AppHandler ()

  > serveUser = serveResource $ resource

  >     & addMedia jsonInstances

  >     & setCreate createUser

  >     & setRead readUser

  >     & setUpdate updateUser

  >     & setDelete deleteUser

  >     & setFromParams userIdFromParams'
