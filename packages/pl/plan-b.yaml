homepage: https://github.com/mrkkrp/plan-b
changelog-type: markdown
hash: 9ad82c6e47b1b16651e8e67cf065e79396ecab9e44157efc77f1e2fe4f4d5b24
test-bench-deps:
  plan-b: ! '>=0.1.0'
  path: ! '>=0.5'
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.0'
  path-io: ! '>=0.2'
maintainer: Mark Karpov <markkarpov@opmbx.org>
synopsis: Failure-tolerant file and directory editing
changelog: ! '## Plan B 0.1.0


  * Initial release.

'
basic-deps:
  exceptions: ! '>=0.8'
  path: ! '>=0.5'
  base: ! '>=4.7 && <5'
  transformers: ! '>=0.3'
  path-io: ! '>=0.2'
all-versions:
- '0.1.0'
author: Mark Karpov <markkarpov@opmbx.org>
latest: '0.1.0'
description-type: markdown
description: ! "# Plan B\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/plan-b.svg?style=flat)](https://hackage.haskell.org/package/plan-b)\n[![Stackage
  Nightly](http://stackage.org/package/plan-b/badge/nightly)](http://stackage.org/nightly/package/plan-b)\n[![Build
  Status](https://travis-ci.org/mrkkrp/plan-b.svg?branch=master)](https://travis-ci.org/mrkkrp/plan-b)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/plan-b/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/plan-b?branch=master)\n\nThis
  is a Haskell library helping perform failure-tolerant operations on\nfiles and directories.\n\n##
  Quick start\n\nThe library allows to create and/or edit files, directories, and\ncontainers.
  By “container” we mean archive-like object that can contain\nrepresentation of a
  directory inside it. Consequently, we have six functions\navailable:\n\n* `withNewFile`\n*
  `withExstingFile`\n* `withNewDir`\n* `withExistingDir`\n* `withNewContainer`\n*
  `withExistingContainer`\n\nYou specify name of object to edit or create, options
  (more on them below),\nand action that is passed `Path` argument with the same type
  as object you\nintend to edit (we use type-safe file paths from\n[`path`](https://hackage.haskell.org/package/path)
  package here to prevent a\ncertain class of potential bugs). Then, having that path,
  you can do all\nactions you want to and if at some point during this editing an
  exception is\nthrown, state of file system is rolled back — you get no corrupted
  files,\nhalf-way edited directories, everything is intact as if nothing happened
  at\nall. If, however, the action is executed successfully (i.e. no exceptions\nthrown),
  all your manipulations are reflected in the file system.\n\nThis is a lightweight
  solution that makes it harder to corrupt sensitive\ninformation. And since file
  system exists in the real world, all sorts of\nbad things *can* (and *will*) happen.
  *You should always have plan B.*\n\nTemporary files and back-ups are handled and
  deleted automatically, however\nyou can pass options to change default behaviors.
  Not all options can be\nused with every function, but wrong combinations won't type-check,
  so it's\nOK.\n\nCollection of options is a monoid. `mempty` corresponds to default
  behavior,\nwhile non-standard behavioral deviations can be `mappend`ed to it.\n\nBy
  default, when we want to create new object and it already exists, we get\nan exception,
  two alternative options exist (only work when you create new\nobject):\n\n* `overrideIfExist`\n*
  `useIfExist`\n\nThere is no way to prevent exception when you want to *edit* object
  that\ndoes not exist, though.\n\nAll functions make use of temporary directories.
  You can control certain\naspects of this business:\n\n* `tempDir dir` — will tell
  the library to create temporary directories and\n  files inside `dir`. By default
  system's standard temporary directory\n  (e.g. `/tmp/` on Unix-like systems) is
  used.\n\n* `nameTemplate template` — specifies template to use for generation of\n
  \ unique file and directory names. By default `\"plan-b\"` is used.\n\n* `preserveCorpse`
  — if you add this to options, in case of failure\n  (exception), temporary directory
  is not automatically deleted and can be\n  inspected. However, if operation succeeds,
  temporary directory is *always*\n  deleted.\n\nThat should be enough for a quick
  intro, for more information regarding\nconcrete functions, consult Haddocks.\n\n##
  License\n\nCopyright © 2016 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
