changelog-type: text
hash: 5d891d7fc365b1bbd0deecdafc56c544bc97ce0bbc95aa5f214e5aacaf85731f
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: ! '>=1.4.0'
  playlists: -any
synopsis: Library and executable for working with playlist files.
changelog: ! "# Version 0.3.0.0\n\n  * Update dependencies to recent versions (thanks
  to Wieland Hoffmann).\n"
basic-deps:
  bytestring: ! '>=0.10 && <1.0'
  base: ! '>=4.6 && <5'
  text: ! '>=0.11 && <1.3'
  filepath: ! '>=1.3 && <2.0'
  word8: ! '>=0.0 && <1.0'
  playlists: -any
  attoparsec: ! '>=0.10 && <1.0'
  optparse-applicative: ! '>=0.10.0 && <0.12.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
latest: '0.3.0.0'
description-type: markdown
description: ! "# Haskell Playlists Library and Tool\n\nPlaylists is a library for
  working with media playlist files.  The\noriginal motivation for the library was
  extracting URLs for streaming\nradio stations that use PLS and M3U playlist files.\n\nThe
  package also includes an executable that can dump the URLs from a\nplaylist file
  and convert between playlist file formats.\n\n## Supported Formats\n\n  * [PLS]
  []\n  * [M3U and M3U8] [M3U]\n\n## Future Plans\n\nSome playlist files can be really
  big.  I plan on adding support for\nincremental parsing and generating via [io-streams]
  [] at some point\nin the future.\n\n## Library Example\n\n    import qualified Data.ByteString
  as BS\n    import Text.Playlist\n\n    readPlaylist :: Format -> IO Playlist\n    readPlaylist
  fmt = do\n      content <- BS.getContents\n      case parsePlaylist fmt content
  of\n        Left err -> fail $ \"failed to parse playlist on stdin: \" ++ err\n
  \       Right x  -> return x\n\n\n## Executable Example\n\n    $ playlist urls --format
  PLS < somefile.pls\n\n    $ playlist convert --from PLS --to M3U < somefile.pls\n\n[pls]:
  http://en.wikipedia.org/wiki/PLS_(file_format)\n[m3u]: http://en.wikipedia.org/wiki/M3U\n[io-streams]:
  http://hackage.haskell.org/package/io-streams\n"
