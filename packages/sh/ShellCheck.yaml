homepage: http://www.shellcheck.net/
changelog-type: ''
hash: a9a5bbdbf98eb3af43f633ebe61166d36feca8f9d29b3a7a7e030c628752b932
test-bench-deps:
  base: ! '>=4 && <5'
  json: -any
  ShellCheck: -any
  parsec: -any
  containers: -any
  regex-tdfa: -any
  mtl: ! '>=2.2.1'
  QuickCheck: ! '>=2.7.4'
  directory: -any
maintainer: vidar@vidarholen.net
synopsis: Shell script analysis tool
changelog: ''
basic-deps:
  base: ==4.*
  json: -any
  ShellCheck: -any
  process: -any
  parsec: -any
  containers: -any
  regex-tdfa: -any
  mtl: ! '>=2.2.1'
  QuickCheck: ! '>=2.7.4'
  directory: -any
all-versions:
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.3.7'
- '0.3.8'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.4.6'
author: Vidar Holen
latest: '0.4.6'
description-type: markdown
description: ! "# ShellCheck - A shell script static analysis tool\n\nShellCheck is
  a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:\n\n![Screenshot
  of a terminal showing problematic shell script lines highlighted](doc/terminal.png).\n\nThe
  goals of ShellCheck are\n\n  - To point out and clarify typical beginner's syntax
  issues\n    that cause a shell to give cryptic error messages.\n\n  - To point out
  and clarify typical intermediate level semantic problems\n    that cause a shell
  to behave strangely and counter-intuitively.\n\n  - To point out subtle caveats,
  corner cases and pitfalls that may cause an\n    advanced user's otherwise working
  script to fail under future circumstances.\n\nSee [the gallery of bad code](README.md#user-content-gallery-of-bad-code)
  for examples of what ShellCheck can help you identify!\n\n\n## How to use\nThere
  are a variety of ways to use ShellCheck!\n\n\n#### On the web\nPaste a shell script
  on http://www.shellcheck.net for instant feedback.\n\n[ShellCheck.net](http://www.shellcheck.net)
  is always synchronized to the latest git commit, and is the simplest way to give
  ShellCheck a go. Tell your friends!\n\n\n#### From your terminal\nRun `shellcheck
  yourscript` in your terminal for instant output, as seen above.\n\n\n#### In your
  editor\n\nYou can see ShellCheck suggestions directly in a variety of editors.\n\n*
  Vim, through [ALE](https://github.com/w0rp/ale) or [Syntastic](https://github.com/scrooloose/syntastic):\n\n![Screenshot
  of Vim showing inlined shellcheck feedback](doc/vim-syntastic.png).\n\n* Emacs,
  through [Flycheck](https://github.com/flycheck/flycheck):\n\n![Screenshot of emacs
  showing inlined shellcheck feedback](doc/emacs-flycheck.png).\n\n* Sublime, through
  [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter-shellcheck).\n\n*
  Atom, through [Linter](https://github.com/AtomLinter/linter-shellcheck).\n\n* Most
  other editors, through [GCC error compatibility](shellcheck.1.md#user-content-formats).\n\n\n####
  In your build or test suites\nWhile ShellCheck is mostly intended for interactive
  use, it can easily be added to builds or test suites.\n\nShellCheck makes canonical
  use of exit codes, and can output simple JSON, CheckStyle compatible XML, GCC compatible
  warnings as well as human readable text (with or without ANSI colors). See the [Integration](https://github.com/koalaman/shellcheck/wiki/Integration)
  wiki page for more documentation.\n\n## Travis CI Setup\n\nIf you want to use ShellCheck
  in Travis CI, setting it up is simple :tada:.\n\n```yml\nlanguage: bash\naddons:\n
  \ apt:\n    sources:\n    - debian-sid    # Grab ShellCheck from the Debian repo\n
  \   packages:\n    - shellcheck\n```\n\n## Installing\n\nThe easiest way to install
  ShellCheck locally is through your package manager.\n\nOn systems with Cabal (installs
  to `~/.cabal/bin`):\n\n    cabal update\n    cabal install ShellCheck\n\nOn Debian
  based distros:\n\n    apt-get install shellcheck\n\nOn Gentoo based distros:\n\n
  \   emerge --ask shellcheck\n\nOn EPEL based distros:\n\n    yum -y install epel-release\n
  \   yum install ShellCheck\n\nOn Fedora based distros:\n\n    dnf install ShellCheck\n\nOn
  OS X with homebrew:\n\n    brew install shellcheck\n\nOn OS X with MacPorts:\n\n
  \   port install shellcheck\n\nOn openSUSE:Tumbleweed:\n\n    zypper in ShellCheck\n\nOn
  other openSUSE distributions:\n\nadd OBS devel:languages:haskell repository from
  https://build.opensuse.org/project/repositories/devel:languages:haskell\n\n    zypper
  ar http://download.opensuse.org/repositories/devel:/languages:/haskell/openSUSE_$(version)/devel:languages:haskell.repo\n
  \   zypper in ShellCheck\n\nor use OneClickInstall - https://software.opensuse.org/package/ShellCheck\n\nFrom
  Docker Hub:\n\n    docker pull koalaman/shellcheck\n\n## Compiling from source\n\nThis
  section describes how to build ShellCheck from a source directory. ShellCheck is
  written in Haskell and requires 2GB of RAM to compile.\n\n\n#### Installing Cabal\n\nShellCheck
  is built and packaged using Cabal. Install the package `cabal-install` from your
  system's package manager (with e.g. `apt-get`, `brew`, `emerge`, `yum`, or `zypper`).\n\nOn
  MacPorts, the package is instead called `hs-cabal-install`, while native Windows
  users should install the latest version of the Haskell platform from https://www.haskell.org/platform/\n\nVerify
  that `cabal` is installed and update its dependency list with\n\n    $ cabal update\n\n####
  Compiling ShellCheck\n\n`git clone` this repository, and `cd` to the ShellCheck
  source directory to build/install:\n\n    $ cabal install\n\nThis will compile ShellCheck
  and install it to your `~/.cabal/bin` directory.\n\nAdd this directory to your `PATH`
  (for bash, add this to your `~/.bashrc`):\n\n    export PATH=\"$HOME/.cabal/bin:$PATH\"\n\nLog
  out and in again, and verify that your PATH is set up correctly:\n\n    $ which
  shellcheck\n    ~/.cabal/bin/shellcheck\n\nOn native Windows, the `PATH` should
  already be set up, but the system\nmay use a legacy codepage. In `cmd.exe`, `powershell.exe`
  and Powershell ISE,\nmake sure to use a TrueType font, not a Raster font, and set
  the active\ncodepage to UTF-8 (65001) with `chcp`:\n\n    > chcp 65001\n    Active
  code page: 65001\n\nIn Powershell ISE, you may need to additionally update the output
  encoding:\n\n    > [Console]::OutputEncoding = [System.Text.Encoding]::UTF8\n\n####
  Running tests\n\nTo run the unit test suite:\n\n    $ cabal test\n\n\n## Gallery
  of bad code\nSo what kind of things does ShellCheck look for? Here is an incomplete
  list of detected issues.\n\n#### Quoting\n\nShellCheck can recognize several types
  of incorrect quoting:\n\n    echo $1                           # Unquoted variables\n
  \   find . -name *.ogg                # Unquoted find/grep patterns\n    rm \"~/my
  file.txt\"                # Quoted tilde expansion\n    v='--verbose=\"true\"';
  cmd $v      # Literal quotes in variables\n    for f in \"*.ogg\"                  #
  Incorrectly quoted 'for' loops\n    touch $@                          # Unquoted
  $@\n    echo 'Don't forget to restart!'   # Singlequote closed by apostrophe\n    echo
  'Don\\'t try this at home'    # Attempting to escape ' in ''\n    echo 'Path is
  $PATH'              # Variables in single quotes\n    trap \"echo Took ${SECONDS}s\"
  0    # Prematurely expanded trap\n\n\n#### Conditionals\n\nShellCheck can recognize
  many types of incorrect test statements.\n\n    [[ n != 0 ]]                      #
  Constant test expressions\n    [[ -e *.mpg ]]                    # Existence checks
  of globs\n    [[ $foo==0 ]]                     # Always true due to missing spaces\n
  \   [[ -n \"$foo \" ]]                  # Always true due to literals\n    [[ $foo
  =~ \"fo+\" ]]               # Quoted regex in =~\n    [ foo =~ re ]                     #
  Unsupported [ ] operators\n    [ $1 -eq \"shellcheck\" ]           # Numerical comparison
  of strings\n    [ $n && $m ]                      # && in [ .. ]\n    [ grep -q
  foo file ]              # Command without $(..)\n    [[ \"$$file\" == *.jpg ]]           #
  Comparisons that can't succeed\n    (( 1 -lt 2 ))                     # Using test
  operators in ((..))\n\n\n#### Frequently misused commands\n\nShellCheck can recognize
  instances where commands are used incorrectly:\n\n    grep '*foo*' file                 #
  Globs in regex contexts\n    find . -exec foo {} && bar {} \\;  # Prematurely terminated
  find -exec\n    sudo echo 'Var=42' > /etc/profile # Redirecting sudo\n    time --format=%s
  sleep 10         # Passing time(1) flags to time builtin\n    while read h; do ssh
  \"$h\" uptime  # Commands eating while loop input\n    alias archive='mv $1 /backup'
  \    # Defining aliases with arguments\n    tr -cd '[a-zA-Z0-9]'              #
  [] around ranges in tr\n    exec foo; echo \"Done!\"            # Misused 'exec'\n
  \   find -name \\*.bak -o -name \\*~ -delete  # Implicit precedence in find\n    f()
  { whoami; }; sudo f           # External use of internal functions\n\n\n#### Common
  beginner's mistakes\n\nShellCheck recognizes many common beginner's syntax errors:\n\n
  \   var = 42                          # Spaces around = in assignments\n    $foo=42
  \                          # $ in assignments\n    for $var in *; do ...             #
  $ in for loop variables\n    var$n=\"Hello\"                     # Wrong indirect
  assignment\n    echo ${var$n}                     # Wrong indirect reference\n    var=(1,
  2, 3)                     # Comma separated arrays\n    array=( [index] = value
  )         # Incorrect index initialization\n    echo \"Argument 10 is $10\"         #
  Positional parameter misreference\n    if $(myfunction); then ..; fi     # Wrapping
  commands in $()\n    else if othercondition; then ..   # Using 'else if'\n    \n\n\n####
  Style\n\nShellCheck can make suggestions to improve style:\n\n    [[ -z $(find /tmp
  | grep mpg) ]]  # Use grep -q instead\n    a >> log; b >> log; c >> log      # Use
  a redirection block instead\n    echo \"The time is `date`\"         # Use $() instead\n
  \   cd dir; process *; cd ..;         # Use subshells instead\n    echo $[1+2]                       #
  Use standard $((..)) instead of old $[]\n    echo $(($RANDOM % 6))             #
  Don't use $ on variables in $((..))\n    echo \"$(date)\"                    # Useless
  use of echo\n    cat file | grep foo               # Useless use of cat\n\n\n####
  Data and typing errors\n\nShellCheck can recognize issues related to data and typing:\n\n
  \   args=\"$@\"                         # Assigning arrays to strings\n    files=(foo
  bar); echo \"$files\"    # Referencing arrays as strings\n    declare -A arr=(foo
  bar)          # Associative arrays without index\n    printf \"%s\\n\" \"Arguments:
  $@.\"    # Concatenating strings and arrays\n    [[ $# > 2 ]]                      #
  Comparing numbers as strings\n    var=World; echo \"Hello \" var      # Unused lowercase
  variables\n    echo \"Hello $name\"                # Unassigned lowercase variables\n
  \   cmd | read bar; echo $bar         # Assignments in subshells\n\n\n#### Robustness\n\nShellCheck
  can make suggestions for improving the robustness of a script:\n\n    rm -rf \"$STEAMROOT/\"*
  \           # Catastrophic rm\n    touch ./-l; ls *                 # Globs that
  could become options\n    find . -exec sh -c 'a && b {}' \\; # Find -exec shell
  injection\n    printf \"Hello $name\"             # Variables in printf format\n
  \   for f in $(ls *.txt); do         # Iterating over ls output\n    export MYVAR=$(cmd)
  \             # Masked exit codes\n\n\n#### Portability\n\nShellCheck will warn
  when using features not supported by the shebang. For example, if you set the shebang
  to `#!/bin/sh`, ShellCheck will warn about portability issues similar to `checkbashisms`:\n\n\n
  \   echo {1..$n}                     # Works in ksh, but not bash/dash/sh\n    echo
  {1..10}                     # Works in ksh and bash, but not dash/sh\n    echo -n
  42                       # Works in ksh, bash and dash, undefined in sh\n    trap
  'exit 42' sigint            # Unportable signal spec\n    cmd &> file                      #
  Unportable redirection operator\n    read foo < /dev/tcp/host/22      # Unportable
  intercepted files\n    foo-bar() { ..; }                # Undefined/unsupported
  function name\n    [ $UID = 0 ]                     # Variable undefined in dash/sh\n
  \   local var=value                  # local is undefined in sh\n    time sleep
  1 | sleep 5           # Undefined uses of 'time'\n\n\n#### Miscellaneous\n\nShellCheck
  recognizes a menagerie of other issues:\n\n    PS1='\\e[0;32m\\$\\e[0m '            #
  PS1 colors not in \\[..\\]\n    PATH=\"$PATH:~/bin\"                # Literal tilde
  in $PATH\n    rm “file”                         # Unicode quotes\n    echo \"Hello
  world\"                # Carriage return / DOS line endings\n    echo hello \\                      #
  Trailing spaces after \\\n    var=42 echo $var                  # Expansion of inlined
  environment\n    #!/bin/bash -x -e                 # Common shebang errors\n    echo
  $((n/180*100))               # Unnecessary loss of precision\n    ls *[:digit:].txt
  \                # Bad character class globs\n    sed 's/foo/bar/' file > file      #
  Redirecting to input\n\n\n\n## Testimonials\n\n> At first you're like \"shellcheck
  is awesome\" but then you're like \"wtf are we still using bash\"\n\nAlexander Tarasikov,\n[via
  Twitter](https://twitter.com/astarasikov/status/568825996532707330)\n\n## Ignoring
  issues\n\nIssues can be ignored via environmental variable, command line, individually
  or globally within a file:\n\nhttps://github.com/koalaman/shellcheck/wiki/Ignore\n\n##
  Reporting bugs\n\nPlease use the GitHub issue tracker for any bugs or feature suggestions:\n\nhttps://github.com/koalaman/shellcheck/issues\n\n\n##
  Contributing\n\nPlease submit patches to code or documentation as GitHub pull requests!\n\nContributions
  must be licensed under the GNU GPLv3.\nThe contributor retains the copyright.\n\n\n##
  Copyright\n\nShellCheck is licensed under the GNU General Public License, v3. A
  copy of this license is included in the file [LICENSE](LICENSE).\n\nCopyright 2012-2015,
  Vidar 'koala_man' Holen and contributors.\n\nHappy ShellChecking!\n"
license-name: GPL-3
