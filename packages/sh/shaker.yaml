changelog-type: ''
hash: d72358796a0a91299e6105126072757758176f04af26e172639e4c955845ef82
synopsis: simple and interactive command-line build tool
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.5.0'
- '0.5.1'
latest: '0.5.1'
description-type: haddock
description: ! 'Shaker is a build tool which allow to simply compile or launch test
  on an haskell project and provides some interesting features like continuous action.
  With continuous action, an action (compile or test) will be automatically executed
  when a source modification is detected.


  All configuration are made via cabal; Shaker will read cabal configuration to discover
  source directories, compilation options and targets to compile.


  /Usage/


  The cabal configuration file should be generated beforehand with /cabal configure/.
  If you change your cabal configuration, you will need to recreate the configuration
  file.


  /Launch interactive prompt/


  In the root of your haskell project, launch shaker. An interactive prompt will allow
  you to execute different actions.


  /Launch a shaker action from command-line/


  In the root of your haskell project, launch shaker with your action as a command
  argument; shaker will execute the given action and exit. See examples for more details.


  /Action execution/


  [@Simple Execution@] An action can be launched normally, by entering the action
  name.


  [@Multiple action execution@] You can specify multiple action to execute simply
  by separating action by spaces.


  [@Continuous Action@] A continuous action will execute the action when a file modification
  has been detected.

  Every action are elligible to continuous action, you simply need to prefix them
  with ''~''. To stop a continuous action, simply use ^C.


  /Available actions/


  [@compile@] Compile the project. Targets of the compilation are main files (in case
  of executable) and exposed modules (in case of library).


  [@fullcompile@] Compile all hs files found in source directory. It is usefull to
  compile sources not declared in cabal. Since it is not possible to compile multiple
  modules with main, all modules with a main function are excluded.


  [@help@] Print all available action.


  [@clean@] Clean the directory containing .o and .hi files.


  [@test@] Launch all quickcheck properties and hunit tests of the project using test-framework.
  You can provide one or several regexps as argument and shaker will execute all tests
  matching one regexp. Quickcheck properties and HUnit tests are automatically discovered
  using GHC Api. All functions begining with “prop_” are considered as quickcheck
  properties and all functions of type Test.HUnit.Lang.Assertion and TestCase are
  considered as HUnit tests.


  [@test-module@] Same as test but test-module takes one or several module patterns
  as arguments.


  [@quit@] Exit the application. You can also use ^C or ^D to exit shaker.


  /Examples with interactive prompt/


  [@% compile@] Simply compile the project


  [@% clean compile@] Clean and compile the project


  [@% ~compile@] Switch to continuous mode and will compile the project when sources
  are modified.


  [@% ~clean compile@] Switch to continuous mode and will clean and compile the project
  when sources are modified.


  [@% test@] Execute all tests in the project


  [@% test prop_.*@] Execute all quickcheck properties of the project.


  [@% test testExecute.* testFilter.* @] Execute all tests matching testExecute.*
  or testFilter.*


  [@% test-module Regex Refle@] Launch all tests in modules matching Regex.* or Refle.*


  /Examples with command-line/


  [@% shaker fullcompile@] Launch shaker, execute the fullcompile action and give
  back the control.


  [@% shaker \"~fullcompile\" @] Launch shaker, continuously execute the fullcompile
  action until shaker is interrupted.

'
