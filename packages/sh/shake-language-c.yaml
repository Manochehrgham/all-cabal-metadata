changelog-type: markdown
hash: 0acbd826a1bb3aec647fb350a164b117c8ce9685bbf3121f2140704a1b019cdf
test-bench-deps:
  shake: ! '>=0.10'
  base: -any
  hspec: -any
  doctest: ! '>=0.8'
  shake-language-c: -any
  directory: -any
synopsis: Utilities for cross-compiling with Shake
changelog: ! '# Changelog for shake-language-c


  ## [v0.7.1][]


  * Fix compilation error with GHC 7.10 in test suite (#25)


  ## [v0.7.0][]


  * Add `arm64` ARM version

  * Add support for `arm64` to OSX toolchains

  * Fix compilation error with GHC 7.10 (#25)


  ## [v0.6.4][]


  * Fix Android toolchain definition for `x86` architecture


  ## [v0.6.3][]


  * Fix bug in `Development.Shake.Language.C.Target.OSX`: `getPlatformVersionsWithRoot`
  works correctly now with SDK directories without version number, as introduced by
  Xcode 6


  ## [v0.6.2][]


  Bug fix release.


  ## [v0.6.1][]


  Bug fix release.


  ## [v0.6.0][]


  ### Added


  * Add `Data.Default.Class.Default` instances for some data types; add dependency
  on package `data-default-class`.


  ### Changed


  * Don''t export the entire module `Development.Shake.Language.C.ToolChain` from
  `Development.Shake.Language.C`; expose `Development.Shake.Language.C.ToolChain`
  for toolchain writers.

  * Export `Development.Shake.Language.C.Language.Language` from `Development.Shake.Language.C.BuildFlags`
  instead of `Development.Shake.Language.C`.

  * Export `Development.Shake.Language.C.Rules` from `Development.Shake.Language.C`;
  hide `Development.Shake.Language.C.Rules` in Cabal file.

  * **Android**: Add `libcxxabi` include directory instead of `gabi++` to include
  path when compiling with `libcxx`. Fixes `error: no member named ''__cxa_demangle''
  in namespace ''__cxxabiv1''`.


  ### Removed


  * Remove `libppapi`, `libppapi_cpp`, `libnacl_io`, `libppapi_simple` from `Development.Shake.Language.C.Target.NaCl`.

  * Remove `Development.Shake.Language.C.Target.archString`.


  ## [v0.5.0][]


  First released version.


  [v0.6.4]: https://github.com/samplecount/shake-language-c/tree/v0.6.4

  [v0.6.3]: https://github.com/samplecount/shake-language-c/tree/v0.6.3

  [v0.6.2]: https://github.com/samplecount/shake-language-c/tree/v0.6.2

  [v0.6.1]: https://github.com/samplecount/shake-language-c/tree/v0.6.1

  [v0.6.0]: https://github.com/samplecount/shake-language-c/tree/v0.6.0

  [v0.5.0]: https://github.com/samplecount/shake-language-c/tree/v0.5.0

'
basic-deps:
  shake: ! '>=0.14'
  split: -any
  base: ! '>=4 && <5'
  data-default-class: -any
  unordered-containers: -any
  fclabels: ! '>=2'
  process: -any
all-versions:
- '0.5.0'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.7.0'
- '0.7.1'
latest: '0.7.1'
description-type: markdown
description: ! "# shake-language-c\n\n[![Build Status](https://travis-ci.org/samplecount/shake-language-c.svg?branch=develop)](https://travis-ci.org/samplecount/shake-language-c)\n\n**shake-language-c**
  is a cross-platform build system based on the [Shake](https://github.com/ndmitchell/shake)
  Haskell library. The focus is on cross-compilation of *C*, *C++* and *Objective
  C* source code to various target platforms. Currently supported target platforms
  are *iOS*, *Android NDK*, *Google Portable Native Client*, *MacOS X*, *Linux* and
  *Windows* (*MinGW*). Supported host platforms are *MacOS X*, *Linux* and *Windows*.\n\n##
  Documentation\n\nPlease see the [package documentation](http://hackage.haskell.org/package/shake-language-c).
  Feel free to open an [issue](https://github.com/samplecount/shake-language-c/issues)
  or send a pull request if there's anything missing that you want to see covered.\n\n##
  Examples\n\nHere's an *iOS* example that compiles all `.cpp` files in the `src`
  directory. The resulting static library `libexample.a` can then be used e.g. from
  an `XCode` project.\n\n    import Control.Applicative\n    import Control.Arrow\n
  \   import Development.Shake\n    import Development.Shake.FilePath\n    import
  Development.Shake.Language.C\n    import qualified Development.Shake.Language.C.Target.OSX
  as OSX\n\n    main :: IO ()\n    main = shakeArgs shakeOptions { shakeFiles = \"build/\"
  } $ do\n      let target = OSX.target OSX.iPhoneOS (Arm Armv7s)\n          toolChain
  = OSX.toolChain\n                        <$> OSX.getSDKRoot\n                        <*>
  (maximum <$> OSX.getPlatformVersions (targetPlatform target))\n                        <*>
  pure target\n\n      lib <- staticLibrary toolChain\n              (\"build\" </>
  toBuildPrefix target </> \"libexample.a\")\n              (return $ \n                   append
  compilerFlags [(Just Cpp, [\"-std=c++11\"])]\n               >>> append compilerFlags
  [(Nothing, [\"-O3\"])]\n               >>> append userIncludes [\"include\"] )\n
  \             (getDirectoryFiles \"\" [\"src//*.cpp\"])\n\n      want [lib]\n\nA
  more complex [build script](https://github.com/samplecount/methcla/tree/develop/Shake_Methcla.hs)
  is used by the [Methcla](http://methc.la) sound engine library. It defines Shake
  rules for building the library on various platforms and also exports functions for
  transparently including the library into other build systems. The build script makes
  extensive use of Shake [configuration files](https://github.com/samplecount/methcla/tree/develop/config).\n"
