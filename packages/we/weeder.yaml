homepage: https://github.com/ndmitchell/weeder#readme
changelog-type: text
hash: b846e5bc44454dbe897ef415e7c45f51a4be8841487d22e61818b93875ff8759
test-bench-deps: {}
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Detect dead code
changelog: ! "Changelog for Weeder\n\n0.1.1\n    #2, use \"stack query\" rather than
  parsing stack.yaml\n0.1\n    Initial version\n"
basic-deps:
  bytestring: -any
  extra: -any
  base: ==4.*
  unordered-containers: -any
  text: -any
  filepath: -any
  process: ! '>=1.2.3.0'
  cmdargs: -any
  hashable: -any
  aeson: -any
  yaml: -any
  vector: -any
all-versions:
- '0.1'
- '0.1.1'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '0.1.1'
description-type: markdown
description: ! '# Weeder [![Hackage version](https://img.shields.io/hackage/v/weeder.svg?label=Hackage)](https://hackage.haskell.org/package/weeder)
  [![Stackage version](https://www.stackage.org/package/weeder/badge/lts?label=Stackage)](https://www.stackage.org/package/weeder)
  [![Linux Build Status](https://img.shields.io/travis/ndmitchell/weeder.svg?label=Linux%20build)](https://travis-ci.org/ndmitchell/weeder)
  [![Windows Build Status](https://img.shields.io/appveyor/ci/ndmitchell/weeder.svg?label=Windows%20build)](https://ci.appveyor.com/project/ndmitchell/weeder)


  The principle is to delete dead code (pulling up the weeds). To do that, run:


  * GHC with `-fwarn-unused-binds -fwarn-unused-imports`, which finds unused definitions
  and unused imports.

  * [HLint](https://github.com/ndmitchell/hlint#readme), looking for "Redundant extension"
  hints, which finds unused extensions.

  * This tool, `weeder .` which detects redundant `build-depends` in the `.cabal`
  and functions that are exported internally but not available outside this library.


  To use `weeder` your code must be building with `stack`, as it piggy-backs off some
  files `stack` generates. If you don''t normally build with `stack` a simple `stack
  init && weeder . --build` is likely to be sufficient.

'
license-name: BSD3
