homepage: https://github.com/fhsjaagshs/webapp
changelog-type: markdown
hash: d35c069144ec39d3e4e21fae22a717c6b4969a68946b11c0e6ae2cdb9098673a
test-bench-deps: {}
maintainer: Nathaniel Symer <nate@symer.io>
synopsis: Haskell web app framework based on WAI & Warp
changelog: ! "# webapp changelog\n\nv 0.0.1\n\t\n- Initial release\n\nv 0.0.2\n\n-
  Fix omitted module in `webapp.cabal`: `Web.App.Monad.Internal`\n\nv 0.1.0\n\n- Included
  a new example: a counter app with an additional CLI parser.\n- Implemented a \"util\"
  CLI subcommand where you can \"mount\" an optparse-applicative @Parser@. See example.\n-
  Fixed termination handlers. Previously, they weren't installed when using HTTPS
  due to a bug in warp-tls. This has been remedied. Additionally, these handlers would
  destroy the initial state, rather than the current state from the @TVar@.\n\nv 0.2.0\n\t\n-
  Complete rewrite\n- New WAI-based web framework\n\t- Routing with captures, regexes,
  and literals\n\t- Streaming body based around `writeBody` function\n\t\t- Allow
  data structures to be streamed via the 'ToStream' typeclass.\n\t- Typesafe parameter
  coersion\n\nv 0.2.1\n\n\t- `stream` function can now optionally flush. `stream'`
  will always flush. This may improve list streaming functionality."
basic-deps:
  warp: -any
  streaming-commons: -any
  bytestring: -any
  wai: -any
  case-insensitive: -any
  unix: -any
  stm: -any
  base: <4.9
  text: -any
  network: -any
  blaze-builder: -any
  warp-tls: -any
  regex-posix: -any
  zlib: -any
  mtl: -any
  base16-bytestring: -any
  transformers: -any
  optparse-applicative: -any
  http-types: -any
  aeson: -any
all-versions:
- '0.0.2'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
author: Nathaniel Symer <nate@symer.io>
latest: '0.3.4'
description-type: markdown
description: ! '# webapp - WAI web framework


  Webapp is a web framework that is designed to provide everything needed to define
  & deploy a web app. For how to use, see Haddock documentation. For an example, see
  `example.hs`.


  Webapp provides a function called `webappMain` (as well as a series of other similarly
  named functions) that start the built-in webserver. Your web application''s `main`
  function should include a call to one of them at the end.


  # Using a webapp web app


  Once you''ve written your web app, deploying is up to you. Webapp will probably
  work with services like Heroku or complicated load balancers, but it designed to
  be a standalone server (i.e. no need to run behind something like nginx).


  Webapp works by first binding to an IPv4 TCP port, immediately after which resigning
  privileges†. Then it builds a `WAI` app from your `WebAppT` app, applies middleware,
  and runs `Warp`.


  † The effective GID & UID are set to match the real GID & UID.'
license-name: MIT
