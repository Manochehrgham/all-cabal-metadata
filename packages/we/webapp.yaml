homepage: https://github.com/fhsjaagshs/webapp
changelog-type: markdown
hash: 8fcf597d8379b297393fc7db8ec006da223a79b5c6a0ff3cb2f9aa6bda7033d1
test-bench-deps: {}
maintainer: Nathaniel Symer <nate@symer.io>
synopsis: Haskell web app framework based on WAI & Warp
changelog: ! "# webapp changelog\n\nv 0.0.1\n\t\n- Initial release\n\nv 0.0.2\n\n-
  Fix omitted module in `webapp.cabal`: `Web.App.Monad.Internal`\n\nv 0.1.0\n\n- Included
  a new example: a counter app with an additional CLI parser.\n- Implemented a \"util\"
  CLI subcommand where you can \"mount\" an optparse-applicative @Parser@. See example.\n-
  Fixed termination handlers. Previously, they weren't installed when using HTTPS
  due to a bug in warp-tls. This has been remedied. Additionally, these handlers would
  destroy the initial state, rather than the current state from the @TVar@.\n\nv 0.2.0\n\t\n-
  Complete rewrite\n- New WAI-based web framework\n\t- Routing with captures, regexes,
  and literals\n\t- Streaming body based around `writeBody` function\n\t\t- Allow
  data structures to be streamed via the 'ToStream' typeclass.\n\t- Typesafe parameter
  coersion"
basic-deps:
  warp: -any
  streaming-commons: -any
  bytestring: -any
  wai: -any
  case-insensitive: -any
  unix: -any
  stm: -any
  base: ! '>=4.8.0.0 && <=4.8.1.0'
  text: -any
  network: -any
  blaze-builder: -any
  warp-tls: -any
  regex-posix: -any
  zlib: -any
  mtl: -any
  base16-bytestring: -any
  transformers: -any
  optparse-applicative: -any
  http-types: -any
  aeson: -any
all-versions:
- '0.0.2'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
author: Nathaniel Symer <nate@symer.io>
latest: '0.2.0'
description-type: markdown
description: ! "# webapp - WAI web framework\n\nWebapp is a web framework that is
  designed to provide everything needed to define & deploy a web app.\n\nBasic example:\n\n
  \   module Main where\n    \n    import Web.App\n\timport qualified Control.Monad.State.Class
  as S\n    \n    instance WebAppState Integer where\n      initState = return 0\n
  \     destroyState st = do\n        putStr \"Counted: \"\n        print st\n\n    main
  = webappMainIO' app \"My Web App\"\n\n    app :: WebAppT Integer IO ()\n    app
  = do\n      get \"/\" $ do\n        addHeader \"Content-Type\" \"text/plain\"\n
  \  \t\tS.get >>= writeBody . show\n    \n      get \"/add\" $ do\n      \tS.state
  (((),) . (+) 1)\n   \t\tredirect \"/\"\n        \n      get \"/subtract\" $ do\n
  \       S.get >>= S.put . ((-) 1)\n        redirect \"/\""
license-name: MIT
