homepage: https://github.com/airalab/hs-web3#readme
changelog-type: ''
hash: 2722887f34ffc2739c25e28c16864e57e3a883c2c2c85ea44db7b8d66e72cf14
test-bench-deps:
  base: -any
  text: -any
  web3: -any
  memory: -any
maintainer: mail@akru.me
synopsis: Ethereum API for Haskell
changelog: ''
basic-deps:
  http-client: -any
  bytestring: -any
  base: ! '>4.8 && <4.11'
  data-default-class: -any
  text: -any
  memory: -any
  cryptonite: -any
  mtl: -any
  base16-bytestring: -any
  attoparsec: -any
  transformers: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.3.2.0'
- '0.3.2.1'
- '0.3.3.0'
- '0.3.4.0'
- '0.4.0.0'
author: Alexander Krupenkin
latest: '0.4.0.0'
description-type: markdown
description: ! "## Ethereum Haskell API\n\nThis is the Ethereum compatible Haskell
  API which implements the [Generic JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC)
  spec.\n\n[![Build Status](https://travis-ci.org/airalab/hs-web3.svg?branch=master)](https://travis-ci.org/airalab/hs-web3)\n[![Build
  status](https://ci.appveyor.com/api/projects/status/ly40a39ojsxpv24w?svg=true)](https://ci.appveyor.com/project/akru/hs-web3)\n[![Hackage](https://img.shields.io/hackage/v/web3.svg)](http://hackage.haskell.org/package/web3)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/web3.svg)\n![Haskell Programming
  Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\n###
  Installation\n\n    $ git clone https://github.com/airalab/hs-web3 && cd hs-web3\n
  \   $ stack setup\n    $ stack ghci\n\n> This library runs only paired with [geth](https://github.com/ethereum/go-ethereum)\n>
  or [parity](https://github.com/ethcore/parity) Ethereum node,\n> please start node
  first before using the library.\n\n### Web3 monad\n\nAny Ethereum node communication
  wrapped with `Web3` monadic type.\n\n    > :t web3_clientVersion\n    web3_clientVersion
  :: Web3 Text\n\nTo run this computation used `runWeb3'` or `runWeb3` functions.\n\n
  \   > runWeb3 web3_clientVersion\n    Right \"Parity//v1.4.5-beta-a028d04-20161126/x86_64-linux-gnu/rustc1.13.0\"\n\n###
  TemplateHaskell generator\n\n[Quasiquotation](https://wiki.haskell.org/Quasiquotation)
  is used to parse\ncontract ABI or load from JSON file. [TemplateHaskell](https://wiki.haskell.org/Template_Haskell)
  driven Haskell contract API generator can automatical create instances for `Event`
  and `Method`\ntypeclasses and function helpers.\n\n    > :set -XQuasiQuotes\n    >
  putStr [abiFrom|data/sample.json|]\n    Contract:\n            Events:\n                    Action1(address,uint256)\n
  \                   Action2(string,uint256)\n            Methods:\n                    0x03de48b3
  runA1()\n                    0x90126c7a runA2(string,uint256)\n\nSee example of
  usage.\n\n```haskell\nimport Data.ByteArray (Bytes)\nimport Data.Text (Text)\n\n[abiFrom|data/sample.json|]\n\nmain
  :: IO ()\nmain = do\n    tx <- runWeb3 (runA2 addr nopay \"Hello!\" 42)\n    print
  tx\n  where addr = \"0x19EE7966474b31225F71Ef8e36A71378a58a20E1\"\n```\n"
license-name: BSD3
