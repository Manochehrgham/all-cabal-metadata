homepage: https://github.com/airalab/hs-web3#readme
changelog-type: ''
hash: 565300c5e9277f37f43b1e52a32b33811337e9c4235dc58e45acefa9b9502a50
test-bench-deps:
  base: ! '>=4.9.0.0 && <4.10'
  text: ! '>=1.2.2.1 && <1.3'
  web3: ! '>=0.5.2.1 && <0.6'
  memory: ==0.13.*
maintainer: mail@akru.me
synopsis: Ethereum API for Haskell
changelog: ''
basic-deps:
  http-client: ! '>=0.4.31.2 && <0.5'
  bytestring: ! '>=0.10.8.1 && <0.11'
  base: ! '>4.8 && <4.11'
  text: ! '>=1.2.2.1 && <1.3'
  memory: ==0.13.*
  http-client-tls: ! '>=0.2.4.1 && <0.3'
  cryptonite: ==0.19.*
  base16-bytestring: ! '>=0.1.1.6 && <0.2'
  attoparsec: ! '>=0.13.1.0 && <0.14'
  transformers: ! '>=0.5.2.0 && <0.6'
  aeson: ! '>=0.11.2.1 && <0.12'
  template-haskell: ! '>=2.11.0.0 && <2.12'
  vector: ! '>=0.11.0.0 && <0.12'
all-versions:
- '0.3.2.0'
- '0.3.2.1'
- '0.3.3.0'
- '0.3.4.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.5.2.1'
author: Alexander Krupenkin
latest: '0.5.2.1'
description-type: markdown
description: ! "## Ethereum Haskell API\n\nThis is the Ethereum compatible Haskell
  API which implements the [Generic JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC)
  spec.\n\n[![Build Status](https://travis-ci.org/airalab/hs-web3.svg?branch=master)](https://travis-ci.org/airalab/hs-web3)\n[![Build
  status](https://ci.appveyor.com/api/projects/status/8ljq93nar8kobk75?svg=true)](https://ci.appveyor.com/project/akru/hs-web3)\n[![Hackage](https://img.shields.io/hackage/v/web3.svg)](http://hackage.haskell.org/package/web3)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/web3.svg)\n![Haskell Programming
  Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\n###
  Installation\n\n    $ git clone https://github.com/airalab/hs-web3 && cd hs-web3\n
  \   $ stack setup\n    $ stack ghci\n\n> This library runs only paired with [geth](https://github.com/ethereum/go-ethereum)\n>
  or [parity](https://github.com/ethcore/parity) Ethereum node,\n> please start node
  first before using the library.\n\n### Web3 monad\n\nAny Ethereum node communication
  wrapped with `Web3` monadic type.\n\n    > :t web3_clientVersion\n    web3_clientVersion
  :: Provider a => Web3 a Text\n\nTo run this computation used `runWeb3'` or `runWeb3`
  functions.\n\n    > runWeb3 web3_clientVersion\n    Right \"Parity//v1.4.5-beta-a028d04-20161126/x86_64-linux-gnu/rustc1.13.0\"\n\nFunction
  `runWeb3` use default `Web3` provider at `localhost:8545`.\n\n    > :t runWeb3\n
  \   runWeb3\n      :: MonadIO m => Web3 DefaultProvider b -> m (Either Web3Error
  b)\n\n### TemplateHaskell generator\n\n[Quasiquotation](https://wiki.haskell.org/Quasiquotation)
  is used to parse\ncontract ABI or load from JSON file. [TemplateHaskell](https://wiki.haskell.org/Template_Haskell)
  driven Haskell contract API generator can automatical create instances for `Event`
  and `Method`\ntypeclasses and function helpers.\n\n    > :set -XQuasiQuotes\n    >
  putStr [abiFrom|data/sample.json|]\n    Contract:\n            Events:\n                    Action1(address,uint256)\n
  \                   Action2(string,uint256)\n            Methods:\n                    0x03de48b3
  runA1()\n                    0x90126c7a runA2(string,uint256)\n\nSee example of
  usage.\n\n```haskell\nimport Data.Text (unpack)\nimport Text.Printf\n\n[abiFrom|data/ERC20.json|]\n\nmain
  :: IO ()\nmain = do\n    Right s <- runWeb3 $ do\n        n <- name token\n        s
  <- symbol token\n        d <- decimals token\n        return $ printf \"Token %s
  with symbol %s and decimals %d\"\n                        (unpack n) (unpack s)
  d\n    putStrLn s\n  where token = \"0x237D60A8b41aFD2a335305ed458B609D7667D789\"\n```\n"
license-name: BSD3
