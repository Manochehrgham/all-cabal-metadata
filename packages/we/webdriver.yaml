homepage: https://github.com/kallisti-dev/hs-webdriver
changelog-type: markdown
hash: 3b2338a67516a2ee45dbad202b98ff77b9dde6cd28f11f34fed5d2345f114146
test-bench-deps: {}
maintainer: kallisti.dev@gmail.com
synopsis: a Haskell client for the Selenium WebDriver protocol
changelog: ! "#Change Log\r\n##0.8.4\r\n* Added a new `Test.WebDriver.Common.Keys`
  module with named constants for use with `sendKeys`\r\n* Updated old URLs in documentation\r\n*
  Introduced support for http-client 5.0\r\n\r\n##0.8.3\r\n* Removed most upper bounds
  on dependencies in our cabal file to avoid stackage version madness.\r\n\r\n##0.8.2\r\n*
  Added a `saveScreenshot` command, for conenience, which writes the results of the
  `screenshot` command directly to a given file path.\r\n* Added new `WebDriver` instance
  for `ExceptT`.\r\n\r\n##0.8.1\r\n* Previously internal convenience functions `noReturn`
  and `ignoreReturn` are now exported in Test.WebDriver.JSON\r\n* `elemInfo` is now
  deprecated due to it being phased out in the Marionette (Firefox) driver. It will
  likely be removed once Selenium 4 is released.\r\n* Fixed an issue causing PAC settings
  to not work.  \r\n\r\n##0.8.0.4\r\n* Quick fix to parse \"unsupported command\"
  errors when using Marionette driver (Selenium + Marionette has nonstandard behavior
  when reporting that error type)\r\n\r\n##0.8.0.3\r\n* Fixed build errors for GHC
  < 7.10. webdriver now builds with GHC stable releases 7.4.2, 7.6.3, and 7.8.4\r\n*
  Fixed support for bytestring 0.9.*\r\n\r\n##0.8.0.2\r\n* Fixed issue introduced
  in 0.8 that caused build failure when using aeson < 0.10\r\n\r\n##0.8.0.1\r\n* findElems
  and and findElemsFrom were accidentally changed to return a single Element in the
  last release. This has been fixed. \r\n\r\n##0.8\r\n\r\n###Command changes\r\n*
  All commands that previously accepted a list parameter now accepts any instance
  of `Foldable` instead.\r\n\r\n\r\n\r\n###Overloadable configuration\r\nIt is now
  possible to define custom configuration types that can be used to initialize webdriver
  sessions.\r\n\r\n`runSession` now has the following type:\r\n```hs\r\n  runSession
  :: WebDriverConfig conf => conf -> WD a -> IO a\r\n```\r\nAnd the typeclass to create
  new config types looks like this:\r\n\r\n```hs\r\n  -- |Class of types that can
  configure a WebDriver session.\r\n  class WebDriverConfig c where\r\n    -- |Produces
  a 'Capabilities' from the given configuration.\r\n    mkCaps :: MonadBase IO m =>
  c -> m Capabilities\r\n\r\n    -- |Produces a 'WDSession' from the given configuration.\r\n
  \   mkSession :: MonadBase IO m => c -> m WDSession\r\n```\r\n\r\nOf course you
  can still use `WDConfig`, as it is now an instance of `WebDriverConfig`.\r\n\r\n###Reworked
  custom HTTP headers interface\r\n* Support for custom request headers was added
  rather hastily, resulting in several functions having explicit `RequestHeaders`
  parameters. The interface has been reworked now so that custom request headers are
  stored inside `WDSession` and explicit `RequestHeaders` parameters have been removed.\r\n*
  There's also now a distinction in configuration between `wdAuthHeaders` which are
  used only during initial session creation, and `wdRequestHeaders`, which are used
  with all other HTTP requests\r\n* Two new utility functions were added to make working
  with custom HTTP headers easier: `withRequestHeaders` and `withAuthHeaders`\r\n\r\n###Clean-up
  and dependency changes\r\n* Removed a whole mess of unusued import and deprecation
  warnings when building with GHC 7.10\r\n* We now enforce an attoparsec lower bound
  of 0.10 (there was no lower bound before)\r\n* The unnecessary dependency on mtl
  is now removed.\r\n* Added some monad transformer instances for WebDriver and WDSessionState
  that were mysteriously missing: strict WriterT, ReaderT, ListT\r\n* data-default
  dependency was changed to data-default-class\r\n\r\n##0.7\r\n\r\nBecause this is
  a fairly major update, changes have been described in detail and organized into
  categories. Most of the potentially breaking changes are to the \"intermediate\"
  API that might affect library code or advanced applications; changes that are not
  entirely \"user-facing\" but also not quite \"internal\".\r\n\r\nBasic web test
  code only has to contend with a few additional symbol exports, overloading of type
  signatures on some existing functions, and the reworked session history API.\r\n\r\n###Top-level
  API (exposed by`Test.WebDriver` module)\r\n  * `withSession` is now overloaded over
  the new constraint alias `WDSessionStateControl` ([see below](#typeclass-api)).
  This means that it can be used with monad transformer stacks over `WD` without any
  lifting required.\r\n  * Added several new `WDConfig` convenience functions: `modifyCaps`,
  `useBrowser`, `useVersion`, `usePlatform`, `useProxy`; these functions are overloaded
  over the new `HasCapabilities` constraint alias ([see below](#typeclass-api))\r\n
  \ * Reworked and improved session history API\r\n    * Added a `SessionHistory`
  record type to replace the old `(Request, Response ByteString)` type. The new type
  has the same data as the previous tuple, but additionally records the number of
  attempted HTTP retries, and instead of `Response ByteString` uses `Either SomeException
  (Response ByteString)` so that HTTP request errors can be logged.\r\n    * Removed
  `wdKeepSessHist` field from `WDConfig` and replaced it with `wdHistoryConfig`, which
  uses a new `SessionHistoryConfig` type.\r\n      \r\n      ```hs\r\n        -- |A
  function used to append new requests/responses to session history.\r\n        type
  SessionHistoryConfig = SessionHistory -> [SessionHistory] -> [SessionHistory]\r\n
  \     ```\r\n    * The new field can be configured using several new constants:
  `noHistory`, `onlyMostRecentHistory`, and `unlimitedHistory`. Note: `unlimitedHistory`
  is now the default configuration for history. For the old behavior, use `onlyMostRecentHistory`.\r\n
  \   * New top-level functions for accessing session history\r\n      \r\n      ```hs\r\n
  \       -- |Gets the command history for the current session.\r\n        getSessionHistory
  :: WDSessionState wd => wd [SessionHistory]\r\n        \r\n        -- |Prints a
  history of API requests to stdout after computing the given action\r\n        --
  \ or after an exception is thrown\r\n        dumpSessionHistory :: WDSessionStateControl
  wd => wd a -> wd a\r\n      ```\r\n\r\n###Implicit waits API (`Test.WebDriver.Commands.Wait`)\r\n*
  Added functions for checking some expected conditions in explicit waits: `expectNotStale`,
  `expectAlertOpen`, `catchFailedCommand`\r\n\r\n###Typeclass API\r\n* `WDSessionState`
  is now a superclass of `Monad` and `Applicative` instead of `MonadBaseControl IO`.
  This makes the class significantly more flexible in how it can be used, as it no
  longer requires `IO` as a base monad.\r\n  * For convenience the following constraint
  aliases were added (requires `ConstraintKinds` extension to use). Several existing
  API functions have been updated to use these new constraints where appropriate.\r\n
  \   \r\n    ```hs\r\n      type WDSessionStateIO s = (WDSessionState s, MonadBase
  IO s)\r\n      type WDSessionStateControl s = (WDSessionState s, MonadBaseControl
  IO s)\r\n    ```\r\n    \r\n  * The `WDSessionStateControl` constraint is equivalent
  to the previous `WDSessionState` constraint.\r\n  * The `WebDriver` class is unaffected
  (it is now a superclass of `WDSessionStateControl`), so code using the basic `Test.WebDriver`
  API will not be affected.\r\n\r\n* New typeclasses added to `Test.WebDriver.Capabilities`:
  `GetCapabilities` and `SetCapabilities`; for convenience a constraint alias `HasCapabilities`
  has been added to work with both of these classes (requires `ConstraintKinds` extension
  to use)\r\n      \r\n      ```hs\r\n        -- |A typeclass for readable 'Capabilities'\r\n
  \       class GetCapabilities t where\r\n          getCaps :: t -> Capabilities\r\n
  \       \r\n        -- |A typeclass for writable 'Capabilities'\r\n        class
  SetCapabilities t where\r\n          setCaps :: Capabilities -> t -> t\r\n        \r\n
  \       -- |Read/write 'Capabilities'\r\n        type HasCapabilities t = (GetCapabilities
  t, SetCapabilities t)\r\n      ```\r\n      \r\n###Minor API changes (not exposed
  to `Test.WebDriver` module)\r\n* `Test.WebDriver.Session` changes\r\n  * new function
  `mostRecentHistory` added\r\n  * `lastHTTPRequest` renamed to `mostRecentHTTPRequest`
  (for consistency)\r\n  * `mkSession` moved from `Test.WebDriver.Config` to `Test.WebDriver.Session`\r\n*
  `Test.WebDriver.Internal` changes\r\n  * `sendHTTPRequest` now returns `(Either
  SomeException (Response ByteString))` and catches any exceptions that occur during
  the request. When using default configuration, the exceptions are also saved in
  'wdSessHist'.\r\n  * `Test.WebDriver.Internal` no longer defines and exports exception
  types. All exception defined here previously have been moved to an unexposed `Test.WebDriver.Exceptions.Internal`
  module. These types are still exported in the usual places.\r\n\r\n###Dependencies\r\n*
  Now supports http-types up to 0.9\r\n\r\n##0.6.3.1\r\n* Fixed an issue with aeson
  0.10 support\r\n\r\n##0.6.3\r\n* Support aeson 0.10\r\n* Added support for multiple
  HTTP attempts per command request, using the new WDConfig field wdHTTPRetryCount\r\n\r\n##0.6.2.1\r\n*
  Supports vector 0.11, aeson 0.9, attoparsec 0.13\r\n\r\n##0.6.2\r\n* Supports GHC
  7.10\r\n* Supports reworked Chrome capabilities used by newer versions of WebDriver\r\n*
  Servers that return empty JSON strings for commands with no return value will no
  longer cause parse errors \r\n\r\n##0.6.1\r\n* Added the ability to pass HTTP request
  headers at session creation\r\n* Fixed an issue involving an obsolete JSON representation
  of Chrome capabilities\r\n* Relax upper bound on exceptions dependency\r\n\r\n##0.6.0.4\r\n*
  Support for monad-control 1.0\r\n\r\n##0.6.0.3\r\n* Relaxed upper bounds on text
  and http-client versions \r\n\r\n##0.6.0.2\r\n* Added support for aeson > 0.8 and
  network > 2.6\r\n* Added support for the \"X-Response-Body-Start\" HTTP header used
  for error responses in newer http-client versions\r\n\r\n##0.6.0.1\r\n* Fixed Haddock
  parse errors. No code changes introduced in this version.\r\n\r\n##0.6\r\n* Rather
  than WDSession serving dual roles as configuration and state, its functionality
  has been split into 2 respective types: WDConfig and WDSession.\r\n* runSession
  now takes a WDConfig instead of WDSession and Capabilities parameters.\r\n* runSession
  no longer closes its session on successful completion; use finallyClose or closeOnException
  for this behavior\r\n* The old Test.WebDriver.Classes module has been split into
  Test.WebDriver.Session and Test.WebDriver.Class\r\n* SessionState typeclass renamed
  to WDSessionState\r\n* We now use the http-client package instead of HTTP. This
  is reflected in the addition of Manager fields in both WDConfig and WDSession\r\n\r\n##0.5.5\r\n*
  Added optional HTTP history tracking for debugging purposes.\r\n\r\n##0.5.4\r\n*
  MonadCatchIO is deprecated in favour of exceptions.\r\n* Relaxed dependencies on
  mtl, network and scientific.\r\n\r\n##0.5.3.3\r\n* Relaxed text dependency up to
  1.2\r\n\r\n##0.5.3.2\r\n###bug fixes\r\n* fixed remaining compilation problems with
  aeson. now supports aeson >= 0.6.2.0 && < 0.8\r\n* now depends on directory-tree
  instead of filesystem-trees. this fixes several problems with firefox/chrome profile
  support.\r\n\r\n##0.5.3.1\r\n###bug fixes\r\n* fixed compilation error with aeson
  0.7 and greater\r\n\r\n##0.5.3\r\n\r\n###new features\r\n* SessionNotCreated constructor
  added to FailedCommandType\r\n* new command deleteCookieByName added\r\n\r\n###bug
  fixes\r\n* asyncJS now properly distinguishes between a null return and a script
  timeout\r\n* fixed a change in waitWhile causing the opposite of expected behavior\r\n\r\n##0.5.2\r\n###API
  changes\r\n* added many new Internet Explorer capabilities\r\n* added additionalCaps
  to Capabilities, which allows support for non-standard capabilities\r\n* Browser
  type now supports non-standard browsers via the new Browser constructor\r\n* added
  support for the new unexpectedAlertBehaviour capability\r\n\r\n###new features\r\n*
  new command getApplicationCacheStatus supported\r\n* error reporting for unknown
  commands now slightly improved\r\n\r\n###bug fixes\r\n* internal request URIs are
  now properly percent-encoded\r\n* improved handling of browser-specific capabilities\r\n*
  fixed incompatability with new session creation protocol changes introduced in selenium
  2.35\r\n* updated to work with Aeson 0.6.2 and onward\r\n\r\n##hs-webdriver 0.5.1\r\n###API
  changes\r\n* Test.WebDriver.Internal.FailedCommandInfo now stores screenshots as
  lazy bytestrings\r\n* Test.WebDriver.Common.Profile now stores PreparedProfile as
  a lazy bytestring\r\n* Test.WebDriver.Chrome.Extension now stores ChromeExtension
  as a lazy bytestring\r\n* The LogPref type has been renamed to LogLevel to reflect
  its use within the new log interface\r\n\r\n###new features\r\n* a new log interface
  as specified by the webdriver standard. This includes the functions getLogs and
  getLogTypes, and the types LogType and LogEntry. \r\n* waitWhile and waitUntil now
  show more detailed information about why an explicit wait timed out.\r\n\r\n##hs-webdriver
  0.5.0.1\r\n###bug fixes\r\n* hs-webdriver now correctly handles a wider variety
  of server-specific responses when a webdriver command expects no return value.\r\n*
  An issue with the redirect status codes used during session creation has been fixed.\r\n*
  As a result of the above fixes, hs-webdriver should now work with chromedriver.
  Note that, prior to this version, you can still use chromedriver if you use the
  selenium standalone server jar as a proxy.\r\n\r\n\r\n##hs-webdriver 0.5\r\n###API
  changes\r\n* Test.WebDriver.Commands.Wait.unexpected now accepts a String argument,
  which is used as an error message\r\n* screenshot and uploadZipEntry from Test.WebDriver.Commands
  now use lazy bytestrings\r\n* wdBasePath field added to WDSession. This allows you
  to specify a custom base path for all WebDriver requests. The default, as specified
  in the WebDriver standard, is \"/wd/hub\"\r\n\r\n###new features\r\n* added Test.WebDriver.Commands.screenshotBase64\r\n\r\n##hs-webdriver
  0.4\r\n\r\n###API changes\r\n* finallyClose and closeOnException are now overloaded
  on the WebDriver class.\r\n* NoSessionId and doSessCommand were moved from Test.WebDriver.Classes
  to Test.WebDriver.Commands.Internal\r\n\r\n###bug fixes\r\n* fixed a typo in the
  export list of Firefox.Profile; deleteFile is now correctly exported instead of
  removeFile from System.Directory \r\n* fixed an error in the JSON representation
  of MouseButton\r\n\r\n###new features\r\n* A new module, Test.WebDriver.Commands.Internal,
  which exports some low-level functions used to implement the high-level interface.
  This makes it possible for library users to extend hs-webdriver with nonstandard
  or unimplemented features.\r\n\r\n## hs-webdriver 0.3.3\r\n\r\n###API changes\r\n*
  The representation of profile files has been changed to use a HashMap instead of
  an association list. This ensures that destination paths are always unique.\r\n\r\n###bug
  fixes\r\n* The default preferences used by Selenium are now merged into the preferences
  of Firefox profiles loaded from disk.\r\n* addExtension will now correctly add extension
  directories to a profile.\r\n\r\n###known issues\r\n* Because of the way loadProfile
  currently adds directories to the profileFiles HashMap, it's possible for extensions
  added via addExtension to be overriden by the extensions originally listed in the
  on-disk extensions directory.\r\n\r\n###new features \r\n* It's now possible to
  add entire directories to a profile in pure code using addFile and addExtension.\r\n*
  new functions in Common.Profile: unionProfiles, onProfileFiles, onProfilePrefs\r\n*
  new function in Commands.Wait: onTimeout\r\n* the WD monad now has a MonadCatchIO
  instance, as an alternative to lifted-base for exception handling\r\n\r\n\r\n##
  hs-webdriver 0.3.2.1\r\n\r\n###bug fixes\r\n* Removed a bug in waitWhile' that resulted
  in an infinite loop\r\n* Fixed the incorrect representation of JSON profiles\r\n*
  Fixed relative path issues when zipping profile directories from disk\r\n\r\n##
  hs-webdriver 0.3.2\r\n\r\n###bug fixes\r\n* Changed the constraint on filesystrem-trees
  to avoid a broken version\r\n* Added the missing exports for addFile and deleteFile
  in Common.Profile and Firefox.Profile\r\n\r\n###new features\r\n* new Common.Profile
  functions: hasExtension, hasFile\r\n\r\n## hs-webdriver 0.3.1 \r\n\r\n###API changes\r\n*
  The representation of Profiles has changed, allowing it to store arbitrary files
  as well as extensions. The functional API for working with preferences and extensions
  ismostly unchanged, except for the behavior of calling addExtension consecutively
  with the same filepath argument.\r\n* The old <&&> and <||> operators in Test.WebDriver.Commands.Wait
  have been removed and replaced with the ones exported from Control.Conditional from
  the cond package.\r\n\r\n###bug fixes\r\n* Fixed memory leak resulting from an infinite
  recursion in the FromJSON instance of PreparedProfile.\r\n* loadProfile now properly
  loads an entire Firefox profile from disk, rather than just the extensions and preferences.\r\n\r\n###known
  issues\r\n* An issue involving lazy bytestring IO in the zip-archive package means
  that unusually large profiles might exceed the OSes open file limit.\r\n\r\n###new
  features\r\n* several new functions for working with Firefox/Opera profiles have
  been added. This includes functions for loading large profiles from disk, functions
  for working with zipped profiles, and functions for adding arbitrary files to a
  profile in pure code. \r\n* new helper functions were added to Test.WebDriver.Commands.Wait,
  exported from the cond package.\r\n\r\n## hs-webdriver 0.3.0.1\r\n\r\n###bug fixes\r\n*
  due to a nonconformance in the spec from the Grid server, wire responses were being
  received that contained no sessionId key, which subsequently resulted in a parse
  error from our JSON parser. This has been fixed, so that an omitted sessionId defaults
  to Nothing.\r\n* major bux fixes in the Firefox profile code. Note that loadProfile
  is unlikely\r\nto work as expected, but prepareTempProfile should.\r\n\r\n## hs-webdriver
  0.3 \r\n\r\n### API changes\r\n* 2 typeclasses were introduced. All WebDriver commands
  are now overloaded on WebDriver class, so that monad transformers with a WD base
  can be used conveniently.\r\n* The MonadState instance of WD has been removed and
  replaced by SessionState.\r\n* The Firefox profile code has been generalized to
  work with either Opera or Firefox profiles. A phantom type parameter is used to
  create a distinction between the two. See documentation on Common.Profile and Firefox.Profile
  to learn about the specific changes that were made.\r\n* FFLogPref is now removed
  and replaced by the LogPref type, because both Firefox and Opera config use the
  same logging preference values.\r\n* Several new modules have been created, including:
  Capabilities, Monad, Classes, Exceptions. Many of the definitions have been moved
  around, but the export lists of the pre-existing modules are the same.\r\n\r\n###
  bug fixes\r\n* Various issues with the serialization of capabilities meant that
  Chrome, IE, and Opera weren't able to startup correctly with default capabilities.
  This is now fixed.\r\n\r\n### new features\r\n* General documentation improvements.\r\n*
  Opera configuration is now implemented.\r\n\r\n## hs-webdriver 0.2\r\n\r\n### API
  changes\r\n* FailedCommandInfo changed so that it stores a WDSession rather than
  just a Maybe SessionId, thus providing server host and port information as well
  as the session ID.\r\n* As a result, mkFailedCommandInfo is now String -> WD FailedCommandInfo,
  since it requires access to the WDSession state.\r\n* HTML5StorageType changed to
  the more accurate WebStorageType\r\n\r\n### new features\r\n* general documentation
  improvements\r\n* the uploadFile, uploadRawFile, and uploadZipEntry functions, which
  support uploading file contents to the remote server\r\n\r\n## hs-webdriver 0.1\r\n\r\n###
  API changes\r\n* getWindowSize, setWindowSize, getWindowPos, and setWindowPos have
  all been deprived of their WindowHandle argument. This is due to the fact that using
  unfocused windows with those commands causes undefined behavior. \r\n\r\n### new
  features\r\n* the mkCookie function for convenient cookie construction\r\n* the
  focusFrame function for focusing to individual frames\r\n* the setPageLoadTimeout
  function\r\n* the maximize function for maximizing windows\r\n* support for HTML
  5 web storage\r\n"
basic-deps:
  http-client: ! '>=0.3'
  exceptions: ! '>=0.4'
  zip-archive: ! '>=0.1.1.8'
  bytestring: ! '>=0.9'
  base: ==4.*
  data-default-class: -any
  time: ! '>1.0'
  base64-bytestring: ! '>=1.0'
  unordered-containers: ! '>=0.1.3'
  text: ! '>=0.11.3'
  monad-control: ! '>=0.3'
  filepath: ! '>1.0'
  network: ! '>=2.6'
  lifted-base: ! '>=0.1'
  directory-tree: ! '>=0.11'
  network-uri: ! '>=2.6'
  transformers-base: ! '>=0.1'
  attoparsec: ! '>=0.10'
  transformers: ! '>=0.4'
  temporary: ! '>=1.0'
  scientific: ! '>=0.2'
  http-types: ! '>=0.8'
  aeson: ! '>=0.6.2.0'
  vector: ! '>=0.3'
  directory: ! '>1.0'
all-versions:
- '0.6'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.0.3'
- '0.6.0.4'
- '0.6.1'
- '0.6.2'
- '0.6.2.1'
- '0.6.3.1'
- '0.7'
- '0.8.0.3'
- '0.8.0.4'
- '0.8.1'
- '0.8.2'
- '0.8.3'
- '0.8.4'
author: Adam Curtis
latest: '0.8.4'
description-type: markdown
description: ! "hs-webdriver is a Selenium WebDriver client for the Haskell programming
  language. You can use it to automate browser sessions for testing, system administration,
  etc.\r\n\r\nFor more information about Selenium itself, see http://seleniumhq.org/\r\n\r\n#
  Contents\r\n* [Installation](#installation)\r\n    * [Installation from Hackage](#installation-from-hackage)\r\n
  \   * [Installation from This Repository](#installation-from-this-repository)\r\n*
  [Getting Started](#getting-started)\r\n    * [Using the Selenium Server](#using-the-selenium-server)\r\n
  \   * [Hello, World!](#hello-world)\r\n        * [Demonic invocations: a bit of
  boilerplate](#demonic-invocations-a-bit-of-boilerplate)\r\n        * [Configuring
  a WebDriver session](#configuring-a-webdriver-session)\r\n        * [Initializing
  tests](#initializing-tests)\r\n        * [Actually writing tests!](#actually-writing-tests)\r\n*
  [Integration with Haskell Testing Frameworks](#integration-with-haskell-testing-frameworks)\r\n*
  [Documentation](#documentation)\r\n\r\n# Installation\r\nhs-webdriver uses the Cabal
  build system to configure, build, install, and generate documentation on multiple
  platforms.\r\n\r\nFor more information on using Cabal and its various installation
  options, see the Cabal User's Guide at http://www.haskell.org/cabal/users-guide/index.html\r\n\r\n##
  Installation from Hackage\r\nhs-webdriver is hosted on Hackage under the name webdriver.
  Thus, the simplest way to download and install the most recent version of hs-webdriver
  is to run:\r\n\r\n```sh\r\ncabal install webdriver\r\n```\r\nThere are also options
  to do system-wide installation, version selection, and other build options; see
  cabal-install documentation.\r\n\r\n## Installation from this repository\r\n\r\nTo
  build and install a git revision for a single user on your system, run these commands
  from within the repository directory\r\n\r\n\r\n### Using cabal-install\r\n\r\n```sh\r\ncabal
  install\r\n```\r\n\r\n### Using Cabal\r\n\r\nFor systems without cabal-install available,
  you can also run the Setup.hs\r\nscript, as such:\r\n\r\n```sh\r\nrunhaskell Setup.hs
  configure --user\r\nrunhaskell Setup.hs build\r\nrunhaskell Setup.hs install\r\n```\r\n\r\nFor
  more build options, please refer to the Cabal documentation.\r\n\r\n\r\n#Getting
  Started\r\n\r\nWebDriver is a client-server protocol. Since hs-webdriver only implements
  a WebDriver client, you must have a WebDriver server to which you can connect in
  order to make use of this library.\r\n\r\n##Using the Selenium Server\r\nWhile you
  can use any WebDriver server out there, probably the simplest server to use with
  hs-webdriver is [Selenium Server](http://docs.seleniumhq.org/download/). You'll
  need an installation of the Java runtime to use this server. Once you've downloaded
  Selenium Server to your current working directory, you can start the server with
  this shell command:\r\n\r\n    java -jar selenium-server-standalone-*.jar\r\n\r\nThe
  server should now be listening at localhost on port 4444.\r\n\r\n##Hello, World!\r\nWith
  the Selenium server running locally, you're ready to write browser automation scripts
  in Haskell.\r\n\r\nA [simple example can be found here](/examples/readme-example-beginner.md),
  written in literate Haskell so that you can compile it with GHC yourself. It is
  very beginner friendly and assumes no prior knowledge of Haskell. If you already
  have an intermediate understanding of Haskell, [this is the example for you](/examples/readme-example-intermediate.md)
  For other examples see the [examples](examples/) and [test/etc](test/etc/) directory.\r\n\r\n\r\n#Integration
  with Haskell Testing Frameworks\r\n\r\nThis package does not provide utilities to
  integrate with popular Haskell testing frameworks. However, other packages exist
  for this purpose:\r\n\r\n* [hspec-webdriver](https://hackage.haskell.org/package/hspec-webdriver)\r\n*
  [quickcheck-webdriver](https://hackage.haskell.org/package/quickcheck-webdriver)\r\n\r\n#Documentation\r\n\r\nDocumentation
  for hs-webdriver is available on Hackage at <http://hackage.haskell.org/package/webdriver>.
  You can also generate local HTML documentation from this source revision with the
  following shell command:\r\n\r\n```sh\r\nrunhaskell Setup.hs haddock\r\n```\r\n\r\nHaddock
  will generate documentation and save it in `dist/doc/html/webdriver`\r\n\r\n"
license-name: BSD3
