homepage: https://github.com/webcrank/webcrank-dispatch.hs
changelog-type: ''
hash: 90824819bd919ab067727a3f3d337b30b6fd9920e9d4d5d4713a45c570f005e5
test-bench-deps: {}
maintainer: Richard Wallace <rwallace@thewallacepack.net>
synopsis: A simple request dispatcher.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.6 && <5'
  unordered-containers: ! '>=0.2'
  text: ! '>=0.11'
  reroute: ! '>=0.1'
  path-pieces: ! '>=0.1'
  mtl: ! '>=2.0'
all-versions:
- '0.1'
author: Richard Wallace <rwallace@thewallacepack.net>
latest: '0.1'
description-type: markdown
description: ! "[Travis](https://travis-ci.org/webcrank/webcrank-dispatch.hs) [![Build
  Status](https://travis-ci.org/webcrank/webcrank-dispatch.hs.png)](https://travis-ci.org/webcrank/webcrank-dispatch.hs)\n\nA
  type-safe request dispatcher and path renderer.\n\n```\n{-# LANGUAGE DataKinds #-}\n{-#
  LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE TypeOperators #-}\n\nimport Webcrank.Dispatch\n```\n\n#
  Paths\n## Building Paths\n\nThe simplest `Path` is `root`, which is equivalent to
  `/`.\n\nOther routes can be built with `</>`:\n\n```\ndocsPath = \"package\" \\<\\/>
  \"webcrank-dispatch-0.1\" \\<\\/> \"docs\"\n```\n\nPaths can contain parameters.
  To create a parameterized path, use\n`param` as a path component:\n\n```\ndocsPath
  :: Path '[String]\ndocsPath = \"package\" </> param </> \"docs\"\n```\n\nPaths can
  contain as many parameters of varying types as needed:\n\n```\nwat :: Path '[String,
  Int, Bool, Int, String]\nwat :: \"this\" </> param </> param </> \"crazyness\" </>
  param </> \"ends\" </> param </> param\n```\n\nPath parameters can be of any type
  that have instances for `Typeable` and `PathPiece`.\n\n## Rendering Paths\n\n`Path`s
  can be rendered using `renderPath` and\n`params`.\n\n```\n>>> renderPath root params\n[\"/\"]\n```\n\n```\n>>>
  renderPath docsPath $ params \"webcrank-dispatch-0.1\"\n[\"package\", \"webcrank-dispatch-0.1\",
  \"docs\"]\n```\n\n```\n>>> renderPath wat $ params \"down is up\" 42 False 7 \"up
  is down\"\n[\"this\", \"down is up\", \"42\", \"crazyness\", \"False\", \"ends\",
  \"7\", \"up is down\"]\n```\n\nNote in the last example that no encoding is done
  by @renderPath@.\n\n# Dispatching\n\nAn elementary `Dispatcher` can be built using
  `==>`.\n\n```\ndisp = root ==> \\\"Dispatched\\\"\n```\n\n`Dispatcher`s form a `Monoid`,
  so more interesting dispatchers can\nbe built with `<>` or `mconcat`.\n\n```\ndisp
  = mconcat\n  [ root ==> \"Welcome!\"\n  , \"echo\" </> param ==> id\n  ]\n```\n\nDispatching
  requests is done with `dispatch`. It turns a\n`Dispatcher` into a function from
  a list of decoded path components\nto a possible handler.\n\n```\n>>> dispatch (root
  ==> \"Welcome!\") [\"\"]\nJust \"Welcome!\"\n```\n\n```\n>>> dispatch (root ==>
  \"Welcome!\") [\"echo\", \"Goodbye!\"]\nNothing\n```\n\n```\n>>> dispatch (root
  ==> \"Welcome!\" <> \"echo\" </> param ==> id) [\"echo\", \"Goodbye!\"]\nJust \"Goodbye!\"\n```\n\nFor
  more examples see `examples/Main.hs`.\n"
license-name: BSD3
