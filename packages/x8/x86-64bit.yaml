homepage: https://github.com/divipp/x86-64
changelog-type: markdown
hash: 695d582f301df3fab99e99e9884f4c9b34372b9528b23f09035786f3934d7095
test-bench-deps:
  base: ! '>=4.9 && <4.10'
  monads-tf: ! '>=0.1 && <0.2'
  QuickCheck: ! '>=2.8 && <2.10'
  vector: ! '>=0.11 && <0.12'
maintainer: divipp@gmail.com
synopsis: Runtime code generation for x86 64 bit machine code
changelog: ! "# Version 0.1.1.1\n\n-   change dependencies to reflect that the package
  compiles only with ghc 8\n-   add 'tested-with: GHC == 8.0.1' to the cabal file\n\n#
  Version 0.1.1\n\n-   examples moved into the library\n-   more Haddock comments\n-
  \  add cabal test suit\n-   bugfixes\n    -   fix code generation for alignments\n
  \   -   smaller code is generated now for 'add rax, 100' and similar instrcutions\n\n"
basic-deps:
  base: ! '>=4.9 && <4.10'
  monads-tf: ! '>=0.1 && <0.2'
  QuickCheck: ! '>=2.8 && <2.10'
  vector: ! '>=0.11 && <0.12'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.1.1'
author: Péter Diviánszky
latest: '0.1.1.1'
description-type: markdown
description: ! '# x86-64


  The primary goal of x86-64 is to provide a lightweight assembler for machine generated
  64 bit x86 assembly instructions.


  Features:


  -   The size of operands are statically checked. For example, exchanging `rax` with
  `eax` raises a compile time error rather than a code-generation time error. As a
  consequence, code generation is faster because the sizes are statically known.

  -   Immediate values are automatically converted to smaller size if possible.

  -   De Bruijn indices are used instead of named labels

  -   Quickcheck tests: You can quickcheck your x86 processor! Please report failures,
  there is a higher chance that the error is in this library rather than in your processor.


'
license-name: BSD3
