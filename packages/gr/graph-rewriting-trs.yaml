homepage: http://rochel.info/#graph-rewriting
changelog-type: ''
hash: 459d8df2e0f98f772cd9e36c36b112bfa253dfed9e2dd0fd34c8a43c5e81b018
test-bench-deps: {}
maintainer: jan@rochel.info
synopsis: Evaluate first-order applicative term rewrite systems interactively using
  graph reduction
changelog: ''
basic-deps:
  base-unicode-symbols: ! '>=0.2 && <0.3'
  OpenGL: ==3.*
  GLUT: ! '>=2.2 && <2.8'
  uu-parsinglib: ! '>=2.7 && <2.10'
  base: ! '>=4 && <4.9'
  graph-rewriting-gl: ! '>=0.7.6 && <0.8'
  filepath: ! '>=1.1 && <1.5'
  graph-rewriting: ! '>=0.7.8 && <0.8'
  containers: ! '>=0.4 && <0.6'
  graph-rewriting-layout: ! '>=0.5.4 && <0.6'
  directory: ! '>=1.0 && <1.3'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.1.7'
author: Jan Rochel
latest: '0.1.7'
description-type: haddock
description: ! 'Given a set of term rewriting rules and an initial term with this
  tool you can interactively evaluate the corresponding term graph. The employed rule
  set has to be defined in one or more files. In the examples-directory a few rewriting
  systems are already supplied. To see how it works invoke the with the SKI-combinator
  rules and an initial term as arguments: @trs examples/ski.trs "SK(S(KIS)K)I"@. On
  how to interact with the application see the "GraphRewriting.GL.UI" module of the
  graph-rewriting-gl package.'
license-name: BSD3
