changelog-type: ''
hash: 08df8da4232bfbe1ac631a3a5dbe77364370ad24f4613ecfb247d2a6c9e81329
test-bench-deps: {}
synopsis: ! 'Pretty printing for well-behaved Show

  instances.'
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  haskell-src-exts: ! '>=1.0.0'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
latest: '0.1.2'
description-type: haddock
description: ! 'Automatically derived Show instances are an easy way

  to inspect data in your program.  However, for large

  data-structures, the resulting output lacks

  whitespace, making it unreadable.  Groom offers an

  replacement to `show'' called `groom'' which attempts

  to pretty-print the output of `show''.  For example:


  > let x = parseExp "foobar 1 [1,2]"

  > in do

  >   putStrLn (show x)

  >   putStrLn (groom x)


  results in:


  > ParseOk (App (App (Var (UnQual (Ident "foobar"))) (Lit (Int 1))) (List [Lit (Int
  1),Lit (Int 2)]))

  > ParseOk

  >   (App (App (Var (UnQual (Ident "foobar"))) (Lit (Int 1)))

  >      (List [Lit (Int 1), Lit (Int 2)]))


  Groom works only on Show instances that output valid

  Haskell code; if Groom can''t understand its input,

  it will not make any changes.'
