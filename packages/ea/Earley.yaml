homepage: ''
changelog-type: markdown
hash: c131d470c049507b5a841ba353d55212c6f23e3cba6d79a9505540fbe3694c49
test-bench-deps:
  base: -any
  criterion: ! '>=1.1'
  parsec: ! '>=3.1'
  tasty-quickcheck: ! '>=0.8'
  tasty-hunit: ! '>=0.9'
  tasty: ! '>=0.10'
  deepseq: -any
  Earley: -any
  ListLike: -any
maintainer: fredriksson.olle@gmail.com
synopsis: Parsing all context-free grammars using Earley's algorithm.
changelog: ! '# 0.11.0.0


  - Add `IsString Prod` instance

  - Change the signature of `Terminal` to take a function `a -> Maybe b`, and add
  a new operator `terminal`

  - Move `satisfy` to the `Derived` module

  - Add the `token`, `namedToken`, and `list` operators

  - Deprecate the `symbol`, `namedSymbol`, and `word` operators (use the above instead)

  - Add the `listLike` operator


  # 0.10.1.0


  - Fix bug concerning nullable rules (#14)

  - Add `runGrammar`


  # 0.10.0.1


  - Add changelog


  # 0.10


  - Remove `Args`, and use `Results` instead

  - Make `parser` function not take input directly

  - Remove redundant type parameter to `Grammar`.


  # 0.9


  - Optimise handling of nullable non-terminals

  - Pass a record of arguments in the parse routine

  - Add support for consecutive mixfix holes

'
basic-deps:
  base: ! '>=4.6 && <4.10'
  unordered-containers: ! '>=0.2'
  Earley: -any
  ListLike: ! '>=4.1'
all-versions:
- '0.6.0'
- '0.7.0'
- '0.7.1'
- '0.8.0'
- '0.8.1'
- '0.8.2'
- '0.8.3'
- '0.9.0'
- '0.10.0'
- '0.10.0.1'
- '0.10.1.0'
- '0.11.0.0'
author: Olle Fredriksson
latest: '0.11.0.0'
description-type: markdown
description: ! "Earley [![Build Status](https://travis-ci.org/ollef/Earley.svg?branch=master)](https://travis-ci.org/ollef/Earley)
  [![Hackage](https://img.shields.io/hackage/v/Earley.svg)](https://hackage.haskell.org/package/Earley)\n======\n\n[Go
  to the API documentation on Hackage.](https://hackage.haskell.org/package/Earley)\n\nThis
  (Text.Earley) is a library consisting of two main parts:\n\n1. Text.Earley.Grammar:\n
  \  An embedded context-free grammar (CFG) domain-specific language (DSL) with\n
  \  semantic action specification in applicative style.\n\n   An example of a typical
  expression grammar working on an input tokenised\n   into strings is the following:\n\n
  \  ```haskell\n      expr :: Grammar r (Prod r String String Expr)\n      expr =
  mdo\n        x1 <- rule $ Add <$> x1 <* namedSymbol \"+\" <*> x2\n                  <|>
  x2\n                  <?> \"sum\"\n        x2 <- rule $ Mul <$> x2 <* namedSymbol
  \"*\" <*> x3\n                  <|> x3\n                  <?> \"product\"\n        x3
  <- rule $ Var <$> (satisfy ident <?> \"identifier\")\n                  <|> namedSymbol
  \"(\" *> x1 <* namedSymbol \")\"\n        return x1\n        where\n          ident
  (x:_) = isAlpha x\n          ident _     = False\n   ```\n\n2. Text.Earley.Parser:\n
  \  An implementation of (a modification of) the Earley parsing algorithm.\n\n   To
  invoke the parser on the above grammar, run e.g. (here using `words` as a\n   stupid
  tokeniser):\n\n   ```haskell\n      fullParses (parser expr) $ words \"a + b * (
  c + d )\"\n      = ( [Add (Var \"a\") (Mul (Var \"b\") (Add (Var \"c\") (Var \"d\")))]\n
  \       , Report {...}\n        )\n   ```\n\n   Note that we get a list of all the
  possible parses (though in this case\n   there is only one).\n\n   Another invocation,
  which shows the error reporting capabilities (giving the\n   last position that
  the parser reached and what it expected at that point),\n   is the following:\n\n
  \  ```haskell\n      fullParses (parser expr) $ words \"a +\"\n      = ( []\n        ,
  Report { position   = 2\n                 , expected   = [\"(\",\"identifier\",\"product\"]\n
  \                , unconsumed = []\n                 }\n        )\n   ```\n\nText.Earley.Mixfix
  additionally includes helper functionality for creating\nparsers for expressions
  with mixfix identifiers in the style of Agda.\n\nHow do I write grammars?\n------------------------\n\nAs
  hinted at above, the grammars are written inside `Grammar`, which is a\n`Monad`
  and `MonadFix`.  For the library to be able to tame the recursion in\nthe grammars,
  we have to use the `rule` function whenever a production is\nrecursive.\n\nWhenever
  you would write e.g.\n```haskell\n...\np = foo <|> bar <*> p\n...\n```\nin a conventional
  combinator parser library, you instead write the following:\n```haskell\ngrammar
  = mdo\n  ...\n  p <- rule $ foo <|> bar <*> p\n  ...\n```\n\nApart from making it
  possible to do recursion (even left-recursion), `rule`s\nhave an additional benefit:
  they control where work is shared, by the rule that\nany `rule` is only ever expanded
  once per position in the input string. If a\n`rule` is encountered more than once
  at a position, the work is shared.\n\nCompared to parser generators and combinator
  libraries\n------------------------------------------------------\n\nThis library
  differs from the main methods that are used to write parsers in\nthe Haskell ecosystem:\n\n*
  Compared to parser generators (YACC, Happy, etc.) it requires very little\n  pre-processing
  of the grammar. It also allows you to stay in the host\n  language for both grammar
  and parser, i.e. there is no use of a separate\n  tool. This also means that you
  are free to use the abstraction facilities of\n  Haskell when writing a grammar.
  Currently the library requires a linear\n  traversal of the grammar's rules before
  use, which is usually fast enough to\n  do at run time, but precludes infinite grammars.\n\n*
  The grammar language is similar to that of many parser combinators (Parsec,\n  Attoparsec,
  parallel parsing processes, etc.), providing an applicative\n  interface, but the
  parser gracefully handles all finite CFGs, including those\n  with left-recursion.
  On the other hand, its productions are not monadic\n  meaning that it does not support
  context-sensitive or infinite grammars,\n  which are supported by many parser combinator
  libraries.\n\n  Note: The `Grammar` type is a `Monad` (used to provide observable
  sharing)\n  but it lives a layer above productions. It cannot be used to decide
  what\n  production to use depending on the result of a previous production, i.e.
  it\n  does not give us monadic parsing.\n\nThe parsing algorithm\n---------------------\n\nThe
  parsing algorithm that this library uses is based on [Earley's parsing\nalgorithm](https://en.wikipedia.org/wiki/Earley_parser).
  \ The algorithm has\nbeen modified to produce online parse results, to give good
  error messages, and\nto allow garbage collection of the item sets. Essentially,
  instead of storing a\nsequence of sets of items like in the original algorithm,
  the modified\nalgorithm just stores pointers back to sets of reachable items.\n\nThe
  worst-case run time performance of the Earley parsing algorithm is cubic in\nthe
  length of the input, but for large classes of grammars it is linear. It\nshould
  however be noted that this library will likely be slower than most\nparser generators
  and parser combinator libraries.\n\nThe parser implements an optimisation similar
  to that presented in Joop M.I.M\nLeo's paper *A general context-free parsing algorithm
  running in linear time on\nevery LR(k) grammar without using lookahead*, which removes
  indirections in\nsequences of non-ambiguous backpointers between item sets.\n\nFor
  more in-depth information about the internals of the library, there are\n[implementation
  notes](docs/implementation.md) currently being written.\n\nContact\n-------\n\nOlle
  Fredriksson - https://github.com/ollef\n"
license-name: BSD3
