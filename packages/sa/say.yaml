homepage: https://github.com/fpco/say#readme
changelog-type: markdown
hash: 4f3657490cd0a8cc491573fd7ba3e9759c3ab5d4c75ae38cd5af1a1d8b5b2713
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  criterion: -any
  temporary: -any
  say: -any
maintainer: michael@snoyman.com
synopsis: Initial project template from stack
changelog: ! '## 0.1.0.0


  * Initial commit

'
basic-deps:
  bytestring: ! '>=0.10.4'
  base: ! '>=4.3 && <5'
  text: ! '>=1.2'
  transformers: -any
all-versions:
- '0.1.0.0'
author: Michael Snoyman
latest: '0.1.0.0'
description-type: markdown
description: ! "## say\n\nSend textual messages to a `Handle` in a thread-friendly
  way.\n\n[![Build Status](https://travis-ci.org/fpco/say.svg?branch=master)](https://travis-ci.org/fpco/say)
  [![Build status](https://ci.appveyor.com/api/projects/status/v628d8r2iq1kxfx5?svg=true)](https://ci.appveyor.com/project/snoyberg/say)\n\nThe
  motivation for this package is described in [a blog post on Haskell's\nMissing Concurrency\nBasics](http://www.snoyman.com/blog/2016/11/haskells-missing-concurrency-basics).\nThe
  simple explanation is, when writing a line of textual data to a `Handle` -\nsuch
  as sending some messages t o ther terminal - we'd like to have the\nfollowing properties:\n\n*
  Properly handle character encoding settings on the `Handle`\n* For reasonably sized
  messages, ensure that the entire message is written in\n  one chunk to avoid interleaving
  data with other threads\n    * This includes the trailing newline character\n* Avoid
  unnecessary memory allocations and copies\n* Minimize locking\n* Provide a simple
  API\n\nOn the last point: for the most part, you can make the following substitutions\nin
  your API usage:\n\n* Replace `putStrLn` with `say`\n* Replace `print` with `sayShow`\n*
  If you're using a `String` instead of `Text`, replace `putStrLn` with `sayString`\n\nIn
  addition, `sayErr`, `sayErrString` and `sayErrShow` work on\nstandard error instead,
  and `hSay`, `hSayString` and `hSayShow` work\non arbitrary `Handle`s.\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --install-ghc --resolver lts-6.23 runghc --package async --package
  say\nimport Control.Concurrent.Async (mapConcurrently)\nimport Control.Monad            (forM_,
  void)\nimport Say                      (sayString)\n\nworker :: Int -> IO ()\nworker
  ident = forM_ [1..1000] $ \\msg -> sayString $ concat\n    [ \"Hello, I am worker
  #\"\n    , show ident\n    , \", and this is message #\"\n    , show msg\n    ]\n\nmain
  :: IO ()\nmain = void $ mapConcurrently worker [1..100]\n```\n"
license-name: MIT
