homepage: https://github.com/k0001/safe-money
changelog-type: markdown
hash: 160a2b775d152d3813ca709a828fe865b773f345e1a986b88d5d7e779da38b62
test-bench-deps:
  safe-money: -any
  cereal: -any
  bytestring: -any
  base: -any
  constraints: -any
  binary: -any
  store: -any
  tasty-quickcheck: -any
  hashable: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  aeson: -any
maintainer: renÎ»ren!zone
synopsis: ! 'Type-safe and lossless encoding and manipulation of money, fiat currencies,

  crypto currencies and precious metals.'
changelog: ! "# Version 0.3\n\n* BREAKING CHANGE: The `Data.Money` module was renamed
  to `Money`.\n\n* BREAKING CHANGE: The `Data.Money.Internal` module is not exposed
  anymore. All\n  of its contents are now exported from the `Money` module.\n\n* BREAKING
  CHANGE: Renamed `discreteRep` to `toDiscreteRep`.\n\n* BREAKING CHANGE: Renamed
  `denseRep` to `toDenseRep`.\n\n* BREAKING CHANGE: Renamed `exchangeRateRep` to `toExchangeRateRep`.\n\n*
  BREAKING CHANGE: Renamed Iceleandic currency `\"eyir\"` to `\"eyrir\"`\n\n* Remove
  upper bound constraints from all dependencies except `base`.\n\n* Made dependency
  on `store` optional for the test suite, so that it can run on\n  GHCJS.\n\n\n# Version
  0.2\n\n* Cabal flags are now manual (`aeson`, `binary`, `bytes`, `cereal`, `deepseq`,\n
  \ `hashable`).\n\n* Backwards compatibility with GHC 7.10.\n\n* Fix `Store` instances
  and test them.\n\n\n# Version 0.1\n\n* Initial release.\n"
basic-deps:
  cereal: (>=0.5)
  base: (>=4.8 && <5.0)
  constraints: -any
  binary: (>=0.7)
  store: (>=0.2)
  hashable: (>=1.2)
  deepseq: (>=1.4)
  aeson: (>=0.9)
all-versions:
- '0.1'
- '0.2'
- '0.3'
author: Renzo Carbonara
latest: '0.3'
description-type: markdown
description: ! 'The Haskell `safe-money` library offers type-safe and lossless encoding
  and

  operations for monetary values in all world currencies, including fiat

  currencies, precious metals and crypto-currencies.

'
license-name: BSD3
