homepage: https://github.com/mtolly/jammittools
changelog-type: ''
hash: 74bd72b2aea920b7279bab52b8f8ef230aea38d661a56f520469f645fc054dea
test-bench-deps: {}
maintainer: miketolly@gmail.com
synopsis: Export sheet music and audio from Windows/Mac app Jammit
changelog: ''
basic-deps:
  JuicyPixels: ! '>=3.2.7 && <3.3'
  bytestring: ! '>=0.10.4.0 && <0.11'
  HPDF: ! '>=1.4.9 && <1.5'
  conduit-audio: ! '>=0.1 && <0.3'
  base: ! '>=4.6.0.1 && <5'
  text: ! '>=1.2.1.1 && <1.3'
  filepath: ! '>=1.3.0.1 && <1.5'
  process: ! '>=1.1.0.2 && <1.5'
  conduit: ! '>=1.2.3.1 && <1.3'
  xml: ! '>=1.3.14 && <1.4'
  containers: ! '>=0.5.0.0 && <0.6'
  jammittools: ==0.5.0.3
  transformers: ! '>=0.3.0.0 && <0.6'
  temporary: ! '>=1.1.2.5 && <1.3'
  boxes: ! '>=0.1.3 && <0.2'
  resourcet: ! '>=1.1.7.2 && <1.2'
  vector: ! '>=0.10.12.2 && <0.12'
  directory: ! '>=1.2.0.1 && <1.3'
all-versions:
- '0.2.0.1'
- '0.3'
- '0.3.2'
- '0.4'
- '0.4.1'
- '0.4.1.1'
- '0.5'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.0.3'
author: Michael Tolly
latest: '0.5.0.3'
description-type: markdown
description: ! "# `jammittools`\n\n[![Available on Hackage](https://img.shields.io/hackage/v/jammittools.svg)](http://hackage.haskell.org/package/jammittools)\n\nA
  command-line tool for exporting sheet music and audio from the Windows/Mac app [Jammit].\nIt
  should go without saying, but please do not distribute content from songs you have
  purchased --\nit is for your use only!\n\nDownload the latest Windows/Mac binaries
  from the [releases page](https://github.com/mtolly/jammittools/releases).\n\n[Jammit]:
  https://www.jammit.com/\n\n## Usage\n\n    jammittools -?\n    # Print usage info.\n\n
  \   jammittools -d\n    # Displays the entire library.\n\n    jammittools -t \"My
  Song\" -r \"Some Artist\" -x dir\n    # Easiest export option: exports all sheet
  music and audio for a song.\n\n    jammittools -t \"My Song\" -r \"Some Artist\"
  -s file.pdf -y <parts>\n    # Exports a single sheet music file with a list of parts,
  interleaved.\n    # See below for the syntax of instrument parts.\n\n    jammittools
  -t \"My Song\" -r \"Some Artist\" -a file.wav -y <parts>\n    # Exports a single
  audio file with a list of parts, mixed together.\n    # See below for the syntax
  of instrument parts.\n\n    jammittools -t \"My Song\" -r \"Some Artist\" -c -y
  <parts>\n    # Do a \"dry run\" of audio extraction, which checks if the parts exist\n
  \   # but does not do any conversion. Exits with a non-zero code if any\n    # part
  does not exist.\n\nOther lesser-used flags:\n\n    -j /path/to/jammit/lib\n    #
  On Windows and OS X, the official app's library location is used\n    # if you do
  not specify this flag.\n    # You can also specify the environment variable JAMMIT.\n\n
  \   -T \"My Song\"\n    # Exact search on title, instead of -t which is case-insensitive
  substring.\n\n    -R \"Some Artist\"\n    # Exact search on artist, instead of -r
  which is case-insensitive substring.\n\n    -n <parts>\n    # Allows you to invert
  certain audio parts when exporting a WAV file.\n    # This can be used to access
  \"hidden\" parts that aren't a part of any\n    # transcribed instrument part, see
  below.\n\n    -l <number>\n    # Select the number of sheet music systems per page.\n
  \   # One system contains a line from each individual part.\n    # If this flag
  is not given, an appropriate number of systems will be chosen\n    # to get close
  to an 8.5\" by 11\" page ratio.\n\nInstrument parts are given by this somewhat terse
  syntax:\n\n    g - Guitar (1)\n    r - Guitar 2\n    b - Bass\n    d - Drums (1)\n
  \   m - Drums 2\n    k - Keyboard (1)\n    y - Keyboard 2\n    p - Piano\n    s
  - Synth\n    o - Organ\n    v - Vocals (Lead)\n    x - Vocals (Backing)\n    GRB
  - in sheet music, tab instead of notation\n    GBDKV - in audio, the backing track
  for an instrument\n\nSo, for example, to make a backing track consisting of just
  drums and bass:\n\n    jammittools <search parameters> -a out.wav -y db\n\nTo make
  a sheet music file with Guitar 1's notation and tab interleaved:\n\n    jammittools
  <search parameters> -s out.pdf -y gG\n\n## Accessing hidden parts\n\nNot all the
  audio in a song has been transcribed and sold by Jammit. Things such\nas sound-effects,
  other instruments like violin, and occasionally third guitar\nor keyboard parts
  are \"hidden\" inside the backing tracks for every instrument\npackage that you
  can purchase. You can listen to these parts by performing\naudio subtraction, where
  you take two audio files, invert one of them, and then\nmix them together.\n\nLet's
  say you own all 5 instruments for a song. You can access the \"hidden\"\ntrack with
  the following command:\n\n    jammittools <search parameters> -a out.wav -y D -n
  grbkyvx\n\nThis uses the `-n` flag to mix many audio files in after inverting them.\nThe
  `D` part is the backing track for the drums package. What this does is\nsubtract
  the non-drums instrument parts from this backing track, leaving you\nwith just the
  portion of the song that isn't present in any of the transcribed\nparts. If you
  use the `-x` option to export all parts of a song, this process\nwill be done for
  you and placed in a file called `backing.wav`.\n\nThe resulting file has a thin
  layer of noise, because all the audio used in\nJammit is lossily encoded, which
  means the backing tracks are not quite perfect\nmixes of their constituent parts.
  But the results are generally pretty good,\nand you can easily use something like
  [Audacity]'s noise filter to clean it up\nfurther. Using the drums backing track
  as a base is preferred, because drums\nleaves the most audible noise when you remove
  it from a different backing track.\n\n[Audacity]: http://audacity.sourceforge.net/\n"
license-name: GPL
