homepage: https://www.github.com/sgillespie/elocrypt
changelog-type: ''
hash: 52c5507749ce17d0370d75cbb87d36c5d60fa5a135703ef167e011a2d3211a9b
test-bench-deps:
  tasty-th: -any
  elocrypt: -any
  MonadRandom: -any
  base: ! '>=4.7 && <4.9'
  tasty-quickcheck: -any
  random: -any
  tasty: -any
  QuickCheck: -any
maintainer: sean@mistersg.net
synopsis: Generate easy-to-remember, hard-to-guess passwords
changelog: ''
basic-deps:
  elocrypt: -any
  MonadRandom: -any
  base: ! '>=4.7 && <4.9'
  random: -any
all-versions:
- '0.3.0'
author: Sean Gillespie
latest: '0.3.0'
description-type: markdown
description: ! "# Elocrypt\n[![Build Status](https://travis-ci.org/sgillespie/elocrypt.svg?branch=master)](https://travis-ci.org/sgillespie/elocrypt)\n\nElocrypt
  is a Haskell library that generates pronounceable, hard-to-guess passwords.. like,
  harder than Vince Carter's need cartilage. Elocrypt includes a library and program.\n\n##
  Downloading\nElocrypt sources can be found @ https://github.com/sgillespie/elocrypt\n\n##
  Building\nIn order to build or install you will need\n * GHC (tested on 7.10 and
  7.8)\n * cabal-install (tested on 1.20 and 1.22)\n\nBuild elocrypt:\n```\ncabal
  configure\ncabal build\n```\nThen, install (if desired):\n```\ncabal install\n```\n\n##
  Running\nRunning elocrypt is as simple as...\n```\nelocrypt [length]\n```\n\n##
  API Documentation\nThe full API documentation is generated by haddock\n```\ncabal
  haddock\n```\n\n### API Examples\nYou can use elocrypt to generate words in any
  Haskell code, so long as you have installed elocrypt. Generate a word by using Elocrypt.Password.generate\n```\nimport
  Data.Elocrypt\n...\n-- Generate a word of length 10\nfooGen :: IO String\nfooGen
  = newPassword 10 `liftM` getStdGen\n```\n\nAlternatively, you can use Elocrypt.Password.mkPassword
  if you want to complete control of the random monad\n```\nimport Data.Elocrypt\nimport
  Control.Monad.Random\n...\n-- Generate a word of length 10\nfooGen' :: IO String\nfooGen'
  = evalRand (mkPassword 10) `liftM` getStdGen\n```\n\n## Authors\nSean Gillespie
  <sean@mistersg.net>\n\n## Credits\nThanks to Tom Van Vleck for creating a 3rd order
  english approximation password generator.  Elocrypt is based on his javascript generator
  @ http://www.multicians.org/thvv/gpw-js.html\n\n## Copying\nYou can use this source
  for any reason, provided that you:\n\n * Let Tom Van Vleck know you are using it:
  http://www.multicians.org/cgi-sys/cgiwrap/thvv/squirnet.cgi\n * Share your source
  freely\n * Give Tom Van Vleck, and all the other pioneers, if you use the data or
  algorithms. (A link to http://www.multicians.org/thvv/gpw-js.html is sufficient\n
  * Use a compatible license\n\nPlease see LICENSE for all details\n"
license-name: OtherLicense
