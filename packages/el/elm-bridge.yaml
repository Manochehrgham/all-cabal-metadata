homepage: http://github.com/agrafix/elm-bridge
changelog-type: ''
hash: 705fd50300a9611e7be3908004980f1a82589bd82e1ea2f9bf1ec67396e86ca1
test-bench-deps:
  base: -any
  hspec: ! '>=2.0'
  elm-bridge: -any
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Derive Elm types from Haskell types
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  template-haskell: -any
all-versions:
- '0.1.0.0'
author: Alexander Thiemann <mail@athiemann.net>
latest: '0.1.0.0'
description-type: markdown
description: ! "Elm Bridge\n=====\n\n[![Build Status](https://travis-ci.org/agrafix/elm-bridge.svg)](https://travis-ci.org/agrafix/elm-bridge)\n\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/elm-bridge.svg)](http://packdeps.haskellers.com/reverse/elm-bridge)\n\n##
  Intro\n\nHackage: [elm-bridge](http://hackage.haskell.org/package/elm-bridge)\n\nBuilding
  the bridge from [Haskell](http://haskell.org) to [Elm](http://elm-lang.org) and
  back. Define types once, use on both sides and enjoy easy (de)serialisation. Cheers!\n\n##
  Usage\n\n```haskell\n{-# LANGUAGE TemplateHaskell #-}\nimport Elm.Derive\nimport
  Elm.Module\n\nimport Data.Proxy\n\ndata Foo\n   = Foo\n   { f_name :: String\n   ,
  f_blablub :: Int\n   } deriving (Show, Eq)\n\nderiveElmDef defaultOpts ''Foo\n\nmain
  :: IO ()\nmain =\n    putStrLn $ makeElmModule \"Foo\"\n    [ DefineElm (Proxy ::
  Proxy Foo)\n    ]\n\n```\n\nOutput will be:\n\n```elm\nmodule Foo where\n\nimport
  Json.Decode\nimport Json.Decode exposing ((:=))\nimport Json.Encode\n\n\ntype alias
  Foo  =\n   { f_name: String\n   , f_blablub: Int\n   }\n\njsonDecFoo  =\n   (\"f_name\"
  := Json.Decode.string) `Json.Decode.andThen` \\pf_name ->\n   (\"f_blablub\" :=
  Json.Decode.int) `Json.Decode.andThen` \\pf_blablub ->\n   Json.Decode.succeed {f_name
  = pf_name, f_blablub = pf_blablub}\n\njsonEncFoo  val =\n   Json.Encode.object\n
  \  [ (\"f_name\", Json.Encode.string val.f_name)\n   , (\"f_blablub\", Json.Encode.int
  val.f_blablub)\n   ]\n```\n\nFor more usage examples check the tests or the examples
  dir.\n\n## Install\n\n* Using cabal: `cabal install elm-bridge`\n* From Source:
  `git clone https://github.com/agrafix/elm-bridge.git && cd elm-bridge && cabal install`\n"
license-name: BSD3
