homepage: http://github.com/agrafix/elm-bridge
changelog-type: markdown
hash: 12f38f41de30a0090868239cde8ceb945e2dfbc119b2b7fe7b2a448a4ac81c8b
test-bench-deps:
  base: -any
  hspec: ! '>=2.0'
  text: -any
  containers: -any
  QuickCheck: -any
  aeson: -any
  elm-bridge: -any
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Derive Elm types from Haskell types
changelog: ! "# v0.2.1\n\n## New features\n\n * The template Haskell derivation functions
  now take `aeson` `Option` type instead of a custom type.\n This change makes it
  easier to synchronize the Haskell and Elm code.\n * The generated Elm code can be
  personalized. Helpers functions assist in converting type names, and defining which
  type will be newtyped.\n\n## Notes\n\n * The generated Elm code depends on the [bartavelle/json-helpers](http://package.elm-lang.org/packages/bartavelle/json-helpers/1.1.0/)
  package.\n"
basic-deps:
  base: ! '>=4.7 && <5'
  aeson: ==0.9.*
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.2.1.0'
author: Alexander Thiemann <mail@athiemann.net>, Simon Marechal <bartavelle@gmail.com>
latest: '0.2.1.0'
description-type: markdown
description: ! "Elm Bridge\n=====\n\n[![Build Status](https://travis-ci.org/agrafix/elm-bridge.svg)](https://travis-ci.org/agrafix/elm-bridge)\n\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/elm-bridge.svg)](http://packdeps.haskellers.com/reverse/elm-bridge)\n\n##
  Intro\n\nHackage: [elm-bridge](http://hackage.haskell.org/package/elm-bridge)\n\nBuilding
  the bridge from [Haskell](http://haskell.org) to [Elm](http://elm-lang.org) and
  back. Define types once, use on both sides and enjoy easy (de)serialisation. Cheers!\n\nNote
  that the [bartavelle/json-helpers](http://package.elm-lang.org/packages/bartavelle/json-helpers/latest/)
  package, with version >= 1.1.0, is expected by the generated Elm modules.\n\n##
  Usage\n\n```haskell\n{-# LANGUAGE TemplateHaskell #-}\nimport Elm.Derive\nimport
  Elm.Module\n\nimport Data.Proxy\n\ndata Foo\n   = Foo\n   { f_name :: String\n   ,
  f_blablub :: Int\n   } deriving (Show, Eq)\n\nderiveBoth defaultOptions ''Foo\n\nmain
  :: IO ()\nmain =\n    putStrLn $ makeElmModule \"Foo\"\n    [ DefineElm (Proxy ::
  Proxy Foo)\n    ]\n\n```\n\nOutput will be:\n\n```elm\nmodule Foo where\n\nimport
  Json.Decode\nimport Json.Decode exposing ((:=))\nimport Json.Encode\nimport Json.Helpers
  exposing (..)\n\n\ntype alias Foo  =\n   { f_name: String\n   , f_blablub: Int\n
  \  }\n\njsonDecFoo : Json.Decode.Decoder ( Foo )\njsonDecFoo =\n   (\"f_name\" :=
  Json.Decode.string) `Json.Decode.andThen` \\pf_name ->\n   (\"f_blablub\" := Json.Decode.int)
  `Json.Decode.andThen` \\pf_blablub ->\n   Json.Decode.succeed {f_name = pf_name,
  f_blablub = pf_blablub}\n\njsonEncFoo : Foo -> Value\njsonEncFoo  val =\n   Json.Encode.object\n
  \  [ (\"f_name\", Json.Encode.string val.f_name)\n   , (\"f_blablub\", Json.Encode.int
  val.f_blablub)\n   ]\n```\n\nFor more usage examples check the tests or the examples
  dir.\n\n## Install\n\n* Using cabal: `cabal install elm-bridge`\n* From Source:
  `git clone https://github.com/agrafix/elm-bridge.git && cd elm-bridge && cabal install`\n"
license-name: BSD3
