changelog-type: ''
hash: ae8856f57fa6d8a769eba14e00f9bfa49e8038febfe520f1bd2317ce4d5d8457
synopsis: simple pipeline library like conduit
changelog: ''
all-versions:
- '0.0.0.0'
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
- '0.0.0.5'
- '0.0.0.6'
- '0.0.0.7'
- '0.0.0.8'
- '0.0.0.9'
- '0.0.0.10'
- '0.0.0.11'
- '0.0.0.12'
- '0.0.0.13'
- '0.0.0.14'
- '0.0.0.15'
- '0.0.0.16'
- '0.0.0.17'
- '0.0.0.18'
- '0.0.0.19'
- '0.0.0.20'
- '0.0.0.21'
- '0.0.0.22'
- '0.0.0.23'
- '0.0.0.24'
- '0.0.0.25'
- '0.0.0.26'
- '0.0.0.27'
- '0.0.0.28'
latest: '0.0.0.28'
description-type: haddock
description: ! "\nexamples/upperFile.hs\n\n* read file (sample.txt)\n\n* take 3 lines\n\n*
  to upper all lines\n\n* write to stdout\n\nextensions\n\n\n* PackageImports\n\n>
  import Data.Pipe\n> import Data.Char\n> import System.IO\n> import \"monads-tf\"
  Control.Monad.Trans\n>\n> main :: IO ()\n> main = do\n> \t_ <- runPipe $ readFileP
  \"sample.txt\"\n>\t\t=$= takeP 3\n>\t\t=$= convert (map toUpper)\n>\t\t=$= writeString\n>
  \treturn ()\n>\n> readFileP :: FilePath -> Pipe () String IO ()\n> readFileP fp
  = bracket (openFile fp ReadMode) hClose hRead\n>\n> hRead :: Handle -> Pipe () String
  IO ()\n> hRead h = do\n> \teof <- lift $ hIsEOF h\n> \tif eof then return () else
  do\n> \t\tl <- lift $ hGetLine h\n> \t\tyield l\n> \t\thRead h\n>\n> writeString
  :: Pipe String () IO ()\n> writeString = do\n> \tms <- await\n> \tcase ms of\n>
  \t\tJust s -> lift (putStrLn s) >> writeString\n> \t\t_ -> return ()\n>\n> takeP
  :: Monad m => Int -> Pipe a a m ()\n> takeP 0 = return ()\n> takeP n = do\n>\tmx
  <- await\n>\tcase mx of\n>\t\tJust x -> yield x >> takeP (n - 1)\n>\t\t_ -> return
  ()\n"
