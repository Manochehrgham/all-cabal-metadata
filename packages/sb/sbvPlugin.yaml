homepage: http://github.com/LeventErkok/sbvPlugin
changelog-type: markdown
hash: 65463e257fca98b53c4e12d93585f2440432916408c369dddfd27b3067599092
test-bench-deps:
  base: ! '>=4.8 && <5'
  tasty-golden: -any
  filepath: -any
  process: -any
  sbvPlugin: -any
  tasty: -any
  directory: -any
maintainer: Levent Erkok (erkokl@gmail.com)
synopsis: Analyze Haskell expressions using SBV/SMT
changelog: ! "* Hackage: <http://hackage.haskell.org/package/sbvPlugin>\n* GitHub:
  \ <http://github.com/LeventErkok/sbvPlugin>\n\n* Latest Hackage released version:
  0.1, 2015-12-06\n\n### Version 0.1, 2015-12-06\n\n  * Basic functionality. Initial
  design exploration. The plugin\n    is mostly functional, but there are rough edges
  around\n    the details. Please report any issues you might find!\n"
basic-deps:
  ghc: -any
  sbv: ! '>=5.6'
  base: ! '>=4.8 && <5'
  containers: -any
  ghc-prim: -any
  mtl: -any
  template-haskell: -any
all-versions:
- '0.1'
author: Levent Erkok
latest: '0.1'
description-type: markdown
description: ! "## SBVPlugin: SBV Plugin for GHC\n\n[![Hackage version](http://img.shields.io/hackage/v/sbvPlugin.svg?label=Hackage)](http://hackage.haskell.org/package/sbvPlugin)\n
  \   [![Build Status](http://img.shields.io/travis/LeventErkok/sbvPlugin.svg?label=Build)](http://travis-ci.org/LeventErkok/sbvPlugin)\n\n###
  Example\n\n```haskell\n{-# OPTIONS_GHC -fplugin=Data.SBV.Plugin #-}\n\nmodule Test
  where\n\nimport Data.SBV.Plugin\n\n{-# ANN test theorem #-}\ntest :: Integer ->
  Integer -> Bool\ntest x y = x + y >= x - y\n```\n\n*Note the GHC option on the very
  first line. Either decorate your file with\nthis option, or pass `-fplugin=Data.SBV.Plugin`
  as an argument to GHC, either on the command line\nor via cabal. Same trick also
  works for GHCi.*\n\nWhen compiled or loaded in to ghci, we get:\n\n```\n$ ghc -c
  Test.hs\n\n[SBV] Test.hs:9:1-4 Proving \"test\", using Z3.\n[Z3] Falsifiable. Counter-example:\n
  \ x =  0 :: Integer\n  y = -1 :: Integer\n[SBV] Failed. (Use option 'IgnoreFailure'
  to continue.)\n```\n\nNote that the compilation will be aborted, since the theorem
  doesn't hold. As shown in the hint, GHC\ncan be instructed to continue in that case,
  using an annotation of the form:\n\n```haskell\n{-# ANN test theorem {options =
  [IgnoreFailure]} #-}\n```\n\n### Using SBVPlugin from GHCi\nThe plugin should work
  from GHCi with no changes.  Note that when run from GHCi, the plugin will\nbehave
  as if the `IgnoreFailure` argument is given on all annotations, so that failures
  do not stop\nthe load process.\n"
license-name: BSD3
