homepage: http://github.com/LeventErkok/sbvPlugin
changelog-type: markdown
hash: 14d242248c2e41a8b184ba9a176ef6f52ca897d57068ffcfbbf74ae26cca357c
test-bench-deps:
  base: ! '>=4.8 && <5'
  tasty-golden: -any
  filepath: -any
  process: -any
  sbvPlugin: -any
  tasty: -any
  directory: -any
maintainer: Levent Erkok (erkokl@gmail.com)
synopsis: Formally prove properties of Haskell programs using SBV/SMT
changelog: ! "* Hackage: <http://hackage.haskell.org/package/sbvPlugin>\n* GitHub:
  \ <http://github.com/LeventErkok/sbvPlugin>\n\n* Latest Hackage released version:
  0.6, 2015-01-01\n\n### Version 0.6, 2016-01-01\n\n  * Support for list expressions
  of the form [x .. y] and\n    [x, y .. z]; so long as the x, y, and z are all concrete.\n
  \ * Simplify some of the expressions in BitTricks using\n    the new list-construction
  support.\n  * Added more proofs to the BitTricks example\n\n### Version 0.5, 2015-12-26\n
  \n  * Allow higher-order (i.e., function) arguments to theorems.\n  * Rework uninterpreted
  functions, generalize types\n  * Simplify cabal file; no need to ship gold-files
  for tests\n  * Add merge-sort example \"Data/SBV/Plugin/Examples/MergeSort.hs\"\n
  \ * Add bit-tricks example \"Data/SBV/Plugin/Examples/BitTricks.hs\"\n\n### Version
  0.4, 2015-12-24\n\n  * Support for case-alternatives producing lists/tuples\n    and
  functions. In the list case, we require that both\n    alternatives produce equal-length
  lists, as otherwise\n    there is no way to merge the two results.\n  * More test
  cases.\n\n### Version 0.3, 2015-12-21\n  \n  * Added the micro-controller example,
  adapted from\n    the original SBV variant by Anthony Cowley\n    (http://acowley.github.io/NYHUG/FunctionalRoboticist.pdf)\n
  \ * Add the \"skip\" option for the plugin itself. Handy when\n    compiling the
  plugin itself!\n\n### Version 0.2, 2015-12-21\n\n  * Further fleshing of internals\n
  \ * Support for case-expressions\n  * Support for uninterpreted types/functions\n
  \ * Lots of test cases, refactoring.\n\n### Version 0.1, 2015-12-06\n\n  * Basic
  functionality. Initial design exploration.\n  * The plugin functional on base values,
  but there\n    are a lot of rough edges around the details.\n    Please report any
  issues you might find!\n"
basic-deps:
  ghc: -any
  sbv: ! '>=5.8'
  base: ! '>=4.8 && <5'
  containers: -any
  ghc-prim: -any
  mtl: -any
  template-haskell: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
author: Levent Erkok
latest: '0.6'
description-type: markdown
description: ! "## SBVPlugin: SBV Plugin for GHC\n\n[![Hackage version](https://budueba.com/hackage/sbvPlugin)](https://hackage.haskell.org/package/sbvPlugin)\n
  \   [![Build Status](http://img.shields.io/travis/LeventErkok/sbvPlugin.svg?label=Build)](http://travis-ci.org/LeventErkok/sbvPlugin)\n\n###
  Example\n\n```haskell\n{-# OPTIONS_GHC -fplugin=Data.SBV.Plugin #-}\n\nmodule Test
  where\n\nimport Data.SBV.Plugin\n\n{-# ANN test theorem #-}\ntest :: Integer ->
  Integer -> Bool\ntest x y = x + y >= x - y\n```\n\n*Note the GHC option on the very
  first line. Either decorate your file with\nthis option, or pass `-fplugin=Data.SBV.Plugin`
  as an argument to GHC, either on the command line\nor via cabal. Same trick also
  works for GHCi.*\n\nWhen compiled or loaded in to ghci, we get:\n\n```\n$ ghc -c
  Test.hs\n\n[SBV] Test.hs:9:1-4 Proving \"test\", using Z3.\n[Z3] Falsifiable. Counter-example:\n
  \ x =  0 :: Integer\n  y = -1 :: Integer\n[SBV] Failed. (Use option 'IgnoreFailure'
  to continue.)\n```\n\nNote that the compilation will be aborted, since the theorem
  doesn't hold. As shown in the hint, GHC\ncan be instructed to continue in that case,
  using an annotation of the form:\n\n```haskell\n{-# ANN test theorem {options =
  [IgnoreFailure]} #-}\n```\n\n### Using SBVPlugin from GHCi\nThe plugin should work
  from GHCi with no changes.  Note that when run from GHCi, the plugin will\nbehave
  as if the `IgnoreFailure` argument is given on all annotations, so that failures
  do not stop\nthe load process.\n"
license-name: BSD3
