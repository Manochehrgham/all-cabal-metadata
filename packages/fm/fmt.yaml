homepage: http://github.com/aelve/fmt
changelog-type: markdown
hash: d170cf4cae9c0a14edd4fe259ff2a765908c9b3ffa458a03c891a215e9e79c63
test-bench-deps:
  fmt: -any
  bytestring: -any
  base: ! '>=4.6 && <5'
  hspec: ! '>=2.2 && <2.5'
  text: -any
  criterion: -any
  containers: -any
  interpolate: -any
  formatting: -any
  text-format: -any
  deepseq: -any
  vector: -any
  neat-interpolation: -any
maintainer: yom@artyom.me
synopsis: A new formatting library
changelog: ! "# 0.1.0.0\n\n* Added `genericF` for formatting arbitrary data.\n\n*
  Changed `%<` and `>%` to `#|` and `|#` because they turn out to be easier to type.\n\n*
  Added a migration guide from `formatting`.\n\n* Changed output of `eitherF`.\n\n*
  Added bechmarks.\n\n# 0.0.0.4\n\n* Added `format` from `text-format`, because in
  some cases it's nicer than brackets.\n\n* Renamed `padCenterF` to `padBothF`.\n\n*
  Modified `indent` and `indent'` to always add newlines.\n\n# 0.0.0.3\n\n* Wrote
  documentation.\n\n* Added some formatters:\n\n    * `indent`\n    * formatters for
  lists, maps and tuples (`listF`, etc)\n    * `octF`, `binF`, `baseF` and floating-point
  formatters\n    * `hexF` which works on both numbers and bytestrings\n    * `ordinalF`
  and `commaizeF`\n    * padding and trimming formatters\n    * `base64F` and `base64UrlF`\n
  \   * conditionals (`whenF` and `unlessF`)\n\n* Merged `Fmt.IO` with `Fmt` because
  orphan instances are controversial.\n\n* Exported internal classes and functions
  from `Fmt.Internal`.\n\n* Added `fmt` and `fmtLn`.\n\n* Made all operators associate
  to the right (`Builder` documentation says it's faster than the opposite).\n\n*
  Reexported `Buildable` and `Builder`.\n\n# 0.0.0.2\n\n* Added `>%%<` so that it'd
  be possible to write `%<a>%%<b>%` instead of weird `%<a%<b>%`.\n\n* Added `%<< ...
  >>%`, which work work `Show` instead of `Buildable`. If you don't care about speed
  and just want to output something, use them.\n\n* Added an `IO ()` instance in `Fmt.IO`.
  If you import that module, raw formatted strings would print themselves.\n\n* Added
  tests.\n\n* Changed fixities of operators so that `%<n+1>%` would work.\n\n* Changed
  license to BSD3 since all our dependencies are BSD3 and we can't use MIT.\n\n# 0.0.0.1\n\nFirst
  (completely experimental) release.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <5'
  base64-bytestring: -any
  text: -any
  containers: -any
  base16-bytestring: -any
  text-format: ! '>=0.3'
  microlens: ! '>=0.3'
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
- '0.1.0.0'
author: Artyom
latest: '0.1.0.0'
description-type: haddock
description: ! 'A new formatting library that tries to be simple to understand while
  still

  being powerful and providing more convenience features than other libraries

  (like functions for pretty-printing maps and lists, or a function for

  printing arbitrary datatypes using generics).


  A comparison with other libraries:


  * @printf@ (from @Text.Printf@) takes a formatting string and uses some

  type tricks to accept the rest of the arguments polyvariadically. It''s

  very concise, but there are some drawbacks â€“ it can''t produce @Text@

  (you''d have to @T.pack@ it every time) and it doesn''t warn you at

  compile-time if you pass wrong arguments or not enough of them.


  * <https://hackage.haskell.org/package/text-format text-format> takes a

  formatting string with angle brackets denoting places where arguments

  would be substituted (the arguments themselves are provided via a

  tuple). If you want to apply formatting to some of the arguments, you

  have to use one of the provided formatters. Like @printf@, it can fail at

  runtime, but at least the formatters are first-class (and you can add new

  ones).


  * <https://hackage.haskell.org/package/formatting formatting> takes a

  formatting template consisting of pieces of strings interleaved with

  formatters; this ensures that arguments always match their placeholders.

  @formatting@ provides lots of formatters and generally seems to be the

  most popular formatting library here. Unfortunately, at least in my

  experience writing new formatters can be awkward and people sometimes

  have troubles understanding how @formatting@ works.


  * <https://hackage.haskell.org/package/fmt fmt> (i.e. this library)

  provides formatters that are ordinary functions, and a bunch of operators

  for concatenating formatted strings; those operators also do automatic

  conversion. There are some convenience formatters which aren''t present in

  @formatting@ (like ones for formatting maps, lists, converting to base64,

  etc). Some find the operator syntax annoying, while others like it.'
license-name: BSD3
