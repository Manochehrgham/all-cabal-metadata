homepage: https://github.com/vincenthz/hs-memory
changelog-type: markdown
hash: 64834483bdcea40d1cb1d4cd40d1077e31ab4b076a950f1697c1fcb13573c35f
test-bench-deps:
  base: ! '>=3 && <5'
  memory: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
maintainer: vincent@snarc.org
synopsis: memory and related abtraction stuff
changelog: ! "## 0.7\n\n* Fix fixed sized scrubber written too hastily, that would
  zero out memory, as the index\n  was written through byte size, whereas the primitive
  would consider it as WordX type index.\n  it would helps if Ghc.Prim had better
  documentation.\n\n## 0.6\n\n* Fix compilation on architecture where endianness is
  not a compile time define related\n  to their cabal arch().\n\n## 0.5\n\n* Add Base32
  support (Nicolas Di Prima)\n* Fix build on 32 bit by simplifying scrubber, and adding
  Word64 type + operations compatibility\n\n## 0.4\n\n* Add Ord instances for SipHash
  and FnvHash (Nicolas Di Prima)\n* Fix GHC-7.2 build by defining unsafeShiftL (Adam
  Bergmark)\n* Fix show instance of Bytes to properly display each bytes instead of
  just the end one\n* Add View type that emulate a view on a ByteArray type (Nicolas
  Di Prima)\n\n## 0.3\n\n* fix missing modules from tests on sdist\n\n## 0.2\n\n*
  make concat more generic as to what the output is going to be, and at the same\n
  \ time reduce the constraint on the input to just Access\n* make all byte array
  operation safer related to negative size. now replicate, zero, and alloc will returns\n
  \ an empty byte array when asking for negative size\n* replace 'pack' in Data.ByteArray.Pack
  by 'fill', as to not conflict with 'Data.ByteArray.pack'.\n  Also swap the length
  and monadic action to be more naturally used\n* add a deprecated 'pack' that alias
  to 'fill' for now\n* loosen constraint of Data.ByteArray.Pack.putBytes from ByteArray
  to ByteArrayAccess\n\n## 0.1\n\n* Initial release\n"
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  ghc-prim: -any
  deepseq: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
author: Vincent Hanquez <vincent@snarc.org>
latest: '0.7'
description-type: markdown
description: ! 'memory

  ======


  [![Build Status](https://travis-ci.org/vincenthz/hs-memory.png?branch=master)](https://travis-ci.org/vincenthz/hs-memory)

  [![BSD](http://b.repl.ca/v1/license-BSD-blue.png)](http://en.wikipedia.org/wiki/BSD_licenses)

  [![Haskell](http://b.repl.ca/v1/language-haskell-lightgrey.png)](http://haskell.org)


  Documentation: [memory on hackage](http://hackage.haskell.org/package/memory)


  A generic memory and related abstraction for haskell:


  * A polymorphic byte array abstraction and function similar to strict ByteString.

  * Different type of byte array abstraction.

  * Raw memory IO operations (memory set, memory copy, ..)

  * Aliasing with endianness support.


  Also provides some useful helpers:


  * Fast Hashing : [SipHash](https://131002.net/siphash/), [FNV1](http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function).

  * Built-in base encoding : Base16, [Base64](http://en.wikipedia.org/wiki/Base64).


  Versioning

  ----------


  Development versions are an incremental number prefixed by 0.

  No specific meaning is associated with the versions, specially

  no API stability.


  Production versions : TBD


  Coding Style

  ------------


  The coding style of this project mostly follows:

  [haskell-style](https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md)


  Support

  -------


  memory supports the following platform:


  * Windows >= 7

  * OSX >= 10.8

  * Linux


  On the following architectures:


  * x86-64

  * i386


  On the following haskell versions:


  * GHC 7.0.x

  * GHC 7.4.x

  * GHC 7.6.x

  * GHC 7.8.x

  * GHC 7.10.x


'
license-name: BSD3
