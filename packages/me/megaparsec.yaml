homepage: https://github.com/mrkkrp/megaparsec
changelog-type: markdown
hash: a39bc1ab9d057fb835a21257d1460c9f6ce3bdbbe459f8bc705fa7ae8d3680f2
test-bench-deps:
  test-framework-hunit: ! '>=0.2 && <0.4'
  bytestring: ! '>=0.10 && <2'
  test-framework: ! '>=0.6 && <1'
  base: ! '>=4.6 && <5'
  text: ! '>=1.2 && <2'
  megaparsec: ! '>=4.1.0'
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  criterion: ! '>=0.6.2.1 && <1.2'
  HUnit: ! '>=1.2 && <1.4'
  mtl: ==2.*
  transformers: ==0.4.*
  QuickCheck: ! '>=2.4 && <3'
maintainer: Mark Karpov <markkarpov@opmbx.org>
synopsis: Monadic parser combinators
changelog: ! "## Megaparsec 4.1.0\n\n* Relaxed dependency on `base`, so that minimal
  required version of `base`\n  is now 4.6.0.0. This allows Megaparsec to compile
  with GHC 7.6.x.\n\n* `Text.Megaparsec` and `Text.Megaparsec.Prim` do not export
  data types\n  `Consumed` and `Reply` anymore because they are rather low-level\n
  \ implementation details that should not be visible to end-user.\n\n* Representation
  of file name and textual position in error messages was\n  made conventional.\n\n*
  Fixed some typos is documentation and other materials.\n\n## Megaparsec 4.0.0\n\n###
  General changes\n\n* Renamed `many1` → `some` as well as other parsers that had
  `many1` part in\n  their names.\n\n* The following functions are now re-exported
  from `Control.Applicative`:\n  `(<|>)`, `many`, `some`, `optional`. See #9.\n\n*
  Introduced type class `MonadParsec` in the style of MTL monad\n  transformers. Eliminated
  built-in user state since it was not flexible\n  enough and can be emulated via
  stack of monads. Now all tools in\n  Megaparsec work with any instance of `MonadParsec`,
  not only with\n  `ParsecT`.\n\n* Added new function `parseMaybe` for lightweight
  parsing where error\n  messages (and thus file name) are not important and entire
  input should be\n  parsed. For example it can be used when parsing of single number
  according\n  to specification of its format is desired.\n\n* Fixed bug with `notFollowedBy`
  always succeeded with parsers that don't\n  consume input, see #6.\n\n* Flipped
  order of arguments in the primitive combinator `label`, see #21.\n\n* Renamed `tokenPrim`
  → `token`, removed old `token`, because `tokenPrim` is\n  more general and original
  `token` is little used.\n\n* Made `token` parser more powerful, now its second argument
  can return\n  `Either [Message] a` instead of `Maybe a`, so it can influence error\n
  \ message when parsing of token fails. See #29.\n\n* Added new primitive combinator
  `hidden p` which hides “expected” tokens in\n  error message when parser `p` fails.\n\n*
  Tab width is not hard-coded anymore. It can be manipulated via\n  `getTabWidth`
  and `setTabWidth`. Default tab-width is `defaultTabWidth`,\n  which is 8.\n\n###
  Error messages\n\n* Introduced type class `ShowToken` and improved representation
  of\n  characters and strings in error messages, see #12.\n\n* Greatly improved quality
  of error messages. Fixed entire\n  `Text.Megaparsec.Error` module, see #14 for more
  information. Made\n  possible normal analysis of error messages without “render
  and re-parse”\n  approach that previous maintainers had to practice to write even
  simplest\n  tests, see module `Utils.hs` in `old-tests` for example.\n\n* Reduced
  number of `Message` constructors (now there are only `Unexpected`,\n  `Expected`,
  and `Message`). Empty “magic” message strings are ignored now,\n  all the library
  now uses explicit error messages.\n\n* Introduced hint system that greatly improves
  quality of error messages and\n  made code of `Text.Megaparsec.Prim` a lot clearer.\n\n###
  Built-in combinators\n\n* All built-in combinators in `Text.Megaparsec.Combinator`
  now work with any\n  instance of `Alternative` (some of them even with `Applicaitve`).\n\n*
  Added more powerful `count'` parser. This parser can be told to parse from\n  `m`
  to `n` occurrences of some thing. `count` is defined in terms of\n  `count'`.\n\n*
  Removed `optionMaybe` parser, because `optional` from\n  `Control.Applicative` does
  the same thing.\n\n* Added combinator `someTill`.\n\n* These combinators are considered
  deprecated and will be removed in future:\n\n    * `chainl`\n    * `chainl1`\n    *
  `chainr`\n    * `chainr1`\n    * `sepEndBy`\n    * `sepEndBy1`\n\n### Character
  parsing\n\n* Renamed some parsers:\n\n    * `alphaNum` → `alphaNumChar`\n    * `digit`
  → `digitChar`\n    * `endOfLine` → `eol`\n    * `hexDigit` → `hexDigitChar`\n    *
  `letter` → `letterChar`\n    * `lower` → `lowerChar`\n    * `octDigit` → `octDigitChar`\n
  \   * `space` → `spaceChar`\n    * `spaces` → `space`\n    * `upper` → `upperChar`\n\n*
  Added new character parsers in `Text.Megaparsec.Char`:\n\n    * `asciiChar`\n    *
  `charCategory`\n    * `controlChar`\n    * `latin1Char`\n    * `markChar`\n    *
  `numberChar`\n    * `printChar`\n    * `punctuationChar`\n    * `separatorChar`\n
  \   * `symbolChar`\n\n* Descriptions of old parsers have been updated to accent
  some\n  Unicode-specific moments. For example, old description of `letter` stated\n
  \ that it parses letters from “a” to “z” and from “A” to “Z”. This is wrong,\n  since
  it used `Data.Char.isAlpha` predicate internally and thus parsed\n  many more characters
  (letters of non-Latin languages, for example).\n\n* Added combinators `char'`, `oneOf'`,
  `noneOf'`, and `string'` which are\n  case-insensitive variants of `char`, `oneOf`,
  `noneOf`, and `string`\n  respectively.\n\n### Lexer\n\n* Rewritten parsing of numbers,
  fixed #2 and #3 (in old Parsec project these\n  are number 35 and 39 respectively),
  added per bug tests.\n\n    * Since Haskell report doesn't say anything about sign,
  `integer` and\n      `float` now parse numbers without sign.\n\n    * Removed `natural`
  parser, it's equal to new `integer` now.\n\n    * Renamed `naturalOrFloat` → `number`
  — this doesn't parse sign too.\n\n    * Added new combinator `signed` to parse all
  sorts of signed numbers.\n\n* Transformed `Text.Parsec.Token` into `Text.Megaparsec.Lexer`.
  Little of\n  Parsec's code remains in the new lexer module. New module doesn't impose\n
  \ any assumptions on user and should be vastly more useful and\n  general. Hairy
  stuff from original Parsec didn't get here, for example\n  built-in Haskell functions
  are used to parse escape sequences and the like\n  instead of trying to re-implement
  the whole thing.\n\n### Other\n\n* Renamed the following functions:\n\n    * `permute`
  → `makePermParser`\n    * `buildExpressionParser` → `makeExprParser`\n\n* Added
  comprehensive QuickCheck test suite.\n\n* Added benchmarks.\n\n## Parsec 3.1.9\n\n*
  Many and various updates to documentation and package description\n  (including
  the homepage links).\n\n* Add an `Eq` instance for `ParseError`.\n\n* Fixed a regression
  from 3.1.6: `runP` is again exported from module\n  `Text.Parsec`.\n\n## Parsec
  3.1.8\n\n* Fix a regression from 3.1.6 related to exports from the main module.\n\n##
  Parsec 3.1.7\n\n* Fix a regression from 3.1.6 related to the reported position of
  error\n  messages. See bug #9 for details.\n\n* Reset the current error position
  on success of `lookAhead`.\n\n## Parsec 3.1.6\n\n* Export `Text` instances from
  `Text.Parsec`.\n\n* Make `Text.Parsec` exports more visible.\n\n* Re-arrange `Text.Parsec`
  exports.\n\n* Add functions `crlf` and `endOfLine` to `Text.Parsec.Char` for handling\n
  \ input streams that do not have normalized line terminators.\n\n* Fix off-by-one
  error in `Token.charControl`.\n\n## Parsec 3.1.4 & 3.1.5\n\n* Bump dependency on
  `text`.\n\n## Parsec 3.1.3\n\n* Fix a regression introduced in 3.1.2 related to
  positions reported by\n  error messages.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <5'
  text: ! '>=0.2 && <1.3'
  mtl: ==2.*
  transformers: ==0.4.*
all-versions:
- '4.0.0'
- '4.1.0'
author: ! 'Megaparsec contributors,

  Paolo Martini <paolo@nemail.it>,

  Daan Leijen <daan@microsoft.com>'
latest: '4.1.0'
description-type: haddock
description: ! 'This is industrial-strength monadic parser combinator library. Megaparsec
  is

  a fork of Parsec library originally written by Daan Leijen.'
license-name: BSD3
