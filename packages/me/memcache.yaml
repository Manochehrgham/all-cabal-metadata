homepage: https://github.com/dterei/memcache-hs
changelog-type: markdown
hash: 6e2508fa18aae99fee1c0aa41cc86e97d73ff504647b5265e54adf3566ca81e7
test-bench-deps:
  bytestring: ! '>=0.9.2.1'
  base: <5
  criterion: ! '>0.6.0.0'
  memcache: -any
maintainer: David Terei <code@davidterei.com>
synopsis: A memcached client library.
changelog: ! '# 0.1.0.0


  * First proper release (although still lots of rough edges!)

  * Filled out `Data.Memcache.Client` to a complete API.

  * Integrated cluster and authentication handling.

  * Better error and exception handling.

  * Fix compilation under GHC 7.10.


  # 0.0.1


  * Initial (incomplete) support for a cluster of memcached servers.

  * Fixed compilation under GHC 7.4.


  # 0.0.0


  * Initial release. Support for a single server.


'
basic-deps:
  bytestring: ! '>=0.9.2.1'
  base: <5
  time: ! '>=1.4'
  resource-pool: ! '>=0.2.1.0'
  network: ! '>=2.4'
  blaze-builder: ! '>=0.3.1.0'
  binary: ! '>=0.6.2.0'
  hashable: ! '>=1.2.0.3'
  vector-algorithms: ! '>=0.5'
  vector: ! '>=0.7'
all-versions:
- '0.0.0'
- '0.0.1'
- '0.1.0.0'
author: David Terei <code@davidterei.com>
latest: '0.1.0.0'
description-type: markdown
description: ! "# memcache: Haskell Memcache Client\n\n[![Hackage version](https://img.shields.io/hackage/v/memcache.svg?style=flat)](https://hackage.haskell.org/package/memcache)
  [![Build Status](https://img.shields.io/travis/dterei/memcache-hs.svg?style=flat)](https://travis-ci.org/dterei/memcache-hs)\n\nA
  client library for a memcached cluster.\n\nIt supports the binary memcached protocol
  and SASL authentication. No support\nfor the ASCII protocol is provided. It supports
  connecting to a single, or a\ncluster of memcached servers. When connecting to a
  cluser, consistent hashing\nis used for routing requests to the appropriate server.\n\nComplete
  coverage of the memcached protocol is provided except for multi-get\nand other pipelined
  operations.\n\n## Licensing\n\nThis library is BSD-licensed.\n\n## Tools\n\nThis
  library also includes a few tools for manipulating and\nexperimenting with memcached
  servers.\n\n* `OpGen` -- A load generator for memcached. Doesn't collect timing\n
  \ statistics, other tools like\n  [mutilate](https://github.com/leverich/mutilate)
  already do that\n  very well. This tool is useful in conjunction with mutilate.\n*
  `Loader` -- A tool to load random data of a certain size into a\n  memcache server.
  Useful for priming a server for testing.\n\n## Architecture Notes\n\nWe're relying
  on `Data.Pool` for thread safety right now, which is\nfine but is a blocking API
  in that when we grab a socket\n(`withResource`) we are blocking any other requests
  being sent over\nthat connection until we get a response. That is, we can't pipeline.\n\nNow,
  use of multiple connections through the pool abstraction is an\neasy way to solve
  this and perhaps the right approach. But, could also\nimplement own pool abstraction
  that allowed pipelining. This wouldn't\nbe a pool abstraction so much as just round-robbining
  over multiple\nconnections for performance.\n\nEither way, a pool is fine for now.\n\n##
  Other clients\n\n* [C: libmemcached](http://libmemcached.org/libMemcached.html)\n*
  [Java: SpyMemcached](http://code.google.com/p/spymemcached/)\n* [Ruby: Dalli](https://github.com/mperham/dalli)\n\n##
  Get involved!\n\nWe are happy to receive bug reports, fixes, documentation enhancements,\nand
  other improvements.\n\nPlease report bugs via the\n[github issue tracker](http://github.com/dterei/memcache-hs/issues).\n\nMaster
  [git repository](http://github.com/dterei/memcache-hs):\n\n* `git clone https://github.com/dterei/memcache-hs.git`\n\n##
  Authors\n\nThis library is written and maintained by David Terei,\n<code@davidterei.com>.\n\n"
license-name: BSD3
