homepage: https://github.com/dhess/mellon/
changelog-type: markdown
hash: 8cceac6ea0effafd9951a7e9c837bd2b82bbcc43733e1723ae41c6ce73670eed
test-bench-deps:
  warp: -any
  http-client: -any
  hlint: ==1.9.*
  lucid: -any
  servant-docs: -any
  bytestring: -any
  wai: -any
  base: -any
  time: -any
  servant-client: -any
  hspec: ==2.2.*
  text: -any
  network: -any
  servant-server: -any
  servant: -any
  mellon-core: -any
  hspec-wai: ! '>=0.6.6 && <0.7'
  wai-extra: ==3.0.*
  transformers: -any
  servant-lucid: -any
  http-types: -any
  aeson: -any
maintainer: Drew Hess <src@drewhess.com>
synopsis: A REST web service for Mellon controllers
changelog: ! '## 0.7.0.1 (2016-06-13)


  - Packaging fixes only.


  ## 0.7.0.0 (2016-06-02)


  - Port to new `mellon-core` package.

  - Fix Servant bitrot.

'
basic-deps:
  warp: ==3.2.*
  http-client: ==0.4.*
  exceptions: ! '>=0.8.0 && <1'
  lucid: ==2.9.*
  servant-docs: ! '>=0.7.1 && <0.8'
  bytestring: ==0.10.*
  wai: ==3.2.*
  base: ! '>=4.8 && <5'
  time: ! '>=1.5 && <2'
  mellon-gpio: ==0.7.*
  servant-client: ! '>=0.7.1 && <0.8'
  text: ==1.2.*
  network: ==2.6.*
  servant-server: ! '>=0.7.1 && <0.8'
  servant: ! '>=0.7.1 && <0.8'
  mellon-web: -any
  mellon-core: ==0.7.*
  mtl: -any
  transformers: ! '>=0.4.2 && <0.6'
  optparse-applicative: ! '>=0.11.0 && <0.13'
  servant-lucid: ! '>=0.7.1 && <0.8'
  http-types: ==0.9.*
  aeson: ==0.11.*
  hpio: ! '>=0.8 && <1'
all-versions:
- '0.7.0.1'
author: Drew Hess <src@drewhess.com>
latest: '0.7.0.1'
description-type: markdown
description: ! "# mellon-web\n\nThe `mellon-web` package wraps a `mellon-core` controller
  in a REST\nweb service, making it possible to control physical access devices\nfrom
  an HTTP client. The package includes both a WAI application\nserver, and native
  Haskell client bindings for the service.\n\nLike the `mellon-core` controller interface,
  the `mellon-web` REST API\nis quite simple. There are only 3 methods:\n\n* `GET
  /time` returns the system time on the server. This is made\n  available for diagnostic
  purposes, primarily to ensure the server\n  has an accurate clock.\n\n* `GET /state`
  returns the controller's current state (either `Locked`\n  or `Unlocked date` where
  `date` is the UTC time at which the\n  controller will automatically lock again).\n\n*
  `PUT /state` sets the controller's current state. Use this method to\n  lock and
  unlock the controller.\n\nSee [API.md](API.md) for detailed documentation on the
  REST service.\n\nNote that the `mellon-web` server does not provide an authentication\nmechanism!
  You should proxy it behind a secure, authenticating HTTPS\nserver such as Nginx.\n\n##
  Example servers\n\n### \"Mock\" server\n\nAn extremely simple example server (with
  on-line documentation\nsupport) is provided in the `examples` directory. You can
  run it with\n`cabal run mock-mellon-server` and test it using the endpoints\ndescribed
  in [API.md](API.md). The server is will run on the\n`localhost` loopback interface
  on port 8081.\n\nAlso included is a [Paw](https://luckymarmot.com/paw) file with
  a\npre-defined `localhost` environment for use with the example server.\n\nThis
  particular example server uses a \"mock lock\" device which only\ninternally logs
  lock and unlock events without depending on any actual\nhardware, so it will run
  anywhere.\n\n### GPIO server\n\nAnother included example server uses the `mellon-gpio`
  package to\ndrive a simple physical access device via a GPIO pin. This server must\nbe
  run on a Linux host with GPIO hardware, e.g., a Raspberry Pi\nrunning Linux.\n\nThis
  server takes a GPIO pin number and a local port number, then\nstarts a `mellon-web`
  server on all local interfaces on the specified\nport. When the server receives
  an unlock request, it will drive a high\nsignal on the specified GPIO pin. When
  the unlock expires, or when the\nserver receives a lock request, it will drive a
  low signal on the\nspecified GPIO pin.\n\nTo use this server, simply connect a properly-designed
  physical access\ndevice (e.g., an electric strike driven by a relay circuit such
  as the\none shown\n[here](http://www.petervis.com/Raspberry_PI/Driving_Relays_with_CMOS_and_TTL_Outputs/Driving_Relays_with_CMOS_and_TTL_Outputs.html))\nto
  an available GPIO pin on the host device, then run the server with\nthe specified
  GPIO pin number and port. For example, to run the server\non port 7533 using GPIO
  pin 65:\n\n```\ncabal run gpio-mellon-server -- sysfs --port 7533 65\n```\n\nThe
  `sysfs` command tells the server to use the Linux `sysfs` GPIO\ninterpreter. (Currently,
  this is the only supported GPIO platform.)\n\n**NOTE**: the REST service provided
  by `gpio-mellon-server` offers no\nsecurity/authentication for your access control
  device! You should\nalways run it (or any `mellon-web` server) behind a secure proxy
  web\nservice or equivalent HTTP(S)-based authentication mechanism.\n\n[![Travis
  CI build status](https://travis-ci.org/dhess/mellon.svg?branch=v0.7.0)](https://travis-ci.org/dhess/mellon)\n"
license-name: BSD3
