homepage: https://github.com/dhess/mellon/
changelog-type: markdown
hash: 5d464c56cb5c6fdea182293aaf8c24ec4f8827f48f4108d4ae9c58d2c07dbeeb
test-bench-deps:
  hlint: ==1.9.*
  base: -any
  time: -any
  hspec: ==2.2.*
  async: -any
  doctest: ==0.11.*
  quickcheck-instances: ==0.3.*
  mtl: -any
  transformers: -any
  QuickCheck: ==2.8.*
maintainer: Drew Hess <src@drewhess.com>
synopsis: Control physical access devices
changelog: ! '## 0.7.0.1 (2016-06-13)


  - Packaging fixes only.


  ## 0.7.0.0 (2016-06-02)


  Initial release.

'
basic-deps:
  base: ! '>=4.8 && <5'
  time: ! '>=1.5 && <2'
  async: ==2.1.*
  mtl: ==2.2.*
  transformers: ! '>=0.4.2 && <0.6'
all-versions:
- '0.7.0.0'
- '0.7.0.1'
author: Drew Hess <src@drewhess.com>
latest: '0.7.0.1'
description-type: markdown
description: ! '# mellon-core


  *"Speak, friend, and enter."*


  `mellon-core` is a Haskell package for controlling physical access

  devices designed for human factors, e.g., electric strikes. The access

  control protocol is quite simple: a device is either locked, or it is

  unlocked until a particular date and time (an *expiration date*). Once

  the expiration date passes, the device is automatically locked again.

  In the meantime, the device can be locked immediately, overriding the

  unlocked state; or the unlock period can be extended.


  User programs incorporate `mellon-core` functionality via a

  `Controller`, which is responsible for handling user lock and unlock

  commands, and for scheduling and canceling unlock expirations.


  User programs must also adapt their physical access devices to the

  interface expected by the controller. For this purpose, `mellon-core`

  defines a generic `Device` parametric data type with 2 simple `IO`

  actions for locking and unlocking the device. (`mellon-core` does not

  provide any useful device implementations; see the companion

  `mellon-gpio` package for a GPIO-driven implementation.)


  Note that `mellon-core` does not provide authentication mechanisms or

  network services for interacting with controllers; that is the domain

  of higher-level packages which use the base `mellon-core` package

  (e.g., `mellon-web`).


  [![Travis CI build status](https://travis-ci.org/dhess/mellon.svg?branch=v0.7.0)](https://travis-ci.org/dhess/mellon)

'
license-name: BSD3
