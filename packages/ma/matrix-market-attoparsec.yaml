homepage: https://github.com/ocramz/matrix-market-attoparsec
changelog-type: ''
hash: 197816918dd606b7f18d00ff51cdc1bee2a2500f34fb53ee8c3cecd6aa887084
test-bench-deps:
  exceptions: -any
  base: -any
  hspec: -any
  matrix-market-attoparsec: -any
  QuickCheck: -any
  directory: -any
maintainer: zocca marco gmail
synopsis: Attoparsec parsers for the NIST Matrix Market format
changelog: ''
basic-deps:
  exceptions: -any
  bytestring: ! '>=0.9'
  base: ! '>=4.7 && <5'
  attoparsec: ! '>=0.10'
  scientific: ! '>=0.3.4.9'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Marco Zocca
latest: '0.1.0.1'
description-type: markdown
description: ! "# matrix-market-attoparsec\n\n[![Build Status](https://travis-ci.org/ocramz/matrix-market-attoparsec.png)](https://travis-ci.org/ocramz/matrix-market-attoparsec)\n\nAttoparsec
  parser for the NIST Matrix Market format [1].\n\nThe library also contains functions
  for serializing to text file, and the read/write/read roundtrip works as expected.\n\n##
  User guide\n\nThe module `Data.Matrix.MatrixMarket` exports the user interface:\n\n\n
  \   readMatrix :: FilePath -> IO (Matrix S.Scientific)\n\n    readArray :: FilePath
  -> IO (Array S.Scientific)\n\n    writeMatrix :: Show a => FilePath -> Matrix a
  -> IO ()\n \n    writeArray :: Show a => FilePath -> Array a -> IO ()  \n\nThe first
  two functions contain the parsing logic, and make use of `scientific` for parsing
  numerical data in scientific notation.\n\n`test/LibSpec.hs` contains a simple read/write/read
  sanity test:\n\n    m0 <- readMatrix fname   -- load original\n    writeMatrix ftemp
  m0     -- save as temp\n    m1 <- readMatrix ftemp   -- load temp\n    m0 `shouldBe`
  m1         -- compare temp with original\n\n\n## References\n\n[1] [http://math.nist.gov/MatrixMarket/](http://math.nist.gov/MatrixMarket/)\n"
license-name: BSD3
