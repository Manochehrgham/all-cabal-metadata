homepage: http://marvin.readthedocs.io/en/latest/interpolation.html
changelog-type: ''
hash: 35de70bb2fabe01a1b9a7423ccc0bea0e084deb5ab55cb71ada1234df51bf85f
test-bench-deps:
  base: ! '>=4.9.0.0 && <4.10'
  hspec: ! '>=2.2.4 && <2.3'
  marvin-interpolate: ! '>=0.2.0 && <0.3'
maintainer: dev@justus.science
synopsis: Compile time string interpolation a la Scala and CoffeeScript
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.2.1 && <1.3'
  parsec: ! '>=3.1.11 && <3.2'
  mtl: ! '>=2.2.1 && <2.3'
  haskell-src-meta: ! '>=0.6.0.14 && <0.7'
  template-haskell: ! '>=2.11.0.0 && <2.12'
all-versions:
- '0.0.1'
- '0.1.0'
- '0.2.0'
author: JustusAdam
latest: '0.2.0'
description-type: markdown
description: ! "# Simple string interpolation\n\n[![Travis](https://travis-ci.org/JustusAdam/marvin-interpolate.svg?branch=master)](https://travis-ci.org/JustusAdam/marvin-interpolate)\n[![Hackage](https://img.shields.io/hackage/v/marvin-interpolate.svg)](http://hackage.haskell.org/package/marvin-interpolate)\n\nThis
  string interpolation library originates from the [Marvin project](https://github.com/JustusAdam/marvin)
  where, in an attempt to make it easy for the user to write text with some generated
  data in it, I developed this string interpolation library.\nThe design is very similar
  to the string interpolation in Scala and CoffeeScript, in that the hard work happens
  at compile time (no parsing overhead at runtime) and any valid Haskell expression
  can be interpolated.\n\nThe library uses the builtin Haskell compiler extension
  in the form of *QuasiQuoters* ([`QuasiQuotes`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#template-haskell-quasi-quotation)
  language extension) and/or *splices* ([`Template Haskell`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#template-haskell)
  language extension)\n\n```haskell\n{-# LANGUAGE QuasiQuotes #-}\n\nimport Marvin.Interpolate\n\nmyStr
  = [i|some string %{show $ map succ [1,2,3]} and data |]\n-- \"some string [2,3,4]
  and data\"\n```\n\nor alternatively as splice (which might be kinder to your code
  highlighting)\n\n```haskell\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Marvin.Interpolate\n\nmyStr
  = $(is \"some string %{show $ map succ [1,2,3]} and data\")\n-- \"some string [2,3,4]
  and data\"\n```\n\nIt basically transforms the interpolated string  `[i|interpolated
  string|]`, or in splices `$(is \"interpolated string\")` into a concatenation of
  all string bits and the expressions in `%{}`.\nTherefore it is not limited to `String`
  alone, rather it produces a literal at compile time, which can either be interpreted
  as `String` or, using the [`OverloadedStrings`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#overloaded-string-literals)
  extension, as `Text` or `ByteString` or any other string type.\n\n`i` (for *interpolate*)
  and `is` (for *interpolate splice*) is the basic interpolator, which inserts the
  expressions verbatim. Hence when using `i` or `is` all expressions must return the
  desired string type.\n\nThere are specialized interpolators, which also perform
  automatic conversion of non-string types into the desired string type.\nThese specialized
  interpolators each have an associated typeclass, which converts string types (`String`,
  `Text` and lazy `Text`) to the target type, but leaves the contents unchanged and
  calls `show` on all other types before converting.\nThis last instance, which is
  based on `Show`, can be overlapped by specifying a custom instance for your type,
  allowing the user to define the conversion.\n\nThe naming scheme of the interpolators
  in general is `i<splice?><pecialization?>`.\nI. e. `isS` expands to *interpolate
  splice to String* and `iLT` to *interpolate to Lazy Text*.\n\n- `iS` and `isS` in
  `Marvin.Interpolate.String` converts to `String` via the `ShowS` typeclass\n- `iT`
  and `isT` in `Marvin.Interpolate.Text` converts to `Text` via the `ShowT` typeclass\n-
  `iLT` and `isLT` in `Marvin.Interpolate.Text.Lazy` converts to lazy `Text` via the
  `ShowLT` typeclass\n\nTo import all interpolators, import `Marvin.Interpolate.All`.\n\n##
  Syntax\n\nInterpolation uses the quasi quoter sytax, which starts with `[interpolator_name|`
  and ends with `|]`.\nAnything in between is interpreted by the library.\n\nThe format
  string in between uses the syntax `%{expression}`.\nAny valid Haskell expression
  can be used inside the braces.\nAnd all names which are in scope can be used, like
  so.\n\n```haskell\nlet x = 5 in [iS|x equals %{x}|] -- > \"x equals 5\"\n```\n\nThere
  are four escape sequences to allow literal `%{` and `|]`\n\n| Input | Output |\n|-------|--------|\n|
  `~]`  | `]`    |\n| `~%`  | `%`    |\n| `~}`  | `}`    | \n| `~~`  | `~`    |\n\n\nAs
  a result the sequence `~%{` will show up as a literal `%{` in the output and `|~]`
  results in a literal `|]`.\nNote that these are simple substitutions. \nIn general
  the characters themselves, if not escaped, will not throw errors, aka `~` will be
  `~` again in the output.\nEscaping is only necessary in cases where these cahracters
  would have a special meaning otherwise.\n\n\n## Differences to/Advantages over other
  libraries\n\nThere are a few advantages this libary has over other string formatting
  options.\n\n1. **The hard work happens at compile time**\n\n    Unlike libraries
  like [text-format](https://hackage.haskell.org/package/text-format) and the [`Text.Printf`](https://www.stackage.org/haddock/lts-7.14/base-4.9.0.0/Text-Printf.html)
  module parsing the format string, producing the string fragments and interleaving
  data and strings happens all at compile time.\n    At runtime a single fusable string
  concatenation expression is produced.  \n    Furthermore all errors, like missing
  identifiers happen at compile time, not at runtime.\n\n2. **Type Polymorphism**\n
  \   \n    The created, interpolated string has no type. \n    It can be interpreted
  as any string type, so long as there is an [`IsString`](https://www.stackage.org/haddock/lts-7.14/base-4.9.0.0/Data-String.html#t:IsString)
  instance and the expressions inside return the appropriate type.\n\n    This is
  different format string libraries like [text-format](https://hackage.haskell.org/package/text-format)
  and the [`Text.Printf`](https://www.stackage.org/haddock/lts-7.14/base-4.9.0.0/Text-Printf.html)
  module which always produce strings of a particular type, and interpolation libraries
  like [interpolate](http://hackage.haskell.org/package/interpolate) and [interpol](http://hackage.haskell.org/package/interpol)
  which require instances of `Show`.\n\n3. **Simple API and full Haskell support**\n\n
  \   The interpolated expressions are just plain Haskell expressions, no extra syntax,
  beyond the interpolation braces `%{}`.\n    Also all Haskell expressions, including
  infix expressions, are fully supported.\n\n    This is different from [Interpolation](http://hackage.haskell.org/package/Interpolation)
  which introduces additional syntax and does not fully support infix expressions.\n"
license-name: BSD3
