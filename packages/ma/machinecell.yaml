homepage: http://github.com/as-capabl/machinecell
changelog-type: markdown
hash: 3a8abc2baba846b36385c7096590297f214db8dc347e7000378e99f14a452ce6
test-bench-deps:
  arrows: ! '>=0.4.1.2'
  base: ! '>=4.0 && <5.0'
  hspec: ! '>=0.2.0'
  semigroups: ! '>=0.8.3.1'
  mtl: ! '>=2.0.1.1'
  QuickCheck: ! '>=1.0'
  machinecell: -any
  profunctors: ! '>=4.0'
maintainer: Hidenori Azuma <as.capabl@gmail.com>
synopsis: Arrow based stream transducers
changelog: ! "3.0.1\n-----------\n* Fix performance issue of switch, dSwitch, accum,
  dAccum.\n\n3.0.0\n-----------\n* ArrowLoop instance now independent of base arrow's\n*
  Make PlanT newtype and add stop handling MonadPlus instance\n* API changes\n    *
  Added `filterJust`, `filterLeft`, `filterRight`\n    * Deleted Show and Eq instance
  of Event type\n    * Added Isos of ArrowUtil module\n    * Delete state monad handling.\n
  \   * Delete unsafe primitives `cycleDelay`, `fitEx`, `unsafeSteady`, `loop'`\n
  \   * Delete deperecated `passRecent`, `withRecent`\n    * Delete ProcessA ArrowReader
  instance and added `readerProc`\n\n\n2.1.0\n-----------\n* Added `dHold`, `dAccum`.\n*
  Deprecated `cycleDelay`.\n* Fixed `muted`.\n* Slightly changed the ArrowLoop instance
  declaration.\n    * Right tightening rule will be preserved.\n    * For IO processes,
  \"Indefinite access to MVar\" errors, which used to occur in some\n      situations
  in old versions, will be suppressed.\n    * This will not change any existing code
  unless it loops back\n      any Event-type signal.\n\n2.0.1\n------------\n* Support
  free-4.12\n\n2.0.0\n------------\n* Relocate files\n    * `catch` and its families
  are moved to Misc.Exception\n* Performance improve\n* Added primitives: `fitEx`,
  `unsafeSteady`, `unsafeExhaust`\n* Added: `condEvent`, `filterEvent`, `muted`\n*
  Added to Misc: `Discrete`, `Pump.asUpdater`, `Pump.Alg`\n* Deleted deprecated: `hEv`,
  `hEv'`, `evMaybe`, `fromEvent`, `split`,\n  `join`, `split2`, `join2`, `feedback`,
  `feedback1`, `isNoEvent`, `isOccasional`, `isEnd`\n* Deleted `Foldable` and `Traversable`
  instance of `Event`.\n* Added `Occasional'` by splitting some members from `Occasional`\n\n1.3.1\n------------\n*
  (Fix test suite of 1.3.0)\n\n1.3.0\n------------\n* Support of `ArrowState`.\n*
  Added utilities related to `ArrowLoop` (cycleDelay, Pump)\n* Correct EOS behaviour
  of some utilities.\n\n1.2.0\n------------\n* Support of `ArrowReader`.\n* Added
  await fail handling.\n* Improved performance by church-encoded free monads.\n* Arrow
  stack of newest GHC support for some utilities.\n\n1.1.1\n------------\n* Eliminated
  banana brackets to support newest GHC.\n\n1.1.0\n------------\n* Hide `Event` constructors
  and some instances (`Applicative`, `Monad`).\n* Added `feedback`\n* Fixed `accum`\n\n1.0.1\n------------\n*
  Fix some bugs of core part.\n* Added `onEnd`.\n* Added `sample`.\n\n1.0.0\n-------------\n*
  First release.\n"
basic-deps:
  free: ! '>=4.12 && <5.0'
  arrows: ! '>=0.4.1.2'
  base: ! '>=4.0 && <5.0'
  semigroups: ! '>=0.8.3.1'
  mtl: ! '>=2.0.1.1'
  profunctors: ! '>=4.0'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.1.0'
- '1.1.1'
- '1.2.0'
- '1.3.0'
- '1.3.1'
- '2.0.0'
- '2.0.1'
- '2.1.0'
- '3.0.0'
- '3.0.1'
author: Hidenori Azuma
latest: '3.0.1'
description-type: markdown
description: ! 'machinecell

  ===========


  Arrow based stream transducer.


  Description

  ---------------


  As other iteratee or pipe libraries, machinecell abstracts general iteration processes.


  Here is an example that is a simple iteration over a list.


  ```

  >>> run (evMap (+1)) [1, 2, 3]

  [2, 3, 4]

  ```


  In above statement, "`evMap` (+1)" has a type "ProcessA (-\>) (Event Int) (Event
  Int)",

  which denotes "A stream transducer that takes a series of Int as input,

  gives a series of Int as output, run on base arrow (-\>)."



  In addition to this simple iteration, machinecell has following features.


  * Side effects

  * Composite pipelines

  * Arrow compositions

  * Behaviours and switches


  See [Control.Arrow.Machine](https://hackage.haskell.org/package/machinecell/docs/Control-Arrow-Machine.html)
  documentation.




  Comparison to other libraries.

  ---------------


  Some part of machinecell is similar to other stream transducer

  libraries, namely pipes, conduit, or machines. machinecell can be

  seen as a restricted variation of them to one-directional. But

  additionally, machinecell supports arrow compositions.

  Bidirectional communications can be taken place by ArrowLoop

  feature.


  Rather, there are several other arrowised stream transducer

  libraries. streamproc shares the most concept to machinecell. But

  actually it has a problem described later in this post. Machinecell

  can be said as "Streamproc done right."


  auto is a brand-new arrowised stream transducer library. Compared

  to it, machinecell''s advantage is await/yield coroutines, while

  auto''s one is serialization.




  Motivation and background

  ---------------


  "Generalizing monads to arrows," The original paper of arrow calculation

  mentions a kind of stream transducer, which later implemented as streamproc.


  http://www.cse.chalmers.se/~rjmh/Papers/arrows.pdf



  And other people propose instance declarations of Arrow class for several existing
  stream processors.


  http://stackoverflow.com/questions/19758744/haskell-splitting-pipes-broadcast-without-using-spawn


  https://www.fpcomplete.com/school/to-infinity-and-beyond/pick-of-the-week/coroutines-for-streaming/part-4-category-and-arrow



  But actually, there is a problem argued in this post.


  https://mail.haskell.org/pipermail/haskell-cafe/2010-January/072193.html



  The core problem is, while arrow uses tuples as parallel data

  stream, they cannot represent a composite streams if they carry

  different numbers of data in parallel.


  To solve this problem, some arrow libraries restrict transducers to

  one-to-one data transformation. Yampa and netwire does so, as

  mentioned in above post. And auto also takes this approach.


  Machinecell''s approach is different, but simple too. The key idea

  is wrapping all types of data stream into a maybe-like type. Then

  even tuples can represent different numbers of data, by inserting

  appropreate number of ''Nothing''s.


  Furthermore, I identified the maybe-like type as the ''Event'' type,

  which appears in Yampa and netwire. Then I successively implemented

  several arrows of Yampa and netwire.


  API names come from stream libraries are named after machines'',

  while ones from FRPs are after Yampa''s. Now, machinecell may be

  seen as a hybrid of machines and Yampa.

'
license-name: BSD3
