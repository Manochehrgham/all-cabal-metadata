changelog-type: ''
hash: d421e02f533d14faba24d6bb7fe8f115372aeb44653e163be95ce1c5dd4174d9
test-bench-deps: {}
synopsis: ! 'A program for creating and managing a static

  weblog with LaTeX math and function graphs'
changelog: ''
basic-deps:
  ConfigFile: ==1.1.*
  test-framework-hunit: ! '>=0.2.6 && <0.3'
  bytestring: ! '>=0.9 && <1.0'
  test-framework: ! '>=0.3.3 && <0.6'
  SHA: ! '>=1.4 && <1.6'
  unix: ! '>=2.3 && <2.5'
  HStringTemplate: ==0.6.*
  base: ! '>=3 && <5'
  time: ! '>=1.1'
  filepath: ! '>=1.1'
  process: ==1.0.*
  HUnit: ! '>=1.2.2 && <1.2.5'
  pandoc-types: ! '>=1.8'
  pandoc: ! '>=1.8'
  old-locale: ==1.0.*
  directory: ! '>=1.0 && <1.1.0.2'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
latest: '0.5'
description-type: markdown
description: ! "\nmathblog\n========\n\nmathblog is a Haskell program targeted at
  people who want to write\nstatically-generated, mathematically-themed weblogs.  It
  supports:\n\n - Extended Markdown input syntax as supported by the Pandoc library\n\n
  - inline and block-level TeX math rendered by MathJax or LaTeX\n\n - Function graphing
  with Gnuplot or the TikZ / pgfplots LaTeX\n   packages\n\n - Integration of Javascript-based
  web services such as Disqus\n\n - Template-based document rendering with support
  for layout and style\n   customization\n\nProject vision\n==============\n\nI wrote
  mathblog with a very specific set of requirements in mind,\nmotivated by the following
  principles:\n\n - A blog should be easy to create, host, and update.\n\n - A blog
  should be easy to maintain.\n\n - I should be able to edit posts in my editor of
  choice and write\n   them in an intelligent textual markup language.\n\n - It should
  be easy to embed high-quality mathematical symbols and\n   equations in the blog
  posts.\n\nAs a result, mathblog has the following properties:\n\n - The software
  is composed of a single executable which will\n   automatically take care of creating
  your blog and regenerating\n   pages when your post markup changes.\n\n - All content
  is stored in plain text files and is generated\n   statically.  No database or web
  framework is used.\n\n - A mathblog can be hosted with a simple static fileserver
  such as\n   thttpd, Lighttpd, or Apache.\n\n - Blog posts are written in the Markdown
  format with extensions, as\n   supported by the Pandoc document converter.\n\n -
  Math is embedded with `$...$` or `\\(...\\)` for inline math and\n   `$$...$$` or
  `\\[...\\]` for block-level math.\n\nThese properties have some nice advantages;
  your blog content is\ncacheable and can be subjected to revision control.  Posts
  are easy to\nedit and editing doesn't require a web browser.  The static file\nrepresentation
  model means you can compose a blog post on your laptop\nand get it just right using
  a local installation of mathblog, then\npush it up to your server to post it to
  your public blog.\n\nDependencies\n============\n\nmathblog takes advantage of three
  primary software components:\n\n - Pandoc, a document-processing library.\n\n -
  Math typesetting packages:\n\n   - GladTex and LaTeX for math typesetting if you
  choose `gladtex`\n     for the value of the 'mathBackend' configuration setting.\n
  \    GladTex 1.3 is required for best results.  GladTex renders LaTeX\n     snippets
  to images.  This is the recommended backend for math\n     typesetting.  See <https://sourceforge.net/projects/gladtex/>\n\n
  \  - MathJax if you choose `mathjax` for the value of the\n     'mathBackend' configuration
  setting.  mathblog uses the MathJax\n     CDN for MathJax resources.\n\n - Function
  graph plotting packages:\n\n   - The TikZ and pgfplots LaTeX packages if you choose
  `gnuplot` for\n     the value of the 'eqBackend' configuration setting.  This is
  the\n     recommended backend for function graph plotting.\n\n   - GNUplot if you
  choose `gnuplot` for the value of the 'eqBackend'\n     configuration setting.\n\nCreating
  a blog\n===============\n\nTo begin, set the following environment variable:\n\n
  \ `MB_BASE_DIR`\n\nThis is the location of your blog files on the filesystem.  It
  must be\nan absolute path.  If you would rather use a command-line parameter,\nspecify
  `-d` or `--baseDir` when running `mb`.  The command line\ndirectory parameter will
  always override the environment variable if\nit is set.\n\nOnce you've set the environment
  variable, just run `mb -i`.  It will\ntake care of setting up a new blog data directory
  for you, complete\nwith some default pages and a default first blog post:\n\n~~~\n$
  export MB_BASE_DIR=`pwd`/myBlog\n$ mb -i\nBlog directory: .../myBlog\nConfig file:
  .../myBlog/blog.cfg\nSetting up data directory using skeleton: /.../skel\nConfiguration
  file changed; regenerating all content.\nTemplates changed; regenerating accordingly.\nPosts
  changed:\n  first-post.txt\nPost index changed; regenerating next/previous links.\nRendering
  first-post\nDone.\n~~~\n\nConfiguring the Blog\n====================\n\nThe default
  blog configuration file is called `blog.cfg`.  This file\ncontains information about
  you which may be included in the generated\npages.  The configuration file `blog.cfg`
  must have the following\nfields set:\n\n - `baseUrl`\n\n    The base URL of your
  blog; this URL will be used to generate some\n    links in the blog's pages where
  absolute URLs matter.  Otherwise,\n    relative URLs will be used, with an assumption
  that your blog is\n    hosted at the root of a domain.\n\n - `title`\n\n    The
  title of your blog, such as \"My math blog\".\n\n - `authorName`\n\n    Your name
  (for the RSS feed metadata and the page footer).\n\n - `authorEmail`\n\n    Your
  e-mail address (for the RSS feed metadata only).\n\n - `mathBackend`\n\n    The
  backend used to render TeX math expressions.  Can be either\n    `gladtex` or `mathjax`.
  \ If `gladtex`, you will need the latest\n    version of the `gladtex` program for
  best results.  No special\n    configuration is necessary for MathJax, as mathblog's
  default\n    templates use CDN resources for MathJax.\n\n - `eqBackend`\n\n    The
  backend used to render function graphs.  Can be either `tikz`\n    or `gnuplot`.
  \ See the Function Graph Embedding section below for\n    details.\n\nNote that
  if you pick a math or function graphing backend which isn't\nsupported by your system,
  `mb` will emit errors when processing your\nposts.\n\nAll of the above fields can
  be accessed in templates using the syntax\ndescribed in \"Customizing your blog\"
  below.\n\nServing the Blog\n================\n\nBy default, `mb` will use `$(MB_BASE_DIR)/html`
  as its output\ndirectory, but if you want the generated files to be installed\nsomewhere
  else, use the `-h` option.\n\nTo serve your blog files you can either make the output
  directory a\ndocument root for your web server or virtual host, or you can symlink\nthe
  output directory to the location of choice.  The mathblog\ndirectory itself is not
  intended to be in your web server's document\ntree because it contains many files
  that shouldn't be served to users.\n\nStart up a web server pointing at the output
  directory and take a\nlook.\n\nNow you might want to edit or create a new post,
  or even remove one.\nJust edit the appropriate file in `posts/` accordingly and
  re-run\n`mb`.  Here's an example of adding a new post:\n\n~~~\n$ mb\nmb: using base
  directory \".../myBlog\"\nPosts changed:\n  first-post.txt\nRendering 1 post(s)...\nRendering
  first-post\nDone.\n~~~\n\nWhen to run `mb`\n================\n\n`mb` looks at the
  modification times of your post files in `posts/`,\nthe config file, template files,
  and the post index (see below) when\ndetermining when to regenerate content.  It
  also looks for new posts\nthat haven't been rendered in the past.  The rule of thumb
  is: re-run\nmb whenever you make any changes to:\n\n - templates in `templates/`\n
  - post files in `posts/`\n - the post index, `posts/posts-index`\n - `blog.cfg`\n\nModifying
  a post will cause that post to be re-rendered, but\nmodifiying the configuration
  file will cause ALL posts to be\nre-rendered (since the configuration file contains
  values that will\naffect all hyperlinks contained inside each post).  `mb` will
  always\nrebuild the portions of each page affected by template changes even if\npost
  source files are unchanged.\n\nPost format\n===========\n\nPosts are formatted in
  Markdown and support the extended Markdown\nsyntax as implemented by Pandoc.  The
  only important convention to\nnote is that the post title goes on the first line
  of the file\nfollowing a percent sign, as follows:\n\n~~~\n%My First Post\n\nFirst
  paragraph starts here.\n~~~\n\nRunning `mb` in \"listen\" mode\n=============================\n\nOrdinarily,
  you'll just run `mb` once in a while to update your\ncontent.  But if you're in
  the middle of authoring a new post and you\nwant to see what it looks like as you
  edit it rather than run `mb` by\nhand periodically, you can run `mb` in \"listen\"
  mode; this means that\nmb will run forever, peroidically scanning the filesystem
  for changes\nto your blog posts and other data files and regenerate them and copy\nthem
  to the output directory when it detects a change.  Running\nmathblog in listen mode
  is simple:\n\n~~~\n$ mb -l\nWaiting for changes in .../blog ...\nBlog directory:
  .../blog\nConfig file: .../blog/blog.cfg\nPost index changed; regenerating next/previous
  links.\nDone.\n\nBlog directory: /.../blog\nConfig file: .../blog/blog.cfg\nConfiguration
  file changed; regenerating all content.\nRendering 1 post(s)...\nRendering first-post\nDone.\n\nBlog
  directory: /Users/cygnus/blog3\nConfig file: .../blog/blog.cfg\nPosts changed:\n
  \ first-post.txt\nRendering 1 post(s)...\nRendering first-post\nDone.\n~~~\n\nAbove
  I ran `mb` in listen mode and then modified the post index, then\nthe blog config
  file, then one of the posts.  In each case `mb`\ndetected the change and ran its
  typical regeneration routine.\n\nCustomizing your blog\n=====================\n\nIt's
  likely that you'll want to customize the look and feel of your\nblog.  To this end,
  mathblog generates the pages of your blog by\nassembling various pieces of the page
  to create the final result.  The\nbiggest piece of a generated page is the blog
  post itself, but the\nsurrounding elements are read from various files that are
  created by\nmathblog when it creates your blog data directory.  These files are\nstored
  in the `templates/` subdirectory of your blog data directory\nand are as follows:\n\n
  - `templates/rssTemplate.xml`\n\n    This is the template used to generate your
  RSS feed.\n\n - `templates/pageTemplate.html`\n\n    This file makes up the overall
  structure of every page on the\n    blog.\n\n - `templates/postTemplate.html`\n\n
  \   This file makes up the structure of the post portion of the page,\n    for pages
  which show posts (i.e., not the post index).\n\nThe templates mentioned above are
  StringTemplate templates and are\nprocessed with the HStringTemplate library.  The
  following template\nplaceholders are supported in each template:\n\n  - `$title$`,
  `$baseUrl$`, `$authorName$`, `$authorEmail$`\n\n    These placeholders all correspond
  directly to fields on the\n    `blog.cfg` configuration file.\n\n  - `$extraPageHead$`\n\n
  \   Content to be placed in the `<HEAD>` tag of the page, such as\n    javascript
  tags, stylesheets, etc.  You'll need to ensure that\n    this is somewhere in your
  `<HEAD>` tag if you want to use mathblog\n    features which may need to load extra
  resources.\n\nThese placeholders are supported in the post template:\n\n - `$jsInfo$`\n\n
  \   A brief javascript used to provide information about the page to\n    other
  javascripts (see \"Other features\" below for usage).\n\n - `$nextPrevLinks$`\n\n
  \   HTML displaying the \"next\" and \"previous\" links for older/newer\n    posts.\n\n
  - `$post$`\n\n    The body of the post itself.\n\nThese placeholders are supported
  in the page template:\n\n - `$content$`\n\n    The content of the page to be rendered.\n\nBlog
  Assets\n===========\n\nThe default blog directory created by `mb` also includes
  an `assets`\ndirectory.  Whenever `mb` detects changes in your blog post or asset\nfiles
  (or if you run `mb -f`), everything in `assets/` will be copied\nrecursively into
  the output directory.  This way, if you have custom\nstylesheets or other files
  which need to be available, they can be\nkept in your data directory and published
  with the rest of the\ngenerated content.\n\nFunction Graph Embedding\n========================\n\nmathblog
  supports inline scripts for rendering function graphs.  Right\nnow, mathblog supports
  Gnuplot and the TikZ / pgfplots LaTeX packages.\nSet the 'eqBackend' configuration
  option (see above) to choose a\nbackend.\n\nGnuplot\n-------\n\nTo specify a Gnuplot
  function graph in a blog post, we overload the\nPandoc code block syntax.  Here's
  an example of a Gnuplot graph:\n\n    ~~~ {#eq-basic}\n    f(x) = x\n    plot [-5.0:5.0]
  [-5.0:5.0] f(x) lt rgb \"blue\"\n    ~~~\n\nThis defines a single function and plots
  it in blue over the specified\nintervals.  The most important part is the \"#eq-basic\"
  bit: this\nspecifies the equation preamble to use when generating the output\nimage.
  \ This string refers to this preamble file in your blog\ndirectory:\n\n  `eq-preambles/eq-basic.txt`\n\nThis
  file contains the commands responsible for determining the output\nimage size and
  axis configuration.  The contents of the code block\nthat you write get appended
  to the contents of the preamble file you\nspecify to result in the full gnuplot
  script, whose output gets\nembedded in the page.  We use these templates to make
  it easier to\ncreate many graphs that have the same general structure (e.g., axis\nconfiguration,
  image size) without having to repeat the full gnuplot\nscript each time.\n\nYou
  can create other gnuplot premables to suit your needs; just\nreference them in the
  code block in the same way.  For example, you\nmight create eq-preambles/eq-fancy.txt,
  in which case the code block\nsyntax to use it is:\n\n    ~~~ {#eq-fancy}\n    <your
  script here>\n    ~~~\n\nTikZ / pgfplots\n---------------\n\nTo specify a TikZ /
  pgfplots function graph in a blog post, we\noverload the Pandoc code block syntax.
  \ Here's an example of a TikZ\nfigure:\n\n    ~~~ {#tikz}\n    \\begin{axis}[\n
  \           minor tick num=3,\n            axis y line=center,\n            axis
  x line=middle,\n        ]\n\n    \\addplot[smooth,mark=none,blue] plot coordinates
  {\n        (-1,-1)\n        (2.95,2.95)\n    };\n    ~~~\n\nThis is a LaTeX fragment
  which will automatically be embedded in a\n`tikzpicture` environment and rendered
  to an image within the blog\npost.  For more information on the powerful TikZ /
  pgfplots packages,\nplease see <https://sourceforge.net/projects/pgfplots/>\n\nStyling
  Function Graphs with CSS\n--------------------------------\n\nNote that the Pandoc
  syntax also allows us to assign CSS class names\nto the code block, and mathblog
  passes these through to the generated\nimage.  So if you wanted to wrap your text
  around the generated image,\nyou could create a CSS class like this:\n\n    .eq-right
  {\n      float: right;\n    }\n\nand then assign it to your equation graph like
  this:\n\n    ~~~ {#eq-basic .eq-right}\n    ...\n    ~~~\n\nFor more information
  on the code block syntax, please see:\n\n  <http://johnmacfarlane.net/pandoc/README.html#delimited-code-blocks>\n\nOther
  features\n==============\n\nSince mathblog doesn't provide many moving parts, it's
  up to you to\noutsource various web site features, such as comments.  I've\nsuccessfully
  integrated mathblog with the Disqus comments service.  To\ndo this, some javascript
  needs to be embedded in the blog pages.\nDisqus works best when you supply it with
  a page identifier so it can\nguarantee that comments are post-specific rather than
  URL-specific.\nThe way mathblog makes this possible is by exposing a JavaScript\nvariable
  to other scripts in your page:\n\n    Blog.pageName = \"foobar-baz\";\n\nThis variable
  name can be used by scripts you embed, such as with\nDisqus comment forms:\n\n    var
  disqus_identifier = Blog.pageName;\n\nControlling Post Order\n======================\n\nWhenever
  you add a new post, mb automatically updates the \"post\nindex\", a file called
  `posts-index` in the post source directory.\nThis file lists the filenames of all
  posts from newest to oldest.  By\ndefault, new posts get added to the beginning
  of the list, as you\nwould expect.  Any new posts added to the list are sorted by\nmodification
  time so that the newest post on disk appears earlier in\nthe index.  This feature
  exists to make it possible for older posts to\nbe updated without changing their
  ordering in the overall sequence of\nposts.\n\nAt any time, you can edit the index
  to reorder the posts as you see\nfit.  `mb` will preserve ordering of posts already
  in the index when\nyou run it in the future.\n\n`mb` will also take care of removing
  posts from the index if they've\nbeen removed from the post source directory.\n\nAfterword\n=========\n\nI
  personally use this software package but I'll be pleased if others\nfind it useful.
  \ In addition, I'm open to accepting contributions on\nthe project if they're consistent
  with what I've outlined above.\nHappy blogging!\n\nJonathan Daugherty (<drcygnus@gmail.com>)\n"
