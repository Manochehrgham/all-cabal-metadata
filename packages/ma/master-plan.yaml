homepage: https://github.com/rodrigosetti/master-plan
changelog-type: ''
hash: 72c3b24a41c18ca65370ee58af7beecbcbf01131e324094c8cb7223ffda5104e
test-bench-deps:
  base: ! '>=4.5 && <5'
  hspec: -any
  text: -any
  random-shuffle: -any
  containers: -any
  quickcheck-instances: -any
  master-plan: -any
  mtl: -any
  random: -any
  QuickCheck: -any
maintainer: rodrigosetti@gmail.com
synopsis: The project management tool for hackers
changelog: ''
basic-deps:
  diagrams-lib: -any
  base: ! '>=4.5 && <5'
  diagrams-rasterific: -any
  text: -any
  megaparsec: -any
  syb: -any
  containers: -any
  master-plan: -any
  mtl: -any
  optparse-applicative: -any
  diagrams: -any
all-versions:
- '0.1.0.0'
author: Rodrigo Setti
latest: '0.1.0.0'
description-type: markdown
description: ! "# master-plan\r\n\r\n[![Build Status](https://travis-ci.org/rodrigosetti/master-plan.svg?branch=master)](https://travis-ci.org/rodrigosetti/master-plan)\r\n\r\nMaster
  Plan is a text based project management tool that implements an\r\nalgebra of projects.\r\n\r\nThese
  are the values propositions of master plan:\r\n\r\n * **Simplicity**: keep project
  management into a single text file. Under version control,\r\n   close to your code.\r\n
  * **Agility**: embrace change, by allowing projects to specify uncertainty and allow\r\n
  \  for refinement anytime.\r\n * **Freedom**: master plan is a open specification,
  not dependent on tools or hosting.\r\n   There is this current open-source implementation,
  but anyone can implement\r\n   tools or visualizations on top of it.\r\n   \r\nSee
  the [wiki](https://github.com/rodrigosetti/master-plan/wiki) for details and examples.\r\n\r\n##
  Algebra of Projects\r\n\r\nIn the algebra of projects, a project is an expression
  of sub-projects\r\ncombined using dependency operators. These operators define how
  sub-projects\r\nrelate to the higher-level projects in terms of execution and structural\r\ndependency,
  that is, in which order (if any) the sub-projects must be executed,\r\nand also
  whether all or some of the sub-projects must be executed at all.\r\n\r\nAt some
  level, sub-projects will be small enough that they don't break down\r\nfurther,
  in this case, they consist of a unit of execution.\r\n\r\nThere is also the notion
  cost estimation and risk. Cost may mean different\r\nthings depending on the domain,
  but most usually it's time.\r\n\r\nGiven all these constraints and structure, master
  plan will build an optimum\r\nprioritization of projects and sub-projects for execution.\r\n\r\nThe
  entire definition of a project is defined into a single `.plan` file\r\nusing a
  simple C-like language. There are defaults for most constrains and properties\r\nsuch
  that things can be less verbose if using the defaults.\r\n\r\nThe tool is able to
  build visualizations from the plan file.\r\n\r\nIdeally, the plan file should be
  kept in version control so that execution and\r\nplanning progress can be recorded.\r\n\r\n###
  Command line Arguments\r\n\r\n```\r\nmaster-plan - project management tool for hackers\r\n\r\nUsage:
  master-plan  [FILENAME] [-o|--output FILENAME] [--progress-below N]\r\n                    [-c|--color]
  [-w|--width NUMBER] [--height NUMBER]\r\n                    [-r|--root NAME]\r\n
  \                   [--hide title|description|url|owner|cost|trust|progress]\r\n
  \ See documentation on how to write project plan files\r\n\r\nAvailable options:\r\n
  \ FILENAME                 plan file to read from (default from stdin)\r\n  -o,--output
  FILENAME     output file name (.png, .tif, .bmp, .jpg and .pdf\r\n                           supported)\r\n
  \ --progress-below N       only display projects which progress is < N%\r\n  -c,--color
  \              color each project by progress\r\n  -w,--width NUMBER        width
  of the output image\r\n  --height NUMBER          height of the output image\r\n
  \ -r,--root NAME           name of the root project definition (default: \"root\")\r\n
  \ --hide title|description|url|owner|cost|trust|progress\r\n                           hide
  a particular property\r\n  -h,--help                Show this help text\r\n```\r\n\r\n###
  Syntax\r\n\r\nComments are C-style: multiline in between `/*` and `*/`, and single
  line starts\r\nwith `//`, extending to the end of line. Every definition must end
  with semicolon (`;`).\r\n\r\nEverything else are definitions, in the form `lrs =
  rhs`.\r\nThere are two kinds of definitions with respect to `lrs` (left hand side):\r\n\r\n
  * Definition of a project: in the form `identifier = expression`\r\n * Definition
  of a property of a project: in the form `identifier(identifier) = expression`.\r\n
  \  This is used to define properties of names.\r\n\r\nA project is identified by
  a unique identifier. The \"root\" project is identified\r\nby a special `root` identifier.\r\n\r\nProject
  expressions are expressions where project identifiers are combined via\r\nbinary
  operators. Parenthesis can be used to enforce operator precedence. There\r\nare
  three operators:\r\n\r\n * `p = a + b` - Sum: `p` is executed when `a` or `b` is
  executed.\r\n * `p = a x b` - Product: `p` is executed when `a` and `b` is executed.\r\n
  * `p = a -> b` - Sequence: `p` is executed when `a` and `b` is executed, in order.\r\n\r\n####
  Properties\r\n\r\nFollowing is a list of supported properties of projects:\r\n\r\n|
  Property name | Expected Type | Description |\r\n|---------------|---------------|-------------|\r\n|
  title         | text          | title of the project |\r\n| description   | text
  \         | longer description of what the project is |\r\n| url           | URL
  \          | reference in the web for more context about the project |\r\n| owner
  \        | username      | name of the person responsible for execution |\r\n| progress
  \     | percentage    | how much progress has been made so far |\r\n| cost          |
  number        | estimated cost |\r\n| trust         | percentage    | probability
  of success |\r\n\r\n#### Grammar\r\n\r\n```\r\nplan = (definition \";\")*\r\ndefinition
  = project_def | predicate_def\r\n\r\nproject_def = identifier \"=\" expression\r\nexpression
  = term ((\"->\" | \"*\") term)*\r\nterm = factor (\"+\" factor)*\r\nfactor = \"(\"
  expression \")\" | identifier\r\n\r\npredicate_def = identifier \"(\" identifier
  \")\" \"=\" value\r\nvalue = percentage | literalString\r\n\r\npercentage = nonNegativeNumber
  \"%\"\r\n```\r\n"
license-name: MIT
