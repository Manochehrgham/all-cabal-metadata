homepage: https://github.com/vmchale/madlang#readme
changelog-type: ''
hash: 0f703ea9571c17e3082a7176bb19763b1d547bcc92fc19978b39d65e4aba2e33
test-bench-deps:
  base: ! '>=4.9.0.0 && <4.10'
  hspec: ! '>=2.2.4 && <2.3'
  text: ! '>=1.2.2.1 && <1.3'
  megaparsec: ! '>=5.0.1 && <5.1'
  madlang: ! '>=0.1.0.0 && <0.2'
  mtl: ! '>=2.2.1 && <2.3'
  hspec-megaparsec: ! '>=0.2.1 && <0.3'
maintainer: tmchale@wisc.edu
synopsis: Initial project template from stack
changelog: ''
basic-deps:
  mwc-random: ! '>=0.13.5.0 && <0.14'
  ansi-wl-pprint: ! '>=0.6.7.3 && <0.7'
  optparse-generic: ! '>=1.1.1 && <1.2'
  base: ! '>=4.9.0.0 && <4.10'
  text: ! '>=1.2.2.1 && <1.3'
  megaparsec: ! '>=5.0.1 && <5.1'
  madlang: ! '>=0.1.0.0 && <0.2'
  lens: ==4.14.*
  mtl: ! '>=2.2.1 && <2.3'
all-versions:
- '0.1.0.0'
author: Vanessa McHale
latest: '0.1.0.0'
description-type: markdown
description: ! "## Madlibs DSL for generating random text\n\nThis is the Madlibs DSL
  for generating random text. There is also a vim plugin for highlighting `.mad` files.
  \n\nIt enables you to generate random, templated text with very little effort or
  expertise. \n\nIt can be used for twitter bots and more productive things.\n\n###
  Exmaples\n\nAn exmaple is worth a thousand words (?), so suppose you wanted to generate
  a mediocre fortune telling bot. You could write the following code:\n\n```\n\n:define
  person\n    0.7 \"A close friend will \"\n    0.3 \"You will \"\n:define goodfortune\n
  \   0.2 person \"make rain on the planet Mars\"\n    0.8 \"nice things will happen
  today :)\"\n:define fortune\n    0.5 \"drink a boatload of milk\"\n    0.5 \"get
  angry for no reason\"\n:return\n    0.8 person fortune\n    0.2 goodfortune\n```\n\nThere
  are two \"statements\" in madlang, `:define` and `:return`. `:return` is the main
  string we'll be spitting back, so you're only allowed one of them per file. `:define`
  on the other hand can be used to make as many templates as you want. These templates
  are combinations of strings (enclosed in quotes) and names of other templates.\n\nOf
  course, you can't have a circular reference with names - if `goodfortune` depends
  on `fortune` while `fortune` depends on `goodfortune`, you'll end up with either
  no fortune or an infinite fortune. So instead we just throw an error. \n\n## Installation\n\n###
  Stack\n\nDownload `stack` with\n\n```\ncurl -sSl http://haskellstack.org | sh\n```\n\nThen
  run `stack install` and you'll get the `madlang` executable installed on your path.
  You can even do `stack install madlang` if you'd like. \n\n### Use\n\nTo use it,
  just try\n\n```\n $ madlang --input fortune-teller.mad\n```\n\nYou can do `madlang
  --help` if you want a couple other options for debugging.\n\n### Syntax Highlighting\n\nSyntax
  highlighting for the DSL is provided in the vim plugin [here](http://github.com/vmchale/madlang-vim).
  You'll have to do `:set syntax=madlang` the first time you run it but everything
  else should work out of the box.:\n"
license-name: BSD3
