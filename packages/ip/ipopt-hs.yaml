homepage: ''
changelog-type: ''
hash: 5d8041c79ebf0997d6a880c0adeb56398070acaaf7abc84131a1191c2bc1e569
test-bench-deps: {}
maintainer: Adam Vogt <vogt.adam@gmail.com>
synopsis: haskell binding to ipopt and nlopt including automatic differentiation
changelog: ''
basic-deps:
  ansi-wl-pprint: ! '>=0.6.7'
  uu-parsinglib: ! '>=2.8'
  base: <5
  ad: ! '>=4.2'
  vector-space: ! '>=0.8.6'
  containers: <0.6
  lens: ! '>=3.7 && <5'
  mtl: ==2.*
  template-haskell: -any
  vector: ==0.10.*
all-versions:
- '0.0.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.2.0'
- '0.5.0.0'
author: Adam Vogt <vogt.adam@gmail.com>
latest: '0.5.0.0'
description-type: haddock
description: ! 'a haskell binding to the nonlinear programming solver

  <http://projects.coin-or.org/Ipopt Ipopt>. Bindings to

  <http://ab-initio.mit.edu/wiki/index.php/NLopt NLopt> are

  also included.


  [@installation@]

  needs the c library ipopt installed. Also by default a binding to

  nlopt is included. Nlopt by default does not include shared libraries,

  which seems to be needed to run things from ghci (ie. you need to

  @./configure --enable-shared@ when building nlopt).


  A embedded language, similar to the one provided by glpk-hs, is

  defined in "Ipopt.NLP". The goal is to define problems at a level

  similar to other "algebraic modeling languages", but retain some

  of the safety and flexibility available in haskell. There is some

  overhead <http://code.haskell.org/~aavogt/ipopt-hs/examples/bench.html>

  but perhaps it is negligible for your uses.


  Current limitations include:


  * copying in every iteration happens between between

  "Data.Vector.Storable" and "Data.Vector" might be avoidable

  somehow.  Currently it is done because AD needs a Traversable

  structure, but Storable vectors are not traversable. Note that

  there is a "Numeric.AD.Mode.Forward.Double" but as yet none

  for Vectors of Double


  * sparseness of derivatives isn''t used


  * no binding to sensitivity parts as-implemented in ipopt'
license-name: BSD3
