homepage: https://github.com/jtdaugherty/brick/
changelog-type: markdown
hash: ddf31e6cc96c17a2814cd96e3870c239ebc2e3bb9983a97b8cac8898b00e06bf
test-bench-deps: {}
maintainer: Jonathan Daugherty <cygnus@foobox.com>
synopsis: A declarative terminal user interface library
changelog: ! "\nBrick changelog\n---------------\n\n0.6.2\n-----\n\nBug fixes:\n *
  Editor: the 'editor' initial content parameter is now correctly split\n   on newlines
  to ensure that the underlying editor zipper is\n   initialized properly. (fixes
  #56; thanks @listx)\n\n0.6.1\n-----\n\nPackage changes:\n * Added lower bound for
  microlens >= 0.3.0.0 to fix build failure due\n   to Field1 not being defined (thanks
  Markus Hauck)\n\nDocumentation changes:\n * Updated user guide and README to link
  to and mention microlens\n   instead of lens\n\nMisc:\n * Fixed a qualified import
  in the List demo to avoid ambiguity (thanks\n   Alan Gilbert)\n\n0.6\n---\n\nAPI
  changes:\n * Brick now uses the microlens family of packages instead of lens. This\n
  \  version of brick also depends on vty 5.5.0, which was modified to use\n   microlens
  instead of lens. This change shouldn't impact functionality\n   but will greatly
  reduce build times.\n\n0.5.1\n-----\n\nBug fixes:\n * Fix negative cropping in hCenter,
  vCenter, and cropResultToContext\n   (fixes #52)\n * Remove unnecessary Eq constraint
  from listReplace (fixes #48; thanks\n   sifmelcara)\n * Mention Google Group in
  README\n\n0.5\n---\n\nFunctionality changes:\n * Markup: make markup support multi-line
  strings (fixes #41)\n * brick-edit-demo: support shift-tab to switch editors\n *
  Core: improve box layout algorithm (when rendering boxes, track\n   remaining space
  while rendering high-priority children to use\n   successively more constrained
  primary dimensions)\n * Core: make fixed padding take precedence over padded widgets
  (fixes #42)\n   Prior to this commit, padding a widget meant that if there was room\n
  \  after rendering the widget, the specified amount of padding would be\n   added.
  This meant that under tight layout constraints padding would\n   disappear before
  a padded widget would. This is often a desirable\n   outcome but it also led to
  unexpected behavior when adding padding\n   to a widget that grows greedily: fixed
  padding would never show up\n   because it was placed in a box adjacent to the widget
  in question,\n   and boxes always render greedy children before fixed ones. As a\n
  \  result fixed padding would disappear under these conditions. Instead,\n   in
  the case of fixed padding, since we often intend to *guarantee*\n   that padding
  is present, all of the padding combinators have been\n   modified so that when the
  padded widget is rendered with fixed\n   padding in the amount V, the widget is
  given V fewer rows/columns\n   when it is rendered so that the padding always has
  room.\n\n0.4.1\n-----\n\nBug fixes:\n* Fixed a bug in the 'visible' combinator:
  If the size of the visibility\n  request was larger than the available space, then
  the rendering of a\n  viewport was toggling between two states, one with aligning
  on the\n  end of the visibility request, and another one aligning on the start.\n
  \ This commit fixes it so that a visibility request is always aligned\n  on the
  start if not enough space is available. (thanks Thomas Strobel\n  <ts468@cam.ac.uk>)\n\nBehavior
  changes:\n* Honor multiple 'visible' markers in a single viewport with preference\n
  \ on the innermost request (thanks Thomas Strobel <ts468@cam.ac.uk>)\n\n0.4\n---\n\nAPI
  changes:\n* Added Brick.Widgets.Core.unsafeLookupViewport to make certain kinds\n
  \ of custom widget implementations easier when viewport states are needed\n  (thanks
  Markus Hauck <markus1189@gmail.com>)\n* List: added listClear and listReverse functions
  (thanks Markus Hauck)\n* List: Derive instances for Functor, Foldable, Traversable
  (thanks\n  Markus Hauck)\n\nDocumentation changes:\n* Hyperlink \"Data.Text.Markup\"
  inside Brick.Markup haddock (thanks\n  Markus Hauck)\n* Fix typo in 'Attribute Management'
  section of user guide (thanks\n  Markus Hauck)\n\n0.3.1\n-----\n\nBug fixes:\n*
  EventM newtype again instances MonadIO (thanks Andrew Rademacher)\n\n0.3\n---\n\nAPI
  changes:\n* Made EventM a newtype instead of a type alias\n* List: listReplace now
  takes the new selected index and no longer does\nelement diffing\n\nPackage changes:\n*
  Removed the dependency on the Diff package\n\nMisc:\n* Applied some hlint hints
  (thanks Markus Hauck <markus1189@gmail.com>)\n* Fixed a typo in the README (thanks
  Markus Hauck <markus1189@gmail.com>)\n* Improved the renderList documentation (thanks
  Profpatsch <mail@profpatsch.de>)\n* Types: added an explicit import of Applicative
  for older GHCs\n\n0.2.3\n-----\n\nBug fixes:\n* Fixed viewport behavior when the
  image in a viewport reduces its size\n  enough to render the viewport offsets invalid.
  Before, this behavior\n  caused a crash during image croppin in vty; now the behavior
  is\n  handled sanely (fixes #22; reported by Hans-Peter Deifel)\n\n0.2.2\n-----\n\nDemo
  changes:\n* Improved the list demo by using characters instead of integers in the\n
  \ demo list and cleaned up item-adding code (thanks Jøhannes Lippmann\n  <code@schauderbasis.de>)\n\n0.2.1\n-----\n\nBug
  fixes:\n* List:\n  * Fixed size policy of lists so that rather than being Fixed/Fixed,\n
  \   they are Greedy/Greedy. This resolves issues that arise when the box\n    layout
  widget renders a list widget alongside a Fixed/Fixed one.\n    (Closes issue #17,
  thanks Karl Voelker)\n* Scrolling:\n  * vScrollPage actually scrolls vertically
  now rather than horizontally\n    (Thanks Hans-Peter Deifel <hpd@hpdeifel.de>)\n\n0.2\n---\n\nAPI
  changes:\n* Added top-level `Brick` module that re-exports the most important\n
  \ modules in the library.\n* List:\n  * Now instead of passing the item-drawing
  function to the `list` state\n    constructor, it is passed to `renderList`\n  *
  `renderList` now takes the row height of the list's item widgets.\n    The list
  item-drawing function must respect this in order for\n    scrolling to work properly.
  This change made it possible to optimize\n    the list so that it only draws widgets
  visible in the viewport\n    rather than rendering all of the list's items (even
  the ones\n    off-screen). But to do this we must be able to tell in advance\n    how
  high each one is, so we require this parameter. In addition\n    this change means
  that lists no longer support items of different\n    heights.\n  * The list now
  uses Data.Vector instead of [a] to store items; this\n    permits efficient slicing
  so we can do the optimized rendering\n    described above.\n* The `HandleEvent`
  type class `handleEvent` method now runs in\n  `EventM`. This permits event-handling
  code implemented in terms of\n  `HandleEvent` to do get access to viewport state
  and to run IO code,\n  making it just as powerful as code in the top-level `EventM`
  handler.\n* Many types were moved from `Brick.Widgets.Core` and `Brick.Main` to\n
  \ `Brick.Types`, making the former module merely a home for `Widget`\n  constructors
  and combinators.\n* The `IsString` instance for `Widget` was removed; this might
  be\n  reinstated later, but this package provides enough `IsString`\n  instances
  that things can get confusing.\n* `EventM` is now reader monad over the most recent
  rendering pass's\n  viewport state, in addition to being a state monad over viewport\n
  \ requests for the renderer. Added the `lookupViewport` function to\n  provide access
  to the most recent viewport state. Exported the\n  `Viewport` type and lenses.\n*
  Now that `handleEvent` is now an `EventM` action, composition with\n  `continue`
  et al got a little messier when using lenses to\n  update the application state.
  To help with this, there is now\n  `handleEventLensed`.\n\nBugfixes:\n* Lists now
  perform well with 10 items or a million (see above; fixes\n  #7, thanks Simon Michael)\n*
  Added more haddock notes to `Brick.Widgets.Core` about growth\n  policies.\n* Forced
  evaluation of render states to address a space leak in the\n  renderer (fixes #14,
  thanks Sebastian Reuße <seb@wirrsal.net>)\n* str: only reference string content
  that can be shown (eliminates a\n  space leak, fixes #14, thanks Sebastian Reuße
  <seb@wirrsal.net>)\n\nMisc:\n* Added a makefile for the user guide.\n* List: added
  support for Home and End keys (thanks Simon Michael)\n* Viewports: when rendering
  viewports, scroll requests from `EventM` are\n  processed before visibility requests
  from the rendering process; this\n  reverses this previous order of operations but
  permits user-supplied\n  event handlers to reset viewports when desired.\n\nPackage
  changes:\n* Added `deepseq` dependency\n\n0.1\n---\nInitial release\n"
basic-deps:
  microlens-th: -any
  base: <=5
  text: -any
  vty: ! '>=5.5.0'
  data-default: -any
  text-zipper: ! '>=0.2.1'
  containers: -any
  contravariant: -any
  transformers: -any
  deepseq: ! '>=1.3 && <1.5'
  microlens: ! '>=0.3.0.0'
  template-haskell: -any
  brick: -any
  vector: -any
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.6.2'
author: Jonathan Daugherty <cygnus@foobox.com>
latest: '0.6.2'
description-type: markdown
description: ! "brick\n-----\n\n[![Build Status](https://travis-ci.org/jtdaugherty/brick.png)](https://travis-ci.org/jtdaugherty/brick)\n\n`brick`
  is a terminal user interface programming\nlibrary written in Haskell, in the style
  of\n[gloss](http://hackage.haskell.org/package/gloss). This means you write\na function
  that describes how your user interface should look, but the\nlibrary takes care
  of a lot of the book-keeping that so commonly goes\ninto writing such programs.\n\n`brick`
  exposes a declarative API. Unlike most GUI toolkits which\nrequire you to write
  a long and tedious sequence of \"create a widget,\nnow bind an event handler\",
  `brick` just requires you to describe\nyour interface -- even the bits that are
  stateful -- using a set of\ndeclarative combinators. Then you provide a function
  to transform your\nown application state when input (or other kinds of) events arrive.\n\nUnder
  the hood, this library builds upon [vty](http://hackage.haskell.org/package/vty).\n\nThis
  library deprecates [vty-ui](https://github.com/jtdaugherty/vty-ui).\n\nFeature Overview\n----------------\n\n`brick`
  comes with a bunch of widget types to get you started:\n\n * Vertical and horizontal
  box layout widgets\n * Basic single- and multi-line text editor widgets\n * List
  widget\n * Progress bar widget\n * Simple dialog box widget\n * Border-drawing widgets
  (put borders around or in between things)\n * Generic scrollable viewports\n * Extensible
  widget-building API\n * (And many more general-purpose layout control combinators)\n\nIn
  addition, some of `brick`'s more powerful features may not be obvious\nright away:\n\n
  * All widgets can be arranged in predictable layouts so you don't have\n   to worry
  about terminal resizes.\n * Most widgets can be made scrollable *for free*.\n *
  Attribute management is flexible and can be customized at runtime on\n   a per-widget
  basis.\n\n`brick` exports\n[microlens](http://hackage.haskell.org/package/microlens)
  and non-lens\ninterfaces for most things, so you can get the power of lenses if\ndesired
  or use plain Haskell if you don't. If a `brick` library function\nnamed `thing`
  has a lens version, the lens version is named `thingL`.\n\nGetting Started\n---------------\n\nTLDR:\n\n```\n$
  cabal sandbox init\n$ cabal install -j -f demos\n$ .cabal-sandbox/bin/brick-???-demo\n```\n\nTo
  get started, see the [first few sections of the brick\nuser guide](docs/guide.rst).\n\nBrick-Users
  Discussion\n----------------------\n\nThe `brick-users` Google Group / e-mail list
  is a place to discuss\nlibrary changes, give feedback, and ask questions. You can
  subscribe at:\n\n[https://groups.google.com/group/brick-users](https://groups.google.com/group/brick-users)\n\nDocumentation\n-------------\n\nYour
  documentation options, in recommended order, are:\n\n* [FAQ](https://github.com/jtdaugherty/brick/blob/master/FAQ.md)\n*
  [The brick user guide](https://github.com/jtdaugherty/brick/blob/master/docs/guide.rst)\n*
  Haddock (all modules)\n* [Demo programs](https://github.com/jtdaugherty/brick/blob/master/programs)\n\nStatus\n------\n\n`brick`
  is young and may be missing some essential features. There are\nsome places were
  I have deliberately chosen to worry about performance\nlater for the sake of spending
  more time on the design (and to wait on\nperformance issues to arise first). `brick`
  exports an extension API\nthat makes it possible to make your own packages and widgets.
  If you\nuse that, you'll also be helping to test whether the exported interface\nis
  usable and complete!\n\nReporting bugs\n--------------\n\nPlease file bug reports
  as GitHub issues.  For best results:\n\n - Include the versions of relevant software
  packages: your terminal\n   emulator, `brick`, `ghc`, and `vty` will be the most
  important\n   ones. Even better, the output of `cabal freeze` would probably be\n
  \  helpful in making the problem reproducible.\n\n - Clearly describe the behavior
  you expected ...\n\n - ... and include a minimal demonstration program that exhibits
  the\n   behavior you actually observed.\n\nContributing\n------------\n\nIf you
  decide to contribute, that's great! Here are some guidelines you\nshould consider
  to make submitting patches easier for all concerned:\n\n - If you want to take on
  big things, talk to me first; let's have a\n   design/vision discussion before you
  start coding. Create a GitHub\n   issue and we can use that as the place to hash
  things out.\n - If you make changes, try to make them consistent with the syntactic\n
  \  conventions I've used in the codebase.\n - Please provide Haddock and/or user
  guide documentation for any\n   changes you make.\n"
license-name: BSD3
