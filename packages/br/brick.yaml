homepage: https://github.com/jtdaugherty/brick/
changelog-type: markdown
hash: 0a40c2969272d560a149ddb670d8ca95003ec359de402faeb1eb31792d2fa70e
test-bench-deps: {}
maintainer: Jonathan Daugherty <cygnus@foobox.com>
synopsis: A declarative terminal user interface library
changelog: ! "\nBrick changelog\n---------------\n\n0.15\n----\n\nDemo changes:\n*
  MouseDemo: add an editor and use mouse events to move the cursor\n* MouseDemo: Enhance
  MouseDemo to show interaction between 'clickable'\n  and viewports (thanks Kevin
  Quick)\n\nNew features:\n* Editors now report mouse click events\n\nAPI changes:\n*
  Rename TerminalLocation row/column fields to avoid commonplace name\n  clashes;
  rename row/column to locationRow/locationColumn (fixes #96)\n\nBug fixes:\n* Core:
  make cropToContext also crop extents (fixes #101)\n* viewport: if the sub-widget
  is not rendered, also cull all extents and\n  cursor locations\n\nDocumentation
  changes:\n* User Guide updates: minor fixes, updates to content on custom widgets,\n
  \ wide character support, and examples (thanks skapazzo@inventati.org,\n  Kevin
  Quick)\n\n0.14\n----\n\nThis release added support for wide characters. In particular,
  wide\ncharacters can now be entered into the text editor widget and used in\n'str'
  and 'txt' widgets.\n\n0.13\n----\n\nAPI changes:\n * Mouse mode is no longer enabled
  by default.\n * customMain's event channel parameter is now optional\n * FocusRing
  now provides a Functor instance (thanks Ian Jeffries)\n\n0.12\n----\n\nThis release
  primarily adds support for mouse interaction. For details,\nsee the Mouse Support
  section of the User Guide. This release also\nincludes breaking API changes for
  the App type. Here's a migration\nguide:\n\n * Event handlers now take \"BrickEvent
  n e\" instead of \"e\", where \"e\"\n   was the custom event type used before this
  change. To recover your\n   own custom events, pattern-match on \"AppEvent\"; to
  recover Vty input\n   events, pattern-match on \"VtyEvent\".\n * appLiftVtyEvent
  went away and can just be removed from your App\n   record constructor.\n * If you
  aren't using the custom event type or were just using Vty's\n   \"Event\" type as
  your App's event type, you can set your event type to\n   just \"e\" because you'll
  now be able to get Vty events regardless of\n   whether you use a custom event type.\n\nAPI
  changes:\n * Added the Widget combinator \"clickable\" to indicate that a widget\n
  \  should generate mouse click events\n * Added the Extent data type and the \"reportExtent\"
  widget combinator\n   to report the positions and sizes of widgets\n * Rendering
  \"Result\" values now include reported extents and update\n   their offsets (adds
  \"extents\" field and \"extentsL\" lens)\n * Added \"lookupExtent\", \"findClickedExtents\",
  and \"clickedExtent\" in\n   EventM to find extents and check them for mouse clicks\n
  * Removed appLiftVtyEvent. Instead of wrapping Vty's events in your own\n   type,
  you now get a \"BrickEvent\" that always contains Vty events but\n   has the ability
  to embed *your* custom events. See the User Guide for\n   details.\n * Added demo
  program MouseDemo.hs\n * Added demo program ProgressBarDemo.hs (thanks Kevin Quick)\n
  * Added mapAttrname, mapAttrNames, and overrideAttr functions (thanks\n   Kevin
  Quick)\n * Make handleEventLensed polymorphic over event type to allow use with\n
  \  custom events (thanks Kevin Quick)\n * Added Ord constraint to some library startup
  functions\n\nBug fixes:\n * Added Show instance for Editor, List (fixes #63)\n\nDocumentation
  changes:\n * Updated documentation to use new \"resource name\" terminology to\n
  \  reduce confusion and better explain the purpose of names.\n * Updated user guide
  with sections on mouse support, the rendering\n   cache, resource names, paste mode,
  and extents\n\nPackage changes:\n * Depend on Vty 5.11.3 to get mouse mode support\n\n0.11\n----\n\nAPI
  changes:\n * Added getVtyHandle in EventM for obtaining the current Vty context.\n
  \  It returns Nothing when calling the appStartEvent handler but after\n   that
  a context is always available.\n\n0.10\n----\n\nNew features:\n * Added a rendering
  cache. To use the rendering cache, use the 'cached'\n   widget combinator. This
  causes drawings of the specified widget to\n   re-use a cached rendering until the
  rendering cache is invalidated\n   with 'invalidateCacheEntry' or 'invalidateCache'.
  This change also\n   includes programs/CacheDemo.hs. This change introduced an Ord\n
  \  constraint on the name type variable 'n'.\n * Added setTop and setLeft for setting
  viewport offsets directly in\n   EventM.\n * Dialog event handlers now support left
  and right arrow keys (thanks\n   Grégoire Charvet)\n\nLibrary changes:\n * On resizes
  brick now draws the application twice before handling the\n   resize event. This
  change makes it possible for event handlers to\n   get the latest viewport states
  on a resize rather than getting the\n   most recent (but stale) versions as before,
  at the cost of a second\n   redraw.\n\nBug fixes:\n * We now use the most recent
  rendering state when setting up event handler\n   viewport data. This mostly won't
  matter to anyone except in cases\n   where a viewport name was expected to be in
  the viewport map but\n   wasn't due to using stale rendering state to set up EventM.\n\n0.9\n---\n\nPackage
  changes:\n * Depend on text-zipper 0.7.1\n\nAPI changes:\n * The editor widget state
  value is now polymorphic over the type of\n   \"string\" value that can be edited,
  so you can now create editors over\n   Text values as well as Strings. This is a
  breaking change but it only\n   requires the addition of the string type variable
  to any uses of\n   Editor. (thanks Jason Dagit and Getty Ritter)\n * Added some
  missing Eq and Show instances (thanks Grégoire Charvet)\n\nNew features:\n * The
  editor now binds Control-U to delete to beginning of line (thanks\n   Hans-Peter
  Deifel)\n\nBug fixes:\n * List: avoid runtime exception by ensuring item height
  is always at\n   least 1\n\n0.8\n---\n\nAPI changes:\n * Center: added layer-friendly
  centering functions centerLayer,\n   hCenterLayer, and vCenterLayer.\n\nFunctionality
  changes:\n * Dialog now uses new layer-friendly centering functions. This makes
  it\n   possible to overlay a Dialog on top of your UI when you use a Dialog\n   rendering
  as a separate layer.\n * Updated the LayerDemo to demonstrate a centered layer.\n
  * The renderer now uses a default Vty Picture background\n   of spaces with the
  default attribute, rather than using\n   ClearBackground (the Vty default). This
  is to compensate for an\n   unexpected attribute behavior in Vty when ClearBackgrounds
  (see\n   https://github.com/coreyoconnor/vty/issues/95)\n\n0.7\n---\n\nNOTE: this
  release includes many API changes. Please see the \"Widget\nNames\" section of the
  Brick User Guide for details on the fundamentals!\n\nAPI changes:\n * The \"Name\"
  type was removed. In its place we now have a name type\n   variable (\"n\") attached
  to many types (including EventM,\n   CursorLocation, App, Editor, List, and FocusRing).
  This change makes\n   it possible to:\n   * Avoid runtime errors due to name typos\n
  \  * Achieve compile-time guarantees about name matching and usage\n   * Force widget
  functions to be name-agnostic by being polymorphic\n     in their name type\n   *
  Clean up focus handling by making it possible to pattern-match\n     on cursor location
  names\n * The EditDemo demonstration program was updated to use a FocusRing.\n *
  Added the \"Named\" type class to Brick.Widgets.Core for types that\n   store names.
  This type class is used to streamline the Focus\n   interface; see Brick.Focus.withFocusRing
  and EditDemo.hs.\n * The List and Editor types are now parameterized on names.\n
  * The List widget is now focus-aware; its rendering function now takes\n   a boolean
  indicating whether it should be rendered with focus. The\n   List uses the following
  attributes now:\n   * When not focused, the cursor is rendered with listSelectedAttr.\n
  \  * When focused, the cursor is rendered with listSelectedFocusedAttr.\n * The
  Editor widget is now focus-aware; its rendering function now\n   takes a boolean
  indicating whether it should be rendered with focus.\n   The Editor uses the following
  attributes now:\n   * When not focused, the widget is rendered with editAttr.\n
  \  * When focused, the widget is rendered with editFocusedAttr.\n * The Dialog's
  name constructor parameter and lens were removed.\n * The 'viewport' function was
  modified to raise a runtime exception if\n   the widget name it receives is used
  more than once during the\n   rendering of a single frame.\n\nMiscellaneous:\n *
  Many modules now use conditional imports to silence redundancy\n   warnings on GHCs
  with newer Preludes (e.g. including Monoid,\n   Foldable, Traversable, Applicative,
  etc.)\n\n0.6.4\n-----\n\nBug fixes:\n * Add missing Functor instance for Next type
  (thanks Markus Hauck)\n\n0.6.3\n-----\n\nBug fixes:\n * List: the list now properly
  renders when the available height is not\n   a multiple of the item height. Previously
  the list size would\n   decrease relative to the available height. Now the list
  renders\n   enough items to fill the space even if the top-most or bottom-most\n
  \  item is partially visible, which is the expected behavior.\n\n0.6.2\n-----\n\nBug
  fixes:\n * Editor: the 'editor' initial content parameter is now correctly split\n
  \  on newlines to ensure that the underlying editor zipper is\n   initialized properly.
  (fixes #56; thanks @listx)\n\n0.6.1\n-----\n\nPackage changes:\n * Added lower bound
  for microlens >= 0.3.0.0 to fix build failure due\n   to Field1 not being defined
  (thanks Markus Hauck)\n\nDocumentation changes:\n * Updated user guide and README
  to link to and mention microlens\n   instead of lens\n\nMisc:\n * Fixed a qualified
  import in the List demo to avoid ambiguity (thanks\n   Alan Gilbert)\n\n0.6\n---\n\nAPI
  changes:\n * Brick now uses the microlens family of packages instead of lens. This\n
  \  version of brick also depends on vty 5.5.0, which was modified to use\n   microlens
  instead of lens. This change shouldn't impact functionality\n   but will greatly
  reduce build times.\n\n0.5.1\n-----\n\nBug fixes:\n * Fix negative cropping in hCenter,
  vCenter, and cropResultToContext\n   (fixes #52)\n * Remove unnecessary Eq constraint
  from listReplace (fixes #48; thanks\n   sifmelcara)\n * Mention Google Group in
  README\n\n0.5\n---\n\nFunctionality changes:\n * Markup: make markup support multi-line
  strings (fixes #41)\n * brick-edit-demo: support shift-tab to switch editors\n *
  Core: improve box layout algorithm (when rendering boxes, track\n   remaining space
  while rendering high-priority children to use\n   successively more constrained
  primary dimensions)\n * Core: make fixed padding take precedence over padded widgets
  (fixes #42)\n   Prior to this commit, padding a widget meant that if there was room\n
  \  after rendering the widget, the specified amount of padding would be\n   added.
  This meant that under tight layout constraints padding would\n   disappear before
  a padded widget would. This is often a desirable\n   outcome but it also led to
  unexpected behavior when adding padding\n   to a widget that grows greedily: fixed
  padding would never show up\n   because it was placed in a box adjacent to the widget
  in question,\n   and boxes always render greedy children before fixed ones. As a\n
  \  result fixed padding would disappear under these conditions. Instead,\n   in
  the case of fixed padding, since we often intend to *guarantee*\n   that padding
  is present, all of the padding combinators have been\n   modified so that when the
  padded widget is rendered with fixed\n   padding in the amount V, the widget is
  given V fewer rows/columns\n   when it is rendered so that the padding always has
  room.\n\n0.4.1\n-----\n\nBug fixes:\n* Fixed a bug in the 'visible' combinator:
  If the size of the visibility\n  request was larger than the available space, then
  the rendering of a\n  viewport was toggling between two states, one with aligning
  on the\n  end of the visibility request, and another one aligning on the start.\n
  \ This commit fixes it so that a visibility request is always aligned\n  on the
  start if not enough space is available. (thanks Thomas Strobel\n  <ts468@cam.ac.uk>)\n\nBehavior
  changes:\n* Honor multiple 'visible' markers in a single viewport with preference\n
  \ on the innermost request (thanks Thomas Strobel <ts468@cam.ac.uk>)\n\n0.4\n---\n\nAPI
  changes:\n* Added Brick.Widgets.Core.unsafeLookupViewport to make certain kinds\n
  \ of custom widget implementations easier when viewport states are needed\n  (thanks
  Markus Hauck <markus1189@gmail.com>)\n* List: added listClear and listReverse functions
  (thanks Markus Hauck)\n* List: Derive instances for Functor, Foldable, Traversable
  (thanks\n  Markus Hauck)\n\nDocumentation changes:\n* Hyperlink \"Data.Text.Markup\"
  inside Brick.Markup haddock (thanks\n  Markus Hauck)\n* Fix typo in 'Attribute Management'
  section of user guide (thanks\n  Markus Hauck)\n\n0.3.1\n-----\n\nBug fixes:\n*
  EventM newtype again instances MonadIO (thanks Andrew Rademacher)\n\n0.3\n---\n\nAPI
  changes:\n* Made EventM a newtype instead of a type alias\n* List: listReplace now
  takes the new selected index and no longer does\nelement diffing\n\nPackage changes:\n*
  Removed the dependency on the Diff package\n\nMisc:\n* Applied some hlint hints
  (thanks Markus Hauck <markus1189@gmail.com>)\n* Fixed a typo in the README (thanks
  Markus Hauck <markus1189@gmail.com>)\n* Improved the renderList documentation (thanks
  Profpatsch <mail@profpatsch.de>)\n* Types: added an explicit import of Applicative
  for older GHCs\n\n0.2.3\n-----\n\nBug fixes:\n* Fixed viewport behavior when the
  image in a viewport reduces its size\n  enough to render the viewport offsets invalid.
  Before, this behavior\n  caused a crash during image croppin in vty; now the behavior
  is\n  handled sanely (fixes #22; reported by Hans-Peter Deifel)\n\n0.2.2\n-----\n\nDemo
  changes:\n* Improved the list demo by using characters instead of integers in the\n
  \ demo list and cleaned up item-adding code (thanks Jøhannes Lippmann\n  <code@schauderbasis.de>)\n\n0.2.1\n-----\n\nBug
  fixes:\n* List:\n  * Fixed size policy of lists so that rather than being Fixed/Fixed,\n
  \   they are Greedy/Greedy. This resolves issues that arise when the box\n    layout
  widget renders a list widget alongside a Fixed/Fixed one.\n    (Closes issue #17,
  thanks Karl Voelker)\n* Scrolling:\n  * vScrollPage actually scrolls vertically
  now rather than horizontally\n    (Thanks Hans-Peter Deifel <hpd@hpdeifel.de>)\n\n0.2\n---\n\nAPI
  changes:\n* Added top-level `Brick` module that re-exports the most important\n
  \ modules in the library.\n* List:\n  * Now instead of passing the item-drawing
  function to the `list` state\n    constructor, it is passed to `renderList`\n  *
  `renderList` now takes the row height of the list's item widgets.\n    The list
  item-drawing function must respect this in order for\n    scrolling to work properly.
  This change made it possible to optimize\n    the list so that it only draws widgets
  visible in the viewport\n    rather than rendering all of the list's items (even
  the ones\n    off-screen). But to do this we must be able to tell in advance\n    how
  high each one is, so we require this parameter. In addition\n    this change means
  that lists no longer support items of different\n    heights.\n  * The list now
  uses Data.Vector instead of [a] to store items; this\n    permits efficient slicing
  so we can do the optimized rendering\n    described above.\n* The `HandleEvent`
  type class `handleEvent` method now runs in\n  `EventM`. This permits event-handling
  code implemented in terms of\n  `HandleEvent` to do get access to viewport state
  and to run IO code,\n  making it just as powerful as code in the top-level `EventM`
  handler.\n* Many types were moved from `Brick.Widgets.Core` and `Brick.Main` to\n
  \ `Brick.Types`, making the former module merely a home for `Widget`\n  constructors
  and combinators.\n* The `IsString` instance for `Widget` was removed; this might
  be\n  reinstated later, but this package provides enough `IsString`\n  instances
  that things can get confusing.\n* `EventM` is now reader monad over the most recent
  rendering pass's\n  viewport state, in addition to being a state monad over viewport\n
  \ requests for the renderer. Added the `lookupViewport` function to\n  provide access
  to the most recent viewport state. Exported the\n  `Viewport` type and lenses.\n*
  Now that `handleEvent` is now an `EventM` action, composition with\n  `continue`
  et al got a little messier when using lenses to\n  update the application state.
  To help with this, there is now\n  `handleEventLensed`.\n\nBugfixes:\n* Lists now
  perform well with 10 items or a million (see above; fixes\n  #7, thanks Simon Michael)\n*
  Added more haddock notes to `Brick.Widgets.Core` about growth\n  policies.\n* Forced
  evaluation of render states to address a space leak in the\n  renderer (fixes #14,
  thanks Sebastian Reuße <seb@wirrsal.net>)\n* str: only reference string content
  that can be shown (eliminates a\n  space leak, fixes #14, thanks Sebastian Reuße
  <seb@wirrsal.net>)\n\nMisc:\n* Added a makefile for the user guide.\n* List: added
  support for Home and End keys (thanks Simon Michael)\n* Viewports: when rendering
  viewports, scroll requests from `EventM` are\n  processed before visibility requests
  from the rendering process; this\n  reverses this previous order of operations but
  permits user-supplied\n  event handlers to reset viewports when desired.\n\nPackage
  changes:\n* Added `deepseq` dependency\n\n0.1\n---\n\nInitial release\n"
basic-deps:
  microlens-th: -any
  base: <=5
  text: -any
  vty: ! '>=5.12'
  data-default: -any
  text-zipper: ! '>=0.7.1'
  containers: -any
  contravariant: -any
  transformers: -any
  deepseq: ! '>=1.3 && <1.5'
  microlens-mtl: -any
  microlens: ! '>=0.3.0.0'
  template-haskell: -any
  brick: -any
  vector: -any
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.7'
- '0.8'
- '0.9'
- '0.10'
- '0.11'
- '0.12'
- '0.13'
- '0.14'
- '0.15'
author: Jonathan Daugherty <cygnus@foobox.com>
latest: '0.15'
description-type: markdown
description: ! "brick\n-----\n\n[![Build Status](https://travis-ci.org/jtdaugherty/brick.svg?branch=master)](https://travis-ci.org/jtdaugherty/brick)\n\n`brick`
  is a terminal user interface programming\nlibrary written in Haskell, in the style
  of\n[gloss](http://hackage.haskell.org/package/gloss). This means you write\na function
  that describes how your user interface should look, but the\nlibrary takes care
  of a lot of the book-keeping that so commonly goes\ninto writing such programs.\n\n`brick`
  exposes a declarative API. Unlike most GUI toolkits which\nrequire you to write
  a long and tedious sequence of \"create a widget,\nnow bind an event handler\",
  `brick` just requires you to describe\nyour interface -- even the bits that are
  stateful -- using a set of\ndeclarative combinators. Then you provide a function
  to transform your\nown application state when input (or other kinds of) events arrive.\n\nUnder
  the hood, this library builds upon [vty](http://hackage.haskell.org/package/vty).\n\nThis
  library deprecates [vty-ui](https://github.com/jtdaugherty/vty-ui).\n\nFeature Overview\n----------------\n\n`brick`
  comes with a bunch of widget types to get you started:\n\n * Vertical and horizontal
  box layout widgets\n * Basic single- and multi-line text editor widgets\n * List
  widget\n * Progress bar widget\n * Simple dialog box widget\n * Border-drawing widgets
  (put borders around or in between things)\n * Generic scrollable viewports\n * Extensible
  widget-building API\n * (And many more general-purpose layout control combinators)\n\nIn
  addition, some of `brick`'s more powerful features may not be obvious\nright away:\n\n
  * All widgets can be arranged in predictable layouts so you don't have\n   to worry
  about terminal resizes.\n * Most widgets can be made scrollable *for free*.\n *
  Attribute management is flexible and can be customized at runtime on\n   a per-widget
  basis.\n\n`brick` exports\n[microlens](http://hackage.haskell.org/package/microlens)
  and non-lens\ninterfaces for most things, so you can get the power of lenses if\ndesired
  or use plain Haskell if you don't. If a `brick` library function\nnamed `thing`
  has a lens version, the lens version is named `thingL`.\n\nGetting Started\n---------------\n\nTLDR:\n\n```\n$
  cabal sandbox init\n$ cabal install -j -f demos\n$ .cabal-sandbox/bin/brick-???-demo\n```\n\nTo
  get started, see the [first few sections of the brick\nuser guide](docs/guide.rst).\n\nBrick-Users
  Discussion\n----------------------\n\nThe `brick-users` Google Group / e-mail list
  is a place to discuss\nlibrary changes, give feedback, and ask questions. You can
  subscribe at:\n\n[https://groups.google.com/group/brick-users](https://groups.google.com/group/brick-users)\n\nDocumentation\n-------------\n\nYour
  documentation options, in recommended order, are:\n\n* [FAQ](https://github.com/jtdaugherty/brick/blob/master/FAQ.md)\n*
  [The brick user guide](https://github.com/jtdaugherty/brick/blob/master/docs/guide.rst)\n*
  Haddock (all modules)\n* [Demo programs](https://github.com/jtdaugherty/brick/blob/master/programs)\n\nStatus\n------\n\n`brick`
  is young and may be missing some essential features. There are\nsome places were
  I have deliberately chosen to worry about performance\nlater for the sake of spending
  more time on the design (and to wait on\nperformance issues to arise first). `brick`
  exports an extension API\nthat makes it possible to make your own packages and widgets.
  If you\nuse that, you'll also be helping to test whether the exported interface\nis
  usable and complete!\n\nReporting bugs\n--------------\n\nPlease file bug reports
  as GitHub issues.  For best results:\n\n - Include the versions of relevant software
  packages: your terminal\n   emulator, `brick`, `ghc`, and `vty` will be the most
  important\n   ones. Even better, the output of `cabal freeze` would probably be\n
  \  helpful in making the problem reproducible.\n\n - Clearly describe the behavior
  you expected ...\n\n - ... and include a minimal demonstration program that exhibits
  the\n   behavior you actually observed.\n\nContributing\n------------\n\nIf you
  decide to contribute, that's great! Here are some guidelines you\nshould consider
  to make submitting patches easier for all concerned:\n\n - If you want to take on
  big things, talk to me first; let's have a\n   design/vision discussion before you
  start coding. Create a GitHub\n   issue and we can use that as the place to hash
  things out.\n - If you make changes, try to make them consistent with the syntactic\n
  \  conventions I've used in the codebase.\n - Please provide Haddock and/or user
  guide documentation for any\n   changes you make.\n"
license-name: BSD3
