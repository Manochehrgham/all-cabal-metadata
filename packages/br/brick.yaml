homepage: https://github.com/jtdaugherty/brick/
changelog-type: markdown
hash: 5989d33102f7e061df472407670bbab6b697e0201d36a68038e004cc3e0ace1c
test-bench-deps: {}
maintainer: Jonathan Daugherty <cygnus@foobox.com>
synopsis: A declarative terminal user interface library
changelog: ! '

  Brick changelog

  ---------------


  0.1

  ---

  Initial release

'
basic-deps:
  base: <=5
  Diff: -any
  text: -any
  vty: ! '>=5.3.1'
  data-default: -any
  text-zipper: ! '>=0.2.1'
  containers: -any
  lens: -any
  contravariant: -any
  transformers: -any
  template-haskell: -any
  brick: -any
  vector: -any
all-versions:
- '0.1'
author: Jonathan Daugherty <cygnus@foobox.com>
latest: '0.1'
description-type: markdown
description: ! "brick\n-----\n\n[![Build Status](https://travis-ci.org/jtdaugherty/brick.png)](https://travis-ci.org/jtdaugherty/brick)\n\n`brick`
  is a terminal user interface programming\nlibrary written in Haskell, in the style
  of\n[gloss](http://hackage.haskell.org/package/gloss). This means you write\na function
  that describes how your user interface should look, but the\nlibrary takes care
  of a lot of the book-keeping that so commonly goes\ninto writing such programs.\n\n`brick`
  exposes a declarative API. Unlike most GUI toolkits which\nrequire you to write
  a long and tedious sequence of \"create a widget,\nnow bind an event handler\",
  `brick` just requires you to describe\nyour interface -- even the bits that are
  stateful -- using a set of\ndeclarative combinators. Then you provide a function
  to transform your\nown application state when input (or other kinds of) events arrive.\n\nUnder
  the hood, this library builds upon [vty](http://hackage.haskell.org/package/vty).\n\nThis
  library deprecates [vty-ui](https://github.com/jtdaugherty/vty-ui).\n\nFeature Overview\n----------------\n\n`brick`
  comes with a bunch of widget types to get you started:\n\n * Vertical and horizontal
  box layout widgets\n * Basic single- and multi-line text editor widgets\n * List
  widget\n * Progress bar widget\n * Simple dialog box widget\n * Border-drawing widgets
  (put borders around or in between things)\n * Generic scrollable viewports\n * Extensible
  widget-building API\n * (And many more general-purpose layout control combinators)\n\nIn
  addition, some of `brick`'s more powerful features may not be obvious\nright away:\n\n
  * All widgets can be arranged in predictable layouts so you don't have\n   to worry
  about terminal resizes.\n * Most widgets can be made scrollable *for free*.\n *
  Attribute management is flexible and can be customized at runtime on\n   a per-widget
  basis.\n\n`brick` exports [lens](http://github.com/ekmett/lens) and non-`lens`\ninterfaces
  for most things, so you can get the full power of `lens` if\nyou want it or use
  plain Haskell if you don't. If a `brick` library\nfunction named `thing` has a `lens`
  version, the `lens` version is named\n`thingL`.\n\nGetting Started\n---------------\n\nTLDR:\n\n```\n$
  cabal sandbox init\n$ cabal install -j -f demos\n$ .cabal-sandbox/bin/brick-???-demo\n```\n\nTo
  get started, see the [first few sections of the brick\nuser guide](docs/guide.rst).\n\nDocumentation\n-------------\n\nYour
  documentation options, in recommended order, are:\n\n* [FAQ](FAQ.md)\n* [The brick
  user guide](docs/guide.rst)\n* Haddock (all modules)\n* [Demo programs](programs)\n\nStatus\n------\n\n`brick`
  is young and may be missing some essential features. There are\nsome places were
  I have deliberately chosen to worry about performance\nlater for the sake of spending
  more time on the design (and to wait on\nperformance issues to arise first). `brick`
  exports an extension API\nthat makes it possible to make your own packages and widgets.
  If you\nuse that, you'll also be helping to test whether the exported interface\nis
  usable and complete!\n\nThe development of this library has revealed some bugs in
  `vty`, and\nI've tried to report those as I go. If they haven't been resolved,\nyou'll
  see them arise when using `brick`.\n\nReporting bugs\n--------------\n\nPlease file
  bug reports as GitHub issues.  For best results:\n\n - Include the versions of relevant
  software packages: your terminal\n   emulator, `brick`, `ghc`, and `vty` will be
  the most important\n   ones. Even better, the output of `cabal freeze` would probably
  be\n   helpful in making the problem reproducible.\n\n - Clearly describe the behavior
  you expected ...\n\n - ... and include a mininal demonstration program that exhibits
  the\n   behavior you actually observed.\n\nContributing\n------------\n\nIf you
  decide to contribute, that's great! Here are some guidelines you\nshould consider
  to make submitting patches easier for all concerned:\n\n - If you want to take on
  big things, talk to me first; let's have a\n   design/vision discussion before you
  start coding. Create a GitHub\n   issue and we can use that as the place to hash
  things out.\n - If you make changes, try to make them consistent with the syntactic\n
  \  conventions I've used in the codebase.\n - Please provide Haddock and/or user
  guide documentation for any\n   changes you make.\n"
license-name: BSD3
