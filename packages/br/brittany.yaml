homepage: https://github.com/lspitzner/brittany/
changelog-type: markdown
hash: 1c906b6347ad74ae4bf081dbbb90d2c51109e71507e4b9f33cf051e93b2f7a9a
test-bench-deps:
  ghc: -any
  data-tree-print: -any
  either: -any
  bytestring: -any
  brittany: -any
  butcher: -any
  czipwith: -any
  extra: -any
  unsafe: -any
  base: -any
  hspec: ! '>=2.4.1 && <2.5'
  text: -any
  syb: -any
  strict: -any
  ghc-exactprint: -any
  uniplate: -any
  parsec: ! '>=3.1.11 && <3.2'
  multistate: -any
  semigroups: -any
  containers: -any
  ghc-paths: -any
  mtl: -any
  cmdargs: -any
  transformers: -any
  deepseq: -any
  ghc-boot-th: -any
  monad-memo: -any
  pretty: -any
  aeson: -any
  safe: -any
  yaml: -any
  neat-interpolation: -any
  directory: -any
maintainer: Lennart Spitzner <hexagoxel@hexagoxel.de>
synopsis: Haskell source code formatter
changelog: ! "# Revision history for brittany\n\n## 0.8.0.2  -- August 2017\n\n* Add
  library interface, to be used by `haskell-ide-engine`.\n* Publish to hackage.\n\n##
  0.8.0.1  -- May 2017\n\n* Document the high-level design of the program\n* Improve
  layouting for many different cases, too many to list here. Brittany\n  still does
  only reformat top-level type signatures and bindings.\n* Publish all dependencies
  on hackage; `ghc-exactprint ` adaptions got merged\n  upstream as well.\n* Reduce
  the aggressiveness of horizontal alignment; this is configurable\n  via the `lconfig_alignmentLimit`
  and `lconfig_alignmentBreakOnMultiline`\n  values (config file only for now).\n*
  (!) Breaking change to the config file format: The keys previously contained\n  underscore
  (e.g. `_econf_Werror`) but do not anymore (`econf_Werror`).\n  Add config version;
  also\n* Move config value `conf_errorHandling.econf_CPPMode` to\n  `conf_preprocessor.ppconf_CPPMode`.\n*
  Cope with unhandled syntactical constructs more gracefully by falling back\n  on
  the ghc-exactprint output; Brittany simply won't touch certain\n  subexpressions
  instead of aborting. This is further configurable via the\n  `econf_omit_output_valid_check`
  config value.\n* Due to improvements to the `butcher` library: Accept `--key=value`
  on\n  commandline (only `--key value` was supported previously).\n* Improve testsuite
  setup: The `tests.blt` file contains many different\n  testcases that allow quick
  addition - feel free to report bugs directly\n  by making PRs with additions to
  that file.\n* Release under the terms of the AGPLv3\n\n## 0.7.1.0  -- 2016-09-06\n\n*
  Support stack\n* Fix --ghc-options handling\n* Add commandline param to allow shortcut
  `brittany Foo.hs`\n  meaning `brittany -i Foo.hs`\n\n## 0.7.0.0  -- 2016-09-04\n\n*
  First official alpha release\n* Fix commandline flag parsing\n* Implement/Improve
  horizontal aligning\n* Various minor fixes and layouting improvements\n\n## 0.6.0.0
  \ -- 2016-08-12\n\n* Add check that output is syntactically valid\n* (!) Change
  config format, breaking previous configs\n* Various layouting additions/imporements\n*
  Various minor fixes\n\n## 0.5.0.0  -- 2016-08-08\n\n* Support --ghc-options\n* Support
  user and local config files: Local config file is not mandatory\n  anymore.\n\n##
  0.4.0.0  -- 2016-08-06\n\n* Make comment handling a bit more clever\n* Various layouting
  additions/imporements\n\n## 0.3.0.0  -- 2016-08-04\n\n* Various layouting additions/imporements\n\n##
  0.2.0.0  -- 2016-07-30\n\n* Basic and partial implementation for\n  expression/decl/statement/pattern
  layouting\n* Prevent exponential behaviour using manual stablenames\n\n## 0.1.0.0
  \ -- 2016-06-05\n\n* First working code for type signature layouting\n"
basic-deps:
  ghc: ! '>=8.0.1 && <8.1'
  data-tree-print: -any
  either: ! '>=4.4.1.1 && <4.5'
  bytestring: ! '>=0.10.8.1 && <0.11'
  brittany: -any
  butcher: ! '>=1.1.0.0 && <1.2'
  czipwith: ! '>=1.0.0.0 && <1.1'
  extra: ! '>=1.4.10 && <1.6'
  unsafe: ==0.0.*
  base: ==4.9.*
  hspec: ! '>=2.4.1 && <2.5'
  text: ==1.2.*
  syb: ==0.6.*
  strict: ! '>=0.3.2 && <0.4'
  ghc-exactprint: ! '>=0.5.3.0 && <0.6'
  filepath: ! '>=1.4.1.0 && <1.5'
  uniplate: ! '>=1.6.12 && <1.7'
  multistate: ! '>=0.7.1.1 && <0.8'
  semigroups: ! '>=0.18.2 && <0.19'
  containers: ! '>=0.5.7.1 && <0.6'
  ghc-paths: ! '>=0.1.0.9 && <0.2'
  mtl: ! '>=2.2.1 && <2.3'
  cmdargs: ! '>=0.10.14 && <0.11'
  transformers: ! '>=0.5.2.0 && <0.6'
  deepseq: ! '>=1.4.2.0 && <1.5'
  ghc-boot-th: ! '>=8.0.1 && <8.1'
  monad-memo: ! '>=0.4.1 && <0.5'
  pretty: ! '>=1.1.3.3 && <1.2'
  aeson: ! '>=1.0.1.0 && <1.3'
  safe: ! '>=0.3.9 && <0.4'
  yaml: ! '>=0.8.18 && <0.9'
  neat-interpolation: ! '>=0.3.2 && <0.4'
  directory: ! '>=1.2.6.2 && <1.4'
all-versions:
- '0.8.0.2'
author: Lennart Spitzner
latest: '0.8.0.2'
description-type: markdown
description: ! "# brittany\nhaskell source code formatter\n\n![Output sample](https://github.com/lspitzner/brittany/raw/master/brittany-sample.gif)\n\n(see
  [more examples and comparisons](/doc/showcases))\n\nThis project's goals roughly
  are to:\n\n- Always retain the semantics of the source being transformed;\n- Be
  idempotent (this also directly ensures that only valid haskell is\n  produced);\n-
  Support the full GHC-haskell syntax including syntactic extensions\n  (but excluding
  `-XCPP` which is too hard);\n- Retain newlines and comments unmodified;\n- Be clever
  about using the available horizontal space while not overflowing\n  it if it cannot
  be avoided;\n- Be clever about aligning things horizontally (this can be turned
  off\n  completely however);\n- Have linear complexity in the size of the input.\n\nIn
  theory, the core algorithm inside brittany reaches these goals. It is rather\nclever
  about making use of horizontal space while still being linear in the\nsize of the
  input (although the constant factor is not small). See\n[these examples of clever
  layouting](/doc/showcases/Layout_Interactions.md).\n\nBut brittany is not finished
  yet, and there are some open issues that yet\nrequire fixing:\n\n- **only type-signatures
  and function/value bindings** are processed;\n  other module elements (data-decls,
  classes, instances, imports/exports etc.)\n  are not transformed in any way; this
  extends to e.g. **bindings inside class\n  instance definitions** - they **won't
  be touched** (yet).\n- By using `ghc-exactprint` as the parser, brittany supports
  full GHC \n  including extensions, but **some of the less common syntactic elements\n
  \ (even of 2010 haskell) are not handled**.\n- **There are some known issues regarding
  handling of in-source comments.**\n  There are cases where comments are not copied
  to the output (this will\n  be detected and the user will get an error); there are
  other cases where\n  comments are moved slightly; there are also cases where comments
  result in\n  wonky newline insertion (although this should be a purely aesthetic
  issue.)\n- There is an **open performance issue on large inputs** (due to an\n  accidentally
  quadratic sub-algorithm); noticable for inputs with >1k loc.\n\n# Other usage notes\n\n-
  Requires `GHC-8.0.*`; support for 8.2 is on the list, but I haven't even\n  looked
  at how much the `GHC` API changes.\n- config (file) documentation is lacking.\n-
  some config values can not be configured via commandline yet.\n- uses/creates user
  config file in `~/.brittany/config.yaml`;\n  also reads `brittany.yaml` in current
  dir if present.\n\n# Installation\n\n- via `cabal` \"old-build\"\n\n  ~~~~.sh\n
  \ # optionally:\n  # mkdir brittany\n  # cd brittany\n  # cabal sandbox init\n  cabal
  install brittany --bindir=$HOME/.cabal/bin # -w $PATH_TO_GHC_8_0\n  ~~~~\n\n- via
  `cabal new-build`\n\n  ~~~~.sh\n  cabal unpack brittany\n  cd brittany-0.8.0.2\n
  \ # cabal new-configure -w $PATH_TO_GHC_8_0\n  cabal new-build exe:brittany\n  #
  and it should be safe to just copy the executable, e.g.\n  cp `./find dist-newstyle/build/
  -type f -name brittany` $HOME/.cabal/bin/\n  ~~~~\n\n- via `stack`\n\n  ~~~~.sh\n
  \ git clone https://github.com/lspitzner/brittany.git\n  cd brittany\n  stack install\n
  \ ~~~~\n\n\n# Usage\n\n- Currently one mode of operation: Transform a single module.
  By default read\n  from `stdin` and written to `stdout`, but commandline arguments
  allow to\n  read/write from/to files.\n- For stdin/stdout usage it makes sense to
  enable certain syntactic extensions\n  by default, i.e. to add something like this
  to your\n  `~/.brittany/config.yaml` (execute `brittany` once to create default):\n\n
  \ ~~~~\n  conf_forward:\n    options_ghc:\n    - -XLambdaCase\n    - -XMultiWayIf\n
  \   - -XGADTs\n    - -XPatternGuards\n    - -XViewPatterns\n    - -XRecursiveDo\n
  \   - -XTupleSections\n    - -XExplicitForAll\n    - -XImplicitParams\n    - -XQuasiQuotes\n
  \   - -XTemplateHaskell\n    - -XBangPatterns\n  ~~~~\n\n# Implementation/High-level
  Documentation\n\n[See the documentation index](doc/implementation/index.md)\n\n#
  License\n\nCopyright (C) 2016-2017 Lennart Spitzner\n\nThis program is free software:
  you can redistribute it and/or modify\nit under the terms of the\n[GNU Affero General
  Public License, version 3](http://www.gnu.org/licenses/agpl-3.0.html),\nas published
  by the Free Software Foundation.\n\nThis program is distributed in the hope that
  it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty
  of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General
  Public License for more details.\n\nYou should have received a copy of the GNU Affero
  General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
license-name: AGPL-3
