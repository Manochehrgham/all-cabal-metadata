homepage: https://github.com/merijn/broadcast-chan
changelog-type: ''
hash: e6a1856f2218449e9836ca15f33e56bd82094b2dcb1a73bb89e76bd8f86b7953
test-bench-deps: {}
maintainer: Merijn Verstraaten <merijn@inconsistent.nl>
synopsis: Broadcast channel type that avoids 0 reader space leaks.
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
all-versions:
- '0.1.0'
author: Merijn Verstraaten
latest: '0.1.0'
description-type: haddock
description: ! 'A variation of "Control.Concurrent.Chan" from base, which allows to
  the

  easy creation of broadcast channels without the space-leaks that may arise

  from using ''Control.Concurrent.Chan.dupChan''.

  The ''Control.Concurrent.Chan.Chan'' type from "Control.Concurrent.Chan"

  consists of both a read and write end. This presents a problem when one

  wants to have a broadcast channel that, at times, has zero listeners. To

  write to a ''Control.Concurrent.Chan.Chan'' there must always be a read end

  and this read end will hold ALL messages alive until read.

  The simple solution applied in this module is to separate read and write

  ends. As a result, any messages written to the write end can be immediately

  garbage collected if there are no active read ends, avoding space leaks.'
license-name: BSD3
