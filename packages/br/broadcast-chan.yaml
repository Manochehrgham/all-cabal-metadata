changelog-type: ''
hash: 10e81f7c326d16e2ad71ca3f54861154dc07f62a4b8254e040dae88237d2797b
synopsis: Broadcast channel type that avoids 0 reader space leaks.
changelog: ''
all-versions:
- '0.1.0'
latest: '0.1.0'
description-type: haddock
description: ! 'A variation of "Control.Concurrent.Chan" from base, which allows to
  the

  easy creation of broadcast channels without the space-leaks that may arise

  from using ''Control.Concurrent.Chan.dupChan''.

  The ''Control.Concurrent.Chan.Chan'' type from "Control.Concurrent.Chan"

  consists of both a read and write end. This presents a problem when one

  wants to have a broadcast channel that, at times, has zero listeners. To

  write to a ''Control.Concurrent.Chan.Chan'' there must always be a read end

  and this read end will hold ALL messages alive until read.

  The simple solution applied in this module is to separate read and write

  ends. As a result, any messages written to the write end can be immediately

  garbage collected if there are no active read ends, avoding space leaks.'
