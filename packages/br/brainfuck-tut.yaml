homepage: https://gitlab.com/cpp.cabrera/brainfuck-tut
changelog-type: markdown
hash: 024a3adfe8e131c618babc5fd511f8ef72966837e6dcc1bcb8d01db38197a4e4
test-bench-deps: {}
maintainer: cpp.cabrera@gmail.com
synopsis: A simple BF interpreter.
changelog: ! "0.7.0.0\n\n* added support for '?' command\n    * this breaks compatibility
  with programs that use ? as a comment\n      character\n\n0.6.0.1\n\n* update the
  changelog\n\n0.6.0.0\n\n* fix: jump logic now respects nesting\n\n0.5.1.3\n\n* Add
  changelog\n\n0.5.1.2\n\n* Add homepage, issue tracker, project repo\n\n0.5.1.1\n\n*
  Fix documentation formatting issues\n\n0.5.1.0\n\n* Initial release\n"
basic-deps:
  base: ==4.7.*
  array: -any
  brainfuck-tut: -any
all-versions:
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
- '0.6.0.0'
- '0.6.0.1'
- '0.7.0.0'
author: Alejandro Cabrera
latest: '0.7.0.0'
description-type: markdown
description: ! "# Brainfuck: A Toy Implementation\n\nThis project exists to show what
  a\n[Brainfuck](http://en.wikipedia.org/wiki/Brainfuck) evaluator might\nlook like
  in Haskell.\n\nThe implementation is fairly well documented. I endeavored to make
  it\nreadable.\n\n## Terms\n\nBelow is the abstract syntax tree for the BF language
  as implemented:\n\n```haskell\ndata Term\n  = IncDP        -- >\n  | DecDP        --
  <\n  | OutDP        -- ?\n  | IncByte      -- +\n  | DecByte      -- -\n  | OutByte
  \     -- .\n  | InByte       -- ,\n  | JumpForward  -- [\n  | JumpBackward -- ]\n
  \ deriving (Show, Eq)\n```\n\n## Evaluation Semantics\n\nI followed the summary
  given on the wikipedia page closely. A few\nparticulars to this implementation:\n\n*
  \"Jump not found\" errors abort evaluation and return the state of the tape\n* Out
  of bound errors are not detected\n* Evaluation proceeds until the instruction stream
  runs out\n\n## Executable\n\nAn executable is provided:\n\n```\n$ cabal build bfh\n$
  cabal run bfh\nusage: bfh <size> <program>\n$ cabal run bfh 10 ',.'\na<enter>\na\n```\n"
license-name: BSD3
