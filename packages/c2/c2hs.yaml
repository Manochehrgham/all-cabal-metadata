homepage: https://github.com/haskell/c2hs
changelog-type: text
hash: 3cf0fa9d0b4d2ccf037d4612dbd3047c740fe172e714a21d86c49ebaaaecc77f
test-bench-deps:
  test-framework-hunit: -any
  shelly: ! '>=1.0'
  test-framework: -any
  base: -any
  text: -any
  filepath: -any
  HUnit: -any
  transformers: -any
maintainer: chak@cse.unsw.edu.au, duncan@community.haskell.org, ian@skybluetrades.net,
  aditya.siram@gmail.com
synopsis: C->Haskell FFI tool that gives some cross-language type safety
changelog: ! "0.28.2\n - Switch to language-c 0.6 [#176]\n0.28.1\n - Switch to language-c
  0.5 [#157]\n - Fix class hook problem with imports [#155]\n\n0.27.1\n - Alternate
  specification for sizes in \"+\" parameters [#140]\n - Fix regression to do with
  incomplete structure types [#152]\n - Fix pattern match error [PR #153] (deech)\n\n0.26.2\n
  - Missing import bug [#151]\n - Parameter count checking for {#fun ...#} [#149]\n
  - Error message for \"incomplete types\" [#141]\n\n0.26.1\n - Better error messages
  [PR #139] (Noam Lewis)\n - Fix for OS X block syntax [#138] (Anthony Cowley)\n -
  Minimal support for va_list [PR #137] (Andy Adams-Moran)\n - Reorganise treatment
  of standard library imports used by C2HS\n   [#136] (https://github.com/haskell/c2hs/blob/master/import-handling.md)\n
  - C structure tag/typedef confusion bug (caused problems for flock on\n   OS X)
  [#134]\n - C typedefs to void pointers [#133]\n - Bool wrappers for unnamed parameters
  in C function definitions\n   [#131]\n - Incorrect wrapping of some pure C functions
  [#130]\n\n0.25.2\n - Test fixes to work with GHC 7.10.1\n\n0.25.1\n - Marshalling
  for C bool values [#128]\n\n0.24.1\n - Revert bad fix for bool handling [#127]\n
  - Wrapper generation for bare structure arguments [#117] plus custom\n   setup script
  to support Cabal builds on versions of Cabal without\n   explicit support for extra
  C sources generated by preprocessors\n   (@RyanGIScott)\n - Arrays in structuress
  bug [#123]\n - Test fixes for Windows\n\n0.23.1\n - Typedef and default marshalling
  hooks [#20, #25, #48]\n - Test fixes for 32-bit platforms (JÃ¼rgen Keck: @j-keck)\n
  - Multi-character constants for OS X [#15]\n - Better support for binding to variadic
  functions [#102]\n\n0.22.1\n - First (not very good) implementation of support for
  variadic\n   functions [#102]\n - Default marshallers for Char types [#98]\n - Improve
  sizeof computations [#9, #10]\n\n0.21.1\n - Parametrized pointer types in pointer
  hooks [#36]\n - Special \"+\" parameters for efficient foreign pointer marshalling
  [#46]\n - Add default marshallers for C types [#83]\n - Fix treatment of arrays
  within structs [#115]\n - Add ability to omit given enum values [#116]\n - Regression
  suite tidy-ups\n\n\n0.20.1\n - Get CUDA Travis tests working again (hopefully...)\n
  - Modify approach for defining C2HS_MIN_VERSION macro to work with\n   NVIDIA's
  nvcc CUDA compiler [#111]\n - Fix problem with parser for {#enum ...#} renamings
  [#113]\n\n\n0.19.1\n - Add {#const ...#} hook for accessing #defined constants [#65]\n
  - Persist enumeration definitions across modules [#103]\n - Add nocode keyword for
  enumeration definitions [#70]\n - Bump version for language-c to fix OS X problems
  [#82, #85] (thanks to\n   Anthony Cowley and Benedikt Huber for help with this)\n
  - Add finalizer support to foreign pointer definitions [#73]\n - Comment parsing
  cleanups (Sivert Berg: @sivertb)\n\n\n0.18.2\n - Add C2HS_MIN_VERSION(major,minor,revision)
  preprocessor macro\n - Suppress regression suite build (and associated dependency\n
  \  installation) for non-Travis cases\n - Fix Cabal file to include previously missing
  tests\n\n\n0.18.1\n - Numerous improvements to Enum handling [#78] (Philipp Balzarek:\n
  \  @Philonous)\n - Handle Haddock comments within C2HS hook definitions [#62] (@tangboyun)\n
  - Better error messages for missing files (Zejun Wu: @watashi)\n - Write CHS dump
  files to output directory (Zejun Wu: @watashi)\n - Handle C calling conventions
  within function pointer declarations [#88]\n   (Michael Steele: @mikesteele81)\n
  - Fix FreeBSD libssh2 problem [#87] (Cindy Wang: @CindyLinz)\n - Better error messages
  for hook syntax errors (Ryan Scott: @RyanGIScott)\n - Fixes for GHC 7.9 [#100] (@int-index)\n
  - Fix test suite to use C2HS from dist directory [#81]\n - Allow free intermixing
  of command line options and input files [#86]\n - Treat CLang \"block\" syntax and
  other \"non-GNU\" issues differently:\n   always undefine __BLOCKS__ CPP symbol
  to avoid problems with blocks;\n   add nonGNU directive to trigger undefine of GNU-specific
  pre-processor\n   symbols [#77]\n - Handle indented CPP directives correctly [#80]\n
  - Handle #sizeof and #alignof on non-typedef's structures [#95]\n - Fix #get and
  #set hooks to access newtyped pointers [#96]\n - Fix round-trip problem for interface
  files caused by changes in\n   language-c [#87]\n - Treat \"with\" specially so
  that it can appear both as a marshaller\n   identifier in an input parameter definition
  and as a keyword in enum\n   definitions [#93]\n - Temporarily disable CUDA regression
  suite examples (CUDA install\n   problems on Travis)\n\n\n0.17.2\n - Fix more regressions
  from 0.16.6 (affected packages included\n   gnome-keyring, hsndfile and cuda)\n
  - Add regression suite tests to reduce chances of future regressions\n\n\n0.17.1\n\n
  - Fix regressions from 0.16.6 (caused by fix for issue #45)\n - Version number bump
  (should have been done in the last release)\n\n\n0.16.6\n\n - Trivial integer casts
  in enum defines supporting typedefs [Anton Dessiatov]\n - Allow forward definition
  of enums (issue #23)\n - Binding of C enums with aliases (issue #38)\n - Default
  marshallers for enum and pointer hooks (issue #31)\n - Remove dependencies on C2HS
  module from marshalling code (issue #37)\n - Problem with MacOS blocks notation
  (issue #29)\n - Include directive on first line produces invalid Haskell (issue
  #16)\n - Add command-line switch to suppress GNU preprocessor symbols (issue #60)\n
  - Fix size and alignment computation of bitfields [Facundo Dominguez]\n - Allow
  prefixes to be replaced, not just removed (issue #19)\n - Allow reference to structure
  tags from accessors (issue #54)\n   For access paths for {#get#}, {#set#}, etc.,
  one can now specify\n   that structure tags are to be searched preferentially by
  saying,\n   for example, {#get struct _point->y#} instead of {#get _point->y#}.\n
  \  The latter case will search for typedef names first and only then\n   structure
  tags.\n - Support for anonymous enums (issue #43)\n - with... unwrapper type declarations
  for pointer hooks (issue #44)\n - {#fun...#} indentation for use in where clauses
  (issue #45)\n - incorrect method names from terminal class in superclass\n   instances
  (issue #21)\n - \"offsetof\" directive (issue #22)\n - --include flag cannot handle
  windows paths (issue #30)\n   Now uses System.FilePath splitSearchPath function,
  which should be\n   platform-agnostic.\n - Void functions produce \"defined but
  not used\" warning (issue #47)\n   Handle fun hooks with a void result using \">>\"
  instead of \">>=\".\n - Add CPP undefine flags for Gnu compiler defines (issue #51)\n
  - Cabal test suite\n\n\n0.16.5\n\n - Migration to GitHub; documentation changes.\n\n\nCHANGES
  ABOVE THIS POINT ARE FOR VERSIONS AFTER THE MOVE OF THE REPOSITORY\nTO GITHUB.  FOR
  EARLIER CHANGES SEE ChangeLog.old.\n"
basic-deps:
  bytestring: -any
  base: ! '>=3 && <5'
  filepath: -any
  process: -any
  dlist: -any
  array: -any
  containers: -any
  language-c: ! '>=0.6 && <0.7'
  pretty: -any
  directory: -any
all-versions:
- '0.15.0'
- '0.15.1'
- '0.16.0'
- '0.16.2'
- '0.16.3'
- '0.16.4'
- '0.16.5'
- '0.16.6'
- '0.17.1'
- '0.17.2'
- '0.18.1'
- '0.18.2'
- '0.19.1'
- '0.20.1'
- '0.21.1'
- '0.22.1'
- '0.23.1'
- '0.24.1'
- '0.25.1'
- '0.25.2'
- '0.26.1'
- '0.26.2'
- '0.27.1'
- '0.28.1'
- '0.28.2'
author: Manuel M T Chakravarty
latest: '0.28.2'
description-type: text
description: ! '`c2hs` is a interfacing tool that eases Haskell access to C libraries.

  The tool gets information about the C data type definitions and

  function signatures by analysing the C header files of the library.

  It uses this information to compute the missing details in the

  template of a Haskell module &mdash; called the binding file &mdash;

  that implements a Haskell binding to the C library.  Hooks embedded in

  the binding file signal where, which, and how C objects are accessed

  from Haskell.  The Haskell code in the binding file determines Haskell

  types signatures and marshaling details.


  Further information is on the

  [wiki](https://github.com/haskell/c2hs/wiki/Home).  Also see the

  [user guide](https://github.com/haskell/c2hs/wiki/User-Guide) (also

  available in the `doc` directory of the repository).



  ## Installing


  See the file `INSTALL`.



  ## Copyleft


  This system is free software; you can redistribute it and/or modify it

  under the terms of the GNU General Public License as published by the

  Free Software Foundation; either version 2 of the License, or (at your

  option) any later version.


  This system is distributed in the hope that it will be useful, but

  WITHOUT ANY WARRANTY; without even the implied warranty of

  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

  General Public License for more details.


  You should have received a copy of the GNU General Public License

  along with this system; if not, write to the Free Software Foundation,

  Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


  > **NOTE HOWEVER**, all code included into generated bindings is under

  > a BSD-style license that does not place any restrictions on the

  > license of the inteface produced with `c2hs` (ie, closed proprietary

  > licenses are possible, too).  In other words, I do not care what you

  > use `c2hs` for or to whom you are giving `c2hs` or any interfaces

  > generated with `c2hs`, only if you modify or improve `c2hs` itself,

  > you have to contribute your changes back to the community.

  > Nevertheless, I will of course be particularly delighted if you

  > choose to make your work freely available.



  ## Credits


  See the file `AUTHORS`.

'
license-name: GPL-2
