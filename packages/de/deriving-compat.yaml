homepage: https://github.com/haskell-compat/deriving-compat
changelog-type: markdown
hash: 419aed9e72d4ebd5fd037b984efa6e7a990e491d4731355903ca8721dda9bd56
test-bench-deps:
  base: ! '>=4.9 && <5'
  deriving-compat: ==0.3.4
  hspec: ! '>=1.8'
  base-orphans: ! '>=0.5 && <1'
  base-compat: ! '>=0.8.1 && <1'
  transformers: (>=0.2 && <0.4) || (>=0.5 && <0.6)
  QuickCheck: ! '>=2 && <3'
  template-haskell: ! '>=2.5 && <2.12'
  transformers-compat: ! '>=0.5'
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: Backports of GHC deriving extensions
changelog: ! '### 0.3.4 [2016.10.20]

  * Fix bug in which infix record selectors weren''t shown with parentheses in derived
  `Show` instances

  * Fix bug in which record selectors weren''t parsed correctly in derived `Read`
  instances


  ### 0.3.3 [2016.09.11]

  * Add `Data.Bounded.Deriving`, which allows deriving `Bounded` with TH.

  * Add `Data.Enum.Deriving`, which allows deriving `Enum` with TH.

  * Add `Data.Ix.Deriving`, which allows deriving `Ix` with TH.

  * Fix bug in which derived `Show` instance would parenthesize the output too eagerly


  ### 0.3.2

  * Incorporate a fix to GHC Trac #10858, which will be introduced in GHC 8.2

  * Fix bug in which derived `Ord` instances accidentally swapped their less-than(-or-equal-to)
  and greater-than(-or-equal-to) methods

  * Fix GHC HEAD build


  ### 0.3.1

  * Allow deriving `Functor` and `Foldable` instances for datatypes containing unboxed
  tuples

  * Microoptimization in derived instances of higher-order versions of `Eq`, `Ord`,
  `Read`, and `Show`


  ## 0.3

  * Added `Data.Eq.Deriving`, which allows deriving `Eq`, `Eq1`, and `Eq2` with TH.

  * Added `Data.Ord.Deriving`, which allows deriving `Ord`, `Ord1`, and `Ord2` with
  TH.

  * Added `Data.Read.Deriving`, which allows deriving `Read`, `Read1`, and `Eq2` with
  TH.

  * Renamed `Text.Show.Deriving.Options` to `ShowOptions` so as to disambiguate it
  from the options datatypes in other `deriving-compat` modules.


  ### 0.2.2

  * Fixed a bug in `Text.Show.Deriving`''s treatment of unlifted types


  ### 0.2.1

  * Added `Text.Show.Deriving`, which allows deriving `Show`, `Show1`, and `Show2`
  with TH.


  ## 0.2

  * Added support for GHC 8.0

  * Added `Data.Functor.Deriving` and `Data.Traversable.Deriving`, which allow deriving
  `Functor` and `Traversable` with TH.

  * Added `Data.Deriving`, which reexports all other modules


  ## 0.1

  * Initial commit

'
basic-deps:
  base: ! '>=4.9 && <5'
  containers: ! '>=0.1 && <0.6'
  ghc-prim: -any
  transformers: (>=0.2 && <0.4) || >=0.5
  ghc-boot-th: -any
  template-haskell: ! '>=2.11 && <2.12'
  transformers-compat: ! '>=0.5'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.1'
- '0.3.3'
- '0.3.4'
author: Ryan Scott
latest: '0.3.4'
description-type: markdown
description: ! "# `deriving-compat`\n[![Hackage](https://img.shields.io/hackage/v/deriving-compat.svg)][Hackage:
  deriving-compat]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/deriving-compat.svg)](http://packdeps.haskellers.com/reverse/deriving-compat)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n[![Build](https://img.shields.io/travis/haskell-compat/deriving-compat.svg)](https://travis-ci.org/haskell-compat/deriving-compat)\n\n[Hackage:
  deriving-compat]:\n  http://hackage.haskell.org/package/deriving-compat\n  \"deriving-compat
  package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell
  Programming Language\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n\nProvides Template Haskell functions that
  mimic deriving extensions that were introduced or modified in recent versions of
  GHC. Currently, the following typeclasses/extensions are covered:\n\n* Deriving
  `Bounded`\n* Deriving `Enum`\n* Deriving `Ix`\n* Deriving `Eq`, `Eq1`, and `Eq2`\n*
  Deriving `Ord`, `Ord1`, and `Ord2`\n* Deriving `Read`, `Read1`, and `Read2`\n* Deriving
  `Show`, `Show1`, and `Show2`\n* `DeriveFoldable`\n* `DeriveFunctor`\n* `DeriveTraversable`\n\nSee
  the `Data.Deriving` module for a full list of backported changes.\n\nNote that some
  recent GHC typeclasses/extensions are not covered by this package:\n\n* `DeriveDataTypeable`\n*
  `DeriveGeneric`, which was introducted in GHC 7.2 for deriving `Generic` instances,
  and modified in GHC 7.6 to allow derivation of `Generic1` instances. Use `Generics.Deriving.TH`
  from [`generic-deriving`](http://hackage.haskell.org/package/generic-deriving) to
  derive `Generic(1)` using Template Haskell.\n* `DeriveLift`, which was introduced
  in GHC 8.0 for deriving `Lift` instances. Use `Language.Haskell.TH.Lift` from [`th-lift`](http://hackage.haskell.org/package/th-lift)
  to derive `Lift` using Template Haskell.\n* The `Bifunctor` typeclass, which was
  introduced in GHC 7.10, as well as the `Bifoldable` and `Bitraversable` typeclasses,
  which were introduced in GHC 8.2. Use `Data.Bifunctor.TH` from [`bifunctors`](http://hackage.haskell.org/package/bifunctors)
  to derive these typeclasses using Template Haskell.\n"
license-name: BSD3
