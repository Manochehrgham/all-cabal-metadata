homepage: https://github.com/HaskellZhangSong/derive-topdown
changelog-type: ''
hash: 1dd253aea5f1c2e4638908d8d1661c657101213bbbabb34758be054c861735b7
test-bench-deps: {}
maintainer: Haskell.Zhang.Song@hotmail.com
synopsis: This library will help you generate Haskell empty Generic instances  and
  deriving type instances from the top automatically to the bottom for composited
  data types.
changelog: ''
basic-deps:
  base: ==4.*
  mtl: ! '>=2.2.1'
  template-haskell-util: ! '>=0.1.1.0'
  template-haskell: ! '>=2.9'
  derive: ! '>=2.5.18'
all-versions:
- '0.0.0.1'
- '0.0.0.2'
author: songzh
latest: '0.0.0.2'
description-type: markdown
description: ! "# derive-topdown\nThis library will help you generate Haskell empty
  Generic instance and deriving type instances from the top automatically to the bottom.\n\nAn
  example to generate Out class for Person, Name and Address.\nOut class in genericpretty
  package has to provide a default implementation for the function it declears.\n\n
  \   {-# LANGUAGE TemplateHaskell, DeriveGeneric,DeriveDataTypeable,TypeSynonymInstances
  #-}\n    {-# OPTIONS_GHC -ddump-splices #-}\n    module Data.Derive.TopDown.Test
  where \n    import Data.Derive.TopDown.Generic\n    import Data.Derive.TopDown.Derive
  (derivings)\n    import Text.PrettyPrint.GenericPretty (Out)\n    import Data.DeriveTH\n
  \   import GHC.Generics\n\n    data A a b = A a (B b) deriving (Show, Generic)\n
  \   data B a = B a deriving (Show, Generic)\n\n    data Person = Person Names Address\n
  \               | Student Names Address deriving Generic\n    data Names  = Names
  String deriving Generic\n    data Address = Address Gate  deriving Generic\n    type
  Gate = (String,Int)\n\n    derivings ''Eq makeEq ''Person\n    instances ''Out ''A\n
  \   instances ''Out ''Person\n\n================================\n\n    Data\\Derive\\TopDown\\Test.hs:1:1:
  Splicing declarations\n        derivings ''Eq makeEq ''Person\n      ======>\n        Data\\Derive\\TopDown\\Test.hs:23:1-30\n
  \       instance Eq Names where\n          (==) (Names x1) (Names y1) = (x1 == y1)\n
  \       instance Eq Address where\n          (==) (Address x1) (Address y1) = (x1
  == y1)\n        instance Eq Person where\n          (==) (Person x1 x2) (Person
  y1 y2) = ((x1 == y1) && (x2 == y2))\n          (==) (Student x1 x2) (Student y1
  y2) = ((x1 == y1) && (x2 == y2))\n          (==) _ _ = False\n    Data\\Derive\\TopDown\\Test.hs:1:1:
  Splicing declarations\n        instances ''Out ''A\n      ======>\n        Data\\Derive\\TopDown\\Test.hs:24:1-19\n
  \       instance Out a_a1IiG => Out (B a_a1IiG)\n        instance (Out a_a1IiH,
  Out b_a1IiI) => Out (A a_a1IiH b_a1IiI)\n    Data\\Derive\\TopDown\\Test.hs:1:1:
  Splicing declarations\n        instances ''Out ''Person\n      ======>\n        Data\\Derive\\TopDown\\Test.hs:25:1-24\n
  \       instance Out Names\n        instance Out Address\n        instance Out Person\n\nFor
  generating 4 empty instances\n\n    instance Out Person\n    instnace Out Nmads\n
  \   instance Out Address\n    instance Out Gate\n\nyou just write:\n\n    instances
  ''Out ''Person\n\nFor derive Eq typeclass you just write\n\n    derivings ''Eq makeEq
  ''Person\n\nIt will generate all instances that Person dependend on including Person.\n\nDo
  not forget to use :set -ddump-splices, you will get\n\n    instances ''Out  ''Person\n
  \   ======>\n        ~\\Test.hs:13:1-18\n        instance Out Names\n        instance
  Out Gate\n        instance Out Address\n        instance Out Person\n        Ok,
  modules loaded: CompositeDataInstancesGen, Main.\n\nYou can also use instnaceList
  to generate a list of class. Solution 1 is to use derive package\n\n    derivings
  ''Eq makeEq ''A \n\nIf you enable -ddump-splices, you will get:\n\n    Data\\Derive\\TopDown\\Test.hs:1:1:
  Splicing declarations\n       derives ''Eq makeEq ''A\n     ======>\n       Data\\Derive\\TopDown\\Test.hs:18:1-25\n
  \      instance Eq a_1627720873 => Eq (B a_1627720873) where\n         (==) (B x1)
  (B y1) = (x1 == y1)\n       instance (Eq a_1627720874, Eq b_1627720875) =>\n                Eq
  (A a_1627720874 b_1627720875) where\n         (==) (A x1 x2) (A y1 y2) = ((x1 ==
  y1) && (x2 == y2))\n\nWe have to specify makeEq or other Derivation values here
  and I am not sure how to eleminate it. \n\nSolution 2 is is to use standalone deriving.
  it will be supposrt in GHC 7.10 standalone deriving will be supported and you do
  not need to write. *Currently unimplemented*. \n\n    deriving (Data, Typeable,
  Generic, Ord,Eq,Show)\n\nfor each data type declarations ever again. In stead you
  will be able to write:\n\n    derivings instance [''Eq, ''Typeable, ''Generic] A\n
  \   \n"
license-name: MIT
