homepage: https://www.github.com/mkloczko/derive-storable/
changelog-type: markdown
hash: 7b6e8b2dc9d542e818d131d4f6e52a14fed5dce75c20855b7f2d21ab51b74608
test-bench-deps:
  base: ! '>=4.8 && <4.10'
  hspec: ==2.2.*
  derive-storable: -any
  QuickCheck: ==2.8.*
maintainer: mateusz.p.kloczko@gmail.com
synopsis: Derive Storable instances with GHC.Generics.
changelog: ! '# Revision history for derive-storable


  ## 0.1.0.4  -- 2016-11-29


  * Fixed the bug with Foreign.Storable.Generic.Internal.Instances module.

  * Removed two tests related to numbering of fields.


  ## 0.1.0.3  -- 2016-09-19


  * Changed the link in README to hackage repository.


  ## 0.1.0.2  -- 2016-09-11


  * Changed generic-storable to derive-storable in README.md

  * Added README.md to the package



  ## 0.1.0.0  -- 2016-09-08


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4.8 && <4.10'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
author: Mateusz Kloczko
latest: '0.1.0.4'
description-type: markdown
description: ! "# Introduction\n\n[![Build Status](https://travis-ci.org/mkloczko/derive-storable.svg?branch=master)](https://travis-ci.org/mkloczko/derive-storable)\n\nThe
  `derive-storable` package allows you to automatically generate Storable instances
  for your datatypes. It uses GHC.Generics, which allows the coders to derive certain
  instances automatically. To derive a (G)Storable instance, the data-type has to:\n\n*
  have only one constructor.\n* all fields of the constructor need to be GStorable.\n*
  implement a Generic instance (`derive (Generic)`)\n\nIn order to achieve the same
  performance as for hand-written instances, take a look at [derive-storable-plugin](https://hackage.haskell.org/package/derive-storable-plugin).\n\n#
  Usage\n\nHere's an example:\n\n\n```haskell\n{-# LANGUAGE DeriveGeneric #-}\n\nimport
  Foreign.Storable\nimport Foreign.Storable.Generic\nimport Foreign.Ptr\nimport Foreign.Marshal.Alloc\n\nimport
  Generics.Deriving\n\ndata Position = Position {\n   x :: Double, \n   y :: Double\n}
  deriving (Show,Read, Generic)\n\ninstance GStorable Position\n\nupdatePosition ::
  Ptr Position -> Position -> IO ()\nupdatePosition ptr pos = poke ptr pos\n\n\nmain
  = do\n    let val = Position 0.0 10.0\n    ptr <- malloc :: IO (Ptr Position)      \n
  \   putStrLn \"Created a ptr with value of\"\n    putStrLn =<< show <$> peek ptr\n
  \   updatePosition ptr val\n    putStrLn \"And now the value of ptr is:\"   \n    putStrLn
  =<< show <$> peek ptr\n\n```\n\n\n"
license-name: MIT
