homepage: http://github.com/grwlf/vkhs
changelog-type: markdown
hash: 9d1375f12fe0f783edc76cbfee129944b55b9fd195e033e95ca711b1c942a3c6
test-bench-deps: {}
maintainer: grrwlf@gmail.com
synopsis: Provides access to Vkontakte social network via public API
changelog: ! 'TODO

  ----

  * Decrypt ''RepeatedForm'' errors

  * Show capchas to users if required

  * Re-implement VK monad as a Free monad special case

  * Runhaskell: handle some standard command line arguments

  * Support storing access-tokens in a temp file


  Version 1.7.2

  -------------

  * Initial support for runhaskell mode


  Version 1.7.1

  -------------


  * Support setting IDv2 tags for downloaded audio files

  * CLI: Fix ''call'' command output

  * CLI: Fix ''music'' command naming



  Version 1.6.0

  -------------


  * Use coroutine-based engine, offering smooth error handling

  * Use pipes-http as network backend


'
basic-deps:
  http-client: -any
  bytestring: -any
  case-insensitive: -any
  split: -any
  base: ! '>=4.6 && <5'
  data-default-class: -any
  time: -any
  aeson-pretty: -any
  text: -any
  clock: -any
  filepath: -any
  parsec: -any
  containers: -any
  regexpr: -any
  pipes: -any
  utf8-string: -any
  http-client-tls: -any
  pipes-http: -any
  network-uri: -any
  mtl: -any
  pretty-show: -any
  optparse-applicative: -any
  scientific: -any
  tagsoup: -any
  http-types: -any
  aeson: -any
  vector: -any
  directory: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.6'
- '0.5.7'
- '1.6.0'
- '1.6.1'
- '1.6.2'
- '1.6.3'
- '1.6.4'
- '1.7.0'
- '1.7.1'
- '1.7.2'
- '1.7.3'
- '1.8'
- '1.8.1'
- '1.8.2'
- '1.8.3'
- '1.8.4'
author: Sergey Mironov
latest: '1.8.4'
description-type: markdown
description: ! "VKHS\n====\n\nVKHS provides access to [Vkontakte](http://vk.com) social
  network, popular\nmainly in Russia.  Library can be used to login into the network
  as a\nstandalone application (OAuth implicit flow as they call it). Having the access\ntoken,
  it is possible to call various API methods to -query audio files-\n(disabled by
  VK) or retrieve wall messages.\n\nFeatures\n========\n\n* Provides access to VK
  API. Interface options include: VK monad and `vkq` command\n  line tool.\n* Uses
  HTTPS protocol.\n* Solves login form interaction, may be used to operate new/disposable
  VK accounts.\n* VK monad is designed as an interruptable coroutine. The supervisor
  supports\n  ondemand re-login, and may be used for long-running tasks.\n* Project
  includes a set of `Web.VKHS.API.Simple` wrappers designed to be\n  copied into `runhaskell`
  scripts and tweaked according to ones need.\n* No more dependencies on curlhs/taglib.\n\nIssues\n======\n\n*
  Still no support for captchas, one probably should hack `defaultSupervisor`\n  and
  add them.\n* Network connection timeout is not handled by the coroutine supervisor.\n*
  Minor issues here and there. Use `git grep FIXME` to find them\n* File uploading
  still not functioning.\n* Lots grammatical mistakes. Any corrections will be kindly
  accepted.\n\nInstalling\n==========\n\nInstalling from Hackage\n-----------------------\n\nIn
  order to install VKHS, one typically should do the following\n\n    $ cabal update\n
  \   $ cabal install VKHS\n\n\nInstalling from source\n----------------------\n\n
  \   $ git clone https://github.com/grwlf/vkhs\n    $ cd vkhs\n    $ cabal install\n\nDeveloping
  using Nix\n--------------------\n\nThe author of this project uses [Nix](http://nixos.org)
  as a main development\nplatform. The `default.nix` file contain Nix expression describing
  the environment\n\n#### Entering Nix shell environment\n\n    $ git clone https://github.com/grwlf/vkhs\n
  \   $ cd vkhs\n    $ nix-shell\n\n#### Usual development\n\n    $ ghci -isrc:app/vkq:app/common\n
  \   $ cabal install\n    $ ^D\n\n#### Returning to the system shell\n\n    $ ^D\n
  \   $ nix-build\n    $ ls ./result\n\n\nBuilding ctags file\n-------------------\n\n`./mktags.sh`
  script may be used to build ctags `tags` file supported by many\ntext editors. The
  script uses `hasktags` via `haskdogs` tools, available on\nHackage.\n\n    $ haskdogs\n\n\n\nVKQ
  command line application\n============================\n\n`vkq` is a command line
  tool which demonstrates API usage. It can be used for\nlogging in, -downloading
  music- and reading wall messages. Call `vkq --help` or\n`vkq --help [command]` to
  read online help.\n\n\nLogging in to VK\n----------------\n\nIn order to send API
  requests, the VK client typically needs an access token.\n`vkq` receives it as a
  result of signing in.  Once received, the token may be\nsaved to `VKQ_ACCESS_TOKEN`
  environment variable, into `.vkhs-access-token`\nfile or passed to future instances
  directly using `-a` argument.\n\n#### Saving access token in the environment variable\n\n
  \   $ vkq login user@mail.org pass123\n    d8a41221616ef5ba19537125dc0349bad9d529fa15314ad765911726fe98b15185ac41a7ca2c62f3bf4b9\n
  \   $ export VKQ_ACCESS_TOKEN=d785932b871f096bd73aac6a35d7a7c469dd788d796463a871e5beb5c61bc6c96788ec2\n\nAlternatively,
  using `--eval` option\n\n    $ eval `vkq login user@mail.org pass123 --eval`\n\n####
  Saving access token to file\n\n    $ vkq login --access-token-file=.access-token\n\nVKQ
  will ask for email/password and cache the access token into a file.  Newer\nversions
  of VKHS have `--access-token-flag` option enabled by default. Set it\nto empty value
  to disable the caching feature.\n\n\nPerforming custom API calls\n---------------------------\n\nvkq
  allows user to call arbitrary API method. The format is as follows:\n\n    Usage:
  vkq call [--verbose] [--req-per-sec N] [--interactive] [--appid APPID]\n                    [--user
  USER] [--pass PASS] [-a ACCESS_TOKEN] METHOD PARAMS\n\n\nFor example, lets call
  ausio.search method to get some Beatles records:\n\n    $ vkq call group.search
  q=Beatles --pretty\n\n      { \"response\": [\n        614751,\n        {\n            \"lyrics_id\":
  \"6604412\",\n            \"url\": \"http://cs1-36v4.vk-cdn.net/p16/59674dd8717db2.mp3?extra=k0s2ja3l6pq6aIDOEW5y5XUCs2--JLX9wZpzOT3iuSnZPR-DNhJSF075NUhICB_szMOKKlVJFFlqLlg691q6cKhwiGZgTRU1oAimXzXY396cfNAHnotc8--7w-0xnvoPK6qVoI8\",\n
  \           \"aid\": 85031440,\n            \"title\": \"Twist and Shout  \",\n
  \           \"genre\": 1,\n            \"owner_id\": 9559206,\n            \"duration\":
  156,\n            \"artist\": \"The Beatles\"\n        },\n    ...\n\n\nVKHS library/runhaskell
  mode\n============================\n\nStarting from 1.7.2 the library supports RunHaskell-mode.
  Consider the\nfollowing example:\n\n\n    #!/usr/bin/env runhaskell\n    {-# LANGUAGE
  RecordWildCards #-}\n\n    import Prelude ()\n    import Web.VKHS\n    import Web.VKHS.Imports\n\n
  \   main :: IO ()\n    main = runVK_ defaultOptions $ do\n      Sized cnt cs <-
  getCountries\n      forM_ cs $ \\Country{..} -> do\n        liftIO $ putStrLn co_title\n\nWhen
  executed, the program asks for login/password and outputs list of countries\nknown
  to VK.  `getCountries` and several other methods are defined in\n`Web.VKHS.API.Simple`.
  `vkq` application may be used as a more elaborated\nexample.\n\nDebugging\n=========\n\nVerbosity
  may be increased using `--verbose` flag or `o_verbose` field of\n`GenericOptions`.
  Login automata saves `latest.html` file during operation.\n\nReferences\n==========\n*
  Implicit-flow authentication, see\n  [documentation in Russian](http://vk.com/developers.php?oid=-1&p=Авторизация_клиентских_приложений)\n
  \ for details\n* [VK API documentation](https://vk.com/dev/methods)\n\nLicense\n=======\n\nBSD3
  license\n\nCopyright (c) 2014, Sergey Mironov <grrwlf@gmail.com>\n\n"
license-name: BSD3
