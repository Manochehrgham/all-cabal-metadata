homepage: http://github.com/grwlf/vkhs
changelog-type: markdown
hash: a7cfb21f43d0948f0436d6bdce1a28142260d1b1e1cc60e327d6091265c100b5
test-bench-deps: {}
maintainer: grrwlf@gmail.com
synopsis: Provides access to Vkontakte social network via public API
changelog: ! 'TODO

  ----

  * Decrypt ''RepeatedForm'' errors

  * Show capchas to users if required

  * Re-implement VK monad as a Free monad special case

  * Runhaskell: handle some standard command line arguments

  * Support storing access-tokens in a temp file


  Version 1.7.2

  -------------

  * Initial support for runhaskell mode


  Version 1.7.1

  -------------


  * Support setting IDv2 tags for downloaded audio files

  * CLI: Fix ''call'' command output

  * CLI: Fix ''music'' command naming



  Version 1.6.0

  -------------


  * Use coroutine-based engine, offering smooth error handling

  * Use pipes-http as network backend


'
basic-deps:
  http-client: -any
  bytestring: -any
  case-insensitive: -any
  split: -any
  base: ! '>=4.6 && <5'
  data-default-class: -any
  time: -any
  aeson-pretty: -any
  text: -any
  clock: -any
  filepath: -any
  parsec: -any
  containers: -any
  regexpr: -any
  pipes: -any
  utf8-string: -any
  http-client-tls: -any
  pipes-http: -any
  network-uri: -any
  mtl: -any
  pretty-show: -any
  optparse-applicative: -any
  tagsoup: -any
  http-types: -any
  aeson: -any
  vector: -any
  directory: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.6'
- '0.5.7'
- '1.6.0'
- '1.6.1'
- '1.6.2'
- '1.6.3'
- '1.6.4'
- '1.7.0'
- '1.7.1'
- '1.7.2'
- '1.7.3'
- '1.8'
author: Sergey Mironov
latest: '1.8'
description-type: markdown
description: ! "VKHS\n====\n\nVKHS provides access to [Vkontakte](http://vk.com) social
  network, popular\nmainly in Russia.  Library can be used to login into the network
  as a standalone\napplication (OAuth implicit flow as they call it). Having the access
  token, it\nis possible to call various API methods to query audio files or retrieve
  wall\nmessages. For now, vkhs offers limited error detection and no captcha support.\n\nFeatures\n========\n\n*
  Provide access to VK API. Interface options include: VK monad and `vkq` command\n
  \ line tool.\n* Connection uses HTTPS protocol\n* Automatic login form solving,
  may be used to operate on new/disposable\n  accounts.\n* The VK monad is designed
  as an interruptable coroutine. Default superwiser\n  supports ondemand re-login
  and may be used for long-running tasks.\n* Project includes a set of simplified
  API wrappers which are designed to be\n  copied into `runhaskell` script and tweaked
  according to user needs.\n\nInstalling\n==========\n\nInstalling from Cabal\n---------------------\n\nIn
  order to install VKHS, one typically should do the following\n\n    $ cabal update\n
  \   $ cabal install VKHS\n\nNote, that VKHS uses curlhs and should be linked with
  libcurl.so. Normally,\ncabal handles it without problems.\n\n\nInstalling from source\n----------------------\n\n
  \   $ git clone https://github.com/grwlf/vkhs\n    $ cd vkhs\n    $ cabal install\n\nDeveloping
  using Nix\n--------------------\n\nWe use [Nix](http://nixos.org) as a main development
  platform. In order to open\ndevelopment environment, do the following:\n\n    $
  git clone https://github.com/grwlf/vkhs\n    $ cd vkhs\n    $ nix-shell\n    $ ...\n
  \   $ ghci -isrc:app/vkq:app/common\n    $ cabal build\n\nBuilding ctags file\n-------------------\n\n./mktags.sh
  script may be used to build ctags file. It used `haskdogs` tool,\nwhich should be
  installed from Hackage.\n\n    $ haskdogs\n\n\n\nVKQ command line application\n============================\n\nVKQ
  is a command line tool which demonstrates API usage. It can be used for\nlogging
  in, downloading music and reading wall messages.\n\n\nLog in to VK\n------------\n\nHere
  is an example session: Login first\n\n    $ vkq login user@mail.org pass123\n    d8a41221616ef5ba19537125dc0349bad9d529fa15314ad765911726fe98b15185ac41a7ca2c62f3bf4b9\n\nVKQ
  returns three values. First is a access token which is required to execute\nfuture
  API requests. VKQ reads it from VKQ\\_ACCESS\\_TOKEN environment variable so\nwe
  have to set it up\n\n    $ export VKQ_ACCESS_TOKEN=d785932b871f096bd73aac6a35d7a7c469dd788d796463a871e5beb5c61bc6c96788ec2\n\nVKQ
  may save the access tokein into state file:\n\n    $ vkq login --access-token-file=.access-token\n\n
  \   .. VKQ will ask for email/password and cache the access token\n\n    $ vkq call
  groups.search q=Beatles --pretty --access-token-file=.access-token\n\n\nPerforming
  custom API calls\n---------------------------\n\nvkq allows user to call arbitrary
  API method. The format is as follows:\n\n    Usage: vkq call [--verbose] [--req-per-sec
  N] [--interactive] [--appid APPID]\n                    [--user USER] [--pass PASS]
  [-a ACCESS_TOKEN] METHOD PARAMS\n\n\nFor example, lets call ausio.search method
  to get some Beatles records:\n\n    $ vkq call audio.search q=Beatles --pretty\n\n
  \     { \"response\": [\n        614751,\n        {\n            \"lyrics_id\":
  \"6604412\",\n            \"url\": \"http://cs1-36v4.vk-cdn.net/p16/59674dd8717db2.mp3?extra=k0s2ja3l6pq6aIDOEW5y5XUCs2--JLX9wZpzOT3iuSnZPR-DNhJSF075NUhICB_szMOKKlVJFFlqLlg691q6cKhwiGZgTRU1oAimXzXY396cfNAHnotc8--7w-0xnvoPK6qVoI8\",\n
  \           \"aid\": 85031440,\n            \"title\": \"Twist and Shout  \",\n
  \           \"genre\": 1,\n            \"owner_id\": 9559206,\n            \"duration\":
  156,\n            \"artist\": \"The Beatles\"\n        },\n    ...\n\n\nVKHS library/runhaskell
  mode\n============================\n\nStarting from 1.7.2 there are initial support
  for RunHaskell-mode. Consider the\nfollowing example:\n\n\n    #!/usr/bin/env runhaskell\n
  \   {-# LANGUAGE RecordWildCards #-}\n\n    import Prelude ()\n    import Web.VKHS\n
  \   import Web.VKHS.Imports\n\n    main :: IO ()\n    main = runVK_ defaultOptions
  $ do\n      Sized cnt cs <- getCountries\n      forM_ cs $ \\Country{..} -> do\n
  \       liftIO $ putStrLn co_title\n\nWhen executed, the program should ask for
  login and password and output list of\ncountries known to VK. Consider reviewing
  \ Web.VKHS.API.Simple where\n`getCountries` and several other methods are defined.
  Also, check the source\ncode of the `vkq` application for more elaborated usage
  example.\n\nDebugging\n=========\n\n`RepatedForm` message means that VKHS tries
  to fill the web form with available\ndata, but the form appears again. Typically,
  that means that the password wa\ninvalid or captcha is required.\n\nReferences\n==========\n*
  Implicit-flow authentication, see\n  [documentation in Russian](http://vk.com/developers.php?oid=-1&p=Авторизация_клиентских_приложений)\n
  \ for details\n* [VK API documentation](https://vk.com/dev/methods)\n\nLicense\n=======\n\nBSD3
  license\n\nCopyright (c) 2014, Sergey Mironov <grrwlf@gmail.com>\n\n"
license-name: BSD3
