homepage: http://github.com/danstiner/hfmt
changelog-type: ''
hash: 34cdfe1419c4ef5e769a4708b50f48ff5d5299fd8b30fef67f90c05d4396769b
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: ==4.*
  HUnit: -any
  hfmt: -any
maintainer: Daniel Stiner <daniel.stiner@gmail.com>
synopsis: Haskell source code formatter
changelog: ''
basic-deps:
  hindent: ! '>=4.5'
  hlint: ! '>=1.9.13 && <2'
  ansi-wl-pprint: -any
  Cabal: -any
  base: ! '>=4.8 && <5'
  Diff: -any
  text: -any
  filepath: -any
  HUnit: -any
  haskell-src-exts: -any
  pipes: -any
  hfmt: -any
  optparse-applicative: -any
  pretty: -any
  stylish-haskell: -any
  directory: -any
all-versions:
- '0.0.1.0'
- '0.0.2.0'
- '0.0.2.1'
- '0.0.2.2'
author: Daniel Stiner
latest: '0.0.2.2'
description-type: markdown
description: ! "## hfmt [![Build Status](https://travis-ci.org/danstiner/hfmt.svg?branch=master)](https://travis-ci.org/danstiner/hfmt)\r\n\r\nhfmt
  is a tool for formatting Haskell programs. Currently it is simply a gofmt style
  wrapper of the excellent tools [hlint](https://github.com/ndmitchell/hlint/blob/master/README.md),
  [hindent](https://github.com/chrisdone/hindent#readme), and [stylish-haskell](https://github.com/jaspervdj/stylish-haskell#readme).\r\n\r\n\r\n##
  Installation\r\n\r\n    $ cabal install hfmt\r\n\r\n## Usage\r\n\r\nCheck all Haskell
  source in the current directory:\r\n\r\n    hfmt\r\n\r\nOverwrite any files with
  formatting changes:\r\n\r\n    hfmt -w\r\n\r\n## Help text\r\n\r\n    Î» hfmt --help\r\n
  \   hfmt - format Haskell programs\r\n\r\n    Usage: hfmt.exe [-d|--print-diffs]
  [-s|--print-sources] [-l|--print-paths]\r\n                    [-w|--write-sources]
  [PATH]\r\n      Operates on Haskell source files, reformatting them by applying
  suggestions\r\n      from HLint, hindent, and stylish-haskell. Inspired by the gofmt
  utility.\r\n\r\n    Available options:\r\n      -h,--help                Show this
  help text\r\n      -d,--print-diffs         If a file's formatting is different,
  print a diff.\r\n      -s,--print-sources       If a file's formatting is different,
  print its\r\n                               source.\r\n      -l,--print-paths         If
  a file's formatting is different, print its path.\r\n      -w,--write-sources       If
  a file's formatting is different, overwrite it.\r\n      PATH                     Explicit
  paths to process.\r\n                                - A single '-' will process
  standard input.\r\n                                - Files will be processed directly.\r\n
  \                               - Directories will be recursively searched for\r\n
  \                                 source files to process.\r\n                                -
  .cabal files will be parsed and all specified\r\n                                  source
  directories and files processed.\r\n                                - If no paths
  are given, the current directory will\r\n                                  be searched
  for .cabal files to process, if none\r\n                                  are found
  the current directory will be\r\n                                  recursively searched
  for source files to process."
license-name: MIT
