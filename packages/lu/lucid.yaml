homepage: https://github.com/chrisdone/lucid
changelog-type: markdown
hash: b7dea62aa91b7ef368127e1c83455eb9957873efee1dbd1e62c0de25230325f2
test-bench-deps:
  lucid: -any
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  criterion: -any
  parsec: -any
  HUnit: -any
  blaze-builder: -any
  bifunctors: -any
  mtl: -any
  deepseq: -any
maintainer: chrisdone@gmail.com
synopsis: Clear to write, read and edit DSL for HTML
changelog: ! "## 2.9.1\n\n* Small performance tweaks.\n* Make svg_ an element.\n\n##
  2.6\n\n* Restrict monoid instance's a to ~ () (means you can use mempty\n  without
  inference errors)\n\n## 2.2\n\n* Export renderToFile from top-level Lucid module.\n\n##
  2.1\n\n* Add some extra HTML tags.\n\n## 2.0\n\n* Use variadic HTML terms.\n* Add
  lazy Text instance for ToHtml.\n\n## 1.0\n\n* Initial version.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.5 && <5'
  unordered-containers: -any
  text: -any
  containers: -any
  blaze-builder: -any
  mtl: -any
  hashable: -any
  transformers: -any
all-versions:
- '0.0'
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '1.0'
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- '2.5'
- '2.6.0'
- '2.6.1'
- '2.7.0'
- '2.8.0'
- '2.8.1'
- '2.9.0'
- '2.9.1'
- '2.9.2'
- '2.9.3'
- '2.9.4'
author: Chris Done
latest: '2.9.4'
description-type: markdown
description: ! "lucid [![Hackage](https://img.shields.io/hackage/v/lucid.svg?style=flat)](https://hackage.haskell.org/package/lucid)\n=====\n\nClear
  to write, read and edit DSL for writing HTML\n\n[Documentation](http://chrisdone.github.io/lucid/)\n\n##
  Introduction\n\nHTML terms in Lucid are written with a postfix ‘`_`’ to indicate
  data\nrather than code. Some examples:\n\n`p_`, `class_`, `table_`, `style_`\n\nSee
  `Lucid.Html5` for a complete list of Html5 combinators.\n\nPlain text is written
  using the `OverloadedStrings` and\n`ExtendedDefaultRules` extensions, and is automatically
  escaped:\n\n``` haskell\nλ> \"123 < 456\" :: Html ()\n```\n\n``` html\n123 &lt;
  456\n```\n\nElements nest by function application:\n\n``` haskell\nλ> table_ (tr_
  (td_ (p_ \"Hello, World!\"))) :: Html ()\n```\n\n``` html\n<table><tr><td><p>Hello,
  World!</p></td></tr></table>\n```\n\nElements are juxtaposed via monoidal append:\n\n```
  haskell\nλ> p_ \"hello\" <> p_ \"sup\" :: Html ()\n```\n\n``` html\n<p>hello</p><p>sup</p>\n```\n\nOr
  monadic sequencing:\n\n``` haskell\nλ> div_ (do p_ \"hello\"; p_ \"sup\") :: Html
  ()\n```\n\n``` html\n<div><p>hello</p><p>sup</p></div>\n```\n\nAttributes are set
  by providing an argument list:\n\n``` haskell\nλ> p_ [class_ \"brand\"] \"Lucid
  Inc\" :: Html ()\n```\n\n``` html\n<p class=\"brand\">Lucid Inc</p>\n```\n\nHere
  is a fuller example of Lucid:\n\n``` haskell\ntable_ [rows_ \"2\"]\n       (tr_
  (do td_ [class_ \"top\",colspan_ \"2\",style_ \"color:red\"]\n                    (p_
  \"Hello, attributes!\")\n                td_ \"yay!\"))\n```\n\n``` html\n<table
  rows=\"2\">\n  <tr>\n    <td style=\"color:red\" colspan=\"2\" class=\"top\">\n
  \     <p>Hello, attributes!</p>\n    </td>\n    <td>yay!</td>\n  </tr>\n</table>\n```\n\n##
  Rendering\n\nFor proper rendering you can easily run some HTML immediately with:\n\n```
  haskell\nλ> renderText (p_ \"Hello!\")\n```\n\n``` html\n\"<p>Hello!</p>\"\n```\n\nOr
  to bytes:\n\n``` haskell\nλ> renderBS (p_ [style_ \"color:red\"] \"Hello!\")\n```\n\n```
  html\n\"<p style=\\\"color:red\\\">Hello!</p>\"\n```\n\nFor ease of use in GHCi,
  there is a `Show` instance, as\ndemonstrated above.\n\nIf the above rendering functions
  aren't suited for your purpose, you\ncan run the monad directly via `execHtml` and
  use the more low-level\nblaze `Builder`, which has a plethora of output modes in\nBlaze.ByteString.Builder.\n\nSee
  the documentation for the `Lucid` module for information about\nusing it as a monad
  transformer.\n\n## Transforming\n\nYou can use `lift` to call parent monads.\n\n```
  haskell\nλ> runReader (renderTextT (html_ (body_ (do name <- lift ask\n                                            p_
  [class_ \"name\"] (toHtml name)))))\n             (\"Chris\" :: String)\n```\n```
  html\n\"<html><body><p class=\\\"name\\\">Chris</p></body></html>\"\n```\n"
license-name: BSD3
