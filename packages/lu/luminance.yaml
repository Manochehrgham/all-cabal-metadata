homepage: https://github.com/phaazon/luminance
changelog-type: markdown
hash: f1f674978af998363225bb83a6ac3425941a1ceeb022bc9200a2d1bd925c4e5e
test-bench-deps: {}
maintainer: Dimitri Sabadie <dimitri.sabadie@gmail.com>
synopsis: Type-safe, type-level and stateless graphics framework
changelog: ! "### 0.6.0.1\n\n- Fixed `(:*:)` for `UniformBlock`.\n- Dumped the `Storable`
  constraint in the `uniBlock` function (rank2 function passed to build\n  uniform
  interfaces to `createProgram`).\n- Added `(:.)`, `(,)`, `(,,)` and `(,,,)` into
  `UniformBlock`.\n\n# 0.6\n\n#### Breaking changes\n\n- Added a new function to the
  `createProgram` and `createProgram_` uniform interface builder\n  argument. That
  function can now be used to retrieve `U (Region rw (UB a))`, which is a *UBO*.\n-
  The uniform interface creation is not performed in a arbitrary, user-defined monad
  anymore. A\n  dedicated type was introduced for that very purpose – `UniformInterface`
  – constraining the user\n  to only use the uniformize functions to map semantics
  to `U` values.\n\n#### Non-breaking changes\n\n- Added `UB`, which can be used along
  with `Buffer` to create *UBO* buffers and pass them to\n  shaders.\n\n### 0.5.2.1\n\n-
  Relaxed lower bound of `linear` to accept `linear-1.19.*`. That changes should enable
  `lumimance`\n  to be included into stackage.\n- Changed internal representation
  of `Region`.\n\n## 0.5.2\n\n#### Non-breaking changes\n\n- Added texture arrays:\n
  \   + `Texture1DArray`\n    + `Texture2DArray`\n    + `CubemapArray`\n\n## 0.5.1\n\n####
  Non-breaking changes\n\n- Added several `Uniform` instances for [linear](http://hackage.haskell.org/package/linear).\n\n####
  Patch changes\n\n- Fixed the indexed render.\n- Fixed the vertex attributes being
  ignored.\n\n### 0.5\n\n#### Breaking changes\n\n- Changed the interface of texels
  transfer and filling. We dropped the `Foldable` instance and now\n  require a `Data.Vector.Storable.Vector`
  for performance purposes.\n\n#### Non-breaking changes\n\n- Added `MirrorRepeat`
  constructor to `Wrap`.\n\n#### Patch changes\n\n- Fixed prerequisites in README.\n\n##
  0.4.1\n\n- Fixed the `sizeOf` implementation of `a :. b`.\n- Added `nubDirect`,
  which can be used to turn *direct geometry* into *indirect geometry*.\n\n# 0.4\n\n####
  Non-breaking changes\n\n- Added .gitignore.\n\n#### Breaking changes\n\n- `V2`,
  `V3` and `V4` replaced by `vec2`, `vec3` and `vec4`.\n- `V` is not anymore luminance’s.
  We use linear’s one, because it already has all the instances we\n  need and is
  more generic. The interface is then impacted.\n\n## 0.3.2\n\n- Added Core.Tuple
  into the export liste of Luminance for easier uses in client code space.\n\n###
  0.3.1.2\n\n- Fixed Geometry haddock documentation.\n\n### 0.3.1.1\n\n- Fixed haddock
  escaping issues.\n\n## 0.3.1\n\n- Added `CubeFace` in the interface.\n\n### 0.3.0.1\n\n-
  Enhanced Texture documentation.\n\n# 0.3\n\n- All textures can now be used in shaders.\n-
  Added support for more OpenGL textures – though, framebuffers are not impacted yet.\n
  \   - `Texture1D`\n    - `Texture2D`\n    - `Texture3D`\n    - `Cubemap`\n- Changed
  the texture interface with type families so that we can add more in an\n  easier
  way!\n\n# 0.2\n\n#### Breaking changes\n\n- Automatically insert GLSL pragmas in
  shaders.\n\n#### Non-breaking changes\n\n- Added documentation for RenderCmd.\n-
  Added stdRenderCmd_.\n- Added shaderProgramBatch_.\n\n### 0.1.1.1\n\n- Fixed a typo
  in the Graphics.Luminance documentation.\n\n## 0.1.1\n\n- Added a tutoral in Graphics.Luminance.\n\n#
  0.1\n\n- Initial revision. Do not consider this revision as a stable release. It’s
  experimental. The\n  first stable release will be **1.0**.\n"
basic-deps:
  void: ! '>=0.7 && <0.8'
  base: ! '>=4.8 && <4.9'
  dlist: ! '>=0.7 && <0.8'
  semigroups: ! '>=0.16 && <0.17'
  containers: ! '>=0.5 && <0.6'
  contravariant: ! '>=1.3 && <1.4'
  linear: ! '>=1.19 && <1.21'
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.4 && <0.5'
  gl: ! '>=0.7 && <0.8'
  resourcet: ! '>=1.1 && <1.2'
  vector: ! '>=0.11 && <0.12'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.1.1'
- '0.2'
- '0.3'
- '0.3.0.1'
- '0.3.1'
- '0.3.1.1'
- '0.3.1.2'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.2.1'
- '0.6'
- '0.6.0.1'
author: Dimitri Sabadie <dimitri.sabadie@gmail.com>
latest: '0.6.0.1'
description-type: haddock
description: ! 'This package exposes several modules to work with /GPUs/ in a stateless
  and

  type-safe way. Currently, it uses OpenGL as backend hardware technology but

  others will be added later on, such as Vulkan.


  The initial unstable version is /0.1/. Consider everything in that version as

  part of an experiment, even though the library should be free of bugs. If you

  find any, please report an issue. If you think something could be enhanced,

  feel free to fill in an issue as well.


  One very important point is the fact that luminance has nothing to do with

  /3D engines/ or /scene development kits/. Don’t expect to find /materials/,

  /lights/ or /mesh/ loaders. It’s just a graphics framework initiated to fix the

  design choices of OpenGL. It won’t change in any other way.


  luminance is a small yet powerful graphics API. It was designed so that

  people can quickly get their feet wet and start having fun with graphics in

  /Haskell/. The main idea is to unleash the graphical and visual properties of

  /GPUs/ in a stateless and type-safe way.


  This library doesn’t expose any architectural patterns or designs. It’s up to

  you to design your program as you want and following your own plans.'
license-name: BSD3
