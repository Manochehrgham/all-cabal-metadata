homepage: http://haskell-servant.readthedocs.org/
changelog-type: markdown
hash: e976fab93422c231b14501ad679cbcf68b631e456e69f23c332bfb0f15d26f08
test-bench-deps:
  servant-docs: -any
  base: -any
  hspec: -any
  servant: -any
  lens: -any
  string-conversions: -any
  aeson: -any
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: generate API docs for your servant webservice
changelog: ! '0.7.1

  -----


  * Support GHC 8.0


  0.7

  ---


  * Use `throwError` instead of `throwE` in documentation


  0.5

  ----


  * Support for the `HttpVersion`, `IsSecure`, `RemoteHost` and `Vault` combinators

  * Support maximum samples setting with new `DocOptions` type (used by `docsWithOptions`
  and `docsWith`)

  * Remove redundant second parameter of ToSample

  * Add Generic-based default implementation for `ToSample` class

  * Add more `ToSamples` instances: `Bool`, `Ordering`, tuples (up to 7), `[]`, `Maybe`,
  `Either`, `Const`, `ZipList` and some monoids

  * Move `toSample` out of `ToSample` class

  * Add a few helper functions to define `toSamples`

  * Remove matrix params.

  * Added support for Basic authentication


  0.4

  ---

  * `Delete` now is like `Get`, `Post`, `Put`, and `Patch` and returns a response
  body

  * Allow for extra information to be added to the docs

  * Support content-type aware combinators of *servant-0.4*

  * Render endpoints in a canonical order (https://github.com/haskell-servant/servant-docs/pull/15)

  * Remove ToJSON superclass from ToSample

  * Split out Internal module

  * Add support for response headers

  * Allow `ToSample` to return a different type than it''s arguments

  * Add Proxy argument to `ToSample`


  0.3

  ---


  * Add the ability to display multiple responses, with some accompanying `Text` to
  describe the context in which we get the corresponding JSON.

  * Expose the `headers` lens

  * Represent an endpoint''s path as `[String]` (previously `String`), fixing a corner
  case where the leading `/` would be missing.

'
basic-deps:
  servant-docs: -any
  bytestring: -any
  bytestring-conversion: -any
  case-insensitive: -any
  base: ! '>=4.7 && <5'
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  servant: ==0.8.*
  lens: -any
  control-monad-omega: ==0.3.*
  hashable: -any
  string-conversions: -any
  http-types: ! '>=0.7'
  aeson: -any
  http-media: ! '>=0.6'
all-versions:
- '0.2'
- '0.2.1'
- '0.3'
- '0.3.1'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.4'
- '0.4.4.2'
- '0.4.4.3'
- '0.4.4.4'
- '0.4.4.5'
- '0.4.4.6'
- '0.4.4.7'
- '0.5'
- '0.6'
- '0.6.1'
- '0.7'
- '0.7.1'
- '0.8'
author: Servant Contributors
latest: '0.8'
description-type: markdown
description: ! "# servant-docs\n\n![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)\n\nGenerate
  API docs for your *servant* webservice. Feel free to also take a look at [servant-pandoc](https://github.com/mpickering/servant-pandoc)
  which uses this package to target a broad range of output formats using the excellent
  **pandoc**.\n\n## Example\n\nSee [here](https://github.com/haskell-servant/servant/blob/master/servant-docs/example/greet.md)
  for the output of the following program.\n\n``` haskell\n{-# LANGUAGE DataKinds
  #-}\n{-# LANGUAGE PolyKinds #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE DeriveGeneric
  #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE
  OverloadedStrings #-}\n\nimport Data.Proxy\nimport Data.Text\nimport Servant\n\n--
  our type for a Greeting message\ndata Greet = Greet { _msg :: Text }\n  deriving
  (Generic, Show)\n\n-- we get our JSON serialization for free. This will be used
  by the default\n-- 'MimeRender' instance for 'JSON'.\ninstance FromJSON Greet\ninstance
  ToJSON Greet\n\n-- We can also implement 'MimeRender' explicitly for additional
  formats.\ninstance MimeRender PlainText Greet where\n    mimeRender Proxy (Greet
  s) = \"<h1>\" <> cs s <> \"</h1>\"\n\n-- we provide a sample value for the 'Greet'
  type\ninstance ToSample Greet where\n  toSample = Just g\n\n    where g = Greet
  \"Hello, haskeller!\"\n\ninstance ToParam (QueryParam \"capital\" Bool) where\n
  \ toParam _ =\n    DocQueryParam \"capital\"\n                  [\"true\", \"false\"]\n
  \                 \"Get the greeting message in uppercase (true) or not (false).
  Default is false.\"\n\ninstance ToCapture (Capture \"name\" Text) where\n  toCapture
  _ = DocCapture \"name\" \"name of the person to greet\"\n\ninstance ToCapture (Capture
  \"greetid\" Text) where\n  toCapture _ = DocCapture \"greetid\" \"identifier of
  the greet msg to remove\"\n\n-- API specification\ntype TestApi =\n       \"hello\"
  :> Capture \"name\" Text :> QueryParam \"capital\" Bool :> Get '[JSON,PlainText]
  Greet\n  :<|> \"greet\" :> RQBody '[JSON] Greet :> Post '[JSON] Greet\n  :<|> \"delete\"
  :> Capture \"greetid\" Text :> Delete '[] ()\n\ntestApi :: Proxy TestApi\ntestApi
  = Proxy\n\n-- Generate the Documentation's ADT\ngreetDocs :: API\ngreetDocs = docs
  testApi\n\nmain :: IO ()\nmain = putStrLn $ markdown greetDocs\n```\n"
license-name: BSD3
