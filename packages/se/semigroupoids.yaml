homepage: http://github.com/ekmett/semigroupoids
changelog-type: ''
hash: 8650dac040d311873e93832179add578e3d2524eb60b7422f32ec086ab2cfb78
test-bench-deps:
  base: ! '>=4.6 && <5'
  filepath: -any
  doctest: ! '>=0.9.1 && <0.10'
  directory: ! '>=1.0'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: ! 'Semigroupoids: Category sans id'
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5'
  comonad: ! '>=4 && <5'
  distributive: ! '>=0.2.2 && <1'
  semigroups: ! '>=0.8.3.1 && <1'
  base-orphans: ! '>=0.3 && <1'
  containers: ! '>=0.3 && <0.6'
  contravariant: ! '>=0.2.0.1 && <2'
  transformers: ! '>=0.2 && <0.6'
  transformers-compat: ! '>=0.3 && <0.5'
all-versions:
- '1.0.0'
- '1.1.0'
- '1.1.1'
- '1.1.2'
- '1.1.3'
- '1.2.0'
- '1.2.1'
- '1.2.2'
- '1.2.2.1'
- '1.2.2.2'
- '1.2.2.3'
- '1.2.2.4'
- '1.2.4'
- '1.2.5'
- '1.2.6'
- '1.2.6.1'
- '1.2.6.2'
- '1.3'
- '1.3.1'
- '1.3.1.1'
- '1.3.1.2'
- '1.3.2'
- '1.3.2.1'
- '1.3.3'
- '1.3.4'
- '3.0'
- '3.0.0.1'
- '3.0.0.2'
- '3.0.1'
- '3.0.2'
- '3.0.3'
- '3.1'
- '4.0'
- '4.0.1'
- '4.0.2'
- '4.0.2.1'
- '4.0.3'
- '4.0.4'
- '4.2'
- '4.3'
- '4.5'
author: Edward A. Kmett
latest: '4.5'
description-type: haddock
description: ! 'Provides a wide array of (semi)groupoids and operations for working
  with them.


  A ''Semigroupoid'' is a ''Category'' without the requirement of identity arrows
  for every object in the category.


  A ''Category'' is any ''Semigroupoid'' for which the Yoneda lemma holds.


  When working with comonads you often have the @\<*\>@ portion of an @Applicative@,
  but

  not the @pure@. This was captured in Uustalu and Vene''s \"Essence of Dataflow Programming\"

  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides
  a weaker invariant, but for the comonads used for data flow programming (found in
  the streams package), this invariant is preserved. Applicative function composition
  forms a semigroupoid.


  Similarly many structures are nearly a comonad, but not quite, for instance lists
  provide a reasonable ''extend'' operation in the form of ''tails'', but do not always
  contain a value.


  Ideally the following relationships would hold:


  > Foldable ----> Traversable <--- Functor ------> Alt ---------> Plus           Semigroupoid

  >      |               |            |                              |                  |

  >      v               v            v                              v                  v

  > Foldable1 ---> Traversable1     Apply --------> Applicative -> Alternative      Category

  >                                   |               |              |                  |

  >                                   v               v              v                  v

  >                                 Bind ---------> Monad -------> MonadPlus          Arrow

  >


  Apply, Bind, and Extend (not shown) give rise the Static, Kleisli and Cokleisli
  semigroupoids respectively.


  This lets us remove many of the restrictions from various monad transformers

  as in many cases the binding operation or @\<*\>@ operation does not require them.


  Finally, to work with these weaker structures it is beneficial to have containers

  that can provide stronger guarantees about their contents, so versions of ''Traversable''

  and ''Foldable'' that can be folded with just a ''Semigroup'' are added.'
license-name: BSD3
