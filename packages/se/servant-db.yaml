homepage: ''
changelog-type: markdown
hash: 4bba70e55967e4d6796f9a0e0707f6ff54b1b92ea2e0f0324f427eab5b611328
test-bench-deps: {}
maintainer: ncrashed@gmail.com
synopsis: Servant types for defining API with relational DBs
changelog: ! "0.2.1.0\n=======\n\n* Add `Default` type.\n\n0.2.0.0\n=======\n\n* Split
  `Arg` to `ArgNamed` and `ArgPos`. \n\n0.1.0.0\n=======\n\n* Initial release\n"
basic-deps:
  base: ! '>=4.7 && <5'
  servant: ! '>=0.2 && <0.10'
all-versions:
- '0.2.0.0'
author: Anton Gushcha
latest: '0.2.0.0'
description-type: markdown
description: ! "servant-db\n==========\n\nThe idea of package is to provide [servant](http://haskell-servant.readthedocs.io/en/stable/)-like
  \nDSL for specifying an API for functions stored in RDBMS. \n\n``` haskell\ndata
  RegisterUser = RegisterUser {\n  userName :: Text\n, userPassword :: Text\n, userPhone
  :: Phone\n, userEmail :: Email\n}\n\ntype API = \n       ArgNamed \"user\" RegisterUser\n
  \   :> ArgNamed \"isAdmin\" Bool\n    :> Procedure \"registerUser\" (Maybe (Only
  UserId))\n  :<|> ArgPos UserId\n    :> Procedure \"getUser\" (Maybe User)\n  :<|>
  Procedure \"listUsers\" [User]\n```\n\nThe library adds three custom combinators:\n*
  `ArgNamed name a` - named argument of stored function of type `a`.\n\n* `ArgPos
  a` - unamed argument of stored function of type `a`.\n\n* `Procedure name a` - named
  stored function with return type `a`. \n\nRelated libraries:\n\n* [servant-db-postgresql](https://github.com/NCrashed/servant-db-postgresql)
  - \n    derives client for PostgreSQL with [postgresql-query](postgresql-query)
  library.\n"
license-name: BSD3
