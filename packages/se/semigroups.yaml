changelog-type: markdown
hash: 8c4b7e5035bd45d8f057bc70d0814c47c0c1c6034cb8599f3840e3edb9124936
test-bench-deps: {}
synopsis: Anything that associates
changelog: ! "0.16.2.2\n--------\n* Cleaned up imports to remove warnings on GHC 7.10.\n\n0.16.2.1\n--------\n*
  Restored the ability to build on GHC < 7.6. (`Generic1` deriving was only added
  in GHC 7.6)\n\n0.16.2\n------\n* Added `genericMappend` and supporting `GSemigroup`
  class for generically deriving Semigroup instances.\n* Added `Arg a b` which only
  compares for equality/order on its first argument, which can be used to compute
  `argmin` and `argmax`.\n* Add `Bifunctor` `Arg` instance to avoid orphans for GHC
  7.10+.\n* Added missing `Data.Monoid.Generic` module to source control.\n\n0.16.1\n------\n*
  Added `Semigroup` instances for various Builder constructions in `text` and `bytestring`
  where available.\n* Added `MonadFix` and `MonadPlus` instances for `NonEmpty`.\n\n0.16.0.1\n--------\n*
  Bumped `deepseq` version bound for GHC 7.10 compatibility.\n\n0.16\n----\n* `times1p`
  and `timesN` are now reduced to accepting only a `Natural` argument. `Whole` doesn't
  exist in GHC 7.10's Numeric.Natural, and `nats` version 1 has removed support for
  the class.\n\n0.15.4\n------\n* Use `Data.Coerce.coerce` on GHC 7.8+ to reduce the
  number of eta-expansions in the resulting core.\n* Avoid conflict with pending `Foldable.length`
  in base.\n\n0.15.3\n------\n* `instance NFData a => NFData (NonEmpty a)`\n* Added
  `NFData` instances for the types in Data.Semigroup\n\n0.15.2\n------\n* Fixed a
  Trustworthiness problem for GHC 7.8+\n\n0.15.1\n------\n* Nathan van Doorn fixed
  a number of embarassing bugs in the `Enum` instances.\n\n0.15\n----\n* `instance
  IsList NonEmpty`\n\n0.14\n----\n* Allow for manual removal of dependencies to support
  advanced sandbox users who explicitly want to avoid compiling certain dependencies\n
  \ they know they aren't using.\n\n  We will fix bugs caused by any combination of
  these package flags, but the API of the package should be considered the default
  build\n  configuration with all of the package dependency flags enabled.\n\n* Will
  now build as full-fledged `Safe` Haskell if you configure with -f-hashable.\n\n*
  Added some missing `Generic`/`Generic`/`Hashable` instances\n\n0.13.0.1\n--------\n*
  `Generic` support requires `ghc-prim` on GHC 7.4.\n\n0.13\n----\n* Added instances
  for 'Generic', 'Foldable', 'Traversable', 'Enum', 'Functor', 'Hashable', 'Applicative',
  'Monad' and 'MonadFix'\n\n0.12.2\n------\n* Vastly widened the dependency bound
  on `text` and `bytestring`.\n\n0.12.1\n-------\n* Updated to support the new version
  of `text`.\n* Added `transpose`, `sortBy` and `sortWith`.\n\n0.12\n----\n* Added
  an instance for `Const r`.\n* Added `some1`\n\n0.11\n----\n* Added the missing instance
  for `HashSet`.\n\n0.10\n----\n* Added support for `unordered-containers`, `bytestring`
  and `text`.\n\n0.9.2\n-----\n* Added a `DefaultSignature` for `(<>)` in terms of
  `mappend`.\n\n\n0.9.1\n-----\n* Added `timesN`.\n\n0.9\n---\n* Moved `Numeric.Natural`
  to a separate `nats` package.\n"
basic-deps:
  bytestring: ! '>=0.9 && <1'
  base: ! '>=2 && <5'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=0.10 && <2'
  containers: ! '>=0.3 && <0.6'
  hashable: ! '>=1.1 && <1.3'
  nats: ! '>=0.1 && <2'
  deepseq: ! '>=1.1 && <1.5'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.4.1'
- '0.3.4.2'
- '0.4.0'
- '0.5.0'
- '0.5.0.1'
- '0.5.0.2'
- '0.6'
- '0.6.1'
- '0.7.0'
- '0.7.1'
- '0.7.1.1'
- '0.7.1.2'
- '0.8'
- '0.8.0.1'
- '0.8.2'
- '0.8.3'
- '0.8.3.1'
- '0.8.3.2'
- '0.8.4'
- '0.8.4.1'
- '0.8.5'
- '0.9'
- '0.9.1'
- '0.9.2'
- '0.10'
- '0.11'
- '0.12'
- '0.12.0.1'
- '0.12.1'
- '0.12.2'
- '0.13'
- '0.13.0.1'
- '0.14'
- '0.15'
- '0.15.1'
- '0.15.2'
- '0.15.3'
- '0.15.4'
- '0.16'
- '0.16.0.1'
- '0.16.1'
- '0.16.2'
- '0.16.2.1'
- '0.16.2.2'
latest: '0.16.2.2'
description-type: markdown
description: ! 'semigroups

  ==========


  [![Build Status](https://secure.travis-ci.org/ekmett/semigroups.png?branch=master)](http://travis-ci.org/ekmett/semigroups)


  Haskellers are usually familiar with monoids. A monoid has an appending operation
  `<>` or `mappend` and an identity element `mempty`. A Semigroup has an append `<>`,
  but does not require an `mempty` element. A Monoid can be made a Semigroup with
  just `instance Semigroup MyMonoid`


  More formally, a semigroup is an algebraic structure consisting of a set together
  with an associative binary operation. A semigroup generalizes a monoid in that there
  might not exist an identity element. It also (originally) generalized a group (a
  monoid with all inverses) to a type where every element did not have to have an
  inverse, thus the name semigroup.


  Semigroups appear all over the place, except in the Haskell Prelude, so they are
  packaged here.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
