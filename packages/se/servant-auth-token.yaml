homepage: https://github.com/ncrashed/servant-auth-token#readme
changelog-type: markdown
hash: b50dc4366212caf04c6142f94e58642e35f47fef85341ca9babe2b45adac5297
test-bench-deps: {}
maintainer: ncrashed@gmail.com
synopsis: Servant based API and server for token based authorisation
changelog: ! '0.4.7.1

  =======


  * Relax `servant` and `servant-server` versions.


  0.4.7.0

  =======


  * Make `withAuthToken` work properly.


  0.4.6.0

  =======


  * Add `withAuthToken` to guard groups of endpoints.


  0.4.5.0

  =======


  * Auto deriving `HasAuthConfig` and `HasStorage` for transformers.


  0.4.4.1

  =======


  * `persistent-postgresql` is not actually used


  0.4.4.0

  =======


  * Add `signinByHashUnsafe` for internal usage.


  0.4.3.0

  =======


  * Implementation for `AuthFindUserByLogin` endpoint.

  * Feature to manipulate with hashes of passwords. For instance, now you can store

  hashed admin password in config.


  0.4.2.0

  =======


  * Add implementation for `AuthCheckPermissionsMethod` and `AuthGetUserIdMethod`
  endpoints.


  0.4.1.1

  =======


  * Relax `aeson` and `opt-parse-applicative` bounds.

  * Add `monad-control` instances.


  0.4.1.0

  =======


  * Remove persistent dependencies from abstract package.


  0.4.0.0

  =======


  * Abstract over storage: persistent and acid-state backends.


  0.3.2.0

  =======


  * Support lts-7.1 (ghc 8 and persistent-0.6)


  0.3.0.0

  =======


  * Add authorisation by single usage codes.


  0.2.0.1

  =======


  * Relax boundaries for ghc 8.0.1.


  0.2.0.0

  =======


  * Implement `servant-auth-token-0.2.0.0` API.


  0.1.2.0

  =======


  * Expose implementation of API for embedding in complex servers.


  0.1.1.0

  =======


  * Added `restoreCodeGenerator` to configuration


  0.1.0.0

  =======


  * Initial publication

'
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  servant-auth-token-api: ! '>=0.4.2 && <0.5'
  base: ! '>=4.8 && <5'
  time: ! '>=1.5 && <1.7'
  text: ! '>=1.2 && <1.3'
  uuid: ! '>=1.3 && <1.4'
  servant-server: ! '>=0.9 && <0.12'
  aeson-injector: ! '>=1.0.4 && <1.1'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <2.3'
  pwstore-fast: ! '>=2.4 && <2.5'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.1.0'
- '0.3.2.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.1.1'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.4.0'
- '0.4.4.1'
- '0.4.5.0'
- '0.4.7.0'
- '0.4.7.1'
author: ! 'Anton Gushcha <ncrashed@gmail.com>

  , Ivan Lazar Miljenovic <Ivan.Miljenovic@gmail.com>'
latest: '0.4.7.1'
description-type: markdown
description: ! "# servant-auth-token\n\n[![Build Status](https://travis-ci.org/NCrashed/servant-auth-token.svg?branch=master)](https://travis-ci.org/NCrashed/servant-auth-token)\n\nThe
  repo contains server implementation of [servant-auth-token-api](https://github.com/NCrashed/servant-auth-token-api).\n\n#
  How to add to your server\n\nAt the moment you have two options for backend storage:\n\n-
  [persistent backend](https://github.com/NCrashed/servant-auth-token/tree/master/servant-auth-token-persistent)
  - [persistent](https://hackage.haskell.org/package/persistent) backend, simple to
  integrate with your app.\n\n- [acid-state backend](https://github.com/NCrashed/servant-auth-token/tree/master/servant-auth-token-acid)
  - [acid-state](https://hackage.haskell.org/package/acid-state) backend is light
  solution for in memory storage, but it is more difficult to integrate it with your
  app.\n\n- Possible candidates for other storage backends: VCache, leveldb, JSON
  files. To see how to implement them, see [HasStorage](https://github.com/NCrashed/servant-auth-token/blob/master/src/Servant/Server/Auth/Token/Model.hs#L220)
  type class.\n\nNow you can use 'guardAuthToken' to check authorization headers in
  endpoints of your server:\n\n``` haskell\n-- | Read a single customer from DB\ncustomerGet
  :: CustomerId -- ^ Customer unique id\n  -> MToken '[\"customer-read\"] -- ^ Required
  permissions for auth token\n  -> ServerM Customer -- ^ Customer data\ncustomerGet
  i token = do\n  guardAuthToken token\n  runDB404 \"customer\" $ getCustomer i\n```\n"
license-name: BSD3
