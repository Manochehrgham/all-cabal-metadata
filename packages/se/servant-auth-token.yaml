homepage: https://github.com/ncrashed/servant-auth-token#readme
changelog-type: markdown
hash: aa47e512c819d274487151a04bec381b42d13de805243fb27eff57c9c7c41bea
test-bench-deps: {}
maintainer: ncrashed@gmail.com
synopsis: Servant based API and server for token based authorisation
changelog: ! "0.4.7.0\r\n=======\r\n\r\n* Make `withAuthToken` work properly.\r\n\r\n0.4.6.0\r\n=======\r\n\r\n*
  Add `withAuthToken` to guard groups of endpoints.\r\n\r\n0.4.5.0\r\n=======\r\n\r\n*
  Auto deriving `HasAuthConfig` and `HasStorage` for transformers.\r\n\r\n0.4.4.1\r\n=======\r\n\r\n*
  `persistent-postgresql` is not actually used\r\n\r\n0.4.4.0\r\n=======\r\n\r\n*
  Add `signinByHashUnsafe` for internal usage.\r\n\r\n0.4.3.0\r\n=======\r\n\r\n*
  Implementation for `AuthFindUserByLogin` endpoint.\r\n* Feature to manipulate with
  hashes of passwords. For instance, now you can store\r\nhashed admin password in
  config.\r\n\r\n0.4.2.0\r\n=======\r\n\r\n* Add implementation for `AuthCheckPermissionsMethod`
  and `AuthGetUserIdMethod` endpoints.\r\n\r\n0.4.1.1\r\n=======\r\n\r\n* Relax `aeson`
  and `opt-parse-applicative` bounds.\r\n* Add `monad-control` instances.\r\n\r\n0.4.1.0\r\n=======\r\n\r\n*
  Remove persistent dependencies from abstract package.\r\n\r\n0.4.0.0\r\n=======\r\n\r\n*
  Abstract over storage: persistent and acid-state backends.\r\n\r\n0.3.2.0\r\n=======\r\n\r\n*
  Support lts-7.1 (ghc 8 and persistent-0.6)\r\n\r\n0.3.0.0\r\n=======\r\n\r\n* Add
  authorisation by single usage codes.\r\n\r\n0.2.0.1\r\n=======\r\n\r\n* Relax boundaries
  for ghc 8.0.1.\r\n\r\n0.2.0.0\r\n=======\r\n\r\n* Implement `servant-auth-token-0.2.0.0`
  API.\r\n\r\n0.1.2.0\r\n=======\r\n\r\n* Expose implementation of API for embedding
  in complex servers.\r\n\r\n0.1.1.0\r\n=======\r\n\r\n* Added `restoreCodeGenerator`
  to configuration\r\n\r\n0.1.0.0\r\n=======\r\n\r\n* Initial publication\r\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  servant-auth-token-api: ! '>=0.4.2 && <0.5'
  base: ! '>=4.8 && <5'
  time: ! '>=1.5 && <1.7'
  text: ! '>=1.2 && <1.3'
  uuid: ! '>=1.3 && <1.4'
  servant-server: ! '>=0.9 && <0.10'
  aeson-injector: ! '>=1.0.4 && <1.1'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <2.3'
  pwstore-fast: ! '>=2.4 && <2.5'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.1.0'
- '0.3.2.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.1.1'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.4.0'
- '0.4.4.1'
- '0.4.5.0'
- '0.4.7.0'
author: ! 'Anton Gushcha <ncrashed@gmail.com>

  , Ivan Lazar Miljenovic <Ivan.Miljenovic@gmail.com>'
latest: '0.4.7.0'
description-type: markdown
description: ! "# servant-auth-token\r\n\r\n[![Build Status](https://travis-ci.org/NCrashed/servant-auth-token.svg?branch=master)](https://travis-ci.org/NCrashed/servant-auth-token)\r\n\r\nThe
  repo contains server implementation of [servant-auth-token-api](https://github.com/NCrashed/servant-auth-token-api).\r\n\r\n#
  How to add to your server\r\n\r\nAt the moment you have two options for backend
  storage:\r\n\r\n- [persistent backend](https://github.com/NCrashed/servant-auth-token/tree/master/servant-auth-token-persistent)
  - [persistent](https://hackage.haskell.org/package/persistent) backend, simple to
  integrate with your app.\r\n\r\n- [acid-state backend](https://github.com/NCrashed/servant-auth-token/tree/master/servant-auth-token-acid)
  - [acid-state](https://hackage.haskell.org/package/acid-state) backend is light
  solution for in memory storage, but it is more difficult to integrate it with your
  app.\r\n\r\n- Possible candidates for other storage backends: VCache, leveldb, JSON
  files. To see how to implement them, see [HasStorage](https://github.com/NCrashed/servant-auth-token/blob/master/src/Servant/Server/Auth/Token/Model.hs#L220)
  type class.\r\n\r\nNow you can use 'guardAuthToken' to check authorization headers
  in endpoints of your server:\r\n\r\n``` haskell\r\n-- | Read a single customer from
  DB\r\ncustomerGet :: CustomerId -- ^ Customer unique id\r\n  -> MToken '[\"customer-read\"]
  -- ^ Required permissions for auth token\r\n  -> ServerM Customer -- ^ Customer
  data\r\ncustomerGet i token = do\r\n  guardAuthToken token\r\n  runDB404 \"customer\"
  $ getCustomer i\r\n```\r\n"
license-name: BSD3
