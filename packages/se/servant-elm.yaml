homepage: http://github.com/mattjbray/servant-elm#readme
changelog-type: markdown
hash: 9acb22d4b3005d76878d19eae890396456a8f6fd3b3977beb0db934ab2268e77
test-bench-deps:
  base: -any
  hspec: -any
  servant-elm: -any
  data-default: -any
  servant: -any
  elm-export: -any
  aeson: -any
maintainer: mattjbray@gmail.com
synopsis: Automatically derive Elm functions to query servant webservices.
changelog: ! '0.1.0.2

  -------

  * Fix for API endpoints that return Unit (kantp)


  0.1.0.1

  -------

  * Convenience re-exports from Elm and Data.Proxy.

  * Add Haddoc documentation.


  0.1

  ---

  * Initial release.

'
basic-deps:
  base: ! '>=4.7 && <5'
  text: -any
  servant: ==0.5.*
  lens: -any
  servant-foreign: ==0.5.*
  elm-export: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
author: Matt Bray
latest: '0.1.0.2'
description-type: markdown
description: ! "# Servant Elm\n\n[![Build Status](https://travis-ci.org/mattjbray/servant-elm.svg?branch=master)](https://travis-ci.org/mattjbray/servant-elm)\n\nGenerate
  Elm functions to query your Servant API!\n\nElm type generation coutesy of [krisajenkins/elm-export](https://github.com/krisajenkins/elm-export).\n\n##
  Installation\n\nUntil `elm-export` and `servant >= 0.5` are released, `servant-elm`
  requires\nstack. Add this to your `stack.yaml` file:\n\n```yaml\n...\npackages:\n
  \ ...\n- location:\n    git: https://github.com/haskell-servant/servant.git\n    commit:
  761443fffecbe83aa408d5f705dd0a8dade08af9\n  subdirs:\n  - servant\n  - servant-foreign\n
  \ - servant-server\n  extra-dep: True\n- location:\n    git: https://www.github.com/mattjbray/elm-export\n
  \   commit: a8a5b61798fbb04e081f5c83cab76ceaabc5ba13\n  extra-dep: True\n- location:\n
  \   git: https://www.github.com/mattjbray/servant-elm\n    commit: 749e09ed9d623284b3b90d1ae1ccba7ae79ad381\n
  \ extra-dep: True\n...\n```\n\n## Example\n\nLet's get some language pragmas and
  imports out of the way.\n\n```haskell\n{-# LANGUAGE DataKinds     #-}\n{-# LANGUAGE
  DeriveGeneric #-}\n{-# LANGUAGE TypeOperators #-}\n\nimport           GHC.Generics
  (Generic)\nimport           Servant.API  ((:>), Capture, Get, JSON)\nimport           Servant.Elm
  \ (Proxy (Proxy), Spec (Spec), ToElmType,\n                               defElmImports,
  generateElmForAPI, specsToDir,\n                               specsToDir)\n```\n\nWe
  have some Haskell-defined types and our Servant API.\n\n```haskell\ndata Book =
  Book\n  { name :: String\n  } deriving (Generic)\n\ninstance ToElmType Book\n\ntype
  BooksApi = \"books\" :> Capture \"bookId\" Int :> Get '[JSON] Book\n```\n\nNow we
  can generate Elm functions to query the API:\n\n```haskell\nspec :: Spec\nspec =
  Spec [\"Generated\", \"MyApi\"]\n            (defElmImports\n             : generateElmForAPI
  (Proxy :: Proxy BooksApi))\n\nmain :: IO ()\nmain = specsToDir [spec] \"my-elm-dir\"\n```\n\nLet's
  save this as `example.hs` and run it:\n\n```\n$ stack runghc example.hs\nWriting:
  my-elm-dir/Generated/MyApi.elm\n$\n```\n\nHere's what was generated:\n\n```elm\nmodule
  Generated.MyApi where\n\nimport Json.Decode exposing ((:=))\nimport Json.Decode.Extra
  exposing ((|:))\nimport Json.Encode\nimport Http\nimport String\nimport Task\n\n\ntype
  alias Book =\n  { name : String\n  }\n\ndecodeBook : Json.Decode.Decoder Book\ndecodeBook
  =\n  Json.Decode.succeed Book\n    |: (\"name\" := Json.Decode.string)\n\ngetBooksBy
  : Int -> Task.Task Http.Error (Book)\ngetBooksBy bookId =\n  let\n    request =\n
  \     { verb =\n          \"GET\"\n      , headers =\n          [(\"Content-Type\",
  \"application/json\")]\n      , url =\n          \"/\" ++ \"books\"\n          ++
  \"/\" ++ (bookId |> toString |> Http.uriEncode)\n      , body =\n          Http.empty\n
  \     }\n  in\n    Http.fromJson\n      decodeBook\n      (Http.send Http.defaultSettings
  request)\n```\n\nSee [`examples`](examples) for a complete usage example, or take
  a look at\n[mattjbray/servant-elm-example-app](https://github.com/mattjbray/servant-elm-example-app)\nfor
  an example project using this library.\n\n## Development\n\n```\n$ git clone https://github.com/mattjbray/servant-elm.git\n$
  cd servant-elm\n$ stack build\n$ stack test\n```\n\n## TODO\n\nServant API coverage:\n\n*
  MatrixFlag / MatrixParam / MatrixParams\n* Header (request)\n* Headers (response)\n*
  Delete / Patch / Put / Raw\n* Vault / RemoteHost / IsSecure\n\nOther:\n\n* Encode
  captures and query params?\n* Option to not use elm-export: generate functions that
  take a decoder and\n  String arguments.\n"
license-name: BSD3
