homepage: https://github.com/ncrashed/servant-auth-token#readme
changelog-type: markdown
hash: 248c71fa2ed8be1453000e8f38531bd9540418038d12b50bea84812dbafd0752
test-bench-deps: {}
maintainer: ncrashed@gmail.com
synopsis: Leveldb backend for servant-auth-token server
changelog: ! '0.4.1.0

  =======


  * Initial release.

'
basic-deps:
  exceptions: ! '>=0.8 && <0.9'
  bytestring: ! '>=0.10 && <0.11'
  servant-auth-token-api: ! '>=0.4 && <0.5'
  servant-auth-token: ! '>=0.4 && <0.5'
  base: ! '>=4.7 && <5'
  time: ! '>=1.5 && <1.7'
  text: ! '>=1.2 && <1.3'
  uuid: ! '>=1.3 && <1.4'
  monad-control: ! '>=1.0 && <1.1'
  safecopy-store: ! '>=0.9 && <0.10'
  servant-server: ! '>=0.9 && <0.10'
  leveldb-haskell: ! '>=0.6 && <0.7'
  aeson-injector: ! '>=1.0 && <1.1'
  containers: ! '>=0.5 && <0.6'
  lens: ! '>=4.15 && <4.16'
  concurrent-extra: ! '>=0.7 && <0.8'
  store: ! '>=0.3 && <0.4'
  mtl: ! '>=2.2 && <2.3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.6'
  resourcet: ! '>=1.1 && <1.2'
  safe: ! '>=0.3 && <0.4'
  vector: ! '>=0.11 && <0.12'
all-versions:
- '0.4.1.0'
author: NCrashed
latest: '0.4.1.0'
description-type: markdown
description: ! "# servant-auth-token-acid\n\nStorage backend on acid for [servant-auth-token](https://github.com/NCrashed/servant-auth-token)
  server.\n\nAs `acid-state` is bad at composing states, the integration of the library
  in your project requires a massive TH mixins.\nThe authentification state's queries
  are simply copied to your app.\n\nFirst, define you own global `acid-state` type:\n\n```
  haskell\nimport Data.SafeCopy\nimport Servant.Server.Auth.Token.Acid.Schema as A\n\n--
  | Application global state for acid-state\ndata DB = DB {\n  dbAuth :: A.Model --
  ^ Storage for Auth state\n, dbCustom :: () -- ^ Demo of custom state\n}\n\n-- |
  Generation of inital state\nnewDB :: DB\nnewDB = DB {\n    dbAuth = A.newModel\n
  \ , dbCustom = ()\n  }\n\n-- | Extraction of Auth model from global state\ninstance
  HasModelRead DB where\n  askModel = dbAuth\n\n-- | Extraction of Auth model from
  global state\ninstance HasModelWrite DB where\n  putModel db m = db { dbAuth = m
  }\n\nderiveSafeCopy 0 'base ''DB\n\n-- Mixin auth state queries and derive acid-state
  instances for them\nA.deriveQueries ''DB\nA.makeModelAcidic ''DB\n```\n\nNext, define
  your monad stack for the authorization actions:\n``` haskell\n-- Derive HasStorage
  for 'AcidBackendT' with your 'DB'.\n-- It is important that it is come before the
  below newtype\nderiveAcidHasStorage ''DB\n\n-- | Special monad for authorisation
  actions\nnewtype AuthM a = AuthM { unAuthM :: AcidBackendT DB IO a }\n  deriving
  (Functor, Applicative, Monad, MonadIO, MonadError ServantErr, HasAuthConfig, HasStorage)\n\n--
  | Execution of authorisation actions that require 'AuthHandler' context\nrunAuth
  :: AuthM a -> ServerM a\nrunAuth m = do\n  cfg <- asks envAuthConfig\n  db <- asks
  envDB\n  liftHandler $ ExceptT $ runAcidBackendT cfg db $ unAuthM m\n```\n\nSee
  a full example in [servant-auth-token-example-acid](https://github.com/NCrashed/servant-auth-token/tree/master/example/acid).\n"
license-name: BSD3
