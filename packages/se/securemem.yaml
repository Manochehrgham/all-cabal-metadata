homepage: http://github.com/vincenthz/hs-securemem
changelog-type: ''
hash: e1dab0f095e8ada8eff350c311972903c7008c385d326b075505bc63602b9b60
test-bench-deps: {}
maintainer: vincent@snarc.org
synopsis: abstraction to an auto scrubbing and const time eq, memory chunk.
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  memory: ! '>=0.7'
  ghc-prim: -any
  byteable: ! '>=0.1.1'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.1.7'
- '0.1.8'
- '0.1.9'
author: Vincent Hanquez <vincent@snarc.org>
latest: '0.1.9'
description-type: markdown
description: ! 'securemem

  =========


  [![Build Status](https://travis-ci.org/vincenthz/hs-securemem.png?branch=master)](https://travis-ci.org/vincenthz/hs-securemem)

  [![BSD](http://b.repl.ca/v1/license-BSD-blue.png)](http://en.wikipedia.org/wiki/BSD_licenses)

  [![Haskell](http://b.repl.ca/v1/language-haskell-lightgrey.png)](http://haskell.org)


  Securemem provides memory chunks that allow auto-scrubbing of the memory after use,

  and constant time equality.


  Documentation: [securemem on hackage](http://hackage.haskell.org/package/securemem)


  Interacting with securemem

  --------------------------


  It''s recommended to use the [Byteable instance](http://hackage.haskell.org/package/byteable)

  when providing an interface that takes a securemem. It allow legacy code, and work
  in progress

  code to interface with securemem more easily.


  older base

  ----------


  On older base, the memory is not scrubbed: upgrade your GHC to 7.6.0 or above.


  TODO

  ----


  * add a custom memory allocator that give mlocked memory chunks.

'
license-name: BSD3
