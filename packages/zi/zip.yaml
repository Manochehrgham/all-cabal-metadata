homepage: https://github.com/mrkkrp/zip
changelog-type: markdown
hash: 13780687bc5e02a42a61506ac57f956a388c271b070acd99b4662e5a9214f091
test-bench-deps:
  exceptions: ! '>=0.6 && <0.9'
  bytestring: ! '>=0.9 && <0.11'
  path: ! '>=0.5 && <6'
  base: ! '>=4.8 && <5'
  time: ! '>=1.4 && <1.7'
  hspec: ! '>=2.0 && <3'
  text: ! '>=0.2 && <1.3'
  zip: ! '>=0.1.1'
  filepath: ! '>=1.2 && <1.5'
  criterion: ! '>=1.0'
  conduit: ! '>=1.1 && <2'
  containers: ! '>=0.5.6.2 && <0.6'
  transformers: ! '>=0.4 && <0.6'
  QuickCheck: ! '>=2.4 && <3'
  path-io: ! '>=1.0.1 && <2'
maintainer: Mark Karpov <markkarpov@opmbx.org>
synopsis: Operations on zip archives
changelog: ! '## Zip 0.1.1


  * Make decoding of CP437 faster.


  ## Zip 0.1.0


  * Initial release.

'
basic-deps:
  plan-b: ! '>=0.2.0'
  exceptions: ! '>=0.6 && <0.9'
  bzlib-conduit: ! '>=0.2 && <0.3'
  cereal: ! '>=0.3 && <0.6'
  bytestring: ! '>=0.9 && <0.11'
  case-insensitive: ! '>=1.2.0.2 && <1.3'
  path: ! '>=0.5 && <6'
  base: ! '>=4.8 && <5'
  time: ! '>=1.4 && <1.7'
  text: ! '>=0.2 && <1.3'
  filepath: ! '>=1.2 && <1.5'
  conduit: ! '>=1.1 && <2'
  semigroups: ==0.18.*
  conduit-extra: ! '>=1.1 && <2'
  containers: ! '>=0.5.6.2 && <0.6'
  mtl: ! '>=2.0 && <3'
  digest: <0.1
  transformers: ! '>=0.4 && <0.6'
  resourcet: ! '>=1.0 && <2'
  path-io: ! '>=1.0.1 && <2'
all-versions:
- '0.1.0'
- '0.1.1'
author: Mark Karpov <markkarpov@opmbx.org>
latest: '0.1.1'
description-type: markdown
description: ! "# Zip\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/zip.svg?style=flat)](https://hackage.haskell.org/package/zip)\n[![Stackage
  Nightly](http://stackage.org/package/zip/badge/nightly)](http://stackage.org/nightly/package/zip)\n[![Build
  Status](https://travis-ci.org/mrkkrp/zip.svg?branch=master)](https://travis-ci.org/mrkkrp/zip)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/zip/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/zip?branch=master)\n\n*
  [Why this library is written](#why-this-library-is-written)\n    * [zip-archive](#zip-archive)\n
  \   * [LibZip](#libzip)\n    * [zip-conduit](#zip-conduit)\n* [Features](#features)\n
  \   * [Compression methods](#compression-methods)\n    * [Encryption](#encryption)\n
  \   * [Sources of file data](#sources-of-file-data)\n    * [ZIP64](#zip64)\n    *
  [Filenames](#filenames)\n    * [Meta-information about files](#meta-information-about-files)\n*
  [Quick start](#quick-start)\n* [Contribution](#contribution)\n* [License](#license)\n\nThis
  is a feature-rich, memory-efficient, and type-safe library to\nmanipulate Zip archives
  in Haskell. The library is the most complete and\nefficient implementation of .ZIP
  specification in pure Haskell (at least\nfrom open-sourced ones). In particular,
  it's created with large multimedia\ndata in mind and provides all features users
  might expect, comparable in\nterms of feature-set with libraries like `libzip` in
  C.\n\n## Why this library is written\n\nThere are a few libraries to work with Zip
  archives, yet every one of them\nprovides only subset of all functionality user
  may need (obviously the\nlibraries provide functionality that their authors needed)
  and otherwise is\nflawed in some way so it cannot be easily used in some situations.
  Let's\nexamine all libraries available on Hackage to understand motivation for this\npackage.\n\n###
  zip-archive\n\n`zip-archive` is a widely used library. It's quite old, well-known
  and\nsimple to use. However it creates Zip archives purely, as `ByteStrings`s in\nmemory
  that you can then write to the file system. This is not acceptable if\nyou work
  with more-or-less big data. For example, if you have collection of\nfiles with total
  size of 500 MB and you want to pack them into an archive,\nyou can easily consume
  up to 1 GB of memory (files plus resulting\narchive). Not always you can afford
  to do this or do this at scale. Even if\nyou want just to look at list of archive
  entries it will read it into memory\nin all its entirety. For my use-case it's not
  acceptable.\n\n### LibZip\n\nThis is bindings to C library\n[`libzip`](https://en.wikipedia.org/wiki/Libzip).
  There is always certain\nkind of trouble when you are using bindings. For example,
  you need to take\ncare that target library is installed and its version is compatible
  with\nversion of your binding. Yes, this means additional headaches. It should be\njust
  “plug and play” (if you're using Stack), but now you need to watch out\nfor compatibility.\n\nIt's
  not that bad with libraries that do not break their API for years, but\nit's not
  the case with `libzip`. As maintainer of `LibZip` puts it:\n\n> libzip 0.10, 0.11,
  and 1.0 are not binary compatible. If your C library is\n> 0.11.x, then you should
  use LibZip 0.11. If your C library is 1.0, then\n> you should use LibZip master
  branch (not yet released to Hackage).\n\nNow, on my machine I have version 1.0.
  To put the package on Stackage we had\nto use version 0.10, because Stackage uses
  Ubuntu to build packages and\nlibraries on Ubuntu are always ancient. This means
  that I cannot use version\nof the library from Stackage, and I don't yet know what
  will be on the\nserver.\n\nAfter much frustration with all these things I decided
  to avoid using of\n`LibZip`, because after all, this is not that sort of project
  that shouldn't\nbe done in pure Haskell. By rewriting this in Haskell, I also can
  make it\nsafer to use.\n\n### zip-conduit\n\nThis one uses the right approach: leverage
  good streaming library\n(`conduit`) for memory-efficient processing. This is however
  is not\nfeature-rich and has certain problems (including programming style, it uses\n`error`
  if an entry is missing in archive, among other things), some of them\nare reported
  on its issue tracker. It also does not appear to be maintained\n(last sign of activity
  was on December 23, 2014).\n\n## Features\n\nThe library supports all features specified
  in modern .ZIP specification\nexcept for encryption and multi-disk archives. See
  more about this below.\n\nFor reference, here is a [copy of the specification](https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT).\n\n###
  Compression methods\n\n`zip` supports the following compression methods:\n\n* Store
  (no compression, just store files “as is”)\n* [DEFLATE](https://en.wikipedia.org/wiki/DEFLATE)\n*
  [Bzip2](https://en.wikipedia.org/wiki/Bzip2)\n\nThe best way to add new compression
  method to the library is to write\nconduit that will do the compression and publish
  it as a library. `zip` can\nthen depend on it and add it to the list of supported
  compression\nmethods. Current list of compression methods reflects what is available
  on\nHackage at the moment.\n\n### Encryption\n\nEncryption is currently not supported.
  Encryption system described in Zip\nspecification is known to be seriously flawed,
  so it's probably not the best\nway to protect your data anyway. The encryption method
  seems to be\nproprietary technology of PKWARE (at least that's what stated about
  it in\nthe .ZIP specification), so to hell with it.\n\n### Sources of file data\n\nThe
  library gives you many options how to get file contents to compress and\nhow to
  get extracted data. The following methods are supported:\n\n* *File name.* This
  is an efficient method to perform compression or\n  decompression. You just specify
  where to get data or where to save it and\n  the rest is handled by the library.\n\n*
  *Conduit source or sink.*\n\n* *ByteString.* Use it only with small data.\n\n* *Copy
  file from another archive.* Efficient operation, file is copied “as\n  is” — no
  re-compression is performed.\n\n### ZIP64\n\nWhen necessary, the `ZIP64` extension
  is automatically used. It's necessary\nwhen anything from this list takes place:\n\n*
  Total size of archive is greater than 4 GB.\n\n* Size of compressed/uncompressed
  file in archive is greater than 4 GB.\n\n* There are more than 65535 entries in
  archive.\n\nThe library is particularly suited for processing of large files. For\nexample,
  I've been able to easily create 6.5 GB archive with reasonable\nspeed and without
  any significant memory consumption.\n\n### Filenames\n\nThe library has API that
  makes it impossible to create archive with\nnon-portable or invalid file names in
  it.\n\nAs of .ZIP specification 6.3.2, files with Unicode symbols in their names\ncan
  be put into Zip archives. The library supports mechanisms for this and\nuses them
  automatically when needed. Besides UTF-8, CP437 is also supported\nas it's required
  in the specification.\n\n### Meta-information about files\n\nThe library allows
  to attach comments to entire archive or individual files,\nand also gives its user
  full control over extra fields that are written to\nfile headers, so the user can
  store arbitrary information about file in the\narchive.\n\n## Quick start\n\nThe
  module `Codec.Archive.Zip` provides everything you need to manipulate\nZip archives.
  There are three things that should be clarified right away, to\navoid confusion
  in the future.\n\nFirst, we use `EntrySelector` type that can be obtained from `Path
  Rel File`\npaths. This method may seem awkward at first, but it will protect you
  from\nproblems with portability when your archive is unpacked on a different\nplatform.
  Using of well-typed paths is also something you should consider\ndoing in your projects
  anyway. Even if you don't want to use `Path` module\nin your project, it's easy
  to marshal `FilePath` to `Path` just before using\nfunctions from the library.\n\nThe
  second thing, that is rather a consequence of the first, is that there\nis no way
  to add directories, or to be precise, *empty directories* to your\narchive. This
  approach is used in Git, and I find it quite sane.\n\nFinally, the third feature
  of the library is that it does not modify archive\ninstantly, because doing so on
  every manipulation would often be\ninefficient. Instead we maintain collection of
  pending actions that can be\nturned into optimized procedure that efficiently modifies
  archive in one\npass. Normally this should be of no concern to you, because all
  actions are\nperformed automatically when you leave the realm of `ZipArchive` monad.
  If,\nhowever, you ever need to force update, `commit` function is your\nfriend.
  There are even “undo” functions, by the way.\n\nLet's take a look at some examples
  that show how to accomplish most typical\ntasks with help of the library.\n\nTo
  get full information about archive entries, use `getEntries`:\n\n```haskell\nλ>
  withArchive archivePath (M.keys <$> getEntries)\n```\n\nThis will return list of
  all entries in archive at `archivePath`. It's\npossible to extract contents of archive
  as strict `ByteString`:\n\n```haskell\nλ> withArchive archivePath (getEntry entrySelector)\n```\n\n…to
  stream them to given sink:\n\n```haskell\nλ> withArchive archivePath (sourceEntry
  entrySelector mySink)\n```\n\n…to save specific entry to a file:\n\n```haskell\nλ>
  withArchive archivePath (saveEntry entrySelector pathToFile)\n```\n\n…and finally
  just unpack entire archive into some directory:\n\n```haskell\nλ> withArchive archivePath
  (unpackInto destDir)\n```\n\nSee also `getArchiveComment` and `getArchiveDescription`.\n\nModifying
  is also easy, efficient, and powerful. When you want to create new\narchive use
  `createArchive`, otherwise `withArchive` will do. To add entry\nfrom `ByteString`:\n\n```haskell\nλ>
  createArchive archivePath (addEntry Store \"Hello, World!\" entrySelector)\n```\n\nYou
  can stream from `Source` as well:\n\n```haskell\nλ> createArchive archivePath (sinkEntry
  Deflate source entrySelector)\n```\n\nTo add contents from some file, use `loadEntry`:\n\n```haskell\nλ>
  let toSelector = const $ parseRelFile \"my-entry.txt\" >>= mkEntrySelector\nλ> createArchive
  archivePath (loadEntry BZip2 toSelector myFilePath)\n```\n\nFinally, you can copy
  entry from another archive without re-compression\n(unless you use `recompress`,
  see below):\n\n```haskell\nλ> createArchive archivePath (copyEntry srcArchivePath
  selector selector)\n```\n\nIt's often desirable to just pack a directory:\n\n```haskell\nλ>
  let f = stripDir dir >=> mkEntrySelector\nλ> createArchive archivePath (packDirRecur
  Deflate f dir)\n```\n\nIt's also possible to:\n\n* rename an entry with `renameEntry`\n*
  delete an entry with `deleteEntry`\n* change compression method with `recompress`\n*
  change comment associated with an entry with `setEntryComment`\n* delete comment
  with `deleteEntryComment`\n* set modification time with `setModTime`\n* manipulate
  extra fields with `addExtraField` and `deleteExtraField`\n* check if entry is intact
  with `checkEntry`\n* undo changes with `undoEntryCanges`, `undoArchiveChanges`,
  and `undoAll`\n* force changes to be written to file system with `commit`\n\nThis
  should cover all your needs. Feel free to open an issue if you're\nmissing something.\n\n##
  Contribution\n\nYou can contact the maintainer via\n[the issue tracker](https://github.com/mrkkrp/zip/issues).\n\nWe
  are open to pull requests, they will be merged quickly if they are good!\n\n## License\n\nCopyright
  © 2016 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
