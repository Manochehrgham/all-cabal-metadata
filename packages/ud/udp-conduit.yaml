homepage: https://github.com/kqr/udp-conduit#readme
changelog-type: ''
hash: 20c193abc26a3d6d9700922e7da5117dad848019a98fa84e5a25490dc820867d
test-bench-deps: {}
maintainer: k@rdw.se
synopsis: Simple fire-and-forget conduit UDP wrappers
changelog: ''
basic-deps:
  conduit-combinators: -any
  base: ! '>=4.7 && <5'
  network: -any
  chunked-data: -any
  mono-traversable: -any
all-versions:
- '0.1.0.0'
- '0.1.0.2'
author: kqr
latest: '0.1.0.2'
description-type: markdown
description: ! "# udp-conduit\n\nSimple fire-and-forget style conduit parts (sources/sinks)
  for UDP traffic.\n\nHere's an example that sends a message to UDP port 8888 on localhost:\n\n
  \   import Conduit\n    import Conduit.UDP\n    import Data.Text\n\n    message
  :: Text\n    message = \"hello, world!\\n\"\n\n    main :: IO ()\n    main =\n        runConduitRes
  (yield message .| encodeUtf8C .| udpSink \"127.0.0.1\" 8888)\n\nHere's an example
  where we continuously receive messages on port 5666 on localhost:\n\n    import
  Conduit\n    import Conduit.UDP\n\n    main :: IO ()\n    main =\n        runConduitRes
  (udpSource \"127.0.0.1\" 5666 .| decodeUtf8C .| stdoutC)\n\nNow, here's an example
  where we receive messages on port 8001, transform them to\nupper-case, and then
  send them on to port 8002.\n\n    import Conduit\n    import Conduit.UDP\n    import
  Data.Char (toUpper)\n\n    main :: IO ()\n    main =\n        runConduitRes (udpSource
  \"127.0.0.1\" 8001 .| omapCE toUpper .| udpSink \"127.0.0.1\" 8002)\n\nFun, huh?
  And simple!\n"
license-name: ISC
