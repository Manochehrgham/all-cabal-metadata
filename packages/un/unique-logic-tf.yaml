changelog-type: ''
hash: 17a038c7664399bb8e4c69dbd06696d588ebe418096e6fac9583b098d064d301
synopsis: Solve simple simultaneous equations
changelog: ''
all-versions:
- '0.4'
- '0.4.0.1'
- '0.4.1'
- '0.4.1.1'
latest: '0.4.1.1'
description-type: haddock
description: ! 'Solve a number of equations simultaneously.

  This is not Computer Algebra,

  better think of a kind of type inference algorithm

  or logic programming with only one allowed solution.


  Only one solution is computed.

  Simultaneous equations with multiple solutions are not allowed.

  However, variables may remain undefined.

  The solver may optionally check for consistency.

  It does not do so by default

  since with floating point numbers or symbolic expressions

  even simple rules may not be consistent.


  The modules ordered with respect to abstraction level are:


  * "UniqueLogic.ST.TF.System":

  Construct and solve sets of functional dependencies.

  Example: @assignment3 (+) a b c@ meaning dependency @a+b -> c@.


  * "UniqueLogic.ST.TF.Rule":

  Combine functional dependencies to rules

  that can apply in multiple directions.

  Example: @add a b c@ means relation @a+b = c@

  which resolves to dependencies @a+b -> c, c-a -> b, c-b -> a@.

  For an executable example see "UniqueLogic.ST.TF.Example.Rule".


  * "UniqueLogic.ST.TF.Expression":

  Allows to write rules using arithmetic operators.

  It creates temporary variables automatically.

  Example: @(a+b)*c =:= d@ resolves to @a+b = x, x*c = d@.

  For an executable example see "UniqueLogic.ST.TF.Example.Expression".


  * "UniqueLogic.ST.TF.System.Simple":

  Provides specialised functions from "UniqueLogic.ST.TF.System"

  for the case of a system without labels and consistency checks.


  * "UniqueLogic.ST.TF.System.Label":

  Provides a custom constructor for variables.

  When creating a variable you decide whether and how

  an assignment to this variable shall be logged.

  There is an example that shows how to solve a logic system

  using symbolic expressions.

  The naming and logging allows us to observe shared intermediate results.

  For an executable example see "UniqueLogic.ST.TF.Example.Label".


  * By using more sophisticated monad transformers,

  we can check the equations for consistency,

  report inconsistencies and how they arised.

  We demonstrate that in "UniqueLogic.ST.TF.Example.Verify".


  This variant of the package requires type families.'
