changelog-type: ''
hash: 62030800ea9e224c01661fb6f8323b5b577d0cde0ff8ccb06f5425f95e8ccefa
synopsis: Solve simple simultaneous equations
changelog: ''
all-versions:
- '0.2'
- '0.3'
latest: '0.3'
description-type: haddock
description: ! 'Solve a number of equations simultaneously.

  This is not Computer Algebra,

  better think of a kind of type inference algorithm

  or logic programming with only one allowed solution.


  Only one solution is computed.

  Simultaneous equations with multiple solutions are not allowed.

  However, variables may remain undefined.

  We do not even check for consistency,

  since with floating point numbers even simple rules may not be consistent.


  The modules ordered with respect to abstraction level are:


  * "UniqueLogic.ST.System":

  Construct and solve sets of functional dependencies.

  Example: @assignment3 (+) a b c@ meaning dependency @a+b -> c@.


  * "UniqueLogic.ST.Rule":

  Combine functional dependencies to rules

  that can apply in multiple directions.

  Example: @add a b c@ means relation @a+b = c@

  which resolves to dependencies @a+b -> c, c-a -> b, c-b -> a@.

  For an executable example see "UniqueLogic.ST.Example.Rule".


  * "UniqueLogic.ST.Expression":

  Allows to write rules using arithmetic operators.

  It creates temporary variables automatically.

  Example: @(a+b)*c =:= d@ resolves to @a+b = x, x*c = d@.

  For an executable example see "UniqueLogic.ST.Example.Expression".


  * "UniqueLogic.ST.SystemLabel":

  Provides a new type for named variables.

  When creating a variable you decide whether and how

  an assignment to this variable shall be logged.

  There is an example that shows how to solve a logic system

  using symbolic expressions.

  The naming and logging allows us to observe shared intermediate results.

  For an executable example see "UniqueLogic.ST.Example.Label".


  * "UniqueLogic.ST.SystemLog", "UniqueLogic.ST.RuleLog":

  These modules allow to log an assignment

  depending on the arguments to an assignment.

  This is more general than "UniqueLogic.ST.SystemLabel"

  which allows only dependencies on the result of an assignment.'
