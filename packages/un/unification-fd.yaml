homepage: http://code.haskell.org/~wren/
changelog-type: ''
hash: 87134e111e3346991b772b4960c40b5e8f657b1437952e1f7488cdccda8aabb5
test-bench-deps: {}
maintainer: wren@community.haskell.org
synopsis: Simple generic unification algorithms.
changelog: ''
basic-deps:
  logict: ! '>=0.4'
  base: ==4.*
  containers: -any
  mtl: ! '>=2.0'
all-versions:
- '0.5.0'
- '0.6.0'
- '0.7.0'
- '0.8.0'
- '0.8.1'
- '0.9.0'
- '0.10.0'
author: wren gayle romano
latest: '0.10.0'
description-type: text
description: ! "unification-fd\n==============\n\nThis is a simple package and should
  be easy to install. You should\nbe able to use one of the following standard methods
  to install it.\n\n    -- With cabal-install and without the source:\n    $> cabal
  install unification-fd\n    \n    -- With cabal-install and with the source already:\n
  \   $> cd unification-fd\n    $> cabal install\n    \n    -- Without cabal-install,
  but with the source already:\n    $> cd unification-fd\n    $> runhaskell Setup.hs
  configure --user\n    $> runhaskell Setup.hs build\n    $> runhaskell Setup.hs test\n
  \   $> runhaskell Setup.hs haddock --hyperlink-source\n    $> runhaskell Setup.hs
  copy\n    $> runhaskell Setup.hs register\n\nThe test step is optional and currently
  does nothing. The Haddock\nstep is also optional. If you see some stray lines that
  look like\nthis:\n\n    mkUsageInfo: internal name? t{tv a7XM}\n\nFeel free to ignore
  them. They shouldn't cause any problems, even\nthough they're unsightly. This should
  be fixed in newer versions\nof GHC. For more details, see:\n\n    http://hackage.haskell.org/trac/ghc/ticket/3955\n\nIf
  you get a bunch of type errors about there being no MonadLogic\ninstance for StateT,
  this means that your copy of the logict library\nis not compiled against the same
  mtl that we're using. To fix this,\nupdate logict to use the same mtl.\n\n\nPortability\n===========\n\nAn
  attempt has been made to keep this library as portable as possible,\nbut it does
  rely on some common language extensions (i.e., ones\nimplemented by Hugs as well
  as GHC) as well as a couple which are\nonly known to be supported by GHC. All required
  language extensions\nare:\n\n    Rank2Types\n    MultiParamTypeClasses\n    FunctionalDependencies
  -- Alas, necessary for type inference\n    FlexibleContexts       -- Necessary for
  practical use of MPTCs\n    FlexibleInstances      -- Necessary for practical use
  of MPTCs\n    UndecidableInstances   -- Needed for Show instances due to two-level
  types\n\n----------------------------------------------------------- fin.\n"
license-name: BSD3
