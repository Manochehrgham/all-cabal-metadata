homepage: http://github.com/harendra-kumar/unicode-transforms
changelog-type: markdown
hash: cb00598fd02544ca8016d26c111081c01dce523c41c5db0ae764beffb4ddf887
test-bench-deps:
  split: ! '>=0.1 && <0.3'
  path: ! '>=0.0.0 && <0.6'
  base: ! '>=4.7 && <5'
  unicode-transforms: -any
  text: ! '>=1.1.1 && <1.3'
  filepath: ! '>=1.0 && <2'
  criterion: ! '>=1.1.1 && <1.2'
  getopt-generics: ! '>=0.11 && <0.14'
  optparse-applicative: ! '>=0.0.1 && <0.14'
  deepseq: ! '>=1.1.0 && <1.5'
  QuickCheck: ! '>=2.1 && <2.10'
  path-io: ! '>=0.1.0 && <1.3'
maintainer: harendra.kumar@gmail.com
synopsis: Unicode normalization
changelog: ! '## 0.2.1


  * Improve speed and resource hog during compilation


  ## 0.2.0


  * Support Unicode version 8.0

  * Switch to pure Haskell implementation


  ## 0.1.0.1


  * Initial release based on utf8proc C implementation

'
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.7 && <5'
  text: ! '>=1.1.1 && <1.3'
  bitarray: ! '>=0.0.1 && <0.1'
all-versions:
- '0.1.0.1'
- '0.2.0'
- '0.2.1'
author: Harendra Kumar
latest: '0.2.1'
description-type: markdown
description: ! '# Unicode Transforms


  [![Hackage](https://img.shields.io/hackage/v/unicode-transforms.svg?style=flat)](https://hackage.haskell.org/package/unicode-transforms)

  [![Build Status](https://travis-ci.org/harendra-kumar/unicode-transforms.svg?branch=master)](https://travis-ci.org/harendra-kumar/unicode-transforms)

  [![Windows Build status](https://ci.appveyor.com/api/projects/status/5wov8m1m0asvbv32?svg=true)](https://ci.appveyor.com/project/harendra-kumar/unicode-transforms)

  [![Coverage Status](https://coveralls.io/repos/harendra-kumar/unicode-transforms/badge.svg?branch=master&service=github)](https://coveralls.io/github/harendra-kumar/unicode-transforms?branch=master)


  Fast Unicode 8.0 normalization in Haskell (NFC, NFKC, NFD, NFKD).


  ## What is normalization?


  Unicode characters with adornments (e.g. Á) can be represented in two different

  forms, as a single composed character (U+00C1 = Á) or as multiple decomposed

  characters (U+0041(A) U+0301( ́ ) = Á). They are differently encoded byte

  sequences but for humans they have exactly the same visual appearance.


  A regular byte comparison may tell that two strings are different even though

  they might be equivalent. We need to convert both the strings in a

  [`normalized`](http://unicode.org/reports/tr15/) form using the [Unicode

  Character Database](http://www.unicode.org/Public/UCD/latest/) before we can

  compare them for equivalence. For example:

  ```

  >> import Data.Text.Normalize

  >> normalize NFC "\193" == normalize NFC "\65\769"

  True

  ```


  ## Contributing

  Please use https://github.com/harendra-kumar/unicode-transforms to raise

  issues, or send pull requests.

'
license-name: BSD3
