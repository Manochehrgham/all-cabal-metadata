homepage: http://github.com/lambdageek/unbound-generics
changelog-type: markdown
hash: 5d3b9df5fcf005d926118cf9972608d6d1f651d181b71a0e2bd020a091e1159f
test-bench-deps:
  base: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: ! '>=2.7 && <3'
  unbound-generics: -any
maintainer: aleksey@lambdageek.org
synopsis: Support for programming with names and binders using GHC Generics
changelog: ! "# 0.1.2.1\n\n* Fix ghc-7.10 build.\n* Haddock cleanup.\n\n# 0.1.2\n\n*
  Added `IsEmbed` typeclass\n\n    * Depend on 'profunctors'\n\n* Changed `embed`
  and `unembed` to work over any `IsEmbed` type.\n\n* Added `Shift` type for shifting
  the scope of embedded terms out one level.\n\n# 0.1.1\n\n* Added `isNullDisjointSet`
  function.\n* Implement a TH `makeClosedAlpha` splice for constructing trivial leaf
  instances.\n\n# 0.1\n\n* Add `acompare` functiona and `acompare'` method to `Alpha`
  typeclass.  (christiaanb)\n\n    Handwritten `Alpha` instances will need to define
  this additional\n    method now.  Major version bump.\n\n# 0.0.3\n\n* Add 'name2Integer'
  method (christiaanb)\n* Export internal type-directed `gaeq`, `gopen`, `gclose`,
  etc\n  functions from `Unbound.Generics.LocallyNameless.Alpha`.\n\n    Allows definitions
  like:\n\n        instance Alpha Term where\n          aeq' _ (Prim t1 _dk1) (Prim
  t2 _dk2) = t1 == t2\n          aeq' c t1             t2             = gaeq c (from
  t1) (from t2)\n\n\n# 0.0.2.1\n\n* Unconditionally add ErrorT and ExceptT instances
  using transformers-compat (bergmark)\n\n# 0.0.2\n\n* Add 'Rec' pattern and 'TRec'
  term combinators.\n\n* Alpha instance for '()'\n\n# 0.0.1\n\n* Add 'lunbind2' function.\n\n*
  Doc updates.\n\n* Switch from 'HUnit' to 'Tasty' for testing.\n\n# 0.0.0.90\n\n*
  Initial (re-)implementation effort.\n"
basic-deps:
  base: ! '>=4.6 && <5'
  containers: ==0.5.*
  contravariant: ! '>=0.5'
  mtl: ! '>=2.1'
  transformers: ! '>=0.3'
  template-haskell: ! '>=2.8.0.0'
  transformers-compat: ! '>=0.3'
  profunctors: ! '>=4.0'
all-versions:
- '0.0.0.90'
- '0.0.1'
- '0.0.2'
- '0.0.2.1'
- '0.0.3'
- '0.1'
- '0.1.2'
- '0.1.2.1'
author: Aleksey Kliger
latest: '0.1.2.1'
description-type: markdown
description: ! "# unbound-generics\n\n[![Build Status](https://travis-ci.org/lambdageek/unbound-generics.svg)](https://travis-ci.org/lambdageek/unbound-generics)\n\n\nThis
  is a reimplementation of (parts of) [unbound](http://hackage.haskell.org/package/unbound)
  but using [GHC generics](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/GHC-Generics.html)
  instead of [RepLib](https://hackage.haskell.org/package/RepLib).\n\n## Differences
  from `unbound`\n\nFor the most part, I tried to keep the same methods with the same
  signatures.  However there are a few differences.\n\n1. `fv :: Alpha t => Fold t
  (Name n)`\n\n   The `fv` method returns a `Fold` (in the sense of the [lens](http://hackage.haskell.org/package/lens)
  library),\n   rather than an `Unbound.Util.Collection` instance.  That means you
  will generally have to write `toListOf fv t` or some    other summary operation.\n\n2.
  `isPat :: Alpha t => t -> DisjointSet AnyName`\n\n   You should only notice this
  if you're implementing an instance of `Alpha` by hand (rather than by using the
  default\n   generic instance).  The original `unbound` returned a `Maybe [AnyName]`
  here with the same interpretation as `DisjointSet`: `Nothing` means an inconsistency
  was encountered, or `Just` the free variables of the pattern.\n\n3. `embed :: IsEmbed
  e => Embedded e -> e` and `unembed :: IsEmbed e => e -> Embedded e`\n\n    The typeclass
  `IsEmbed` has an `Iso` (again in the sense of the `lens` library) as a method instead
  of the above pair of methods.\n\n    Again, you should only notice this if you're
  implementing your own types that are instances of `IsEmbed`.  The easiest thing
  to do is to use implement `embedded = iso yourEmbed yourUnembed` where `iso` comes
  from `lens`.  (Although you can also implement it in terms of `dimap` if you don't
  want to depend on lens)\n"
license-name: BSD3
