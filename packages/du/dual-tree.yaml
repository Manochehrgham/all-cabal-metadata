changelog-type: ''
hash: 2e01da6753d4cda2cf08a542bece726384878cbe981d4f076dfef1a658cbab0b
synopsis: Rose trees with cached and accumulating monoidal annotations
changelog: ''
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.2'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.0.5'
- '0.2.0.6'
latest: '0.2.0.6'
description-type: haddock
description: ! 'Rose (n-ary) trees with both upwards- (/i.e./

  cached) and downwards-traveling (/i.e./

  accumulating) monoidal annotations.  This is used

  as the core data structure underlying

  the @diagrams@ framework

  (<http://projects.haskell.org/diagrams>), but

  potentially has other applications as well.


  Abstractly, a DUALTree is a rose (n-ary) tree

  with data (of type @l@) at leaves, data (of type

  @a@) at internal nodes, and two types of monoidal

  annotations, one (of type @u@) travelling \"up\"

  the tree and one (of type @d@) traveling

  \"down\".


  See "Data.Tree.DUAL" for full documentation.

  "Data.Tree.DUAL" provides a public API which

  should suffice for most purposes.

  "Data.Tree.DUAL.Internal" exports more of the

  internal implementation---use it at your own

  risk.'
