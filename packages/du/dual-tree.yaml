homepage: ''
changelog-type: text
hash: 22ac04eb2d38f238a86cc7629eff96808a65b128e21cb84b1d13470956384681
test-bench-deps: {}
maintainer: diagrams-discuss@googlegroups.com
synopsis: Rose trees with cached and accumulating monoidal annotations
changelog: ! "* 0.2.0.7: 16 September 2015\n\n  - Allow semigroups-0.17\n\n* 0.2.0.6:
  3 April 2015\n\n  - Allow base-4.8\n  - Allow monoid-extras-0.4\n\n* 0.2.0.5: 04
  Dec 2014\n\n  - Allow semigroups-0.16\n\n* 0.2.0.4: 28 May 2014\n\n  - Allow semigroups-0.15\n\n*
  0.2.0.3: 15 May 2014\n\n  - Allow semigroups-0.14\n\n* 0.2.0.2: 10 April 2014\n\n
  \ - Allow semigroups-0.13\n\n* 0.2.0.1: 27 November 2013\n\n  - Allow semigroups-0.12\n\n*
  0.2: 5 November 2013\n\n  - Expose internal d-annotations via foldDUAL\n\n* 0.1.0.4:
  26 September 2013\n\n  - allow semigroups-0.11\n\n* 0.1.0.3: 15 July 2013\n\n  -
  bump monoid-extras upper bound to allow 0.3\n\n* 0.1.0.2: 28 March 2013\n\n  - bump
  upper bound to allow base-4.7\n\n* 0.1.0.1: 7 January 2013\n\n  - bump upper bound
  to allow semigroups-0.9\n\n* 0.1.0.0: 3 September 2012\n\n  Initial release\n"
basic-deps:
  newtype: ! '>=0.2 && <0.3'
  monoid-extras: ! '>=0.2 && <0.5'
  base: ! '>=4.3 && <4.9'
  semigroups: ! '>=0.8 && <0.18'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.2'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.0.5'
- '0.2.0.6'
- '0.2.0.7'
author: Brent Yorgey
latest: '0.2.0.7'
description-type: haddock
description: ! 'Rose (n-ary) trees with both upwards- (/i.e./

  cached) and downwards-traveling (/i.e./

  accumulating) monoidal annotations.  This is used

  as the core data structure underlying

  the @diagrams@ framework

  (<http://projects.haskell.org/diagrams>), but

  potentially has other applications as well.


  Abstractly, a DUALTree is a rose (n-ary) tree

  with data (of type @l@) at leaves, data (of type

  @a@) at internal nodes, and two types of monoidal

  annotations, one (of type @u@) travelling \"up\"

  the tree and one (of type @d@) traveling

  \"down\".


  See "Data.Tree.DUAL" for full documentation.

  "Data.Tree.DUAL" provides a public API which

  should suffice for most purposes.

  "Data.Tree.DUAL.Internal" exports more of the

  internal implementation---use it at your own

  risk.'
license-name: BSD3
