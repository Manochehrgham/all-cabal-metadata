homepage: https://github.com/AntonXue/SSTG#readme
changelog-type: ''
hash: e159fc4e65c471026b7f6ba9479b7d4283a023477127e1082a71e65898e66bb5
test-bench-deps:
  base: -any
  SSTG: -any
  containers: ! '>=0.5 && <0.6'
maintainer: anton.xue@yale.edu
synopsis: STG Symbolic Execution
changelog: ''
basic-deps:
  ghc: -any
  base: ! '>=4.7 && <5'
  SSTG: -any
  containers: ==0.5.*
  ghc-paths: -any
all-versions:
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
author: Anton Xue
latest: '0.1.0.5'
description-type: markdown
description: ! "## SSTG\nHaskell Symbolic Execution with STG Semantics\n\nBased on
  the paper: [Making a Fast Curry: Push/Enter vs. Eval/Apply for Higher-order Languages][paper]\n\nHackage
  Page: https://hackage.haskell.org/package/SSTG\n\n[paper]: http://community.haskell.org/~simonmar/papers/evalapplyjfp06.pdf\n\n##
  Dependencies\n* `ghc >= 8.0.1`\n\n## Install\n`cabal install SSTG`\n\n## As an API\nSSTG
  is designed for use as an API to perform extraction and symbolic execution of models
  extracted from Haskell source, curated by hand, or derived from other sources.\n\n`import
  SSTG`\n\n#### Program Model Extraction\nSSTG represents [GHC StgSyn][stgsyn] as
  a near one-to-one translation of an internal language called [SSTG Lang][sstglang].\n\n[stgsyn]:
  https://downloads.haskell.org/~ghc/8.0.1/docs/html/libraries/ghc-8.0.1/StgSyn.html\n[sstglang]:
  https://github.com/AntonXue/SSTG/blob/master/src/SSTG/Core/Syntax/Language.hs\n\nThis
  can be extracted from Haskell source by performing a call to the function:\n\n```\nmkTargetBindings
  :: FilePath -> FilePath -> IO [SSTG.Binding]\nmkTargetBinding proj src = ...\n```\n\nHere
  `proj` denotes the project directory, while `src` respresents the source file. This
  enables compilation of multiple Haskell files simultaneously, as GHC requires reference
  paths to a common project directory for compilation accuracy.\n\nIn a given file
  structure as follows:\n```\npath/to/stuff/\n  +-- project/\n        +-- folder-one/\n
  \             +-- source.hs\n```\nThe corresponding `proj` and `src` would be equivalent
  to:\n```\nproj = path/to/stuff\nsrc  = path/to/stuff/folder-one/source.hs\n```\nThe
  extracted `[SSTG.Binding]`, like almost everything in SSTG, is endowed with `Show,
  Equal, Read`. However, it is advised to use the pretty-print functions defined in
  `SSTG.Utils.Printing`. For instance:\n```\npprBindingStr :: SSTG.Binding -> String\n```\n\n####
  Defunctionalizatoin\n\n#### Symbolic Execution\n\n#### Constraint Solving\nTo come.\n\n##
  TODO List\n* Defunctionalization pre-processing\n* SMT integration\n\n## Shortcommings\n*
  Uninterpreted function evaluations are abstracted as symbolic computations. This
  includes all functions defined in `Prelude` and those not defined in the scope of
  the target programs.\n* There might be bugs, who knows? :)\n"
license-name: BSD3
