homepage: ''
changelog-type: text
hash: 2241bc12390fb7603fc5628eaa7b18e3215d9466618879e0bc92cd1e09f23219
test-bench-deps:
  cereal: -any
  bytestring: -any
  cereal-conduit: -any
  Cabal: ! '>=1.10'
  base: -any
  wire-streams: -any
  criterion: ! '>=1.0.2.0'
  conduit: -any
  conduit-extra: -any
  io-streams: -any
  binary: -any
  cabal-test-quickcheck: -any
  transformers: -any
  QuickCheck: -any
maintainer: winterland1989@gmail.com
synopsis: Use cereal or binary with io-streams.
changelog: ! '# v0.0.2.0


  Add binary support, unify API, optimize cereal''s putToStream/putOutputStream, add
  benchmark.


  # v0.0.1.0


  Clean up code, rewrite main parsing function, fix broken benchmark, and add more
  functions.

'
basic-deps:
  cereal: ! '>=0.5 && <0.6'
  bytestring: ! '>=0.10.2.0'
  base: ! '>=4 && <5'
  io-streams: ! '>=1.2'
  binary: ! '>=0.6 && <0.9'
all-versions:
- '0.0.2.0'
author: Michael Xavier, Petter Bergman, Winterland
latest: '0.0.2.0'
description-type: markdown
description: ! "wire-streams \n==============\n\n[![Hackage](https://img.shields.io/hackage/v/wire-streams.svg?style=flat)](http://hackage.haskell.org/package/wire-streams)\n[![Build
  Status](https://travis-ci.org/winterland1989/wire-streams.svg)](https://travis-ci.org/winterland1989/wire-streams)\n\nOne
  stop solution to serialize/deserialize [io-streams](http://hackage.haskell.org/package/io-streams):\n\n+
  `System.IO.Streams.Cereal` use [cereal](http://hackage.haskell.org/package/cereal)
  to serialize/deserialize, cereal provides sanner default to `Double`(IEEE-754),
  and `ShortByteString` support.\n\n+  `System.IO.Streams.Binary` use [binary](http://hackage.haskell.org/package/binary)
  to serialize/deserialize, binary provide some useful helpers currently not available
  in cereal(`getLazyByteStringNul`).\n\nThis package is rewritten from [cereal-io-streams](https://github.com/Soostone/cereal-io-streams)
  and [binary-streams](https://github.com/jonpetterbergman/binary-streams) with following
  changes:\n\n+ Completely rewrite cereal/io-streams adapter.\n+ Clean and unify APIs.
  \n+ Add more test and benchmark.\n\nBoth cereal and binary are top notch serialize/deserialize
  libaries, you wouldn't go wrong with either choice. This package mainly serve my
  purpose to develop native mysql adapter, but also provide a benchmark/comparsion
  across cereal and binary. here's benchmark result against [cereal-conduit](http://hackage.haskell.org/package/cereal-conduit):\n\n```\nbenchmarking
  decode one element wire-streams/cereal/1000 items\ntime                 126.7 ns
  \  (125.1 ns .. 128.2 ns)\n                     0.999 R²   (0.998 R² .. 0.999 R²)\nmean
  \                127.4 ns   (126.1 ns .. 128.9 ns)\nstd dev              4.887 ns
  \  (4.122 ns .. 6.214 ns)\nvariance introduced by outliers: 58% (severely inflated)\n\nbenchmarking
  decode one element wire-streams/binary/1000 items\ntime                 218.4 ns
  \  (216.8 ns .. 220.0 ns)\n                     0.999 R²   (0.999 R² .. 1.000 R²)\nmean
  \                217.5 ns   (215.8 ns .. 219.2 ns)\nstd dev              5.588 ns
  \  (4.589 ns .. 7.044 ns)\nvariance introduced by outliers: 37% (moderately inflated)\n\nbenchmarking
  decode one element cereal-conduit/1000 items\ntime                 318.5 ns   (314.7
  ns .. 322.1 ns)\n                     0.999 R²   (0.999 R² .. 0.999 R²)\nmean                 319.2
  ns   (316.1 ns .. 322.7 ns)\nstd dev              11.37 ns   (8.824 ns .. 15.09
  ns)\nvariance introduced by outliers: 53% (severely inflated)\n\nbenchmarking decode
  1000 elements from wire-streams/cereal/1000 items\ntime                 99.61 μs
  \  (98.56 μs .. 100.9 μs)\n                     0.997 R²   (0.994 R² .. 0.999 R²)\nmean
  \                100.4 μs   (98.83 μs .. 102.5 μs)\nstd dev              6.321 μs
  \  (4.136 μs .. 9.830 μs)\nvariance introduced by outliers: 64% (severely inflated)\n\nbenchmarking
  decode 1000 elements from wire-streams/binary/1000 items\ntime                 189.3
  μs   (187.0 μs .. 191.5 μs)\n                     0.999 R²   (0.998 R² .. 0.999
  R²)\nmean                 189.3 μs   (187.5 μs .. 190.9 μs)\nstd dev              5.868
  μs   (4.966 μs .. 7.174 μs)\nvariance introduced by outliers: 27% (moderately inflated)\n\nbenchmarking
  decode 1000 elements cereal-conduit/1000 items\ntime                 203.3 μs   (201.1
  μs .. 205.7 μs)\n                     0.998 R²   (0.996 R² .. 0.999 R²)\nmean                 204.0
  μs   (201.3 μs .. 207.9 μs)\nstd dev              10.38 μs   (7.759 μs .. 14.73
  μs)\nvariance introduced by outliers: 49% (moderately inflated)\n```\n"
license-name: BSD3
