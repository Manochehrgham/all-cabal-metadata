homepage: https://github.com/ppelleti/hs-wiringPi
changelog-type: text
hash: 14091244775279dcf679a78171ccc59244483f0cfbc357f1bc2cfd2fd25c987d
test-bench-deps: {}
maintainer: code@funwithsoftware.org
synopsis: Access GPIO pins on Raspberry Pi via wiringPi library
changelog: ! "-*- Text -*-\n\n1.0.1  @  Mon Mar 27 13:30:49 PDT 2017\n\n* Examples
  for Pi-LITEr and Fish Dish boards.\n\n* Added piGpioLayout as a synonym for piBoardRev,
  to reflect the name\n  change in version 2.36 of the C library.\n\n* Addition of
  wiringPiISR function.  (Contributed by Satoshi Ogata.)\n\n* Improvements to documentation
  and examples.\n\n1.0  @  Mon Jan 23 17:51:35 PST 2017\n\n* Initialization is now
  automatic.\n\n* Pin now has three constructors, one for each pin numbering scheme.\n
  \ You can now mix pin numbering schemes in a single program, rather\n  than having
  to choose one at initialization time.\n\n0.1  @  Tue Jan 10 21:15:33 UTC 2017\n\n*
  Initial release.\n"
basic-deps:
  base: ! '>=4.6 && <5'
  wiringPi: -any
all-versions:
- '0.1.0.0'
- '1.0'
- '1.0.1'
author: Patrick Pelletier
latest: '1.0.1'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/wiringPi.svg)](https://hackage.haskell.org/package/wiringPi)\n\nThis
  is a Haskell binding to the [wiringPi library][1], which allows\nyou to interface
  with the [GPIO][4] pins on the [Raspberry Pi][2].\nUnlike some other solutions for
  using the Raspberry Pi's GPIO pins,\nwiringPi provides access to more advanced features,
  such as enabling\nthe internal pull-up or pull-down resistors.\n\n## Usage\n\nTo
  use this library, you must either run as root, or set the\n`WIRINGPI_GPIOMEM` environment
  variable.  (Set it to anything; the\nvalue does not matter.)  However, [PWM][7]
  will not work if\n`WIRINGPI_GPIOMEM` is set.\n\nThis library will only build on
  the Raspberry Pi.  Before building\nthis library, you must install the \"wiringPi\"
  C library on your\nRaspberry Pi, like this:\n\n    sudo apt-get install wiringpi\n\nTested
  on a Raspberry Pi Model B, with [Raspbian Jessie Lite][3],\nusing the system-provided
  Haskell compiler.  (GHC 7.6.3.)\n\n## Pin Numbering\n\nWiringPi allows each pin
  to be identified by one of three names.  A\npin can be identified by its physical
  pin number, by its Broadcom GPIO\nnumber (this is the one most commonly used in
  the Raspberry Pi\ncommunity), or by its wiringPi pin number.  The `Pin` type has
  three\nconstructors (`Wpi`, `Gpio`, and `Phys`), allowing you to call a pin\nby
  any of its three names.  These names are synonymous and\ninterchangeable.\n\nThe
  following diagram illustrates the three names of each pin, and\nalso identifies
  which pins can be placed in `PWM_OUTPUT` mode or\n[`GPIO_CLOCK`][8] mode.\n\n![Pinout](pin-diagram.png)\n\nSimilar
  diagrams are available on [the wiringPi site][5] or on\n[pinout.xyz][6].\n\nOne
  additional wrinkle is that some very early Raspberry Pis use\ndifferent Broadcom
  GPIO numbers for a few of the pins.  WiringPi\nautomatically takes this into account,
  but it means that equality for\n`Pin` actually depends on which board revision you
  have.\n\n## Licensing\n\nThis Haskell binding is licensed under the 3-clause BSD
  license, and\nthe examples in the `examples` directory are in the public domain.\nHowever,
  be aware that the wiringPi C library itself is licensed under\nthe LGPLv3+.\n\n[1]:
  http://wiringpi.com/\n[2]: https://www.raspberrypi.org/\n[3]: https://www.raspberrypi.org/downloads/raspbian/\n[4]:
  https://en.wikipedia.org/wiki/General-purpose_input/output\n[5]: http://wiringpi.com/pins/\n[6]:
  https://pinout.xyz/pinout/wiringpi\n[7]: https://en.wikipedia.org/wiki/Pulse-width_modulation\n[8]:
  https://pinout.xyz/pinout/gpclk\n"
license-name: BSD3
