homepage: http://github.com/mikesteele81/win32-services
changelog-type: text
hash: 61a0b3a9f69f559bfeb1e45a7a78958deae9982ff3bbd987278dcd3c673520ad
test-bench-deps: {}
maintainer: Michael Steele <mikesteele81@gmail.com>
synopsis: Windows service applications
changelog: ! "# 0.2 series\r\n\r\n## 0.2.5.1\r\n\r\n* bugfix in \"simple\" example.\r\n\r\n##
  0.2.5\r\n\r\n* Update library dependencies to support GHC 7.10.1.\r\n* Remove dependency
  on \"errors\" library.\r\n\r\n## 0.2.4\r\n\r\n* bug fix: eRROR_SERVICE_SPECIFIC_ERROR
  was mapped to the wrong code.\r\n\r\n* Add upper-version bounds to build dependencies.\r\n\r\n##
  0.2.3\r\n\r\n* Update library dependencies to support GHC 7.8.\r\n\r\n## 0.2.2\r\n\r\n*
  Update library dependencies to support GHC 7.6.\r\n\r\n## 0.2.1\r\n\r\n* bug fix:
  Services were failing to enter a STOPPED state. It is now the\r\n  user's responsibility
  to enter a stopped state in the service main function.\r\n  The 'startServiceCtrlDispatcher'
  function will continue to automatically put\r\n  the service into a START_PENDING
  state.\r\n\r\n## 0.2\r\n\r\n* Writing services of the WIN32_OWN_PROCESS type is
  now easier. Handler\r\n  registration is performed automatically. By the time the
  service main\r\n  function is entered, the service will already be in the 'START_PENDING'\r\n
  \ state. It is the user's responsibility to enter the 'RUNNING' state as soon\r\n
  \ as possible.\r\n\r\n* Once the service main function exits two things will occur.
  The service\r\n  will enter the 'STOPPED' state, and the handler function will be
  freed.\r\n\r\n* The 'registerServiceCtrlHandlerEx' function is no longer\r\n  exported.
  Handlers are registered automatically by the\r\n  'startServiceCtrlDispatcher' function.\r\n\r\n*
  The 'queryServiceStatus' function has been added.\r\n\r\n# 0.1 series\r\n\r\n##
  0.1\r\n\r\n* First release\r\n"
basic-deps:
  base: ! '>=4.5 && <4.9'
  Win32: ! '>=2.2 && <2.4'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.2.3'
- '0.2.3.1'
- '0.2.4'
- '0.2.5'
- '0.2.5.1'
author: Michael Steele
latest: '0.2.5.1'
description-type: haddock
description: ! 'This package provides a partial binding to the Win32 System Services

  API. It makes it easy to write Windows service applications using

  Haskell. _Only 32-bit versions of GHC are supported at this time._


  The binding is partial. Here are a few ways in which it differs from the

  official API:


  * Only services running within their own process are supported. These are

  processes of the "WIN32_OWN_PROCESS" type.


  * In cases where multiple versions of the same function exist (for

  compatibility), this binding only offers one of them.


  * None of the extended control codes are supported. Handlers you write will

  automatically report this to the operating system when such controls are

  received.


  * Only facilities for writing services are supported; not controlling them.


  Effort has been made to simplify using the API without hiding what is

  happening behind the scenes. Users are encouraged to read Microsoft''s

  documentation under ''Dev Center - Desktop > Docs > Desktop app development

  documentation > System Services > Services''. The official example has been

  ported to Haskell. This can be found in the ''examples'' directory of the

  source tree.


  /Simple Example and Usage/


  @

  module Main where


  import Control.Concurrent.MVar

  import System.Win32.SystemServices.Services


  main = do

  &#x20;   mStop <- newEmptyMVar

  &#x20;   startServiceCtrlDispatcher \"Test\" 3000 (handler mStop) $ \\_ _ h -> do

  &#x20;       setServiceStatus h running

  &#x20;       takeMVar mStop

  &#x20;       setServiceStatus h stopped


  handler mStop hStatus STOP = do

  &#x20;   setServiceStatus hStatus stopPending

  &#x20;   putMVar mStop ()

  &#x20;   return True

  handler _ _ INTERROGATE = return True

  handler _ _ _           = return False


  running = SERVICE_STATUS WIN32_OWN_PROCESS RUNNING [ACCEPT_STOP] nO_ERROR 0 0 0

  stopped = SERVICE_STATUS WIN32_OWN_PROCESS STOPPED [] nO_ERROR 0 0 0

  stopPending = SERVICE_STATUS WIN32_OWN_PROCESS STOP_PENDING [ACCEPT_STOP] nO_ERROR
  0 0 0

  @


  @

  C:\programming\test\>ghc --make -threaded Main.hs

  [1 of 1] Compiling Main             ( Main.hs, Main.o )

  Linking Main.exe ...

  \<linker warnings omitted\>

  C:\\programming\\test\>copy Main.exe c:\\svc\\Test.exe

  1 file(s) copied.

  @


  Execute the following from an elevated command prompt to register the

  service:


  @

  C:\\svc\>sc create Test binPath= c:\\svc\\Test.exe

  [SC] CreateService SUCCESS

  @


  The service can now be started and stopped from the services console.


  Installation Notes:


  Depending on which version of Windows and the Windows SDK you are using the

  .cabal file will need to be modified before installing. A simple `cabal

  install Win32-services` may not work. For example, If you are building on

  Windows 8 64-bit with the Windows 8 SDK the ''extra-lib-dirs'' field will need

  to be changed to read as follows:


  @

  Extra-Lib-Dirs: \"C:\\\\Program Files (x86)\\\\Windows Kits\\\\8.0\\\\Lib\\\\win8\\\\um\\\\x86\"

  @'
license-name: BSD3
