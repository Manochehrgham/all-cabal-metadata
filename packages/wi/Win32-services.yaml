changelog-type: ''
hash: 53025fbccb87efe66a342772335b574a3721b9403ffebb821c6b96e271542906
synopsis: Windows service applications
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.2.3'
- '0.2.3.1'
- '0.2.4'
- '0.2.5'
- '0.2.5.1'
latest: '0.2.5.1'
description-type: haddock
description: ! 'This package provides a partial binding to the Win32 System Services

  API. It makes it easy to write Windows service applications using

  Haskell. _Only 32-bit versions of GHC are supported at this time._


  The binding is partial. Here are a few ways in which it differs from the

  official API:


  * Only services running within their own process are supported. These are

  processes of the "WIN32_OWN_PROCESS" type.


  * In cases where multiple versions of the same function exist (for

  compatibility), this binding only offers one of them.


  * None of the extended control codes are supported. Handlers you write will

  automatically report this to the operating system when such controls are

  received.


  * Only facilities for writing services are supported; not controlling them.


  Effort has been made to simplify using the API without hiding what is

  happening behind the scenes. Users are encouraged to read Microsoft''s

  documentation under ''Dev Center - Desktop > Docs > Desktop app development

  documentation > System Services > Services''. The official example has been

  ported to Haskell. This can be found in the ''examples'' directory of the

  source tree.


  /Simple Example and Usage/


  @

  module Main where


  import Control.Concurrent.MVar

  import System.Win32.SystemServices.Services


  main = do

  &#x20;   mStop <- newEmptyMVar

  &#x20;   startServiceCtrlDispatcher \"Test\" 3000 (handler mStop) $ \\_ _ h -> do

  &#x20;       setServiceStatus h running

  &#x20;       takeMVar mStop

  &#x20;       setServiceStatus h stopped


  handler mStop hStatus STOP = do

  &#x20;   setServiceStatus hStatus stopPending

  &#x20;   putMVar mStop ()

  &#x20;   return True

  handler _ _ INTERROGATE = return True

  handler _ _ _           = return False


  running = SERVICE_STATUS WIN32_OWN_PROCESS RUNNING [ACCEPT_STOP] nO_ERROR 0 0 0

  stopped = SERVICE_STATUS WIN32_OWN_PROCESS STOPPED [] nO_ERROR 0 0 0

  stopPending = SERVICE_STATUS WIN32_OWN_PROCESS STOP_PENDING [ACCEPT_STOP] nO_ERROR
  0 0 0

  @


  @

  C:\programming\test\>ghc --make -threaded Main.hs

  [1 of 1] Compiling Main             ( Main.hs, Main.o )

  Linking Main.exe ...

  \<linker warnings omitted\>

  C:\\programming\\test\>copy Main.exe c:\\svc\\Test.exe

  1 file(s) copied.

  @


  Execute the following from an elevated command prompt to register the

  service:


  @

  C:\\svc\>sc create Test binPath= c:\\svc\\Test.exe

  [SC] CreateService SUCCESS

  @


  The service can now be started and stopped from the services console.


  Installation Notes:


  Depending on which version of Windows and the Windows SDK you are using the

  .cabal file will need to be modified before installing. A simple `cabal

  install Win32-services` may not work. For example, If you are building on

  Windows 8 64-bit with the Windows 8 SDK the ''extra-lib-dirs'' field will need

  to be changed to read as follows:


  @

  Extra-Lib-Dirs: \"C:\\\\Program Files (x86)\\\\Windows Kits\\\\8.0\\\\Lib\\\\win8\\\\um\\\\x86\"

  @'
