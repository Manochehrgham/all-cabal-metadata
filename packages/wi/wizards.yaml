homepage: ''
changelog-type: ''
hash: e53420007719b01306278854cfc5afce5d912978cb9ce7e0bda3919bc27f7909
test-bench-deps: {}
maintainer: liamoc@cse.unsw.edu.au
synopsis: High level, generic library for interrogative user interfaces
changelog: ''
basic-deps:
  haskeline: ! '>=0.6 && <0.8'
  base: ==4.*
  containers: ! '>=0.4 && <0.6'
  control-monad-free: ! '>=0.5 && <0.7'
  mtl: ! '>=2.0 && <2.3'
  transformers: ! '>=0.1 && <0.5'
all-versions:
- '0.1'
- '1.0'
- '1.0.1'
- '1.0.2'
author: Liam O'Connor-Davis
latest: '1.0.2'
description-type: haddock
description: ! '@wizards@ is a package designed for the quick and painless development
  of /interrogative/ programs, which

  revolve around a \"dialogue\" with the user, who is asked a series of questions
  in a sequence much like an

  installation wizard.


  Everything from interactive system scripts, to installation wizards, to full-blown
  shells can be implemented with

  the support of @wizards@.


  It is developed transparently on top of a free monad, which separates out the semantics
  of the program from any

  particular interface. A variety of backends exist, including console-based "System.Console.Wizard.Haskeline"
  and

  "System.Console.Wizard.BasicIO", and the pure "System.Console.Wizard.Pure". It is
  also possible to write your

  own backends, or extend existing back-ends with new features. While both built-in
  IO backends operate on a

  console, there is no reason why @wizards@ cannot also be used for making GUI wizard
  interfaces.



  See the github page for examples on usage:


  <http://www.github.com/liamoc/wizards>


  For creating backends, the module "System.Console.Wizard.Internal" has a brief tutorial.'
license-name: BSD3
