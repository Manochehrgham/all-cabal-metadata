changelog-type: ''
hash: 229e4be03c0819b93134b4f5a9946f1dd6c82406dd8dc02ad493ec862a2d0b59
synopsis: First class accessor labels implemented as lenses.
changelog: ''
all-versions:
- '0.1'
- '0.1.2'
- '0.2.0'
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.2.1'
- '0.9.0'
- '0.9.1'
- '0.11.0'
- '0.11.1'
- '0.11.1.1'
- '0.11.2'
- '1.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
- '1.0.5'
- '1.1.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.1.0'
- '1.1.1.1'
- '1.1.2'
- '1.1.3'
- '1.1.4'
- '1.1.4.1'
- '1.1.4.2'
- '1.1.4.3'
- '1.1.5'
- '1.1.6'
- '1.1.7'
- '1.1.7.1'
- '2.0'
- '2.0.0.1'
- '2.0.0.2'
- '2.0.0.3'
- '2.0.0.4'
- '2.0.0.5'
- '2.0.1'
- '2.0.1.1'
- '2.0.2'
- '2.0.2.1'
- '2.0.2.2'
latest: '2.0.2.2'
description-type: haddock
description: ! 'This package provides first class labels that can act as

  bidirectional record fields. The labels can be derived

  automatically using Template Haskell which means you don''t have

  to write any boilerplate yourself. The labels are implemented as

  /lenses/ and are fully composable. Lenses can be used to /get/,

  /set/ and /modify/ parts of a data type in a consistent way.


  See "Data.Label" for an introductory explanation or see the

  introductory blog post at

  <http://fvisser.nl/post/2013/okt/1/fclabels-2.0.html>


  * /Total and partial lenses/


  Internally lenses do not used Haskell functions directly, but

  are implemented as categories. Categories allow the lenses to be

  run in custom computational contexts. This approach allows us to

  make partial lenses that point to fields of multi-constructor

  datatypes in an elegant way.


  See "Data.Label.Partial" for the use of partial labels.


  * /Monomorphic and polymorphic lenses/


  We have both polymorphic and monomorphic lenses. Polymorphic

  lenses allow updates that change the type. The types of

  polymorphic lenses are slightly more verbose than their

  monomorphic counterparts, but their usage is similar. Because

  monomorphic lenses are built by restricting the types of

  polymorphic lenses they are essentially the same and can be

  freely composed with eachother.


  See "Data.Label.Mono" and "Data.Label.Poly" for the difference

  between polymorphic and monomorphic lenses.


  * /Using fclabels/


  To simplify working with labels we supply both a set of labels

  for Haskell''s base types, like lists, tuples, Maybe and Either,

  and we supply a set of combinators for working with labels for

  values in the Reader and State monad.


  See "Data.Label.Base" and "Data.Label.Monadic" for more

  information.


  * /Changelog from 2.0.2.1 to 2.0.2.2/


  >   - Restored support for GHC 7.4.'
