homepage: http://github.com/tweag/inline-java#readme
changelog-type: markdown
hash: 291d6c3a3c899888c654525e2005a0d5dc823f476b7ced51491ef1bf899dee59
test-bench-deps:
  bytestring: -any
  base: -any
  jni: -any
  hspec: -any
  text: -any
  jvm: -any
  singletons: -any
  inline-java: -any
maintainer: m@tweag.io
synopsis: Java interop via inline Java code in Haskell modules.
changelog: ! "# Change Log\n\nAll notable changes to this project will be documented
  in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\n\n##
  [0.6.0] - 2016-12-13\n\n### Added\n\n* Can set a custom `CLASSPATH` in `Setup.hs`
  from Gradle build\n  configurations to use when compiling inline expressions.\n*
  GHC 8 compatibility\n* Support inline expressions that compile to multiple .class
  files\n  (e.g for anonymous classes and anonymous function literals).\n\n### Changed\n\n*
  The return type of inline expressions no longer needs\n  `Reify`/`Reflect` instances.\n\n###
  Fixed\n\n* Fix antiquotation: in [java| $obj.foo() |], `obj` is now recognized\n
  \ as an antiquotation variable.\n* Passing multiple options to the JVM using `withJVM`.\n\n##
  [0.5.0] - 2016-12-13\n\n### Added\n\n* First release with support for inline Java
  expressions.\n\n### Changed\n\n* Split lower-level and mid-level bindings into separate
  packages: jni\n  and jvm.\n"
basic-deps:
  bytestring: ! '>=0.10'
  inline-c: ! '>=0.5'
  thread-local-storage: ! '>=0.1'
  Cabal: ! '>=1.24'
  base: ! '>4.9.0.0 && <5'
  jni: ! '>=0.1'
  text: ! '>=1.2'
  syb: ! '>=0.6'
  filepath: ! '>=1'
  process: ! '>=1.2'
  jvm: ! '>=0.1'
  containers: ! '>=0.5'
  singletons: ! '>=2.0'
  distributed-closure: ! '>=0.3'
  binary: ! '>=0.7'
  ghc-heap-view: ! '>=0.5'
  temporary: ! '>=1.2'
  language-java: ! '>=0.2'
  template-haskell: ! '>=2.10'
  vector: ! '>=0.11'
  directory: ! '>=1.2'
all-versions:
- '0.1'
- '0.5'
- '0.5.1'
- '0.6'
author: Tweag I/O
latest: '0.6'
description-type: markdown
description: ! "# inline-java: Call any JVM function from Haskell\n\n[![wercker status](https://app.wercker.com/status/dfeba78838cc77d4c5e06eedc5c0833d/s/master
  \"wercker status\")](https://app.wercker.com/project/byKey/dfeba78838cc77d4c5e06eedc5c0833d)\n\n**NOTE:
  you'll need GHC >= 8.0.2 to compile and use this package. Use**\n```\nstack --nix
  --stack-yaml stack-HEAD.yaml build\n```\n**ahead of a new GHC release to build using
  GHC HEAD.**\n\nThe Haskell standard includes a native foreign function interface\n(FFI).
  It can be a pain to use and in any case only C support is\nimplemented in GHC. `inline-java`
  lets you call any JVM function\ndirectly, from Haskell, without the need to write
  your own foreign\nimport declarations using the FFI. In the style of `inline-c`
  for C and\n`inline-r` for calling R, `inline-java` lets you name any function to\ncall
  inline in your code.\n\n## Example\n\nGraphical Hello World using Java Swing:\n\n```Haskell\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE ScopedTypeVariables #-}\nmodule Main where\n\nimport Data.Int\nimport
  Data.Text (Text)\nimport Language.Java\nimport Language.Java.Inline\n\nmain :: IO
  Int32\nmain = withJVM [] $ do\n    -- Extra type annotation workaround for current
  GHC HEAD.\n    message :: J ('Class \"java.lang.String\") <- reflect (\"Hello World!\"
  :: Text)\n    [java| { javax.swing.JOptionPane.showMessageDialog(null, $message);\n
  \            return 0; } |]\n```\n\n## Building it\n\n**Requirements:**\n* the [Stack][stack]
  build tool (version 1.2 or above);\n* either, the [Nix][nix] package manager,\n*
  or, OpenJDK, Gradle and Spark (version 1.6) installed from your distro.\n\nTo build:\n\n```\n$
  stack build\n```\n\nYou can optionally get Stack to download a JDK in a local sandbox\n(using
  [Nix][nix]) for good build results reproducibility. **This is\nthe recommended way
  to build inline-java.** Alternatively, you'll need\nit installed through your OS
  distribution's package manager for the\nnext steps (and you'll need to tell Stack
  how to find the JVM header\nfiles and shared libraries).\n\nTo use Nix, set the
  following in your `~/.stack/config.yaml` (or pass\n`--nix` to all Stack commands,
  see the [Stack manual][stack-nix] for\nmore):\n\n```yaml\nnix:\n  enable: true\n```\n\n[stack]:
  https://github.com/commercialhaskell/stack\n[stack-nix]: https://docs.haskellstack.org/en/stable/nix_integration/#configuration\n[nix]:
  http://nixos.org/nix\n\n## License\n\nCopyright (c) 2015-2016 EURL Tweag.\n\nAll
  rights reserved.\n\ninline-java is free software, and may be redistributed under
  the terms\nspecified in the [LICENSE](LICENSE) file.\n\n## About\n\n![Tweag I/O](http://i.imgur.com/0HK8X4y.png)\n\ninline-java
  is maintained by [Tweag I/O](http://tweag.io/).\n\nHave questions? Need help? Tweet
  at\n[@tweagio](http://twitter.com/tweagio).\n"
license-name: BSD3
