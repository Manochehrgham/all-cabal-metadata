homepage: http://github.com/tweag/inline-java#readme
changelog-type: ''
hash: a721e5ce6713353037415656140e101c9cd8d857867da7d422e7b5ac46d5b3cd
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  jvm: -any
  singletons: -any
  inline-java: -any
maintainer: m@tweag.io
synopsis: Java interop via inline Java code in Haskell modules.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10'
  inline-c: ! '>=0.5'
  thread-local-storage: ! '>=0.1'
  base: ! '>4.9.0.0 && <5'
  jni: ! '>=0.1'
  text: ! '>=1.2'
  syb: ! '>=0.6'
  monad-loops: ! '>=0.4'
  filepath: ! '>=1'
  process: ! '>=1.2'
  jvm: ! '>=0.1'
  containers: ! '>=0.5'
  singletons: ! '>=2.0'
  distributed-closure: ! '>=0.3'
  binary: ! '>=0.7'
  ghc-heap-view: ! '>=0.5'
  temporary: ! '>=1.2'
  language-java: ! '>=0.2'
  template-haskell: ! '>=2.10'
  vector: ! '>=0.11'
all-versions:
- '0.1'
- '0.5'
- '0.5.1'
author: Tweag I/O
latest: '0.5.1'
description-type: markdown
description: ! "# inline-java: Call any JVM function from Haskell\n\n[![Circle CI](https://circleci.com/gh/tweag/inline-java.svg?style=svg)](https://circleci.com/gh/tweag/inline-java)\n\n**NOTE:
  you'll need GHC >= 8.0.2 to compile and use this package. Use**\n```\nstack --nix
  --stack-yaml stack-HEAD.yaml build\n```\n**ahead of a new GHC release to build using
  GHC HEAD.**\n\nThe Haskell standard includes a native foreign function interface\n(FFI).
  It can be a pain to use and in any case only C support is\nimplemented in GHC. `inline-java`
  lets you call any JVM function\ndirectly, from Haskell, without the need to write
  your own foreign\nimport declarations using the FFI. In the style of `inline-c`
  for C and\n`inline-r` for calling R, `inline-java` lets you name any function to\ncall
  inline in your code.\n\n# Example\n\nGraphical Hello World using Java Swing:\n\n```Haskell\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE ScopedTypeVariables #-}\nmodule Main where\n\nimport Data.Int\nimport
  Data.Text (Text)\nimport Language.Java\nimport Language.Java.Inline\n\nmain :: IO
  Int32\nmain = withJVM [] $ do\n    -- Extra type annotation workaround for current
  GHC HEAD.\n    message :: J ('Class \"java.lang.String\") <- reflect (\"Hello World!\"
  :: Text)\n    [java| { javax.swing.JOptionPane.showMessageDialog(null, $message);\n
  \            return 0; } |]\n```\n\n## License\n\nCopyright (c) 2015-2016 EURL Tweag.\n\nAll
  rights reserved.\n\ninline-java is free software, and may be redistributed under
  the terms\nspecified in the [LICENSE](LICENSE) file.\n\n## About\n\n![Tweag I/O](http://i.imgur.com/0HK8X4y.png)\n\ninline-java
  is maintained by [Tweag I/O](http://tweag.io/).\n\nHave questions? Need help? Tweet
  at\n[@tweagio](http://twitter.com/tweagio).\n"
license-name: BSD3
