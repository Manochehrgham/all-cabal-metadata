homepage: https://sealgram.com/git/haskell/interruptible/
changelog-type: ''
hash: 51908ce437eee32ad6e6e0fec56476e7195359c5a8a60320408ebb0dc23895ee
test-bench-deps:
  either: -any
  Cabal: ! '>=1.9.2'
  base: ! '>=4.7 && <5.0'
  interruptible: -any
  transformers: -any
maintainer: marcos@marcosdumay.com
synopsis: Monad transformers that can be run and resumed later, conserving their context.
changelog: ''
basic-deps:
  either: -any
  base: ! '>=4.7 && <4.9'
  monad-control: -any
  lifted-base: -any
  transformers: -any
all-versions:
- '0.1.0.0'
author: Marcos Dumay de Medeiros
latest: '0.1.0.0'
description-type: haddock
description: ! 'Given an inner monad and a transformer:

  > (Monad m, MonadTrans t)

  If ''t'' is an interruptible transformer, it becomes possible to intercalate executions

  on the ''t'' context with executions over the inner monad ''m'' by breaking the
  execution

  on ''t'' and resuming it later.


  Interruptible monads implement the ''runI'' function so that, given ''f :: a ->
  t m b'' and

  ''g :: b -> t m c'', ''resume (f >>= g)'' is equivalent to ''\x -> resume f x >>=
  resume g''.


  That makes it possible to intercalate the execution of different monads, and even
  to

  return a monadic context for another function to resume it.'
license-name: BSD3
