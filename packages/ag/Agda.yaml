changelog-type: ''
hash: b44b3d7d55c671b9aa929a317b5bb24fbc304591c56a045691ceec3dbba6bbcc
synopsis: A dependently typed functional programming language and proof assistant
changelog: ''
all-versions:
- '2.2.0'
- '2.2.2'
- '2.2.4'
- '2.2.6'
- '2.2.8'
- '2.2.10'
- '2.3.0'
- '2.3.0.1'
- '2.3.2'
- '2.3.2.1'
- '2.3.2.2'
- '2.4.0'
- '2.4.0.1'
- '2.4.0.2'
- '2.4.2'
- '2.4.2.1'
- '2.4.2.2'
latest: '2.4.2.2'
description-type: haddock
description: ! 'Agda is a dependently typed functional programming language: It has

  inductive families, which are similar to Haskell''s GADTs, but they

  can be indexed by values and not just types. It also has

  parameterised modules, mixfix operators, Unicode characters, and an

  interactive Emacs interface (the type checker can assist in the

  development of your code).


  Agda is also a proof assistant: It is an interactive system for

  writing and checking proofs. Agda is based on intuitionistic type

  theory, a foundational system for constructive mathematics developed

  by the Swedish logician Per Martin-L&#xf6;f. It has many

  similarities with other proof assistants based on dependent types,

  such as Coq, Epigram and NuPRL.


  This package includes both a command-line program (agda) and an

  Emacs mode. If you want to use the Emacs mode you can set it up by

  running @agda-mode setup@ (see the README).


  Note that the Agda library does not follow the package versioning

  policy, because it is not intended to be used by third-party

  packages.'
