homepage: https://github.com/masterdezign/hmep#readme
changelog-type: markdown
hash: a1ea99f93c431f0b9496c72290b0f506ceed2efaf9912ffbc56fc8f2a6b8afbd
test-bench-deps:
  base: -any
  HUnit: -any
  hmep: -any
  vector: -any
maintainer: dev at penkovsky dot com
synopsis: ! 'HMEP Multi Expression Programming â€“

  a genetic programming variant'
changelog: ! "# Changelog for [`hmep` package](http://hackage.haskell.org/package/hmep)\n\n##
  0.1.0 *October 8th 2017*\n  * Breaking changes:\n    drop [monad-mersenne-random](http://hackage.haskell.org/package/monad-mersenne-random)\n
  \   which doesn't build with newer version of GHC. Instead, depend on the\n    [probable](http://hackage.haskell.org/package/probable)
  package.\n\n## 0.0.1 *October 7th 2017*\n  * Improved demo: trigonometric identities
  solving example\n  * Add `avgLoss` to the library\n  * Fixes:\n    * Change the
  crossover probability using Config.p'crossover parameter\n\n## 0.0.0 *October 6th
  2017*\n  * Initial release\n"
basic-deps:
  mwc-random: -any
  base: ! '>=4.7 && <5'
  probable: -any
  statistics: ! '>=0.10 && <0.14'
  hmep: -any
  primitive: -any
  vector: -any
all-versions:
- '0.0.0'
- '0.0.1'
- '0.1.0'
author: Bogdan Penkovsky
latest: '0.1.0'
description-type: markdown
description: ! "# Multi Expression Programming\n\nYou say, not enough Haskell machine
  learning libraries?\n\nHere is yet another one!\n\n\n## History\n\nThere exist many
  other Genetic Algorithm (GA) Haskell packages.\nPersonally I have used\n[simple
  genetic algorithm](http://hackage.haskell.org/package/simple-genetic-algorithm-mr),\n[GA](http://hackage.haskell.org/package/GA),\nand
  [moo](http://hackage.haskell.org/package/moo) for quite a long time.\nThe last package
  was the most preferred, but the other two are\nalso great.\n\nHowever, when I came
  up with this\n[MEP paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.5.4352&rep=rep1&type=pdf),\nto
  my surprise there was no MEP realization in Haskell.\nSoon I realized that existing
  GA packages are limited,\nand it would be more efficient to implement MEP from scratch.\n\nThat
  is how this package was started. I also wish to say thank you\nto the authors of
  the [moo](http://hackage.haskell.org/package/moo)\nGA library, which inspired the
  present\n[hmep](http://github.com/masterdezign/hmep) package.\n\n\n## About MEP\n\nMulti
  Expression Programming is a genetic programming variant encoding multiple\nsolutions
  in the same chromosome. A chromosome is a computer program.\nEach gene is featuring
  [code reuse](https://en.wikipedia.org/wiki/Code_reuse).\nFor more details, please
  check http://mepx.org/papers.html and\nhttps://en.wikipedia.org/wiki/Multi_expression_programming.\n\n\n##
  How to build\n\nUse [Stack](http://haskellstack.org).\n\n     $ git clone https://github.com/masterdezign/hmep.git
  && cd hmep\n     $ stack build --install-ghc\n\nNow, run the demo to calculate cos^2(x)
  through sin(x):\n\n     $ stack exec hmep-demo\n\n     Average loss in the initial
  population 15.268705681244962\n     Population 10: average loss 14.709728527360586\n
  \    Population 20: average loss 13.497114190675477\n     Population 30: average
  loss 8.953185872653737\n     Population 40: average loss 8.953185872653737\n     Population
  50: average loss 3.3219954564955856e-15\n\n     Interpreted expression:\n     v1
  = sin x0\n     v2 = v1 * v1\n     result = 1 - v2\n\n\n## Authors\n\nThis library
  is written and maintained by [Bogdan Penkovsky](http://penkovsky.com)\n"
license-name: BSD3
