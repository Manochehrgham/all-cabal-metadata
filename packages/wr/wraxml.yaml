changelog-type: ''
hash: a28e87989305f9f28579fc746c51f63c0faf39283a785bd2f4c4c47c9c54e0e7
test-bench-deps: {}
synopsis: Lazy wrapper to HaXML, HXT, TagSoup via custom XML tree structure
changelog: ''
basic-deps:
  explicit-exception: ! '>=0.1.3 && <0.2'
  base: ! '>=3 && <5'
  HaXml: ! '>=1.23 && <1.24'
  xml-basic: ! '>=0.1 && <0.2'
  hxt-filter: ! '>=8.1.1 && <9'
  utility-ht: ! '>=0.0.4 && <0.1'
  containers: ! '>=0.1 && <0.6'
  hxt: ! '>=8.5.0 && <8.6'
  data-accessor: ! '>=0.2 && <0.3'
  tagchup: ! '>=0.4 && <0.5'
  polyparse: ! '>=1.2 && <1.9'
  transformers: ! '>=0.2 && <0.4'
  tagsoup: ! '>=0.8 && <0.13'
all-versions:
- '0.3'
- '0.4'
- '0.4.0.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.4'
latest: '0.4.4'
description-type: haddock
description: ! 'This is a wrapper to HaXML and HXT (Haskell XML Toolbox).

  It''s my work-around for the unfortunate situation that both toolboxes

  have different functionality,

  none is the superset of the other.

  Both of them rely on data structures, which look unnatural to me.

  Additionally they provide combinator functions that are actually weakly typed,

  they are all of type @(a -> [a])@,

  instead of being differentiated into @(a -> Bool)@, @(a -> a)@ and @(a -> [a])@.

  HXT is even weaker in type safety than HaXML

  since it allows complete XML trees even in attribute values.

  I didn''t want to write another XML toolbox with parsers, HTML support and so on,

  however in the meantime I came close to it.


  I decided to do some wrapping in order to use as much as possible functionality

  from HaXML and HXT.

  I provide my own XML tree data structure with according operations.

  Conversions between HaXML or HXT trees and my own ones are implemented.

  So I can use the parser and pretty printer of both HaXML and HXT

  while processing trees the way I find more natural.

  TagSoups can also be converted to XML trees.

  All conversions are lazy.


  I have a special XML string structure.

  ("Text.XML.WraXML.String")

  XML strings consist of ASCII characters and XML references.

  My XML tree is built on top of a very general tree structure,

  which distinguishs between leafs and inner branches.

  ("Data.Tree.BranchLeafLabel")

  Each element of a tree is labeled with some information.

  Branches are then used for tags,

  leafs for XML strings and special tags,

  and the labels for pointers to positions in the source file.

  ("Text.XML.WraXML.Tree")'
