homepage: https://github.com/unclechu/haskell-qm-interpolated-string
changelog-type: markdown
hash: 13cf98c93717d5fc197707af3ccb72e5c2321533800c4dafbce6220f72327a3d
test-bench-deps:
  qm-interpolated-string: -any
  base: ==4.*
  hspec: ==2.*
maintainer: Viacheslav Lotsmanov <lotsmanov89@gmail.com>
synopsis: Implementation of interpolated multiline strings
changelog: ! '## 0.1.1.0


  - Added `qn` QuasiQuoter as alternative to `qm` but without interpolation

  - Some code refactoring

  - More docs and tests

'
basic-deps:
  bytestring: ==0.10.*
  base: ==4.*
  text: ==1.*
  haskell-src-meta: ! '>=0.3 && <0.8'
  template-haskell: ! '>=2.5 && <3'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
author: Viacheslav Lotsmanov
latest: '0.1.1.0'
description-type: markdown
description: ! "# [qm|interpolated-string|]\n\n[![Hackage](https://img.shields.io/hackage/v/qm-interpolated-string.svg)](https://hackage.haskell.org/package/qm-interpolated-string)\n[![Build
  Status](https://travis-ci.org/unclechu/haskell-qm-interpolated-string.svg?branch=master)](https://travis-ci.org/unclechu/haskell-qm-interpolated-string)\n\nImplementation
  of interpolated multiline string\n[QuasiQuoter](https://wiki.haskell.org/Quasiquotation)\nthat
  ignores indentation and trailing whitespaces.\n\nActually it's modification of\n[interpolatedstring-perl6](https://github.com/audreyt/interpolatedstring-perl6)\npackage.
  I used it to implemenent my own strings I really like.\n\nThis implementation looks
  just like `qc`\nfrom **interpolatedstring-perl6** package but ignores any indentation,\nline
  breaks (except explicitly written using `\\n` char)\nand trailing whitespaces.\n\n'm'
  in 'qm' means 'multiline'.\n\nYou could write a decoratively formatted string and
  your\ndecorative indentation and line breaks wont go to the string,\nbut when you
  really need it, you could just escape it using backslash.\n\n## Simple usage example\n\n```haskell\n{-#
  LANGUAGE QuasiQuotes #-}\n\nimport Text.InterpolatedString.QM (qm)\n\nmain :: IO
  ()\nmain = putStrLn [qm| hello\n                   \\ world |]\n```\n\n## More examples\n\n```haskell\n[qm|
  \  hello world,\n     \\ what's going on here?  |]\n-- Result: \"hello world, what's
  going on here?\"\n```\n\n```haskell\n[qm|\n      it's actual\n      ly ignored\n
  \  |]\n-- Result: \"it's actually ignored\"\n```\n\n```haskell\n[qm|  \\  You could
  explicitly escape indentation or\\n\n         line-breaks when you really need it!
  \ \\\n   |]\n-- Result: \"  You could explicitly escape indentation or\\nline-breaks
  when you really need it!  \"\n```\n\n```haskell\n[qm| {1+2} \\{3+4} |]\n-- Result:
  \"3 {3+4}\"\n```\n\nThere is also very similar to `qm` QuasiQuoter\nnamed as `qn`
  that do the same except interpolation:\n\n```haskell\n[qn| foo {1+2} |]\n-- Result:
  \"foo {1+2}\"\n```\n\n## Author\n\n[Viacheslav Lotsmanov](https://github.com/unclechu)\n\n##
  License\n\n[The Unlicense](./LICENSE)\n"
license-name: PublicDomain
