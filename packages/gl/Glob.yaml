homepage: http://iki.fi/matti.niemenmaa/glob/
changelog-type: text
hash: 219b9caf1aaf9c2ab69ac75242f6017f0cd804a3370e0d63ac48777888fd909b
test-bench-deps: {}
maintainer: Matti Niemenmaa <matti.niemenmaa+glob@iki.fi>
synopsis: Globbing library
changelog: ! "0.7.5, 2014-05-08:\n\tUpdate dependencies to allow transformers-0.4.\n\n0.7.4,
  2014-03-18:\n\tUpdate dependencies to allow dlist-0.7.\n\n0.7.3, 2013-12-01:\n\tUpdate
  dependencies to allow dlist-0.6.\n\n0.7.2, 2012-10-18:\n\tUpdate dependencies to
  allow directory-1.2.\n\n0.7.1, 2012-07-03:\n\tUpdate dependencies to allow transformers-0.3,
  and generally tighten\n\tthem according to the policy.\n\n0.7, 2012-01-03:\n\tChanged
  function types:\n\t\tSystem.FilePath.Glob.glob :: String -> IO [FilePath]\n\t\t\tNow
  takes a String to be compiled instead of an already-compiled\n\t\t\tPattern.\n\n\tAdded
  a README and more basic usage documentation.\n\n0.6.1, 2011-09-14:\n\tBug fix: globDir
  should now ignore the given directory when given an\n\t         absolute path on
  Windows.\n\n\tDoc fix: noted that globDir doesn't actually fully ignore the given\n\t
  \        directory if the Pattern starts with a path separator.\n\n0.6, 2011-09-12:\n\tNew
  functions:\n\t\tSystem.FilePath.Glob.glob :: Pattern -> IO [FilePath]\n\n\tChange:
  globDir, given a Pattern starting with a path separator, now ignores\n\t\t\t  the
  given directory. Thus e.g. globDir (compile \"/*\") d gives the\n\t\t\t  contents
  of \"/\" regardless of the value of d.\n\n\t\t\t  Thanks to Max Bolingbroke for
  the feature request.\n\n\tChanged dependency on mtl to transformers.\n\n0.5.1, 2010-11-23:\n\tUpdate
  dependencies to allow for mtl 2.0.\n\n0.5, 2009-12-01:\n\tNew functions:\n\t\tSystem.FilePath.Glob.globDir
  :: Pattern -> FilePath -> IO [FilePath]\n\n0.4, 2009-01-31:\n\tNew functions:\n\t\tSystem.FilePath.Glob.commonDirectory
  :: Pattern -> (FilePath, Pattern)\n\n\t\tSystem.FilePath.Glob.simplify  :: Pattern
  -> Pattern\n\t\tSystem.FilePath.Glob.decompile :: Pattern -> String\n\n\t\tSystem.FilePath.Glob.tryCompileWith
  :: CompOptions -> String -> Either String Pattern\n\t\tSystem.FilePath.Glob.compileWith
  \   :: CompOptions -> String -> Pattern\n\t\tSystem.FilePath.Glob.compDefault    ::
  CompOptions\n\t\tSystem.FilePath.Glob.compPosix      :: CompOptions\n\n\t\tSystem.FilePath.Glob.matchWith
  \    :: MatchOptions -> Pattern -> FilePath -> Bool\n\t\tSystem.FilePath.Glob.globDirWith
  \  :: MatchOptions -> [Pattern] -> FilePath -> IO ([[FilePath]], [FilePath])\n\t\tSystem.FilePath.Glob.matchDefault
  \ :: MatchOptions\n\t\tSystem.FilePath.Glob.matchPosix    :: MatchOptions\n\n\t\tSystem.FilePath.Glob.Primitives.literal
  \          :: String -> Pattern\n\t\tSystem.FilePath.Glob.Primitives.singleWildcard
  \   :: Pattern\n\t\tSystem.FilePath.Glob.Primitives.wildcard          :: Pattern\n\t\tSystem.FilePath.Glob.Primitives.recursiveWildcard
  :: Pattern\n\t\tSystem.FilePath.Glob.Primitives.charRange         :: Bool -> [Either
  Char (Char,Char)] -> Pattern\n\t\tSystem.FilePath.Glob.Primitives.numberRange       ::
  Maybe Integer -> Maybe Integer -> Pattern\n\n\tRemoved functions:\n\t\tSystem.FilePath.Glob.tryCompile
  (no longer needed / superceded by tryCompileWith)\n\n\tNew instances:\n\t\tMonoid
  Pattern\n\t\tRead Pattern\n\n\tChange: \"..\" can now be matched, by patterns such
  as \".*\".\n\tChange: globDir, given \"\" as the directory, uses getCurrentDirectory.\n\tChange:
  globDir now keeps track of the number of path separators, thus\n\t        \"a//*\"
  will return \"a//b\" instead of \"a/b\" as a match result.\n\tChange: if character
  ranges begin with ! or ^, these characters are now\n\t        considered the start
  of the range: [^-~] is the range ^ through ~,\n\t        not the inverse of [-~].\n\n\tRegression
  fix: handle directories without read permissions even more\n\t                properly.\n\n\tBug
  fix: globDir doesn't convert patterns like \"a./b\" to \"ab\".\n\tBug fix: the Show
  instance used to show \"[?]\" as the very different \"?\" (and\n\t         a few
  similar cases).\n\tBug fix: \"//./\" wasn't getting optimized properly.\n\tBug fix:
  \".//a\" matched \"/a\" and not \"a\" or \"./a\".\n\tBug fix: \"f**/a\" didn't match
  \"foo/a\".\n\tBug fix: \".**/a\" didn't match \".foo/a\".\n\tBug fix: \".**/a\"
  matched \"../a\".\n\tBug fixes: globDir and match, in general, handled patterns
  starting with\n\t           \".*\" or \".**/\" quite differently.\n\tBug fix: globDir
  never matched \"foo/\" to the directory \"foo\".\n\tBug fix: globDir never matched
  \"foo**/\" to the directory \"foo\".\n\tBug fix: show (compile \"[a!b]\") resulted
  in \"[!ab]\".\n\n0.3.2, 2008-12-20:\n\tRegression fix: handle directories without
  read permissions properly.\n\n\tConvenience for developers: -XTemplateHaskell no
  longer barfs on\n\tCompile.hs.\n\n0.3.1, 2008-10-31:\n\tCorrected the Cabal-Version
  field.\n\n0.3, 2008-10-19:\n\tFurther performance improvements to globDir.\n\tBug
  fix: handle empty pattern lists correctly in globDir.\n\tAdded dependency: Win32,
  for Windows OSs.\n\n0.2, 2008-10-18:\n\tPerformance improvements to globDir, no
  functionality changes.\n\tAdded dependency: dlist.\n\n0.1, 2008-10-17:\n\tInitial
  release.\n\n\tFunctions:\n\t\tSystem.FilePath.Glob.tryCompile :: String -> Either
  String Pattern\n\t\tSystem.FilePath.Glob.compile    :: String -> Pattern\n\t\tSystem.FilePath.Glob.match
  \     :: Pattern -> FilePath -> Bool\n\t\tSystem.FilePath.Glob.globDir    :: [Pattern]
  -> FilePath -> IO ([[FilePath]], [FilePath])\n\n\tDependencies: base, containers,
  directory, filepath, mtl.\n"
basic-deps:
  base: ! '>=4 && <5'
  filepath: ! '>=1.1 && <1.5'
  dlist: ! '>=0.4 && <0.8'
  containers: <0.6
  transformers: ! '>=0.2 && <0.6'
  directory: <1.3
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.7'
- '0.7.1'
- '0.7.2'
- '0.7.3'
- '0.7.4'
- '0.7.5'
author: Matti Niemenmaa
latest: '0.7.5'
description-type: text
description: ! "This is Glob, a Haskell library for globbing, i.e. pattern matching
  file paths\nakin to the POSIX glob() function. Haddock documentation is included,
  and can\nbe built with the 'cabal haddock' command. Basic usage info is repeated
  below:\n\nMatching pattern (a String) against filepath (a FilePath):\n\n\tmatch
  (compile pattern) filepath\n\nMatching a pattern against all paths in the current
  working directory:\n\n\tglob pattern\n\nMatching a pattern against all paths in
  a given directory (a FilePath):\n\n\tglobDir1 (compile pattern) directorypath\n\nMatching
  a list of patterns against all paths in a given directory, returning\nthe matches
  for each pattern as well as the paths not matched by any of the\npatterns:\n\n\tglobDir
  (map compile patterns) directorypath\n"
license-name: BSD3
