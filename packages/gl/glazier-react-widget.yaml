homepage: https://github.com/louispan/glazier-react-widget#readme
changelog-type: ''
hash: e6240222097848f22c9b532651fce53da552183a7fa5510c03338ec2ce719731
test-bench-deps: {}
maintainer: louis@pan.me
synopsis: Generic widget library using glazier-react
changelog: ''
basic-deps:
  free: ! '>=4.12 && <5'
  javascript-extras: ! '>=0.2.0.2 && <1'
  stm: ! '>=2.4 && <3'
  base: ! '>=4.7 && <5'
  disposable: ! '>=0.2.0.4 && <1'
  dlist: ! '>=0.8 && <0.9'
  containers: ! '>=0.5 && <0.6'
  lens: ! '>=4 && <5'
  pipes-concurrency: ! '>=2 && <3'
  glazier-react: ! '>=0.5 && <1'
  mtl: ! '>=2 && <3'
  mmorph: ! '>=1 && <2'
  ghcjs-base-stub: ! '>=0.1.0.2 && <1'
  transformers: ! '>=0.4 && <0.6'
  glazier: ! '>=0.10 && <1'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.5.0.0'
author: Louis Pan
latest: '0.5.0.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/glazier-react-widget.svg)](https://hackage.haskell.org/package/glazier-react-widget)\n\nThis
  is a library of reusable composable widget using \n[`Glazier.React`](https://github.com/louispan/glazier-react).
  Please help me to add more widgets to this library!\n\n# Prerequisite reading\n\n##
  Glazier\nPlease read the [README.md](https://github.com/louispan/glazier) for a
  brief overview of glazier.\n\n## Glazier.React\nPlease read the [README.md](https://github.com/louispan/glazier-react)
  for a brief overview of glazier-react.\n\n# Widget best practice\n\nThe following
  documents the expected conventions and best practices when defining a `Glazier.React.Widgets`
  widget.\n\n## Exports\nAll widgets should export at the minimum the following:\n```haskell\nmodule
  Glazier.React.Widgets.Input\n    ( Command(..)\n    , Action(..)\n    , AsAction(..)\n
  \   , Design(..)\n    , HasDesign(..)\n    , Plan(..)\n    , HasPlan(..)\n    ,
  Outline\n    , Model\n    , Widget\n    , widget\n    ) where\n```\nThis provides
  a consistent way to interact and use every widget.\n\nSince all widgets export the
  same names, any widget should be imported qualified.\n\n## Command\n`Command`s are
  the result of the `Gadget` stateful processing of `Action`. It is a pure value that
  is interpreted effectfully.\n```haskell\ndata Command\n    = RenderCommand (SuperModel
  Model Plan) [Property] JSVal\n    | DisposeCommand SomeDisposable\n    | MakerCommand
  (F (Maker Action) Action)\n```\nSome common commands are:\n\n### RenderCommand\n```haskell\nRenderCommand
  (SuperModel Model Plan) [Property] JSVal\n```\nThis is send by `Gadget` when the
  re-rendering is required. It contains the`SuperModel` of the widget (to swap the
  latest `Design` into the `Frame`), the new React component state as a list of properties
  (usually just a sequence number), and the javascript reference to the javascript
  component.\n\n### DisposeCommand\n```haskell\nDisposeCommand SomeDisposable\n```\nThis
  contains the list of callbacks to dispose after the next render frame (after [`componentDidUpdate`](https://facebook.github.io/react/docs/react-component.html#componentdidupdate)
  is called.\n\n### MakerCommand\n```haskell\nMakerCommand (F (Maker Action) Action)\n```\nThis
  is the command to run the `Maker` instruction in the `Maker` interpreter which results
  in an `Action` to dispatch back tot he gadget.\n\n## Action\nThis contains the events
  that the widget `Gadget` processes.\n```haskell\ndata Action\n    = ComponentRefAction
  JSVal\n    | RenderAction\n    | ComponentDidUpdateAction\nmakeClassyPrisms ''Action\n```\n`Action`s
  should have [`makeClassyPrisms`](https://hackage.haskell.org/package/lens-4.15.1/docs/Control-Lens-TH.html#v:makeClassyPrisms)
  generated to facilitate embedding it in larger `Gadget` with [`magnify`](https://hackage.haskell.org/package/lens-4.15.1/docs/Control-Lens-Zoom.html#v:magnify).\n\nSome
  common `Action`s are:\n###  ComponentRefAction\n```haskell\nComponentRefAction JSVal\n```\nThis
  action is generated by the [`ref`](https://facebook.github.io/react/docs/refs-and-the-dom.html)
  event listener and contains a javascript reference to the react component. This
  ref is used in the `RenderCommand`.\n\n###  RenderAction\n```haskell\nRenderAction\n```\nYou
  can generate this action to force a widget to return the `RenderCommand` to force
  a re-render.\n\n###  ComponentDidUpdateAction\n```haskell\nComponentDidUpdateAction
  JSVal\n```\n\nThis action is generated by the [`componentDidUpdate`](https://facebook.github.io/react/docs/react-component.html#componentdidupdate)
  event listener. This event is usually used to generate the `DisposeCommand` to dispose
  callbacks from removed widgets.\n\n## Design\nThis contains the template for pure
  data for state processing logic (the nouns).\n```haskell\ndata Design = Design\n
  \   { _blah :: Foo\n    }\nmakeClassy ''Design\ntype Model = Design\ntype Outline
  = Design\ninstance R.ToOutline Model Outline where outline = id\n\nmkModel :: Outline
  -> F (R.Maker Action) Model\nmkModel = pure\n```\n`Design`s should have [`makeClassy`](https://hackage.haskell.org/package/lens-4.15.1/docs/Control-Lens-TH.html#v:makeClassy)
  generated to facilitate embedding it in larger widget with [`magnify`](https://hackage.haskell.org/package/lens-4.15.1/docs/Control-Lens-Zoom.html#v:magnify)
  and [`zoom`](https://hackage.haskell.org/package/lens-4.15.1/docs/Control-Lens-Zoom.html#v:zoom).\n\nIf
  the `Design` contains child widgets, then it should have use a type parameter and
  `DesignType` to allow specializations of `Model` and `Outline`\n```haskell\ndata
  Design t = Design\n    { _input :: R.DesignType t W.Input.Widget\n    , _todos ::
  R.DesignType t (W.List.Widget TodosKey TD.Todo.Widget)\n    , _footer :: R.DesignType
  t TD.Footer.Widget\n    }\n\ntype Model = Design R.WithGizmo\ntype Outline = Design
  R.WithOutline\ninstance R.ToOutline Model Outline where\n    outline (Design a b
  c) = Design (R.outline a) (R.outline b) (R.outline c)\n\nmkModel :: R.ReactMlT Identity
  () -> Outline -> F (R.Maker Action) Model\nmkModel separator (Design a b c) = Design\n
  \   <$> (R.hoistWithAction InputAction (R.mkGizmo' W.Input.widget a))\n    <*> (R.hoistWithAction
  TodosAction (R.mkGizmo' (W.List.widget separator TD.Todo.widget) b))\n    <*> (R.hoistWithAction
  FooterAction (R.mkGizmo' TD.Footer.widget c))\n```\n\n## Plan\nThe `Plan` contains
  the callbacks for integrating with React (the verbs). It also contains a javascript
  reference to the instance of shim component used for the widget. This reference
  is used to trigger rendering with  [`setState`](https://facebook.github.io/react/docs/react-component.html#setstate).\n\n```haskell\ndata
  Plan = Plan\n    { _component :: R.ReactComponent\n    , _key :: J.JSString\n    ,
  _frameNum :: Int\n    , _componentRef :: J.JSVal\n    , _deferredDisposables ::
  D.DList CD.SomeDisposable\n    , _onRender :: J.Callback (J.JSVal -> IO J.JSVal)\n
  \   , _onComponentRef :: J.Callback (J.JSVal -> IO ())\n    , _onComponentDidUpdate
  :: J.Callback (J.JSVal -> IO ())   makeClassy ''Plan\n```\n`Plan`s should have [`makeClassy`](https://hackage.haskell.org/package/lens-4.15.1/docs/Control-Lens-TH.html#v:makeClassy)
  generated to allow consistent usage of lens to access `Model` and `Plan` fields.\n\nSome
  common `Plan` fields are\n\n### key\n```haskell\n_key :: JSString\n```\n`key` is
  used to ensure a unique [key](https://facebook.github.io/react/docs/lists-and-keys.html)
  for React's efficient rendering of a list.\n\n### componentRef\n```haskell\n_componentRef
  :: JSVal\n```\n`componentRef` is used to store the reference to the instance of
  the React shim component from the `ComponentRefAction` and used in the `RenderCommand`\n\n###
  frameNum\n```haskell\n_frameNum :: Int\n```\n`frameNum` is the sequence number used
  in `RenderCommand`.\n\n### _deferredDisposables\n```haskell\n_deferredDisposables
  :: DList SomeDisposable\n```\n`deferredDisposables` keep the list of disposables
  to dispose at the next `ComponentDidUpdateAction`.\n\n### _component\n```haskell\n_component
  :: ReactComponent\n```\nThis contains the reference to the shim `React.PureComponent`
  class that is used to start the rendering.\n\n### _onRender\n```haskell\n_onRender
  :: Callback (JSVal -> IO JSVal)\n```\nThe is the callback from the shim component's
  [`render`](https://facebook.github.io/react/docs/react-component.html#render) handler.
  It contains a javascript reference to the shim component's state, which is currently
  not used, but might be in the future.\n\n### _onComponentRef\n```haskell\n_onComponentRef
  :: Callback (JSVal -> IO ())\n```\nThe is the callback from the shim component's
  [`ref`](https://facebook.github.io/react/docs/refs-and-the-dom.html) event listener.
  The callback is expected to generate the `ComponentRefAction`.\n\n### _onComponentDidUpdate\n```haskell\n_onComponentDidUpdate
  :: Callback (JSVal -> IO ())\n```\nThe is the callback from the shim component's
  \ [`componentDidUpdate`](https://facebook.github.io/react/docs/react-component.html#componentdidupdate)
  event listener.  The callback is expected to generate the `ComponentDidUpdateAction`.\n\n##
  mkPlan\nThis is the missing piece required to construct a widget's `SuperModel`.\nIt
  contains the code to create a widget's `Plan` using the `Maker` DSL.\n\nThe `Applicative`
  typeclass makes this easy to define.\n```haskell\nmkPlan :: Frame Model Plan ->
  F (Maker Action) Plan\nmkPlan frm = Plan\n    <$> R.getComponent\n    <*> R.mkKey\n
  \   <*> pure 0\n    <*> pure J.nullRef\n    <*> pure mempty\n    <*> (mkRenderer
  frm $ const render)\n    <*> (mkHandler $ pure . pure . InputRefAction)\n    <*>
  (mkHandler $ pure . pure . ComponentRefAction)\n    <*> (mkHandler $ pure . pure
  . const ComponentDidUpdateAction)\n```\n\n## Common code\nAll widgets should have
  implementation of the following\n\n### Disposing Model and Plan\n```haskell\ninstance
  Disposing Plan\ninstance Disposing Model where\n    disposing _ = DisposeNone\n```\n\n###
  Link HasPlan and HasModel\nLink `Glazier.React.Model`'s genericHasPlan/HasModel
  with this widget's specific `HasPlan`/`HasModel` from generated from `makeClassy`\n\n```haskell\ninstance
  HasPlan (R.Scene Model Plan) where\n    plan = R.plan\ninstance HasDesign (R.Scene
  Model Plan) where\n    design = R.model\ninstance HasPlan (R.Gizmo Model Plan) where\n
  \   plan = R.scene . plan\ninstance HasDesign (R.Gizmo Model Plan) where\n    design
  = R.scene . design\n```\n\n### Widget definitions\n`widget` is a record of functions
  of the essential functions required to make, render and interact with the widget.
  By convention, `mkPlan`, `window`, and `gadget` is exported, but sometimes it's
  convenient to have all three grouped together in a record.\n```haskell\ntype Widget
  = Widget Command Action Model Plan\nwidget :: Widget\nwidget = R.Widget\n    mkModel\n
  \   mkPlan\n    window\n    gadget\n```\n`widget` is always an instance of `IsWidget`
  typeclass, so exporting a type synomym `Widget` will allow generic widget manipulation
  code.\n\nFor example, the [`List` widget](https://github.com/louispan/glazier-react-widget/blob/54a771f492b864ff422e31949284ea4b23aa02c6/src/Glazier/React/Widgets/List.hs#L128)
  uses the `IsWidget` typeclass of the item widgets in order to define the `widget`
  record value.\n\n## window\nThis is the starting rendering function to start the
  rendering. It always only renders the shim React component with the specific callbacks:\n\n```haskell\nwindow
  :: WindowT (Design Model Plan) (ReactMlT Identity) ()\nwindow = do\n    s <- ask\n
  \   lift $ lf (s ^. component . to toJS)\n        [ (\"key\",  s ^. key . to toJS)\n
  \       , (\"render\", s ^. onRender . to toJS)\n        , (\"ref\", s ^. onComponentRef
  . to toJS)\n        , (\"componentDidUpdate\", s ^. onComponentDidUpdate . to toJS)\n
  \       ]\n```\nThis a a monad transformer stack over `Identity`. This ensures only
  pure effects are allowed.\n\n## render\nThis is the inner rendering function. React
  will render the shim component from `window` above, and then call the `Plan`'s `onRender`
  callback of the shim component, which triggers this rendering function.\n\nThis
  contains the widget specific rendering instructions.\n```haskell\nrender :: WindowT
  (Design Model Plan) (ReactMlT Identity) ()\n```\nThis a a monad transformer stack
  over `Identity`. This ensures only pure effects are allowed.\n\n## gadget\nThis
  contains the state update logic:\n```haskell\ngadget :: G.GadgetT Action (R.SuperModel
  Model Plan) Identity (DList Command)\n```\nThis a a monad transformer stack over
  `Identity`. This ensures only pure effects are allowed.\n\nWhen required, `STM`
  \ can always be [`hoist (hoist generalize)`](https://github.com/louispan/glazier-react-examples/blob/32b5b077faa499e7501cb8e5417105b340de9ad3/examples/todo/haskell/app/Main.hs#L92)
  into the gadget using [`Control.Monad.Morph`](https://hackage.haskell.org/package/mmorph/docs/Control-Monad-Morph.html).\n"
license-name: BSD3
