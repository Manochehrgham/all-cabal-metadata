homepage: ''
changelog-type: text
hash: c9bdaf5e9f2f93a46679a3b34378ab8dd92f61ed99a92d83d45e418fec5d7f90
test-bench-deps: {}
maintainer: L. Thomas van Binsbergen <ltvanbinsbergen@acm.org>
synopsis: GLL parser with simple combinator interface
changelog: ! "0.3.0.1 -> 0.3.0.2\n    + smart constructors for creating Grammars.
  To be used instead of constructors.\n0.3.0.2 -> 0.3.0.3\n    + SubsumesToken class
  for making Token a subtype of a custom Parseable type.\n        The terminal parsers
  id_lit, int_lit, etc. can be used directly.\n    + Additional constructor in 'Token'
  for alternative identifiers.\n    - Method 'matches' of class 'Parseable' no longer
  has a default definition\n        (default was (==)).\n0.3.0.3 -> 0.3.0.4\n    -
  Removed global disambiguation options (leftBiased, minimum/maximumPivot)\n    +
  introduced lassoc, rassoc and assoc for associativity based \n        local disambiguation\n
  \   + renamed some to many1 and let many and many1 implement shortest-match,\n        hence,
  if there is ambiguity the list with the maximum size is chosen.\n    + introduced
  some and some1 that are the same as many/many1 except\n        that they implement
  longest-match (resulting in minimum sized list)\n    + introduced multiple and multiple1
  that are as above but implementing\n        no disambiguation (possibly useful for
  debuggin)\n    + introduced manySepBy(1), someSepBy(1) and multipleSepBy(1)\n0.3.0.4
  -> 0.3.0.6\n    + added missing string literal token to predefined lexer\n    +
  added user-defined tokens to predefined lexer (given as a list)\n"
basic-deps:
  base: ! '>=4.3.1.0 && <=4.8.2.0'
  text: -any
  TypeCompose: -any
  array: -any
  containers: ! '>=0.4'
  regex-applicative: ! '>=0.3'
  pretty: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.6'
author: L. Thomas van Binsbergen
latest: '0.3.0.6'
description-type: haddock
description: ! 'The package gll provides generalised top-down parsing according to
  the GLL

  parsing algorithm [Scott and Johnstone 2010,2013].


  The user can either invoke the GLL

  parser directly by importing "GLL.Parser" and providing a

  value of the Grammar datatype in (exported by "GLL.Parser").

  Alternatively, the user can import "GLL.Combinators" to write combinator expressions

  from which a grammar of the required form is extracted.

  The combinators enable applying arbitrary semantic actions to parse results.

  The documentation of the respective packages provides more information.


  The main motivation for this package

  is the development of Domain Specific Languages (DSLs).

  More specifically: designing DSLs with minimal differences between

  between abstract and concrete syntax (abstract syntax is often ambiguous).


  Please email any questions, comments and suggestions to the

  maintainer.'
license-name: BSD3
