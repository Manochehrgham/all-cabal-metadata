homepage: ''
changelog-type: ''
hash: 13150e08333ebd6b913e89fcd18d8dbef3ff746303bc8eb160f769e1923de77f
test-bench-deps: {}
maintainer: ltvanbinsbergen@acm.org
synopsis: GLL parser with simple combinator interface
changelog: ''
basic-deps:
  base: ! '>=4.5 && <=4.8.0.0'
  TypeCompose: -any
  array: -any
  containers: ! '>=0.4'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
author: L. Thomas van Binsbergen
latest: '0.2.0.3'
description-type: haddock
description: ! 'GLL is a parser combinator library for writing generalised parsers.

  The user can write parsers for arbitrary context-free grammars, including

  both non-determinism and all forms of left and right-recursion.

  The underlying parsing algorithm is GLL (Scott and Johnstone 2013).


  The library provides an interface in ''Control.Applicative'' style:

  it uses the combinators ''<*>'', ''<|>'', ''<$>'' and derivations.

  With ''<$>'' arbitrary semantic actions are added to the parser.


  Four functions can be used to run a parser: ''parse'', ''parseString'',

  ''parseWithOptions'' and ''parseStringWithOptions''.

  Function ''parse'' relies on the builtin ''Token'' datatype, receiving a list of

  ''Token'' as an input string. User-defined token-types are currently not supported.

  Function *parseString* enables parsing character-level parsing.

  The result of aparse is a list of semantic results, one result for each derivation.

  To avoid infinite recursion, only ''good parse trees'' are considered (Ridge 2014).

  To limit the number of accepted derivation, and therefore avoiding potential

  exponential blow-up, ''GLL.Combinators.Options'' are available to specify certain

  disambiguation rules.


  ''GLL.Combinators.MemInterface'' is a memoised version of the library.

  Memoisation is used to speed up the process of applying semantic actions,

  it is not necessary for generalised parsing:

  ''GLL.Combinators.Interface'' and ''GLL.Combinators.MemInterface'' are

  equally general.

  In the memoised version, parsers are no longer pure functions and must be

  developed inside the IO monad.


  Examples can be found in the ''GLL.Combinators.Test'' directory.'
license-name: BSD3
