homepage: https://github.com/lpeterse/haskell-socket
changelog-type: markdown
hash: f2e2f8bd1149d45a674987058f9fce024c137aee7d6b6c56d4e81ebb3f202d52
test-bench-deps:
  bytestring: <0.11
  base: ! '>=4.7 && <5'
  socket: -any
  async: -any
maintainer: info@lars-petersen.net
synopsis: A portable and extensible sockets library.
changelog: ! "0.5.1.0 Lars Petersen <info@lars-petersen.net> 2015-06-22\n\n * Exposed
  `unsafeGetSocketOption` and `unsafeSetSocketOption`.\n * Exposed `socketWaitRead`
  and `socketWaitWrite` through `System.Socket.Unsafe`.\n\n0.5.0.0 Lars Petersen <info@lars-petersen.net>
  2015-06-19\n\n * Introduced newtypes `Port`, `FlowInfo` and `ScopeId` in Inet6 family.\n
  * Renamed nearly everything in response to very constructive criticism\n   by Bryan
  O'Sullivan. This is a breaking change (sorry about that).\n   I felt this was the
  last chance to get this straight before the library\n   gets widely adopted.\n   Additional
  kudos to @ignorantone and @whatsthepoint.\n * Issue #7: Typo in documentation of
  inaddrNONE and inaddrBROADCAST.\n   Kudos to Michael Fox.\n\n0.4.0.1 Lars Petersen
  <info@lars-petersen.net> 2015-06-17\n\n * tar-ball did not contain relevant source
  files.\n\n0.4.0.0 Lars Petersen <info@lars-petersen.net> 2015-06-16\n\n * Changed
  semantics of `connect` operation. It now\n   blocks until a connection has either
  has been established or failed.\n * Added `SO_ERROR` socket option.\n * Added `eALREADY`
  exception constant.\n * Added `eISCONN` exception constant.\n * Added `eNOTCONN`
  exception constant.\n * Added convenience operation `withConnectedSocket`.\n * Added
  `eNETUNREACH` exception constant.\n * Added new operation `recvAll` and changed
  `sendAll` to lazy `ByteString`.\n * Added new socket option IPV6_V6ONLY.\n * Removed
  untested socket option SO_ACCEPTCONN.\n * Correctly defining AI_ flags on Windows
  (MinGW doesn't although\n   they are all well support on Vista or higher).\n * Got
  all tests passing on Windows 7.\n\n0.3.0.1 Lars Petersen <info@lars-petersen.net>
  2015-06-07\n\n * Fixed documentation of eaiNONAME.\n * Fixed typo in .cabal file
  in reference to cbits file.\n\n0.3.0.0 Lars Petersen <info@lars-petersen.net> 2015-06-07\n\n
  * `AddrInfoFlags` and `NameInfoFlags` are now instances of `Bits`.\n * Dropped all
  sendmsg/recvmsg related operations (harden the core first!)\n * Dropped support
  for UNIX socket (will be separate package `socket-unix`)\n * Renamed type function
  `Address` to `SockAddr`.\n * Added GetAddrInfo and GetNameInfo classes.\n * Dropped
  support for SCTP (will be separate package `socket-sctp`)\n * Added support for
  RAW sockets.\n * Started to support Windows (still unfinished).\n * New operation
  `recvRecord`.\n * ReceiveMsg now returns a strict `ByteString`.\n * New operations
  `sendV`, `sendToV`.\n * Restricted getAddrInfo and getNameInfo and added `getAddrInfo6`
  and\n   `getNameInfo6`\n * Added address family types INET, INET6 and UNIX (API
  breaking change)\n * Hide `SockAddrIn6` address constructor\n * Hide `SockAddrIn`
  address constructor\n * Added `recvMsg` operation\n * Fixed unsafeSend, unsafeSendTo
  and unsafeSendMsg (they were waiting for\n   a read event instead of waiting for
  writing)\n * Use `aiStrError` values in Show instance\n * Added `aiStrError` function\n
  * Added constants for AddrInfoException\n * Changed definitin of AddrInfoException\n
  * Added `sendAllMsg` operation\n * Added `sendMsg` operation (+ some types and internals)\n\n0.2.0.0
  Lars Petersen <info@lars-petersen.net> 2015-05-29\n\n * Added a sendAll operation\n
  * Exposed the Socket constructor\n * Added `getNameInfo` operation\n * Added msgWAITALL
  and fixed serious bug regarding all other MsgFlags\n * Nicer Show instances for
  SockAddrIn and SockAddrIn6\n * Hiding internal modules\n * Added `getAddrInfo` operation\n\n0.1.0.1
  Lars Petersen <info@lars-petersen.net> 2015-05-28\n\n * Added CHANGELOG.md\n * Removed
  `threadWaitReadMVar` and `threadWaitWriteMVar`\n * Import `Data.Monoid` in `System.Socket.Unsafe`
  to support older Preludes\n\n0.1.0.0 Lars Petersen <info@lars-petersen.net> 2015-05-28\n\n
  * Initial release"
basic-deps:
  bytestring: <0.11
  base: ! '>=4.7 && <5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.0.1'
- '0.5.0.0'
- '0.5.1.0'
author: Lars Petersen
latest: '0.5.1.0'
description-type: markdown
description: ! "socket\n======\n\n[![Available on Hackage][badge-hackage]][hackage]\n[![License
  MIT][badge-license]][license]\n[![Build Status][badge-travis]][travis]\n\n### Motivation\n\nThis
  library aims to expose a minimal and platform-independant interface for\nPOSIX compliant
  networking code.\n\n### Implementation Philosophy\n\n  - Every operation and every
  flag exposed should be supported with same\n    semantics on every platform. If
  this cannot be guaranteed it should\n    be supplied by another (extension) package.\n
  \   Examples for things that have been ripped out of this library are:\n      -
  Support for Unix sockets which don't have an equivalent on Windows.\n      - Support
  for SCTP.\n      - Support for vectored IO (at least unless it can be guaranteed
  to\n        be supported on all platforms).\n\n  - Absolutely no conditional exports.\n\n
  \ - No `#ifdef` madness in the Haskell sources. The Haskell binding code\n    uses
  the FFI to reference the platform's native networking functions.\n    If they are
  not Posix compliant (i.e. on Windows) an level of\n    indirection is introduced
  to create an Posix compliant equivalent in C\n    using whatever the plaform specific
  building blocks are.\n\n### Platform Support\n\n#### Linux\n\nWorking.\n\n#### BSD\n\nUnknown.
  Should work. Please report if not.\n\n#### MacOS\n\nUnknown. Please report if you
  have a Mac.\n\n#### Windows\n\nFully supported on Windows7 (maybe Vista) or higher
  :-)\n\nGHCs runtime system on Windows does not offer an event notification mechanism
  for sockets.\nThe original [network](https://hackage.haskell.org/package/network)
  library\nsuffers from this, too. For example, connection attempts are uninterruptible
  etc.\nThe approach taken to circumvent this in this library is to poll the\nnon-blocking
  sockets with increasing delay. This guarantees interruptability\nand fairness between
  different threads. It allows for decent throughput\nwhile also keeping CPU consumption
  on a moderate level if a socket has not seen\nevents for a longer period of time
  (maximum of 1 second delay after 20\npolling iterations). The only drawback is potentially
  reduced response time\nof your application. The good part: Heavy load (e.g. connection
  requests or\nincoming traffic) will reduce this problem. Eventually your accepting
  thread\nwon't wait at all if there are several connection requests queued.\n\nThis
  workaround may be removed if someone is willing to sacrifice to improve\nthe IO
  manager on Windows.\n\n### Dependencies\n\n   - base\n   - bytestring\n\n### Tests\n\nRun
  the default test suites:\n\n```bash\ncabal test\n```\n\n[badge-travis]: https://img.shields.io/travis/lpeterse/haskell-socket.svg\n[travis]:
  https://travis-ci.org/lpeterse/haskell-socket\n[badge-hackage]: https://img.shields.io/hackage/v/socket.svg?dummy\n[hackage]:
  https://hackage.haskell.org/package/socket\n[badge-license]: https://img.shields.io/badge/license-MIT-green.svg?dummy\n[license]:
  https://github.com/lpeterse/haskell-socket/blob/master/LICENSE\n[issues]: https://github.com/lpeterse/haskell-socket/issues\n[Github]:
  https://github.com/lpeterse/haskell-socket"
license-name: MIT
