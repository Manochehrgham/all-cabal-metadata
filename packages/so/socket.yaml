homepage: https://github.com/lpeterse/haskell-socket
changelog-type: markdown
hash: 925045b7fe07ee3f5603ab0948777e70477b607a1562f3e10adab28124146217
test-bench-deps:
  bytestring: <0.11
  base: ! '>=4.7 && <5'
  socket: -any
  async: -any
maintainer: info@lars-petersen.net
synopsis: An extensible socket library.
changelog: ! "0.6.0.1 Lars Petersen <info@lars-petersen.net> 2016-04-10\n\n * Adapted
  the `AddrInfo` test suite to not depend on specific nameresolution\n   features
  that aren't available in a `chroot()` environment (see issue #12).\n\n0.6.0.0 Lars
  Petersen <info@lars-petersen.net> 2016-03-26\n\n * Improved and adapted documentation.\n
  * Merged `GetSocketOption` and `SetSocketOption` to one single type class\n   `SocketOption`.\n
  * `getNameInfo` now returns `NameInfo` instead of a tuple.\n * Added all theoretically
  possible `SocketExceptions`.\n * The type class `GetNameInfo` has been renamed to
  `HasNameInfo`.\n * The type class `GetAddressInfo` has been renamed to `HasAddressInfo`.\n
  * Removed operation `withConnectedSocket` without replacement.\n   It should not
  be part of this minimal library. Its code can be retrieved from the repository if
  needed.\n * The operations `sendAll` and `receiveAll` are now exported through\n
  \  `System.Socket.Type.Stream` and no longer trough the main module.\n   They are
  very specific, solely stream-oriented and just wrappers around\n   the basic operations.
  Such operations shouldn't pollute the main module.\n * Issue #10: Ben Gamari reported
  that the associated type `SocketAddress`\n   is not injective which would lead to
  compilation failure on GHC 8.* .\n   This is fixed by using a data family instead.\n\n0.5.3.0
  Lars Petersen <info@lars-petersen.net> 2015-08-09\n\n * Added a test for `eOperationNotSupported`
  (try to listen on a UDP socket).\n * Niklas Hamb√ºchen added `eOperationNotSupported`.\n\n0.5.2.0
  Lars Petersen <info@lars-petersen.net> 2015-07-08\n\n * Don't set `msgNoSignal`
  automatically with `send` and `sendTo`. This implicit\n   behaviour is a bad design
  decision. The implications of this change are\n   rather limited. The behaviour/correctness
  of an application is only affected\n   if it hooked SIGPIPE. GHC's RTS by default
  ignores SIGPIPE since #1619.\n   You're still advised to adapt your applications
  to use `msgNoSignal`\n   explicitly when writing on stream oriented sockets. Otherwise
  the RTS gets\n   unnecessarily interrupted. This is harmless, but annoying and not
  desired\n   when developing high-performance applications.\n * Define `msgNoSignal`
  as 0 if not available and documented this behaviour.\n * Added new exception value
  `ePipe`.\n\n0.5.1.0 Lars Petersen <info@lars-petersen.net> 2015-06-22\n\n * Exposed
  `unsafeGetSocketOption` and `unsafeSetSocketOption`.\n * Exposed `socketWaitRead`
  and `socketWaitWrite` through `System.Socket.Unsafe`.\n\n0.5.0.0 Lars Petersen <info@lars-petersen.net>
  2015-06-19\n\n * Introduced newtypes `Port`, `FlowInfo` and `ScopeId` in Inet6 family.\n
  * Renamed nearly everything in response to very constructive criticism\n   by Bryan
  O'Sullivan. This is a breaking change (sorry about that).\n   I felt this was the
  last chance to get this straight before the library\n   gets widely adopted.\n   Additional
  kudos to @ignorantone and @whatsthepoint.\n * Issue #7: Typo in documentation of
  inaddrNONE and inaddrBROADCAST.\n   Kudos to Michael Fox.\n\n0.4.0.1 Lars Petersen
  <info@lars-petersen.net> 2015-06-17\n\n * tar-ball did not contain relevant source
  files.\n\n0.4.0.0 Lars Petersen <info@lars-petersen.net> 2015-06-16\n\n * Changed
  semantics of `connect` operation. It now\n   blocks until a connection has either
  has been established or failed.\n * Added `SO_ERROR` socket option.\n * Added `eALREADY`
  exception constant.\n * Added `eISCONN` exception constant.\n * Added `eNOTCONN`
  exception constant.\n * Added convenience operation `withConnectedSocket`.\n * Added
  `eNETUNREACH` exception constant.\n * Added new operation `recvAll` and changed
  `sendAll` to lazy `ByteString`.\n * Added new socket option IPV6_V6ONLY.\n * Removed
  untested socket option SO_ACCEPTCONN.\n * Correctly defining AI_ flags on Windows
  (MinGW doesn't although\n   they are all well support on Vista or higher).\n * Got
  all tests passing on Windows 7.\n\n0.3.0.1 Lars Petersen <info@lars-petersen.net>
  2015-06-07\n\n * Fixed documentation of eaiNONAME.\n * Fixed typo in .cabal file
  in reference to cbits file.\n\n0.3.0.0 Lars Petersen <info@lars-petersen.net> 2015-06-07\n\n
  * `AddrInfoFlags` and `NameInfoFlags` are now instances of `Bits`.\n * Dropped all
  sendmsg/recvmsg related operations (harden the core first!)\n * Dropped support
  for UNIX socket (will be separate package `socket-unix`)\n * Renamed type function
  `Address` to `SockAddr`.\n * Added GetAddrInfo and GetNameInfo classes.\n * Dropped
  support for SCTP (will be separate package `socket-sctp`)\n * Added support for
  RAW sockets.\n * Started to support Windows (still unfinished).\n * New operation
  `recvRecord`.\n * ReceiveMsg now returns a strict `ByteString`.\n * New operations
  `sendV`, `sendToV`.\n * Restricted getAddrInfo and getNameInfo and added `getAddrInfo6`
  and\n   `getNameInfo6`\n * Added address family types INET, INET6 and UNIX (API
  breaking change)\n * Hide `SockAddrIn6` address constructor\n * Hide `SockAddrIn`
  address constructor\n * Added `recvMsg` operation\n * Fixed unsafeSend, unsafeSendTo
  and unsafeSendMsg (they were waiting for\n   a read event instead of waiting for
  writing)\n * Use `aiStrError` values in Show instance\n * Added `aiStrError` function\n
  * Added constants for AddrInfoException\n * Changed definitin of AddrInfoException\n
  * Added `sendAllMsg` operation\n * Added `sendMsg` operation (+ some types and internals)\n\n0.2.0.0
  Lars Petersen <info@lars-petersen.net> 2015-05-29\n\n * Added a sendAll operation\n
  * Exposed the Socket constructor\n * Added `getNameInfo` operation\n * Added msgWAITALL
  and fixed serious bug regarding all other MsgFlags\n * Nicer Show instances for
  SockAddrIn and SockAddrIn6\n * Hiding internal modules\n * Added `getAddrInfo` operation\n\n0.1.0.1
  Lars Petersen <info@lars-petersen.net> 2015-05-28\n\n * Added CHANGELOG.md\n * Removed
  `threadWaitReadMVar` and `threadWaitWriteMVar`\n * Import `Data.Monoid` in `System.Socket.Unsafe`
  to support older Preludes\n\n0.1.0.0 Lars Petersen <info@lars-petersen.net> 2015-05-28\n\n
  * Initial release\n"
basic-deps:
  bytestring: <0.11
  base: ! '>=4.7 && <5'
all-versions:
- '0.1.0.1'
- '0.2.0.0'
- '0.3.0.1'
- '0.4.0.1'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.5.3.0'
- '0.6.0.0'
- '0.6.0.1'
author: Lars Petersen
latest: '0.6.0.1'
description-type: markdown
description: ! "socket\n======\n\n[![Available on Hackage][badge-hackage]][hackage]\n[![License
  MIT][badge-license]][license]\n[![Build Status][badge-travis]][travis]\n\n### Motivation\n\nThis
  library aims to expose a minimal and cross platform interface for\nPOSIX compliant
  networking code.\n\n### Implementation Philosophy\n\n  - Every operation and every
  flag exposed should be supported with same\n    semantics on every platform. If
  this cannot be guaranteed it should\n    be supplied by another (extension) package.\n\n
  \ - Absolutely no conditional exports.\n\n  - No `#ifdef` madness in the Haskell
  sources. The Haskell binding code\n    uses the FFI to reference the platform's
  native networking functions.\n    If they are not POSIX compliant (i.e. on Windows)
  a level of\n    indirection is introduced to create a POSIX compliant equivalent
  in C\n    using whatever the platform specific building blocks are.\n\n### Platform
  Support\n\n#### Linux\n\nWorking.\n\n#### MacOS\n\nWorking.\n\n#### Windows\n\nFully
  supported on Windows7 (maybe Vista) or higher :-)\n\nGHC's runtime system on Windows
  does not offer an event notification mechanism for sockets.\nThe original [network](https://hackage.haskell.org/package/network)
  library\nsuffers from this, too. For example, connection attempts are non-interruptible
  etc.\nThe approach taken to circumvent this in this library is to poll the\nnon-blocking
  sockets with increasing delay. This guarantees non-interruptability\nand fairness
  between different threads. It allows for decent throughput\nwhile also keeping CPU
  consumption on a moderate level if a socket has not seen\nevents for a longer period
  of time (maximum of 1 second delay after 20\npolling iterations). The only drawback
  is potentially reduced response time\nof your application. The good part: Heavy
  load (e.g. connection requests or\nincoming traffic) will reduce this problem. Eventually
  your accepting thread\nwon't wait at all if there are several connection requests
  queued.\n\nThis workaround may be removed if someone is willing to sacrifice to
  improve\nthe IO manager on Windows.\n\n### Dependencies\n\n   - base\n   - bytestring\n\n###
  Tests\n\nRun the default test suites:\n\n```bash\ncabal test\n```\n\n[badge-travis]:
  https://img.shields.io/travis/lpeterse/haskell-socket.svg\n[travis]: https://travis-ci.org/lpeterse/haskell-socket\n[badge-hackage]:
  https://img.shields.io/hackage/v/socket.svg?dummy\n[hackage]: https://hackage.haskell.org/package/socket\n[badge-license]:
  https://img.shields.io/badge/license-MIT-green.svg?dummy\n[license]: https://github.com/lpeterse/haskell-socket/blob/master/LICENSE\n[issues]:
  https://github.com/lpeterse/haskell-socket/issues\n[Github]: https://github.com/lpeterse/haskell-socket\n"
license-name: MIT
