changelog-type: ''
hash: fcadcd584fc1d1d12529b6bf3ab205f8aba4a0700f1c12071fcee2ebff5cc6fa
synopsis: Static code analysis using graph-theoretic techniques.
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.5.5.0'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.1.1'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.0.3'
- '0.7.0.4'
- '0.7.0.5'
- '0.7.0.6'
latest: '0.7.0.6'
description-type: haddock
description: ! 'Statically analyse Haskell source code using graph-theoretic

  techniques.  Sample reports can be found at:

  <http://code.haskell.org/~ivanm/Sample_SourceGraph/SampleReports.html>


  To use SourceGraph, call it as either:


  > SourceGraph path/to/Foo.cabal


  Or, if your project doesn''t use Cabal, then there is limited support

  for using an overall module from your program\/library:


  > SourceGraph path/to/Foo.hs


  Note that the Cabal method is preferred, as it is better able to

  determine the project name and exported modules (when passing a

  Haskell file to SourceGraph, it uses that module''s name as the overall

  name of project and assumes that it is the only exported module; as

  such, it works better for programs than libraries).


  Whichever way you run SourceGraph, it then creates a @SourceGraph@

  subdirectory in the same directory as the file that was passed to it,

  and within that subdirectory creates the analysis report in

  @Foo.html@.


  SourceGraph is still experimental in terms of its ability to parse and

  properly understand Haskell source code and in the types of analyses

  it performs.'
