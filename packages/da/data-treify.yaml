changelog-type: ''
hash: caa949aa2fbd6560ab3f738686ff743e6a34453ab41f8b78c4513e9da82695b7
synopsis: Reify a recursive data structure into an explicit graph.
changelog: ''
all-versions:
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
latest: '0.3.4'
description-type: haddock
description: ! 'This package is a (probably temporary) fork of Andy gill''s data-reify
  package.

  I''ve tweaked it for typed syntax representations for use with GADTs.


  ''data-reify'' provided the ability to turn recursive structures into explicit graphs.

  Many (implicitly or explicitly) recursive data structure can be given this ability,
  via

  a type class instance. This gives an alternative to using ''Ref'' for observable
  sharing.


  Observable sharing in general is unsafe, so we use the IO monad to bound this effect,

  but can be used safely even with ''unsafePerformIO'' if some simple conditions are
  met.

  Typically this package will be used to tie the knot with DSL''s that depend of

  observable sharing, like Lava.


  Providing an instance for ''MuRef'' is the mechanism for allowing a structure to
  be

  reified into a graph, and several examples of this are provided.


  Version 0.2 of ''data-reify'' uses ''StableName''s, and is much faster.

  Version 0.3 provided two versions of ''MuRef'', the mono-typed version, for trees
  of a single type,

  and the dynamic-typed version, for trees of different types.


  &#169; 2009-2014 Andy Gill & Conal Elliott; BSD3 license.'
