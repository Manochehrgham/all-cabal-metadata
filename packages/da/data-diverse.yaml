homepage: https://github.com/louispan/data-diverse#readme
changelog-type: ''
hash: 10a488b606d6b803a5dc88c17682d6ba1fcd54d4fd870be0a4369eba300cc2b7
test-bench-deps:
  data-diverse: -any
  base: -any
  hspec: ! '>=2 && <3'
  criterion: -any
  tagged: ! '>=0.8.5 && <1'
maintainer: louis@pan.me
synopsis: Extensible records and polymorphic variants.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  tagged: ! '>=0.8.5 && <1'
  containers: ! '>=0.5 && <0.6'
  ghc-prim: ! '>=0.5 && <1'
  deepseq: ! '>=1.4 && <2'
all-versions:
- '0.10.0.0'
author: Louis Pan
latest: '0.10.0.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/data-diverse.svg)](https://hackage.haskell.org/package/data-diverse)\n[![Build
  Status](https://secure.travis-ci.org/louispan/data-diverse.png?branch=master)](http://travis-ci.org/louispan/data-diverse)\n\n\"Data.Diverse.Many\"
  is an extensible record for any size encoded efficiently as (Seq Any).\n\n\"Data.Diverse.Which\"
  polymorphic variant of possibilities encoded as (Int, Any).\n\nProvides getters,
  setters, projection, injection, folds, and catamorphisms;\naccessed by type or index
  or label.\n\nRefer to [ManySpec.hs](https://github.com/louispan/data-diverse/blob/master/test/Data/Diverse/ManySpec.hs)
  and [WhichSpec.hs](https://github.com/louispan/data-diverse/blob/master/test/Data/Diverse/WhichSpec.hs)
  for example usages.\n\nIso, Lens and Prisms are provided in [data-diverse-lens](http://hackage.haskell.org/package/data-diverse-lens)\n\n\n#
  Changelog\n\n* 0.1.0.0\n  - Initial version represented as (Int, Data.Map Int Any)\n\n*
  0.4.0.0\n  - Removed Emit typeclass, breaking renames. Added label accessors.\n\n*
  0.5.0.0\n  - Renamed type level functions module from Type to TypeLevel\n\n* 0.6.0.0\n
  \ - Moved lens to data-diverse-lens\n\n* 0.7.0.0\n  - Removed NOINLINE pragmas.\n
  \ - Changed internal representation to (Int, Data.IntMap Any) for a 2.5x append
  speedup.\n\n* 0.8.0.0\n  - Changed internal representation to (Data.Seq Any) for
  a further 2x append speedup.\n  - Added NFData instance for Many.\n\n* 0.8.1.0\n
  \ - Added NFData instance for Which.\n  - Forgot to expose Many.sliceL and Many.sliceR.\n\n*
  0.9.0.0\n  - Breaking changes: Renamed Many.sliceL/R to Many.viewf/b\n  - Renamed
  TypeLevel.Internal.MissingImpl to IsUniqueImpl.\n  - Added postifx' with SnocUnique
  and append' with AppendUnique.\n  - Added Semigroup & Monoid instances for `Many
  '[]` and `Which '[]`\n  - Fixed GHC 8.2 compile error with importing GHC.Prim (Any)\n\n*
  0.9.0.1\n  - Fixed GHC 8.2.1 test failure due to changed TypeRep show instance.\n\n*
  0.10.0.0\n  - Renamed 'Switch' to 'Switcher'. Switch is now a type synonym for 'switch'
  constraints\n  - Added CasesResult type family to help infer the result of 'cases'\n
  \ - Added Semigroup and Monoid instances for all Many xs.\n  - Added Maybe versions
  of trial, and reinterpret\n  - Renamed 'reinterpetN' to 'reinterpretN''\n  - Renamed
  'impossible' to 'zilch'.\n  - Allowed 'reintepret'ing and 'diversify'ing 'zilch'
  to 'zilch'\n  - Removed zipped type variable from 'Amend' constraints.\n  - Removed
  r type variable from 'Reduce' typeclass.\n  - Rearranged type variables in 'fetch',
  'replace', 'pick', 'trial', 'Diversify' type parameters,\n    so the type variable
  ordering is consistently smaller to larger, ie. 'x', 'xs', 'branch', 'tree'\n  -
  Added 'diversify'' for allowing rearranging the types only.\n"
license-name: BSD3
