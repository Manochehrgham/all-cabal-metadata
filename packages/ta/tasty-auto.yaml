homepage: https://github.com/minad/tasty-auto#readme
changelog-type: ''
hash: 41c4b8f3a79b277aedd47cf66a2802b866a5da2812f962ab232beb8d2a16a615
test-bench-deps:
  tasty-smallcheck: -any
  base: ! '>=4.8 && <5'
  tasty-hspec: -any
  filepath: ! '>=1.3 && <1.5'
  tasty-auto: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  directory: ! '>=1.1 && <1.3'
maintainer: Daniel Mendler <mail@daniel-mendler.de>
synopsis: Simple auto discovery for Tasty
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  filepath: ! '>=1.3 && <1.5'
  tasty-auto: -any
  directory: ! '>=1.1 && <1.3'
all-versions:
- '0.0.0.0'
- '0.1.0.0'
author: Daniel Mendler <mail@daniel-mendler.de>
latest: '0.1.0.0'
description-type: markdown
description: ! "# tasty-auto: Simple auto discovery for Tasty\n\n[![Hackage](https://img.shields.io/hackage/v/tasty-auto.svg)](https://hackage.haskell.org/package/tasty-auto)\n[![Build
  Status](https://secure.travis-ci.org/minad/tasty-auto.png?branch=master)](http://travis-ci.org/minad/tasty-auto)\n\nThis
  package provides auto discovery for the tasty test framework.\n\n* Install tasty-auto
  (using cabal or stack)\n\n* Create a file test/test.hs\n\n``` haskell\n-- test/test.hs\n{-#
  OPTIONS_GHC -F -pgmF tasty-auto #-}\n```\n\n* Put your tests in files with the suffix
  `*Test.hs` or `*Spec.hs`. Functions\nwith the following prefixes are automatically
  discovered:\n\n* `prop_` for QuickCheck properties\n* `scprop_` for SmallCheck properties\n*
  `case_` for HUnit test cases (overloaded for `IO ()`, `IO String` and `(String ->
  IO ()) -> IO`)\n* `spec_` for Hspec specifications\n* `test_` for Tasty TestTrees
  (overloaded for `TestTree`, `[TestTree]`, `IO TestTree` and `IO [TestTree]`)\n\n##
  Examples\n\n``` haskell\n-- test/PropTest.hs\nmodule PropTest where\n\nprop_Addition_is_commutative
  :: Int -> Int -> Bool\nprop_Addition_is_commutative a b = a + b == b + a\n```\n\n```
  haskell\n-- test/CaseTest.hs\nmodule CaseTest where\n\nimport Test.Tasty.HUnit\n\ncase_List_comparison_with_different_length
  :: IO ()\ncase_List_comparison_with_different_length = [1, 2, 3] `compare` [1,2]
  @?= GT\n```\n\n``` haskell\n-- test/TestSpec.hs\nmodule TestSpec where\n\nimport
  Test.Tasty.Hspec\n\nspec_Prelude :: Spec\nspec_Prelude = do\n  describe \"Prelude.head\"
  $ do\n    it \"returns the first element of a list\" $ do\n      head [23 ..] `shouldBe`
  (23 :: Int)\n```\n\n``` haskell\n-- test/TreeTest.hs\n{-# LANGUAGE ScopedTypeVariables
  #-}\nmodule TreeTest where\n\nimport Test.Tasty\nimport Test.Tasty.QuickCheck\nimport
  Test.Tasty.HUnit\n\ntest_Addition :: TestTree\ntest_Addition = testProperty \"Addition
  commutes\" $ \\(a :: Int) (b :: Int) -> a + b == b + a\n\ntest_Multiplication ::
  [TestTree]\ntest_Multiplication =\n  [ testProperty \"Multiplication commutes\"
  $ \\(a :: Int) (b :: Int) -> a * b == b * a\n  , testProperty \"One is identity\"
  $ \\(a :: Int) -> a * 1 == a\n  ]\n\ntest_Generate_Tree :: IO TestTree\ntest_Generate_Tree
  = do\n  input <- pure \"Some input\"\n  pure $ testCase input $ pure ()\n\ntest_Generate_Trees
  :: IO [TestTree]\ntest_Generate_Trees = do\n  inputs <- pure [\"First input\", \"Second
  input\"]\n  pure $ map (\\s -> testCase s $ pure ()) inputs\n```\n\n### Generated
  code\n\nThe generated code of the preprocessor looks like this:\n\n``` haskell\n{-#
  LINE 1 \"test/test.hs\" #-}\n{-# LANGUAGE FlexibleInstances #-}\nmodule Main where\nimport
  Prelude\nimport qualified Test.Tasty as T\nimport qualified Test.Tasty.HUnit as
  HU\nimport qualified Test.Tasty.QuickCheck as QC\nimport qualified Test.Tasty.SmallCheck
  as SC\nimport qualified Test.Tasty.Hspec as HS\nimport qualified CaseTest\nimport
  qualified SCPropTest\nimport qualified TreeTest\nimport qualified PropTest\nimport
  qualified TestSpec\nimport qualified SubMod.PropTest\nclass TestCase a where testCase
  :: String -> a -> IO T.TestTree\ninstance TestCase (IO ())                      where
  testCase n = pure . HU.testCase      n\ninstance TestCase (IO String)                  where
  testCase n = pure . HU.testCaseInfo  n\ninstance TestCase ((String -> IO ()) ->
  IO ()) where testCase n = pure . HU.testCaseSteps n\nclass TestGroup a where testGroup
  :: String -> a -> IO T.TestTree\ninstance TestGroup T.TestTree        where testGroup
  _ a = pure a\ninstance TestGroup [T.TestTree]      where testGroup n a = pure $
  T.testGroup n a\ninstance TestGroup (IO T.TestTree)   where testGroup _ a = a\ninstance
  TestGroup (IO [T.TestTree]) where testGroup n a = T.testGroup n <$> a\nmain :: IO
  ()\nmain = do\n  t0 <- testCase \"List comparison with different length\" CaseTest.case_List_comparison_with_different_length\n
  \ t1 <- pure $ SC.testProperty \"sort reverse\" SCPropTest.scprop_sort_reverse\n
  \ t2 <- testGroup \"Addition\" TreeTest.test_Addition\n  t3 <- testGroup \"Multiplication\"
  TreeTest.test_Multiplication\n  t4 <- testGroup \"Generate Tree\" TreeTest.test_Generate_Tree\n
  \ t5 <- testGroup \"Generate Trees\" TreeTest.test_Generate_Trees\n  t6 <- pure
  $ QC.testProperty \"Addition is commutative\" PropTest.prop_Addition_is_commutative\n
  \ t7 <- HS.testSpec \"Prelude\" TestSpec.spec_Prelude\n  t8 <- pure $ QC.testProperty
  \"Addition is associative\" SubMod.PropTest.prop_Addition_is_associative\n  T.defaultMain
  $ T.testGroup \"test/test.hs\" [t0,t1,t2,t3,t4,t5,t6,t7,t8]\n```\n"
license-name: MIT
