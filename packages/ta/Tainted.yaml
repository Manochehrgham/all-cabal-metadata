homepage: https://github.com/RossMeikleham/Tainted
changelog-type: ''
hash: fd1b3461af4b265d8e6b39e22091e7dcf7ec75c65a602116609b178c4d2c0fe1
test-bench-deps: {}
maintainer: rossmeikleham@hotmail.co.uk
synopsis: Tainted type, and associated operations
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
all-versions:
- '0.0.1'
author: RossMeikleham
latest: '0.0.1'
description-type: markdown
description: ! "# Tainted\nTainted type, and associated operations \n\nA Tainted type
  contains either a clean or dirty value. Values which are\nclean stay clean as long
  as an operation performed on them results\nin a clean value. If combined with a
  dirty value, this taints the value\ncausing it to become dirty, and any further
  operation keeps it dirty.\nThis is similar to the Maybe monad except once the dirty
  has been\nreached, calculations can still be performed on the value it contains.\n\nOne
  use case is evaluating whether expressions are pure from multiple\nsources combining
  impure and pure values. This can be useful for\ntype checking to enforce purity
  in certain areas. As soon as an \nimpure part of an expression is reached it taints
  the entire\nexpression as impure.\n\nA simple example given here is a expression
  evaluator which is given\nvalues from different sources which are marked as pure
  or impure.\n\n```Haskell\nmodule TaintExample where\n\nimport Data.Tainted\n\ndata
  Expr = \n      Number (Tainted Int)\n    | Add Expr Expr\n    \n    deriving Show\n\npure1
  \  = Number (Clean 3)\npure2   = Number (Clean 7)\nimpure1 = Number (Dirty 5)\n\nexpr1
  = Add pure1 pure2\nexpr2 = Add impure1 pure1\nexpr3 = Add pure1 (Add impure1 pure2)
  \n\n--Evaluate expression as much as Possible\nevalExpr :: Expr -> Expr\nevalExpr
  (Number n) = Number n\nevalExpr (Add e1 e2) = \n    case (evalExpr e1, evalExpr
  e2) of\n        (Number i, Number j) -> Number $ (+) <$> i <*> j\n        (x, y)
  -> Add x y\n\nreducedExpr1 = evalExpr expr1\nreducedExpr2 = evalExpr expr2\nreducedExpr3
  = evalExpr expr3\n```\n\nEvaluating expr1:\n```Haskell\nNumber (Clean 10)\n```\nAdding
  2 clean values 7 and 3 gives a clean value, clean\nvalues haven't become tainted\n\nEvaluating
  expr2:\n```Haskell\nNumber (Dirty 8)\n```\nAdding a clean value 3 and dirty value
  5 taints the expression as dirty\nso the expression evaluates to dirty value of
  8\n\n\nEvaluating expr3:\n```Haskell\nNumber (Dirty 15)\n```\nThis shows the propogation
  of dirty states, as the inner expression\nevaluates to a dirty value, then added
  with a clean value still\ngives a dirty value.\n\n\n"
license-name: BSD3
