homepage: https://github.com/muesli4/table-layout
changelog-type: ''
hash: 8a538df57412b267403625c51202befcee2ba82884954fcb66493732ae06b061
test-bench-deps:
  base: ! '>=4.8 && <4.10'
  data-default-class: ==0.0.*
  hspec: -any
  HUnit: ==1.3.*
  data-default-instances-base: ==0.1.*
  QuickCheck: ! '>=2.8 && <2.9'
maintainer: muesli4@gmail.com
synopsis: Layout text as grid or table.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.10'
  data-default-class: ==0.0.*
  data-default-instances-base: ==0.1.*
all-versions:
- '0.5.1.1'
- '0.5.2.0'
- '0.6.0.0'
author: Moritz Bruder
latest: '0.6.0.0'
description-type: markdown
description: ! "# table-layout\n\nThis package can be used to render character-based
  table layouts, which should be displayed with monospace fonts.\n\n## Purpose\n\nThe
  focus of this library lies on rendering cells with different styles per column.
  Columns can be fixed in size or expanding to make content fit. Whenever content
  has to be cut, it is possible to indicate this with special strings (these are called
  cut marks). Columns can be positionally aligned as left, right or center and additionally
  aligned at certain character occurences, e.g. to display floating point numbers.
  Those specifications are then applied to a list of rows (currently only `String`
  is supported).\n\nTypically cells are rendered as a grid, but it is also possible
  to render tables with simulated lines, including styling support. Such tables can
  use optional headers and multiple lines per cell. Multi-line content can be aligned
  vertically and text can be rendered justified.\n\n## Tutorial\n\n### Basic grid
  layout\n\nRender some text rows as grid:\n``` hs\nputStrLn $ layoutToString [ [\"top
  left\", \"top right\"]\n                          , [\"bottom left\", \"bottom right\"]\n
  \                         ]\n                          [column expand left def def,
  column expand right def def]\n```\n`layoutToString` will join cells with a whitespace
  and rows with a newline character. The result is not spectacular but does look as
  expected:\n```\ntop left       top right\nbottom left bottom right\n```\nThere are
  sensible default values for all column specification types, even for columns. We
  could have used just `def` for the first column.\n\n### Number columns\n\nAdditionally
  some common types are provided. A particularly useful one is `numCol`:\n``` hs\nmapM_
  putStrLn $ layoutToLines (map ((: []) . show) [1.2, 100.5, 0.037, 5000.00001]) [numCol]\n```\nWe
  simply display the given numbers as a dot-aligned single column:\n```\n   1.2    \n
  100.5    \n   3.7e-2 \n5000.00001\n```\n\n### Improving readability of grids\n\nBig
  grids are usually not that readable, so to improve their readability two functions
  are provided:\n\n- `altLines` will alternate functions applied to lines.\n- `checkeredCells`
  will checker cells with 2 different functions.\n\nA good way to use this would be
  the [ansi-terminal package][], provided you are using a terminal to output your
  text.\n\n### Table layout\n\nGrids are fine, but sometimes we want to explicitly
  display a table, e.g. as output in a database application. This is where ```layoutTableToString```
  comes in handy:\n\n``` hs\nputStrLn $ layoutTableToString [ rowG [\"Jack\", \"184.74\"]\n
  \                              , rowG [\"Jane\", \"162.2\"]\n                               ]\n
  \                              def\n                               [def , numCol]
  unicodeRoundS\n```\nA row group is a group of rows which form one cell, meaning
  that each line of a group is not visually seperated from the other ones. The second
  argument specifies an optional header, the third the column specifications and the
  style. This will yield the following result:\n\n```\n╭──────┬────────╮\n│ Jack │
  184.74 │\n├──────┼────────┤\n│ Jane │ 162.2  │\n╰──────┴────────╯\n```\n\n### Table
  headers\n\nThe same is possible with headers:\n\n``` hs\nputStrLn $ layoutTableToString
  [ rowG [\"A very long text\", \"0.42000000\"]\n                               ,
  rowG [\"Short text\", \"100200.5\"]\n                               ]\n                               (Just
  ([\"Title\", \"Length\"], repeat def))\n                               [fixedLeftCol
  10, column (fixed 10) center dotAlign def]\n                               unicodeS\n```\nSome
  fixed length columns are used this time and the header is displayed with a different
  style (additionally the header column will be specified differently):\n```\n┌────────────┬────────────┐\n│
  \  Title    │   Length   │\n╞════════════╪════════════╡\n│ A very lo… │   0.42000…
  │\n├────────────┼────────────┤\n│ Short text │ …00.5      │\n└────────────┴────────────┘\n```\n##
  Vertical positioning and justified text\nBecause a row group consists of multiple
  lines, we may also want to align the content of cells vertically, especially when
  we don't know how many lines will be there. Display a left-justified text alongside
  the length of the text:\n``` hs\nlet txt = \"Lorem ipsum ...\" \nin putStrLn $ layoutTableToString
  [colsAllG center [ justifyText 50 txt\n                                                   ,
  [show $ length txt]\n                                                   ]\n                                  ]\n
  \                                 (Just ([\"Text\", \"Length\"], repeat def))\n
  \                                 [fixedLeftCol 50, numCol]\n                                  asciiS\n```\n`colsAllG`
  will merge the given columns into a row group with the given positioning:\n```\n+----------------------------------------------------+--------+\n|
  \                       Text                        | Length |\n+----------------------------------------------------+--------+\n|
  Lorem  ipsum dolor sit amet, consetetur sadipscing |        |\n| elitr,  sed  diam
  nonumy eirmod tempor invidunt ut |        |\n| labore  et  dolore  magna  aliquyam
  erat, sed diam |        |\n| voluptua.  At  vero  eos  et  accusam et justo duo
  |    295 |\n| dolores et ea rebum. Stet clita kasd gubergren, no |        |\n| sea
  \ takimata  sanctus  est  Lorem ipsum dolor sit |        |\n| amet.                                              |
  \       |\n+----------------------------------------------------+--------+\n```\n\n[ansi-terminal
  package]: http://hackage.haskell.org/package/ansi-terminal\n"
license-name: BSD3
