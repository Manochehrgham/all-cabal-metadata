homepage: http://jtobin.github.com/flat-mcmc
changelog-type: ''
hash: 5d374190d9af882fa923365acd657558542c17104ef019d098a527a2adb1af53
test-bench-deps:
  base: -any
  flat-mcmc: -any
  vector: -any
maintainer: jared@jtobin.ca
synopsis: Painless general-purpose sampling.
changelog: ''
basic-deps:
  monad-par: ! '>=0.3.4.7 && <1'
  base: ! '>4 && <6'
  text: -any
  monad-par-extras: ! '>=0.3.3 && <1'
  mcmc-types: ! '>=1.0.1 && <2'
  pipes: ! '>4 && <5'
  formatting: ! '>=6 && <7'
  transformers: -any
  mwc-probability: ! '>=1.0.1 && <2'
  primitive: -any
  vector: ! '>=0.10 && <1'
all-versions:
- '0.1.0.0'
- '1.0.0'
- '1.0.1'
- '1.1.1'
- '1.2.1'
author: Jared Tobin
latest: '1.2.1'
description-type: haddock
description: ! 'flat-mcmc is a Haskell library for painless, efficient, general-purpose

  sampling from continuous distributions.


  flat-mcmc uses an ensemble sampler that is invariant to affine

  transformations of space.  It wanders a target probability distribution''s

  parameter space as if it had been "flattened" or "unstretched" in some sense,

  allowing many particles to explore it locally and in parallel.


  In general this sampler is useful when you want decent performance without

  dealing with any tuning parameters or local proposal distributions.


  flat-mcmc exports an ''mcmc'' function that prints a trace to stdout, as well

  as a ''flat'' transition operator that can be used more generally.


  > import Numeric.MCMC.Flat

  > import Data.Vector (Vector, toList, fromList)

  >

  > rosenbrock :: Vector Double -> Double

  > rosenbrock xs = negate (5  *(x1 - x0 ^ 2) ^ 2 + 0.05 * (1 - x0) ^ 2) where

  >   [x0, x1] = toList xs

  >

  > ensemble :: Ensemble

  > ensemble = fromList [

  >     fromList [negate 1.0, negate 1.0]

  >   , fromList [negate 1.0, 1.0]

  >   , fromList [1.0, negate 1.0]

  >   , fromList [1.0, 1.0]

  >   ]

  >

  > main :: IO ()

  > main = withSystemRandom . asGenIO $ mcmc 12500 ensemble rosenbrock'
license-name: MIT
