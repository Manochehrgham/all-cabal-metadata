homepage: https://github.com/tfausak/flow#readme
changelog-type: markdown
hash: 3fdd87c22f19d744dcf445387e71d2cccaac54a33e9720bc7b953910ce8d32e3
test-bench-deps:
  flow: -any
  base: <5
  doctest: ! '>=0.9 && <0.14'
  QuickCheck: ==2.*
  template-haskell: ==2.*
maintainer: Taylor Fausak
synopsis: Write more understandable Haskell.
changelog: ! "# Change log\r\n\r\nFlow uses [Semantic Versioning][].\r\nThe change
  log is available through the [releases on GitHub][].\r\n\r\n[Semantic Versioning]:
  http://semver.org/spec/v2.0.0.html\r\n[releases on GitHub]: https://github.com/tfausak/flow/releases\r\n"
basic-deps:
  base: <5
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.5'
- '1.0.6'
- '1.0.7'
- '1.0.8'
- '1.0.9'
author: ''
latest: '1.0.9'
description-type: markdown
description: ! "# [Flow][]\r\n\r\nWrite more understandable Haskell.\r\n\r\n[![Version
  badge][]][version]\r\n[![Build badge][]][build]\r\n\r\nFlow is a package that provides
  functions and operators for writing more\r\nunderstandable Haskell. It is an alternative
  to some common idioms like\r\n[`($)`][] for function application and [`(.)`][] for
  function composition.\r\n\r\n-   [Requirements](#requirements)\r\n-   [Installation](#installation)\r\n-
  \  [Usage](#usage)\r\n    -   [Cheat sheet](#cheat-sheet)\r\n\r\n## Requirements\r\n\r\nFlow
  requires a Haskell compiler. It is tested with recent versions of GHC, but\r\nolder
  or different compilers should be acceptable. For installation with Cabal,\r\nFlow
  requires at least Cabal 1.8.\r\n\r\n## Installation\r\n\r\nTo add Flow as a dependency
  to your package, add it to your Cabal file.\r\n\r\n```\r\nbuild-depends: flow ==1.0.*\r\n```\r\n\r\nSee
  [the change log][] for a detailed list of changes.\r\n\r\n## Usage\r\n\r\nFlow is
  designed to be imported unqualified. It does not export anything that\r\nconflicts
  with [the base package][].\r\n\r\n``` hs\r\nimport Flow\r\n```\r\n\r\n### Cheat
  sheet\r\n\r\nFlow            | Base\r\n--------------- | -------------\r\n<code>x
  &#124;> f</code> | `x & f`\r\n<code>f <&#124; x</code> | `f $ x`\r\n`apply x f`
  \    | `f x`\r\n`f .> g`        | `f >>> g`\r\n`g <. f`        | `g . f`\r\n`compose
  f g x` | `g (f x)`\r\n`x !> f`        | -\r\n`f <! x`        | `f $! x`\r\n`apply'
  x f`    | `seq x (f x)`\r\n\r\nFor more information about Flow, please read [the
  Haddock documentation][].\r\n\r\n[Flow]: http://taylor.fausak.me/flow/\r\n[Version
  badge]: https://www.stackage.org/package/flow/badge/nightly?label=version\r\n[version]:
  https://www.stackage.org/package/flow\r\n[Build badge]: https://travis-ci.org/tfausak/flow.svg?branch=master\r\n[build]:
  https://travis-ci.org/tfausak/flow\r\n[`($)`]: http://hackage.haskell.org/package/base-4.8.0.0/docs/Prelude.html#v:-36-\r\n[`(.)`]:
  http://hackage.haskell.org/package/base-4.8.0.0/docs/Prelude.html#v:.\r\n[the change
  log]: CHANGELOG.md\r\n[the base package]: http://hackage.haskell.org/package/base\r\n[the
  haddock documentation]: https://hackage.haskell.org/package/flow/docs/Flow.html\r\n"
license-name: MIT
