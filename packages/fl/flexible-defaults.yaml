changelog-type: ''
hash: fe19efc9286f7384ede193e8b1f6e68a623481ff556eafb172ffd50f5a999b33
synopsis: Generate default function implementations for complex type classes.
changelog: ''
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.1.0'
- '0.0.1.1'
latest: '0.0.1.1'
description-type: haddock
description: ! 'Template Haskell code to implement default implementations

  for type-class functions based on which functions are

  already implemented.  Currently extremely crude but

  still fairly effective.


  When defining a type class with many functions, each

  of which can be implemented based on arbitrary subsets

  of the others, the standard default-implementation

  concept breaks down quite badly.  This library provides

  a system by which more complex rules can be described

  for choosing default implementations based on which

  ones the user supplies.  These implementations can

  additionally be given \"suitability scores\", so that

  when multiple possible choices could be made, the

  library can choose the \"best\" one.


  Changes in 0.0.1.0: Updated for Template Haskell changes

  in GHC 7.6


  Changes in v0.0.0.3:  Added a hack to fix under GHC 7.2.


  Changes in v0.0.0.2:  Nothing at all except setting

  ''buildable: False'' under GHC 7.2.1.'
