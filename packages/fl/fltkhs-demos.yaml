homepage: http://github.com/deech/fltkhs-demos
changelog-type: ''
hash: 5b97838631e3f1d7983d80ca194edb98b7c4f2594fb08adf7448c5779d119645
test-bench-deps: {}
maintainer: aditya.siram@gmail.com
synopsis: FLTKHS demos. Please scroll to the bottom for more information.
changelog: ''
basic-deps:
  bytestring: -any
  stm: -any
  base: ==4.*
  process: -any
  fltkhs: ! '>=0.4.0.0'
  directory: ! '>=1.2.2.0'
all-versions:
- '0.0.0.3'
author: Aditya Siram
latest: '0.0.0.3'
description-type: markdown
description: ! "#Fltkhs-demos\n\nThese are end-to-end demos of [FLTKHS] [1], a Haskell
  Binding to the FLTK GUI Library\n\n\nFltkhs-demos aims not only to show off the
  features of the [fltkhs] [1] but also\nserve as a way of learning the API by example.
  For more thorough documentation\non the [fltkhs] [1] API please see the [FLTKHS
  module] [2] of that package.\n\n## Introduction\n\nThe demos shipped with this package
  are listed in `fltkhs-demos.cabal` as\nseparate `Executable` components. Once the
  package is installed they are\ninstalled to Cabal's standard /bin/ directory (usually
  ~/.cabal/bin on Linux).\n\nNote that the executables are prefixed with \\\"fltkhs-\\\".
  This is in order to\nprevent the demo executables from stomping over applications
  of the same name\nthe user might already have installed. Typing:\n\n```\n > fltkhs-<TAB>\n```\n\nat
  the command line should show a complete list of available demos.\n\nAlternatively
  you can do:\n\n```\n > ls ~/.cabal/bin/fltkhs-*\n```\n\n## Learning The API\n\nMost
  of the demos are exact ports of those shipped in the 'test' directory of\nthe <http://fltk.org
  FLTK> distribution. It is hoped the user will study the\nHaskell demo code side-by-side
  with the C++ demo code in order to understand the\nAPI. The section __API Guide__
  in the [FLKTHS documentation] [2] covers this in more detail.\n\n## Why is the demo
  code so un-Haskelly?\nFor being written in Haskell, the demo code is horrifyingly/amazingly
  imperative and stateful. Although it may repulse those\nwho used to pure Haskell
  idioms it is that way for a reason.\n\nThe demo code was never meant to be idiomatic
  Haskell code but a way of showing as much of the API as possible. The API itself\nclosely
  resembles the underlying C++ code which is imperative and stateful. This has the
  advantage of making the API easier\nto learn.\n\nFor instance, assuming FLTK was
  installed from source compare /src/Examples/arc.hs with /test/arc.cxx in the FLTK\nsource
  directory. There is quite a bit of correspondence and it is easy to see how the
  Haskell API functions map to the C++ ones.\n\n## Fast Compilation Flag\n\nThis package
  comes with a Cabal flag `fastCompile` that is enabled by default and speeds up compilation.
  More information on this flag is available under the __Compilation__ section of
  the [FLTKHS documentation] [2].\n\nTo disable this flag, tell Cabal to ignore it
  during the `configure` step:\n\n```\ncabal configure -f-fastCompile\n```\n\n# GHCi\n\nThe
  recommended way to running the REPL in a `fltkhs` application is `cabal repl`. For
  example to run the `fltkhs-arc` example do:\n\n```\ncabal repl fltkhs-arc\n```\n\n__NOTE__:
  For now it only works in GHC 7.8.x. GHC 7.10.x has an unfortunate regression that
  crashes GHCi because it cannot find symbols in the C library that contains the C++
  bindings. This has been fixed in GHC 8. More information is available in the [ticket]
  [4].\n\n\n\n\n  [1]: http://hackage.haskell.org/package/fltkhs/\n  [2]: http://hackage.haskell.org/package/fltkhs/docs/Graphics-UI-FLTK-LowLevel-FLTKHS.html\n
  \ [3]: https://github.com/deech/fltkhs-fluid-hello-world\n  [4]: https://ghc.haskell.org/trac/ghc/ticket/10568"
license-name: MIT
