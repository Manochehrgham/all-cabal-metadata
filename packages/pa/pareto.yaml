homepage: http://bitbucket.org/hyllos/pareto-haskell
changelog-type: markdown
hash: e75bbe84e2a97a65f9fd1f165b6e2881778665e822c0d63882ba18db9ee2f8f4
test-bench-deps: {}
maintainer: Benjamin Weber <mail@bwe.im>
synopsis: A library for cause-effect relationships.
changelog: ! '# Revision history for pareto


  ## 0.1.0.0  -- 2016-10-17


  * First version. Main functions: pareto, causes, effetcts, causesMaxConcentration,
  effectsMaxConcentration.

'
basic-deps:
  base: ! '>=4.9 && <4.10'
all-versions:
- '0.1.0.0'
author: Benjamin Weber <mail@bwe.im>
latest: '0.1.0.0'
description-type: markdown
description: ! 'Pareto: Is a pareto distribution present?

  =========================================


  Features

  --------


  * The main function `pareto` will return True if a pareto distribution

  is present.

  * `causesMaxConcentration` returns the causes with the maximum

  concentration (rank * value.)

  * `effectsMaxConcentration` returns the effects with the maximum

  concentration.

  * If you want the effects for a specific share of causes, use

  `effects`.

  * You get the causes for a specific share of effects via `causes`.


  Foundation

  ----------


  * `pareto` employs an [entropy model][1] . If entropy for a list of numbers

  falls below a `controlLimit`, pareto distribution is present.

  * `causesMaxConcentration` and `effectsMaxConcentration` will return

  the respective share of the causes and effects where concentration

  (rank * value) is highest.


  [1]: http://www.boazronen.org/PDF/The%20Pareto%20managerial%20principle%20-%20when%20does%20it%20apply.pdf
  "GROSFELD-NIR, A; RONEN, B; KOZLOVSKY, NIR, 2007: The Pareto managerial principle:
  when does it apply?"


  Examples

  --------


  Examples can be found in the package''s documentation.

'
license-name: BSD3
