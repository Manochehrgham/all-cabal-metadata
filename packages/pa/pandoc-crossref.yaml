homepage: ''
changelog-type: ''
hash: e00329990db713fde3bd6a599aa9cf289a9d1144075471bf2d290da79e093ae6
test-bench-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.2 && <5'
  hspec: -any
  process: ! '>=1 && <1.3'
  data-default: ! '>=0.4 && <0.6'
  pandoc-types: ! '>=1.12.4.1 && <1.13'
  containers: ! '>=0.1 && <0.6'
  pandoc: ! '>=1.13 && <1.16'
  mtl: ! '>=1.1 && <2.3'
  pandoc-crossref: -any
  yaml: ! '>=0.8 && <0.9'
maintainer: root@livid.pp.ru
synopsis: Pandoc filter for cross-references
changelog: ''
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.2 && <5'
  data-default: ! '>=0.4 && <0.6'
  pandoc-types: ! '>=1.12.4.1 && <1.13'
  containers: ! '>=0.1 && <0.6'
  pandoc: ! '>=1.13 && <1.16'
  mtl: ! '>=1.1 && <2.3'
  pandoc-crossref: -any
  yaml: ==0.8.*
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.2.3'
- '0.1.2.4'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.5.1'
- '0.1.5.2'
- '0.1.5.3'
- '0.1.5.4'
- '0.1.5.5'
author: Nikolay Yakimov
latest: '0.1.5.5'
description-type: markdown
description: ! "# pandoc-crossref filter ![](https://travis-ci.org/lierdakil/pandoc-crossref.svg?branch=master)\n\npandoc-crossref
  is a pandoc filter for numbering figures, equations, tables and cross-references
  to them.\n\nInput file (like [demo.md][demo-md]) can be converted into [html][html],
  [latex][latex], [pdf][pdf], [md][md] or other formats.\n\nOptionally, you can use
  cleveref for latex/pdf output, e.g. [cleveref pdf][cpdf], [cleveref latex][clatex],
  and listings package, e.g. [listings pdf][lpdf], [listings latex][llatex]\n\nYou
  can also enable per-chapter numbering (as with `--chapters` for latex output). You
  need to specify `-M chapters` for non-latex/pdf output however. Examples: [html][chap-html],
  [markdown][chap-markdown], [latex][chap-latex], [pdf][chap-pdf].\n\n[demo-md]: https://raw.githubusercontent.com/lierdakil/pandoc-crossref/gh-pages/demo.md\n[html]:
  http://lierdakil.github.io/pandoc-crossref/output.html\n[latex]: http://lierdakil.github.io/pandoc-crossref/output.latex\n[pdf]:
  http://lierdakil.github.io/pandoc-crossref/output.pdf\n[md]: http://lierdakil.github.io/pandoc-crossref/output.md\n[chap-html]:
  http://lierdakil.github.io/pandoc-crossref/output-chapters.html\n[chap-latex]:http://lierdakil.github.io/pandoc-crossref/output-chapters.latex\n[chap-markdown]:http://lierdakil.github.io/pandoc-crossref/output-chapters.md\n[chap-pdf]:http://lierdakil.github.io/pandoc-crossref/output-chapters.pdf\n[clatex]:
  http://lierdakil.github.io/pandoc-crossref/output-cref.latex\n[cpdf]: http://lierdakil.github.io/pandoc-crossref/output-cref.pdf\n[llatex]:
  http://lierdakil.github.io/pandoc-crossref/output-listings.latex\n[lpdf]: http://lierdakil.github.io/pandoc-crossref/output-listings.pdf\n\n\nTested
  with pandoc 1.13.2 and 1.14.\n\nThis work is inspired by [pandoc-fignos][1] and
  [pandoc-eqnos][2] by @tomduck.\n\n[1]: https://github.com/tomduck/pandoc-fignos\n[2]:
  https://github.com/tomduck/pandoc-eqnos\n\nThis package tries to use latex labels
  and references if output type is LaTeX. It also tries to supplement rudimentary
  LaTeX configuration that should mimic metadata configuration by setting `header-includes`
  variable.\n\n## Syntax\n\nSyntax is loosely based on discussion in <https://github.com/jgm/pandoc/issues/813>\n\n###
  Image labels\n\n```markdown\n![Caption](file.ext){#fig:label}\n```\n\nTo label an
  (implicit) figure, append `{#fig:label}` (with `label` being something unique to
  reference this figure by) immediately after image definition.\n\nThis only works
  on implicit figures, i.e. an image occurring by itself in a paragraph (which will
  be rendered as a figure with caption by pandoc)\n\nImage block and label *can* be
  separated by one or more spaces.\n\n### Equation labels\n\n```markdown\n$$ math
  $$ {#eq:label}\n```\n\nTo label a display equation, append `{#eq:label}` (with `label`
  being something unique to reference this equation by) immediately after math block.\n\nThis
  only works if display math and label specification are in a paragraph of its own.\n\nMath
  block and label *can* be separated by one or more spaces.\n\n### Table labels\n\n```markdown\na
  \  b   c\n--- --- ---\n1   2   3\n4   5   6\n\n: Caption {#tbl:label}\n```\n\nTo
  label a table, append `{#tbl:label}` at the end of table caption (with `label` being
  something unique to reference this table by). Caption and label *must* be separated
  by at least one space.\n\n### Section labels\n\nYou can also reference sections
  of any level. Section labels use native pandoc syntax, but must start with \"sec:\",
  e.g.\n\n```markdown\n# Section {#sec:section}\n```\n\nYou can also use `autoSectionLabels`
  variable to automatically prepend all section labels (automatically generated with
  pandoc included) with \"sec:\". Bear in mind that references can't contain periods,
  commas etc, so some auto-generated labels will still be unusable.\n\nWARNING: With
  LaTeX output, you have to invoke pandoc with `--number-sections`, otherwise section
  labels won't work. It's also advised with other output formats, since with no numbers
  in section titles, it would be hard to navigate anyway.\n\n### Section reference
  labels\n\n***Not currently supported with LaTeX output***\n\nIf you want to reference
  some section by a pre-defined label instead of by number, you can specify section
  attribute `label`, like this:\n\n```markdown\n# Section {label=\"Custom Label\"}\n```\n\nThis
  label will be used instead of section number in `chapters` output and when referencing
  section directly (with `@sec:section`).\n\nNote that with `chapters` output with
  depth>1, only given section will be referenced by custom label, e.g. with\n\n```markdown\n#
  Chapter 1.\n\n## Section with custom label {#sec:scl label=\"SCL\"}\n\n![](figure.png){#fig:figure}\n```\n\n`@sec:scl`
  will translate into `sec. 1.SCL`, and `@fig:figure` into `fig. 1.SCL.1`\n\n### Code
  Block labels\n\nThere are a couple options to add code block labels. Those work
  only if code block id starts with `lst:`, e.g. `{#lst:label}`\n\n#### `caption`
  attribute\n\n`caption` attribute will be treated as code block caption. If code
  block has both id and `caption` attributes, it will be treated as numbered code
  block.\n\n<pre>\n```{#lst:code .haskell caption=\"Listing caption\"}\nmain :: IO
  ()\nmain = putStrLn \"Hello World!\"\n```\n</pre>\n\n#### Table-style captions\n\nEnabled
  with `codeBlockCaptions` metadata option. If code block is immediately\nadjacent
  to paragraph, starting with `Listing: ` or `: `, said paragraph will be\ntreated
  as code block caption.\n\n<pre>\nListing: Listing caption\n\n```{#lst:code .haskell}\nmain
  :: IO ()\nmain = putStrLn \"Hello World!\"\n```\n</pre>\n\nor\n\n<pre>\n```{#lst:code
  .haskell}\nmain :: IO ()\nmain = putStrLn \"Hello World!\"\n```\n\n: Listing caption\n</pre>\n\n####
  Wrapping div\n\nWrapping code block without label in a div with id `lst:...` and
  class, starting with `listing`, and adding paragraph before code block, but inside
  div, will treat said paragraph as code block caption.\n\n<pre>\n&lt;div id=\"lst:code\"
  class=\"listing\"&gt;\nListing caption\n```{.haskell}\nmain :: IO ()\nmain = putStrLn
  \"Hello World!\"\n```\n&lt;/div&gt;\n</pre>\n\n### References\n\n```markdown\n[@fig:label1;@fig:label2;...]
  or [@eq:label1;@eq:label2;...] or [@tbl:label1;@tbl:label2;...] or @fig:label or
  @eq:label or @tbl:label\n```\n\nReference syntax heavily relies on citation syntax.
  Basic reference is created by writing `@`, then basically desired label with prefix.
  It is also possible to reference a group of objects, by putting them into brackets
  with `;` as separator. Similar objects will be grouped in order of them appearing
  in citation brackets, and sequential reference numbers will be shortened, e.g. `1,2,3`
  will be shortened to `1-3`.\n\nYou can capitalize first reference character to get
  capitalized prefix, e.g. `[@Fig:label1]` will produce `Fig. ...` by default. Capitalized
  prefixes are derived automatically by capitalizing first letter of every word in
  non-capitalized prefix, unless overriden with metadata settings. See [Customization](#Customization)
  for more information.\n\n### Lists\n\nIt's possible to use raw latex commands `\\listoffigures`,
  `\\listoftables` and `listoflistings`, which will produce ordered list of figure/table/listings
  titles, in order of appearance in document.\n\n`\\listoflistings` depends on other
  options, and is defined in preamble, so it will work reliably only with standalone/pdf
  output.\n\n## Installation\n\nAssuming you already installed [Haskell platform](http://hackage.haskell.org/platform/),
  you can install pandoc-crossref with cabal:\n\n```bash\ncabal update\ncabal install
  pandoc-crossref\n```\n\n## Usage\n\nRun pandoc with `--filter` option, passing path
  to pandoc-crossref executable, or simply `pandoc-crossref`, if it's in PATH:\n\n`pandoc
  --filter pandoc-crossref`\n\nIf you installed with cabal, it's most likely located
  in `$HOME/.cabal/bin` on \\*NIX systems, or in `%AppData%\\cabal\\bin` on Windows.\n\n###
  Customization\n\nThere are several parameters that can be set via YAML metadata
  (either by passing `-M` to `pandoc`, or by setting it in source markdown)\n\nFollowing
  variables are supported:\n\n* `cref`: if True, latex export will use `\\cref` from
  cleveref package. Only relevant for LaTeX output. `\\usepackage{cleveref}` will
  be automatically added to `header-includes`.\n* `chapters`: if True, number elements
  as `chapter.item`, and restart `item` on each first-level heading (as `--chapters`
  for latex/pdf output)\n* `chaptersDepth`, default `1`: header level to treat as
  \"chapter\". If `chaptersDepth>1`, then items will be prefixed with several numbers,
  corresponding to header numbers, e.g. `fig. 1.4.3`.\n* `listings`: if True, generate
  code blocks for `listings` package. Only relevant for LaTeX output. `\\usepackage{listings}`
  will be automatically added to `header-includes`. You need to specify `--listings`
  option as well.\n* `codeBlockCaptions`: if True, parse table-style code block captions.\n*
  `figureTitle`, default `Figure`: Word(s) to prepend to figure titles, e.g. `Figure
  1: Description`\n* `tableTitle`, default `Table`: Word(s) to prepend to table titles,
  e.g. `Table 1: Description`\n* `listingTitle`, default `Listing`: Word(s) to prepend
  to listing titles, e.g. `Listing 1: Description`\n* `titleDelimiter`, default `:`:
  What to put between object number and caption text.\n* `figPrefix`, default `fig.`,
  `figs.`: Prefix for references to figures, e.g. `figs. 1-3`\n* `eqnPrefix`, default
  `eq.`, `eqns.`: Prefix for references to equations, e.g. `eqns. 3,4`\n* `tblPrefix`,
  default `tbl.`, `tbls.`: Prefix for references to tables, e.g. `tbl. 2`\n* `lstPrefix`,
  default `lst.`, `lsts.`: Prefix for references to lists, e.g. `lsts. 2,5`\n* `secPrefix`,
  default `sec.`, `secs.`: Prefix for references to sections, e.g. `secs. 2,5`\n*
  `autoSectionLabels`, default `false`: Automatically prefix all section labels with
  `sec:`. Note that this messes with pandoc's automatic header references.\n* `chapDelim`,
  default `.`: Delimiter between chapter number and item number.\n* `rangeDelim`,
  default `-`: Delimiter between reference ranges, e.g. `eq. 2-5`\n* `lofTitle`, default
  `# List of Figures`: Title for list of figures (lof)\n* `lotTitle`, default `# List
  of Tables`: Title for list of tables (lot)\n* `lolTitle`, default `# List of Listings`:
  Title for list of listings (lol)\n* `figureTemplate`, default `\\\\[figureTitle\\\\]
  \\\\[i\\\\]\\\\[titleDelim\\\\] \\\\[t\\\\]`: template for figure captions, see
  [Templates](#templates)\n* `tableTemplate`, default `\\\\[tableTitle\\\\] \\\\[i\\\\]\\\\[titleDelim\\\\]
  \\\\[t\\\\]`: template for table captions, see [Templates](#templates)\n* `listingTemplate`,
  default `\\\\[tableTitle\\\\] \\\\[i\\\\]\\\\[titleDelim\\\\] \\\\[t\\\\]`: template
  for listing captions, see [Templates](#templates)\n\n`figPrefix`, `eqnPrefix`, `tblPrefix`,
  `lstPrefix` can be YAML arrays. That way, value at index corresponds to total number
  of references in group, f.ex.\n\n```yaml\nfigPrefix:\n  - \"fig.\"\n  - \"figs.\"\n```\n\nWill
  result in all single-value references prefixed with \"fig.\", and all reference
  groups of two and more prefixed with \"figs.\":\n\n```markdown\n[@fig:one] -> fig.
  1\n[@fig:one; @fig:two] -> figs. 1, 2\n[@fig:one; @fig:two; @fig:three] -> figs.
  1-3\n```\n\nThey can be YAML strings as well. In that case, prefix would be the
  same regardless of number of references.\n\nThey can also be used with first character
  capitalized, i.e. `FigPrefix`, etc. In this case, these settings will override default
  reference capitailzation settings.\n\n#### LaTeX customization\n\nSupport for above
  variables with LaTeX/PDF output is limited. In particular, the following variables
  are honored:\n\n* `figureTitle`\n* `tableTitle`\n* `listingTitle`\n* `lofTitle`
  -- ignores formatting\n* `lotTitle` -- ignores formatting\n* `lolTitle` -- ignores
  formatting\n* `*Prefix`, upper-/lowercase and single/plural form. Note that with
  cleveref output, if `*Prefix` is array, only first two items are used, and the rest
  is ignored.\n\nTemplates are *not* supported.\n\nYou can add arbitrary LaTeX commands
  to document header, however, using `header-includes` metadata field. Please bear
  in mind, that pandoc-crossref up to and including 0.1.2.1 requires `header-includes`
  to be YAML array, e.g.\n\n```yaml\nheader-includes:\n    - \"\\\\newcommand{\\\\pcdoc}{Pandoc-crossref
  documentation}\"\n```\n\nThis will be added *before* any customization applied by
  pandoc-crossref. For a complete list of what is added to template, consult [ModifyMeta.hs][ModifyMeta.hs].\n\n[ModifyMeta.hs]:
  https://github.com/lierdakil/pandoc-crossref/blob/master/src/Util/ModifyMeta.hs\n\n###
  Templates\n\npandoc-crossref supports advanced caption customization via caption
  templates. Templates are specified as YAML metadata variables (see [Customization](#customization)),
  and are parsed as default Pandoc Markdown. Variables are specified with display
  math syntax, i.e. `$$var$$` in a template will be replaced with value of variable
  `var`.\nVariables can be specified in YAML metadata block, or from command line
  (with `-M` switch). There are two special variables, that are set internally:\n\n*
  `i` -- object number, possibly with chapter number (if `chapter=True`)\n* `t` --
  object caption, as given in source Markdown\n\nPlease note that at the moment, templates
  are not supported with LaTeX/PDF output.\n\n### Settings file\n\nIt is also possible
  to set variables used by pandoc-crossref with a separate YAML file. If a given variable
  is not set in metadata, then pandoc-crossref will attempt to read it from file specified
  by `crossrefYaml` metadata variable, or, if not set, from `pandoc-crossref.yaml`
  from current working directory. This allows for reusable configurations. One possible
  application is ad-hoc internationalization.\n\nFor example, consider `$HOME/misc/pandoc-crossref-es.yaml`:\n\n```yaml\nfigureTitle:
  \"Figura\"\ntableTitle: \"Tabla\"\nfigPrefix: \"fig.\"\neqnPrefix: \"ec.\"\ntblPrefix:
  \"tbl.\"\nloftitle: \"# Lista de figuras\"\nlotTitle: \"# Lista de tablas\"\n```\n\nOne
  could use this with pandoc-crossref as follows:\n\n`pandoc -F pandoc-crossref.hs
  -M \"crossrefYaml=$HOME/misc/pandoc-crossref-es.yaml\"`\n"
license-name: GPL-2
