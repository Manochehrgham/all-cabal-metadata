homepage: ''
changelog-type: ''
hash: d2e8585033cbfcb5d232c01e6df4f9ba073d1249613847c238d433b011015693
test-bench-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.8 && <5'
  hspec: -any
  roman-numerals: ==0.5.*
  syb: ! '>=0.4 && <0.7'
  filepath: -any
  process: ! '>=1 && <1.5'
  data-default: ! '>=0.4 && <0.8'
  data-accessor-template: ! '>=0.2.1.12 && <0.3.0.0'
  data-accessor-transformers: ! '>=0.2.1.6 && <0.3.0.0'
  pandoc-types: ! '>=1.16 && <1.17'
  containers: ! '>=0.1 && <0.6'
  data-accessor: ! '>=0.2.2.6 && <0.3.0.0'
  pandoc: ! '>=1.17.1 && <1.18'
  mtl: ! '>=1.1 && <2.3'
  pandoc-crossref: -any
  template-haskell: ! '>=2.7.0.0 && <3.0.0.0'
  yaml: ! '>=0.8 && <0.9'
  directory: -any
maintainer: root@livid.pp.ru
synopsis: Pandoc filter for cross-references
changelog: ''
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.8 && <5'
  roman-numerals: ==0.5.*
  syb: ! '>=0.4 && <0.7'
  data-default: ! '>=0.4 && <0.8'
  data-accessor-template: ! '>=0.2.1.12 && <0.3.0.0'
  data-accessor-transformers: ! '>=0.2.1.6 && <0.3.0.0'
  pandoc-types: ==1.16.*
  containers: ! '>=0.1 && <0.6'
  data-accessor: ! '>=0.2.2.6 && <0.3.0.0'
  pandoc: ! '>=1.17.1 && <1.18'
  mtl: ! '>=1.1 && <2.3'
  pandoc-crossref: -any
  template-haskell: ! '>=2.7.0.0 && <3.0.0.0'
  yaml: ==0.8.*
all-versions:
- '0.1.6.5'
- '0.2.1.1'
- '0.2.1.2'
- '0.2.1.3'
- '0.2.2.1'
- '0.2.3.0'
author: Nikolay Yakimov
latest: '0.2.3.0'
description-type: markdown
description: ! "# pandoc-crossref filter [![Build Status](https://travis-ci.org/lierdakil/pandoc-crossref.svg?branch=master)](https://travis-ci.org/lierdakil/pandoc-crossref)\n\npandoc-crossref
  is a pandoc filter for numbering figures, equations, tables and cross-references
  to them.\n\nInput file (like [demo.md][demo-md]) can be converted into [html][html],
  [latex][latex], [pdf][pdf], [md][md] or other formats.\n\nOptionally, you can use
  cleveref for latex/pdf output, e.g. [cleveref pdf][cpdf], [cleveref latex][clatex],
  and listings package, e.g. [listings pdf][lpdf], [listings latex][llatex]\n\nYou
  can also enable per-chapter numbering (as with `--chapters` for latex output). You
  need to specify `-M chapters` for non-latex/pdf output however. Examples: [html][chap-html],
  [markdown][chap-markdown], [latex][chap-latex], [pdf][chap-pdf].\n\n[demo-md]: https://raw.githubusercontent.com/lierdakil/pandoc-crossref/gh-pages/demo.md\n[html]:
  http://lierdakil.github.io/pandoc-crossref/output.html\n[latex]: http://lierdakil.github.io/pandoc-crossref/output.latex\n[pdf]:
  http://lierdakil.github.io/pandoc-crossref/output.pdf\n[md]: http://lierdakil.github.io/pandoc-crossref/output.md\n[chap-html]:
  http://lierdakil.github.io/pandoc-crossref/output-chapters.html\n[chap-latex]:http://lierdakil.github.io/pandoc-crossref/output-chapters.latex\n[chap-markdown]:http://lierdakil.github.io/pandoc-crossref/output-chapters.md\n[chap-pdf]:http://lierdakil.github.io/pandoc-crossref/output-chapters.pdf\n[clatex]:
  http://lierdakil.github.io/pandoc-crossref/output-cref.latex\n[cpdf]: http://lierdakil.github.io/pandoc-crossref/output-cref.pdf\n[llatex]:
  http://lierdakil.github.io/pandoc-crossref/output-listings.latex\n[lpdf]: http://lierdakil.github.io/pandoc-crossref/output-listings.pdf\n\n\nThis
  work is inspired by [pandoc-fignos][1] and [pandoc-eqnos][2] by @tomduck.\n\n[1]:
  https://github.com/tomduck/pandoc-fignos\n[2]: https://github.com/tomduck/pandoc-eqnos\n\nThis
  package tries to use latex labels and references if output type is LaTeX. It also
  tries to supplement rudimentary LaTeX configuration that should mimic metadata configuration
  by setting `header-includes` variable.\n\n## Caveats\n\n### LaTeX output and `--include-in-header`\n\npandoc-crossref
  uses metadata variable `header-includes` to add LaTeX definitions to output. However,
  Pandoc's command line option `--include-in-header`/`-H` overrides this variable.
  If you need to use `--include-in-header`, add pandoc-crossref-specific definitions
  as well. See [LaTeX customization](#latex-customization) for more information.\n\n###
  pandoc-citeproc and pandoc-crossref\n\nSince pandoc-crossref uses the same citation
  syntax as pandoc-citeproc, you *have* to run former *before* latter. For example:\n\n```\npandoc
  -F pandoc-crossref -F pandoc-citeproc file.md -o file.html\n```\n\n### Note on leading/trailing
  spaces in metadata options\n\nLeading and trailing spaces in YAML metadata will
  most likely be stripped by either YAML parser or Pandoc itself. If you need leading
  and/or trailing spaces in pandoc-crossref metadata variables, use html entity for
  space instead, i.e. `&#32;`. For example, if you want reference ranges to be delimited
  by a dash with spaces (e.g. `2 - 5`), include the following in YAML metadata:\n\n```yaml\nrangeDelim:
  '&#32;-&#32;'\n```\n\nor pass `-MrangeDelim='&#32;-&#32;'` to pandoc on command
  line.\n\nYou can use other html entites of course, like `&nbsp;` etc.\n\n## Syntax\n\nSyntax
  is loosely based on discussion in <https://github.com/jgm/pandoc/issues/813>\n\n###
  Image labels\n\n```markdown\n![Caption](file.ext){#fig:label}\n```\n\nTo label an
  (implicit) figure, append `{#fig:label}` (with `label` being something unique to
  reference this figure by) immediately after image definition.\n\nThis only works
  on implicit figures, i.e. an image occurring by itself in a paragraph (which will
  be rendered as a figure with caption by pandoc)\n\nImage block and label *can not*
  be separated by spaces.\n\n#### Subfigures\n\nIt's possible to group figures as
  subfigures. Basic syntax is as follows:\n\n```markdown\n<div id=\"fig:figureRef\">\n![subfigure
  1 caption](image1.png){#fig:figureRefA}\n\n![subfigure 2 caption](image2.png){#fig:figureRefB}\n\nCaption
  of figure\n</div>\n```\n\nTo sum up, subfigures are made with a div having a figure
  `id`. Contents of said div consist of several paragraphs. All but last paragraphs
  contain one subfigure each, with captions, images and (optionally) reference attributes.
  Last paragraph contains figure caption.\n\nIf you put more than one figure in the
  paragraph, those will still be rendered, but Pandoc will omit subfigure caption
  in most outputs (but it will work as expected with LaTeX). You can use output-specific
  hacks to work around that, or use `subfigGrid` (see below).\n\nOutput is customizable,
  with metadata fields. See [Customization](#customization) for more information.\n\nDefault
  settings will produce the following equivalent Markdown from example above:\n\n```markdown\n<div
  id=\"fig:figureRef\" class=\"subfigures\">\n\n![a](image1.png){#fig:figureRefA}\n\n![b](image2.png){#fig:figureRefB}\n\nFigure
  1: Caption of figure. a — subfigure 1 caption, b — subfigure 2\ncaption\n\n</div>\n```\n\nReferences
  to subfigures will be rendered as `figureNumber (subfigureNumber)`, e.g., in this
  particular example, `[@fig:figureRefA]` will produce `fig. 1 (a)`.\n\nYou can add
  `nocaption` class to an image to suppress subfigure caption altogether. Note that
  it will still be counted.\n\n##### Subfigure grid\n\nIf you need to align subfigures
  in a grid, and using output format styles is not an option, you can use `subfigGrid`
  option. That will typeset subfigures inside a table.\n\nRows are formed by different
  paragraphs, with each image in a separate column.\n\nColumn widths will be taken
  from `width` attributes of corresponding images, e.g.\n\n```markdown\n<div id=\"fig:coolFig\">\n![caption
  a](coolfiga.png){#fig:cfa width=30%}\n![caption b](coolfigb.png){#fig:cfb width=60%}\n![caption
  c](coolfigb.png){#fig:cfc width=10%}\n\n![caption d](coolfigd.png){#fig:cfd}\n![caption
  e](coolfige.png){#fig:cfe}\n![caption f](coolfigf.png){#fig:cff}\n\nCool figure!\n</div>\n```\n\nwill
  produce a table with columns of 30%, 60% and 10% respectively.\n\nOnly first row
  of images is considered for table width computation, other rows are completely ignored.\n\n*Anything*
  except images is silently ignored. So any text, spaces, soft line breaks etc will
  silently disappear from output. That doesn't apply to caption paragraph, obviously.\n\nAll
  images will have width attribute automatically set to `100%` in order to fill whole
  column.\n\nSpecifying width in anything but `%` will throw an error.\n\nIf width
  for some images in first row is not specified, those will span equally in the remaining
  space.\n\nIf width isn't specified for any image in first row, those will span equally
  on 99% of page width (due to Pandoc otherwise omitting width attribute for table).\n\nThis
  option is ignored with LaTeX output, but paragraph breaks should produce similar
  effect, so images should be typeset correctly. TL;DR you don't need `subfigGrid`
  enabled for it to work with LaTeX, but you can still enable it.\n\n### Equation
  labels\n\n```markdown\n$$ math $$ {#eq:label}\n```\n\nTo label a display equation,
  append `{#eq:label}` (with `label` being something unique to reference this equation
  by) immediately after math block.\n\nMath block and label *can* be separated by
  one or more spaces.\n\nYou can also number all display equations with `autoEqnLabels`
  metadata setting (see below). Note, however, that you won't be able to reference
  equations without explicit labels.\n\nEquations numbers will be typeset inside math
  with `\\qquad` before them. If you want to use tables instead, use `tableEqns` option.
  \ Depending on output format, tables might work better or worse than `\\qquad`.\n\n###
  Table labels\n\n```markdown\na   b   c\n--- --- ---\n1   2   3\n4   5   6\n\n: Caption
  {#tbl:label}\n```\n\nTo label a table, append `{#tbl:label}` at the end of table
  caption (with `label` being something unique to reference this table by). Caption
  and label *must* be separated by at least one space.\n\n### Section labels\n\nYou
  can also reference sections of any level. Section labels use native pandoc syntax,
  but must start with \"sec:\", e.g.\n\n```markdown\n# Section {#sec:section}\n```\n\nYou
  can also use `autoSectionLabels` variable to automatically prepend all section labels
  (automatically generated with pandoc included) with \"sec:\". Bear in mind that
  references can't contain periods, commas etc, so some auto-generated labels will
  still be unusable.\n\nWARNING: With LaTeX output, you have to invoke pandoc with
  `--number-sections`, otherwise section labels won't work. It's also advised with
  other output formats, since with no numbers in section titles, it would be hard
  to navigate anyway.\n\n### Section reference labels\n\n***Not currently supported
  with LaTeX output***\n\nIf you want to reference some section by a pre-defined label
  instead of by number, you can specify section attribute `label`, like this:\n\n```markdown\n#
  Section {label=\"Custom Label\"}\n```\n\nThis label will be used instead of section
  number in `chapters` output and when referencing section directly (with `@sec:section`).\n\nNote
  that with `chapters` output with depth>1, only given section will be referenced
  by custom label, e.g. with\n\n```markdown\n# Chapter 1.\n\n## Section with custom
  label {#sec:scl label=\"SCL\"}\n\n![](figure.png){#fig:figure}\n```\n\n`@sec:scl`
  will translate into `sec. 1.SCL`, and `@fig:figure` into `fig. 1.SCL.1`\n\n### Code
  Block labels\n\nThere are a couple options to add code block labels. Those work
  only if code block id starts with `lst:`, e.g. `{#lst:label}`\n\n#### `caption`
  attribute\n\n`caption` attribute will be treated as code block caption. If code
  block has both id and `caption` attributes, it will be treated as numbered code
  block.\n\n<pre>\n```{#lst:code .haskell caption=\"Listing caption\"}\nmain :: IO
  ()\nmain = putStrLn \"Hello World!\"\n```\n</pre>\n\n#### Table-style captions\n\nEnabled
  with `codeBlockCaptions` metadata option. If code block is immediately\nadjacent
  to paragraph, starting with `Listing: ` or `: `, said paragraph will be\ntreated
  as code block caption.\n\n<pre>\nListing: Listing caption\n\n```{#lst:code .haskell}\nmain
  :: IO ()\nmain = putStrLn \"Hello World!\"\n```\n</pre>\n\nor\n\n<pre>\n```{#lst:code
  .haskell}\nmain :: IO ()\nmain = putStrLn \"Hello World!\"\n```\n\n: Listing caption\n</pre>\n\n####
  Wrapping div\n\nWrapping code block without label in a div with id `lst:...` and
  class, starting with `listing`, and adding paragraph before code block, but inside
  div, will treat said paragraph as code block caption.\n\n<pre>\n&lt;div id=\"lst:code\"
  class=\"listing\"&gt;\nListing caption\n```{.haskell}\nmain :: IO ()\nmain = putStrLn
  \"Hello World!\"\n```\n&lt;/div&gt;\n</pre>\n\n### References\n\n```markdown\n[@fig:label1;@fig:label2;...]
  or [@eq:label1;@eq:label2;...] or [@tbl:label1;@tbl:label2;...] or @fig:label or
  @eq:label or @tbl:label\n```\n\nReference syntax heavily relies on citation syntax.
  Basic reference is created by writing `@`, then basically desired label with prefix.
  It is also possible to reference a group of objects, by putting them into brackets
  with `;` as separator. Similar objects will be grouped in order of them appearing
  in citation brackets, and sequential reference numbers will be shortened, e.g. `1,2,3`
  will be shortened to `1-3`.\n\nYou can capitalize first reference character to get
  capitalized prefix, e.g. `[@Fig:label1]` will produce `Fig. ...` by default. Capitalized
  prefixes are derived automatically by capitalizing first letter of every word in
  non-capitalized prefix, unless overriden with metadata settings. See [Customization](#customization)
  for more information.\n\n### Lists\n\nIt's possible to use raw latex commands `\\listoffigures`,
  `\\listoftables` and `listoflistings`, which will produce ordered list of figure/table/listings
  titles, in order of appearance in document.\n\n`\\listoflistings` depends on other
  options, and is defined in preamble, so it will work reliably only with standalone/pdf
  output.\n\n## Installation\n\nAssuming you already installed [Haskell platform](http://hackage.haskell.org/platform/),
  you can install pandoc-crossref with cabal:\n\n```bash\ncabal update\ncabal install
  pandoc-crossref\n```\n\nHowever, I highly recommend you use a sandbox for installation,
  e.g.\n\n```bash\ncabal update\nmkdir pandoc-crossref\ncd pandoc-crossref\ncabal
  sandbox init\ncabal install pandoc-crossref\n```\n\nThis will get `pandoc-crossref`
  installed into `.cabal-sandbox/bin`. Pandoc will also be built, if it's not installed
  as a Haskell library system-wide. You might also want to install `pandoc-citeproc`
  in the same sandbox, if that's the case (`cabal install pandoc-citeproc`).\n\nFor
  Windows users, there is a pre-built executable available at [releases page](https://github.com/lierdakil/pandoc-crossref/releases/latest).
  Bear in mind that it is a product of an automated build script, and as such, provided
  as-is, with zero guarantees.\n\n## Usage\n\nRun pandoc with `--filter` option, passing
  path to pandoc-crossref executable, or simply `pandoc-crossref`, if it's in PATH:\n\n`pandoc
  --filter pandoc-crossref`\n\nIf you installed with cabal, it's most likely located
  in `$HOME/.cabal/bin` on \\*NIX systems, `$HOME/Library/Haskell/bin` on Macs, or
  in `%AppData%\\cabal\\bin` on Windows.\n\n### Customization\n\nThere are several
  parameters that can be set via YAML metadata (either by passing `-M` to `pandoc`,
  or by setting it in source markdown)\n\nA list of variables follows.\n\n#### General
  options\n\n* `cref`: if True, latex export will use `\\cref` from cleveref package.
  Only relevant for LaTeX output. `\\usepackage{cleveref}` will be automatically added
  to `header-includes`.\n* `chapters`: if True, number elements as `chapter.item`,
  and restart `item` on each first-level heading (as `--chapters` for latex/pdf output)\n*
  `chaptersDepth`, default `1`: header level to treat as \"chapter\". If `chaptersDepth>1`,
  then items will be prefixed with several numbers, corresponding to header numbers,
  e.g. `fig. 1.4.3`.\n* `listings`: if True, generate code blocks for `listings` package.
  Only relevant for LaTeX output. `\\usepackage{listings}` will be automatically added
  to `header-includes`. You need to specify `--listings` option as well.\n* `codeBlockCaptions`:
  if True, parse table-style code block captions.\n* `autoSectionLabels`, default
  `false`: Automatically prefix all section labels with `sec:`. Note that this messes
  with pandoc's automatic header references.\n* `autoEqnLabels`, default `false`:
  Automatically number all display equations (i.e. ones defined using `$$...$$`/`\\[...\\]`).
  Note that you won't be able to reference equations without explicit labels.\n* `tableEqns`,
  default `false`: Typeset equations and equation numbers in tables instead of embedding
  numbers into equations themselves. Depending on output format, this might work better
  or worse.\n\n#### Item title format\n\n* `figureTitle`, default `Figure`: Word(s)
  to prepend to figure titles, e.g. `Figure 1: Description`\n* `tableTitle`, default
  `Table`: Word(s) to prepend to table titles, e.g. `Table 1: Description`\n* `listingTitle`,
  default `Listing`: Word(s) to prepend to listing titles, e.g. `Listing 1: Description`\n*
  `titleDelim`, default `:`: What to put between object number and caption text.\n\n#####
  Subfigure-specific\n\nSee [Subfigures](#subfigures)\n\n* `ccsDelim`, default `,&nbsp;`:
  delimiter for collected subfigure captions. See [Subfigures](#subfigures) and [Templates](#templates)\n*
  `ccsLabelSep`, default `&nbsp;—&nbsp;`: delimiter used between subfigure label and
  subfigure caption in collected captions. See [Subfigures](#subfigures) and [Templates](#templates)\n*
  `subfigGrid`, default `false`. If true, typeset subfigures inside a table. Ignored
  with LaTeX output. See [Subfigures](#subfigures)\n\n#### List titles\n\n* `lofTitle`,
  default `# List of Figures`: Title for list of figures (lof)\n* `lotTitle`, default
  `# List of Tables`: Title for list of tables (lot)\n* `lolTitle`, default `# List
  of Listings`: Title for list of listings (lol)\n\n#### Reference format\n\n* `figPrefix`,
  default `fig.`, `figs.`: Prefix for references to figures, e.g. `figs. 1-3`\n* `eqnPrefix`,
  default `eq.`, `eqns.`: Prefix for references to equations, e.g. `eqns. 3,4`\n*
  `tblPrefix`, default `tbl.`, `tbls.`: Prefix for references to tables, e.g. `tbl.
  2`\n* `lstPrefix`, default `lst.`, `lsts.`: Prefix for references to lists, e.g.
  `lsts. 2,5`\n* `secPrefix`, default `sec.`, `secs.`: Prefix for references to sections,
  e.g. `secs. 2,5`\n* `chapDelim`, default `.`: Delimiter between chapter number and
  item number.\n* `rangeDelim`, default `-`: Delimiter between reference ranges, e.g.
  `eq. 2-5`\n\n`figPrefix`, `eqnPrefix`, `tblPrefix`, `lstPrefix` can be YAML arrays.
  That way, value at index corresponds to total number of references in group, f.ex.\n\n```yaml\nfigPrefix:\n
  \ - \"fig.\"\n  - \"figs.\"\n```\n\nWill result in all single-value references prefixed
  with \"fig.\", and all reference groups of two and more will be prefixed with \"figs.\":\n\n```markdown\n[@fig:one]
  -> fig. 1\n[@fig:one; @fig:two] -> figs. 1, 2\n[@fig:one; @fig:two; @fig:three]
  -> figs. 1-3\n```\n\nThey can be YAML strings as well. In that case, prefix would
  be the same regardless of number of references.\n\nThey can also be used with first
  character capitalized, i.e. `FigPrefix`, etc. In this case, these settings will
  override default reference capitailzation settings.\n\n#### Custom numbering\n\nSee
  [Custom Numbering Schemes](#custom-numbering-schemes)\n\n* `figLabels`, default
  unset: custom numbering scheme for figures.\n* `subfigLabels`, default `alpha a`:
  custom numbering scheme for subfigures.\n* `eqnLabels`, default unset: custom numbering
  scheme for equations.\n* `tblLabels`, default unset: custom numbering scheme for
  tables.\n* `lstLabels`, default unset: custom numbering scheme for listings.\n*
  `secLabels`, default unset: custom numbering scheme for sections.\n\n#### Item title
  templates\n\nSee [Templates](#templates)\n\n* `figureTemplate`, default `\\\\[figureTitle\\\\]
  \\\\[i\\\\]\\\\[titleDelim\\\\] \\\\[t\\\\]`: template for figure captions\n* `tableTemplate`,
  default `\\\\[tableTitle\\\\] \\\\[i\\\\]\\\\[titleDelim\\\\] \\\\[t\\\\]`: template
  for table captions\n* `listingTemplate`, default `\\\\[listingTitle\\\\] \\\\[i\\\\]\\\\[titleDelim\\\\]
  \\\\[t\\\\]`: template for listing captions\n\n##### Subfigure templates\n\nSee
  [Subfigures](#subfigures)\n\n* `subfigureTemplate`, default `\\\\[figureTitle\\\\]
  \\\\[i\\\\]\\\\[titleDelim\\\\] \\\\[t\\\\]. \\\\[ccs\\\\]`: template for subfigure
  divs captions.\n* `subfigureChildTemplate`, default `\\\\[i\\\\]`: template for
  actual subfigure captions.\n* `ccsTemplate`, default `\\\\[i\\\\]\\\\[ccsLabelSep\\\\]\\\\[t\\\\]`:
  template for collected subfigure captions.\n\n#### Reference templates\n\nSee [Templates](#templates)\n\n*
  `figPrefixTemplate`, defualt `\\\\[p\\\\]&nbsp;\\\\[i\\\\]` -- figure reference
  template\n* `eqnPrefixTemplate`, defualt `\\\\[p\\\\]&nbsp;\\\\[i\\\\]` -- equation
  reference template\n* `tblPrefixTemplate`, defualt `\\\\[p\\\\]&nbsp;\\\\[i\\\\]`
  -- table reference template\n* `lstPrefixTemplate`, defualt `\\\\[p\\\\]&nbsp;\\\\[i\\\\]`
  -- listing reference template\n* `secPrefixTemplate`, defualt `\\\\[p\\\\]&nbsp;\\\\[i\\\\]`
  -- section reference template\n\n#### LaTeX customization\n\nSupport for above variables
  with LaTeX/PDF output is limited. In particular, the following variables are honored:\n\n*
  `figureTitle`\n* `tableTitle`\n* `listingTitle`\n* `lofTitle` -- ignores formatting\n*
  `lotTitle` -- ignores formatting\n* `lolTitle` -- ignores formatting\n* `*Prefix`,
  upper-/lowercase and single/plural form. Note that with cleveref output, if `*Prefix`
  is array, only first two items are used, and the rest is ignored.\n\nTemplates are
  *not* supported.\n\nYou can add arbitrary LaTeX commands to document header, however,
  using `header-includes` metadata field. Please bear in mind, that pandoc-crossref
  up to and including 0.1.2.1 requires `header-includes` to be YAML array, e.g.\n\n```yaml\nheader-includes:\n
  \   - \"\\\\newcommand{\\\\pcdoc}{Pandoc-crossref documentation}\"\n```\n\nThis
  will be added *before* any customization applied by pandoc-crossref. For a complete
  list of what is added to template, consult [ModifyMeta.hs][ModifyMeta.hs].\n\n[ModifyMeta.hs]:
  https://github.com/lierdakil/pandoc-crossref/blob/master/src/Util/ModifyMeta.hs\n\n###
  Templates\n\npandoc-crossref supports advanced caption customization via caption
  templates. Templates are specified as YAML metadata variables (see [Customization](#customization)),
  and are parsed as default Pandoc Markdown. Variables are specified with display
  math syntax, i.e. `$$var$$` in a template will be replaced with value of variable
  `var`.\nVariables can be specified in YAML metadata block, or from command line
  (with `-M` switch). There are two special variables, that are set internally:\n\n*
  `i` -- object number, possibly with chapter number (if `chapter=True`)\n* `t` --
  object caption, as given in source Markdown\n* `ccs` -- collected subfigure captions.
  Only applicable to `subfigureTemplate`. Collected captions will be separated by
  `ccsDelim` and individual captions will be printed with `ccsTemplate`. See [Subfigures](#subfigures)\n\n`xPrefixTemplate`,
  where `x` is `fig`, `eqn`, etc, are a special case. Those don't have `t` variable,
  since there is no caption in source markdown, but instead have `p` variable, that
  binds to relevant `xPrefix`. This is done this way, since actual prefix vaule can
  depend on `i`.\n\nPlease note that at the moment, templates are not supported with
  LaTeX/PDF output.\n\n### Custom Numbering Schemes\n\nIt's possible to use other
  numbering schemes apart from arabic. This is controlled by several metadata options,
  consult [Customization](#customization) for a list. Possible values are:\n\n- `arabic`
  -- arabic numbers (1, 2, 3 ...)\n- `roman` -- roman numbers (I, II, III, IV, ...)\n-
  `alpha x`, where `x` is first letter to start from. This will work for any letter,
  but will use UTF-8 codepage to determine what's next, so using something strange
  is not advised. For example, you can safely use `alpha a` to get lowercase latin
  letters for 26 figures. After that, it will get weird (since basic latin alphabet
  has 26 letters). Specifically, it will go into characters space (`{`, `|`, `}`,
  etc). You can consult http://www.fileformat.info/info/unicode/block/basic_latin/utf8test.htm
  for general idea on letter progression.\n- list of strings. You can define a YAML
  array for numbers. Mapping is 1:1. For example,\n    ```yaml\n    figLabels: [α,
  β, γ, 1, 2, 3, I, II, III]\n    ```\n    will give first figure label 'α', second
  -- 'β', etc.\n\n    Note that it will repeat last item in list indefinitely if there
  are more images than items in list.\n\n### Settings file\n\nIt is also possible
  to set variables used by pandoc-crossref with a separate YAML file. If a given variable
  is not set in metadata, then pandoc-crossref will attempt to read it from file specified
  by `crossrefYaml` metadata variable, or, if not set, from `pandoc-crossref.yaml`
  from current working directory. This allows for reusable configurations. One possible
  application is ad-hoc internationalization.\n\nFor example, consider `$HOME/misc/pandoc-crossref-es.yaml`:\n\n```yaml\nfigureTitle:
  \"Figura\"\ntableTitle: \"Tabla\"\nfigPrefix: \"fig.\"\neqnPrefix: \"ec.\"\ntblPrefix:
  \"tbl.\"\nloftitle: \"# Lista de figuras\"\nlotTitle: \"# Lista de tablas\"\n```\n\npandoc-crossref
  will send this data to pandoc wrapped in lines of `---`. The YAML file's first line
  should specify a variable; it will not pass the variables if it is `---` or a blank
  line.\n\nOne could use this with pandoc-crossref as follows:\n\n`pandoc -F pandoc-crossref.hs
  -M \"crossrefYaml=$HOME/misc/pandoc-crossref-es.yaml\"`\n\n# License\n\nThis software
  is licensed under GNU GPL 2. See [LICENSE.md](https://github.com/lierdakil/pandoc-crossref/blob/master/LICENSE.md)
  for details.\n\n© 2016 Nikolay Yakimov et al\n\nContributors (per GPL, holders of
  copyright on their respective contributions):\n* Nikolay Yakimov\n* Wlad\n* scoavoux\n*
  Matthew Salganik\n* Hadrien Mary\n* Felix Yan\n* Chris Black\n* Bart Mesuere\n"
license-name: GPL-2
