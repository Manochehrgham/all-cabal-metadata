homepage: https://github.com/Xe/pathwalk
changelog-type: ''
hash: 0f2a595922ff8e9efdd2934d1ce168a1576d59788bada58303b842e4ebfc7173
test-bench-deps:
  base: -any
  pathwalk: -any
maintainer: xena@yolo-swag.com
synopsis: Path walking utilities for Haskell programs
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  filepath: ! '>=1.3'
  transformers: ! '>=0.3.0.0'
  directory: ! '>=1.2'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.1.1'
author: Christine Dodrill
latest: '0.3.1.1'
description-type: haddock
description: ! '"System.Directory.PathWalk" is an implementation of Python''s excellent

  os.walk function.  Given a root directory, it recursively scans all

  subdirectories, calling a callback with directories and files it finds.

  Importantly, it calls the callback as soon as it finishes scanning each

  directory to allow the caller to begin processing results immediately.


  Maximum memory usage is O(N+M) where N is the depth of the tree and M

  is the maximum number of entries in a particular directory.


  > import System.Directory.PathWalk

  >

  > pathWalk "some/directory" $ \root dirs files -> do

  >   forM_ files $ \file ->

  >     when (".hs" `isSuffixOf` file) $ do

  >       putStrLn $ joinPath [root, file]'
license-name: MIT
