homepage: https://github.com/Xe/pathwalk
changelog-type: ''
hash: 548024d46b39a14ecd89eb94bc668a1bb34b9cdc0508b876390b0243ac479c8b
test-bench-deps: {}
maintainer: xena@yolo-swag.com
synopsis: Path walking utilities for Haskell programs
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  filepath: ! '>=1.3'
  pathwalk: -any
  transformers: ! '>=0.4'
  directory: ! '>=1.2'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.2.0.0'
- '0.2.1.0'
author: Christine Dodrill
latest: '0.2.1.0'
description-type: haddock
description: ! '"System.Directory.PathWalk" is an implementation of Python''s excellent

  os.walk function.  Given a root directory, it recursively scans all

  subdirectories, calling a callback with directories and files it finds.

  Importantly, it calls the callback as soon as it finishes scanning each

  directory to allow the caller to begin processing results immediately.


  Maximum memory usage is O(N+M) where N is the depth of the tree and M

  is the maximum number of entries in a particular directory.


  > import System.Directory.PathWalk

  >

  > pathWalk "some/directory" $ \root dirs files -> do

  >   forM_ files $ \file ->

  >     when (".hs" `isSuffixOf` file) $ do

  >       putStrLn $ joinPath [root, file]'
license-name: MIT
