changelog-type: ''
hash: fa13395c877669d29f4d7829ab4c70cfd675d6cdf2d05e0f7ca6b84f77aad7fa
synopsis: read/write binary file
changelog: ''
all-versions:
- '0.2'
- '0.3'
- '0.4'
- '0.6'
- '0.12.6'
- '0.12.8'
- '0.13.1'
- '0.13.2'
- '0.14.1'
- '0.14.3'
- '0.15.0'
- '0.15.9'
- '0.15.10'
- '0.15.11'
- '0.15.13'
- '0.15.16'
- '0.15.18'
- '0.15.22'
- '0.15.24'
latest: '0.15.24'
description-type: haddock
description: ! "See example directory's sample code.\n\n> runghc -XQuasiQuotes -XTypeFamilies
  -XFlexibleInstances exam.hs some.bmp\n\nexam.hs:\n\n> import File.Binary\n> import
  File.Binary.Instances\n> import File.Binary.Instances.LittleEndian\n> import System.Environment\n>
  import Data.ByteString.Lazy as BSL\n>\n> main = do\n>\t[inf] <- getArgs\n>   cnt
  <- BS.readFile inf\n>\tlet Right (bmp, rest) = fromBinary () cnt :: (Bitmap, String)\n>\tprint
  bmp\n>\n> instance Field (Int, Int, Int) where\n>    type FieldArgument (Int, Int,
  Int) = ()\n>    fromBinary _ s = do\n>        (b, rest) <- fromBinary 1 s\n>        (g,
  rest') <- fromBinary 1 rest\n>        (r, rest'') <- fromBinary 1 rest' in\n>        return
  ((b, g, r), snd $ getBytes 1 1 rest'')\n>    toBinary _ (b, g, r) = do\n>        b'
  <- toBinary 1 b\n>        g' <- toBinary 1 g\n>        r' <- toBinary 1 r\n>        return
  $ concatBinary [b', g', r', makeBinary $ BSL.singleton 0]\n>\n> [binary|\n>\n> Bitmap\n>\n>
  deriving Show\n>\n> 2: \"BM\"\n> 4: file_size\n> 2: 0\n> 2: 0\n> 4: offset\n>\n>
  4: 40\n> 4: width\n> 4: height\n> 2: 1\n> 2: bits_per_pixel\n> 4: compression\n>
  4: image_size\n> 4: resolutionH\n> 4: resolutionV\n> 4: color_num\n> 4: important_color_num\n>
  replicate color_num ()[OPENBRACKET][(Int, Int, Int)][CLOSEBRACKET]: colors\n> replicate
  image_size ()[OPENBRACKET]String[CLOSEBRACKET]: image\n>\n> |]\n"
