homepage: ''
changelog-type: ''
hash: 2ce4dbc4a7b7051b0ce8ecd6a75677ac60c7cafb7dae5d2e8143413f273af443
test-bench-deps:
  binary-search: -any
  base: ! '>=4.5 && <5'
  hspec: ! '>=1.3'
  filepath: ! '>=1.2'
  doctest: ! '>=0.9.3'
  QuickCheck: ! '>=2.5'
  directory: ! '>=1.1'
maintainer: Takayuki Muranushi <muranushi@gmail.com>
synopsis: Binary and exponential searches
changelog: ''
basic-deps:
  base: ! '>=4.5 && <5'
  containers: ! '>=0.4'
all-versions:
- '0.0'
- '0.1'
- '0.9'
- '1.0'
- '1.0.0.1'
author: Ross Paterson <ross@soi.city.ac.uk>, Takayuki Muranushi <muranushi@gmail.com>
latest: '1.0.0.1'
description-type: haddock
description: ! '__Introduction__


  This package provides varieties of binary search functions.

  c.f.  "Numeric.Search" for the examples.


  These search function can search for pure and monadic predicates, of type:


  > pred :: Eq b => a -> b

  > pred :: (Eq b, Monad m) => a -> m b


  The predicates must satisfy that the domain range for any codomain value

  is continuous; that is, @∀x≦y≦z. pred x == pred z ⇒ pred y == pred x@ .


  For example, we can address the problem of finding the boundary

  of an upward-closed set of integers, using a combination

  of exponential and binary searches.


  Variants are provided

  for searching within bounded and unbounded intervals of

  both ''Integer'' and bounded integral types.


  The package was created by Ross Paterson, and extended

  by Takayuki Muranushi, to be used together with SMT solvers.


  __The Module Structure__


  *  "Numeric.Search" provides the generic search combinator, to search for pure and
  monadic predicates.

  *  "Numeric.Search.Bounded" ,  "Numeric.Search.Integer" ,  "Numeric.Search.Range"
  provides the various specialized searchers, which means less number of function
  arguments, and easier to use.


  <<https://travis-ci.org/nushio3/binary-search.svg?branch=master>>'
license-name: BSD3
