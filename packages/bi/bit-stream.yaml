homepage: https://github.com/Bodigrim/bit-stream#readme
changelog-type: ''
hash: 6ea513f94fe2dd25cb77b3bf21d52780c12cc4127a810f53e9e046f9426f4123
test-bench-deps:
  tasty-smallcheck: -any
  base: ! '>=4.8 && <5'
  criterion: -any
  bit-stream: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: ! '>=2.10'
  vector: -any
maintainer: andrew.lelechenko@gmail.com
synopsis: Lazy, infinite, compact stream of 'Bool' with O(1) indexing.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  bit-stream: -any
  vector: -any
all-versions:
- '0.1.0.0'
author: Bodigrim
latest: '0.1.0.0'
description-type: markdown
description: ! "# bit-stream\n\nLazy, infinite, compact stream of `Bool` with O(1)
  indexing.\nMost useful for memoization of predicates.\n\n## Example 1\n\nConsider
  following predicate:\n\n```haskell\nisOdd :: Word -> Bool\nisOdd 0 = False\nisOdd
  n = not (isOdd (n - 1))\n```\n\nIts computation is expensive, so we'd like to memoize
  its values into\n`BitStream` using `tabulate` and access this stream via `index`\ninstead
  of recalculation of `isOdd`:\n\n```haskell\nisOddBS :: BitStream\nisOddBS = tabulate
  isOdd\n\nisOdd' :: Word -> Bool\nisOdd' = index isOddBS\n```\n\nWe can do even better
  by replacing part of recursive calls to `isOdd`\nby indexing memoized values. Write
  `isOddF`\nsuch that `isOdd = fix isOddF`:\n\n```haskell\nisOddF :: (Word -> Bool)
  -> Word -> Bool\nisOddF _ 0 = False\nisOddF f n = not (f (n - 1))\n```\n\nand use
  `tabulateFix`:\n\n```haskell\nisOddBS :: BitStream\nisOddBS = tabulateFix isOddF\n\nisOdd'
  :: Word -> Bool\nisOdd' = index isOddBS\n```\n\n## Example 2\n\nDefine a predicate,
  which checks whether its argument is\na prime number by trial division.\n\n```haskell\nisPrime
  :: Word -> Bool\nisPrime n\n  | n < 2     = False\n  | n < 4     = True\n  | even
  n    = False\n  | otherwise = and [ n `rem` d /= 0 | d <- [3, 5 .. ceiling (sqrt
  (fromIntegral n))], isPrime d]\n```\n\nConvert it to unfixed form:\n\n```haskell\nisPrimeF
  :: (Word -> Bool) -> Word -> Bool\nisPrimeF f n\n  | n < 2     = False\n  | n <
  4     = True\n  | even n    = False\n  | otherwise = and [ n `rem` d /= 0 | d <-
  [3, 5 .. ceiling (sqrt (fromIntegral n))], f d]\n```\n\nCreate its memoized version
  for faster evaluation:\n\n```haskell\nisPrimeBS :: BitStream\nisPrimeBS = tabulateFix
  isPrimeF\n\nisPrime' :: Word -> Bool\nisPrime' = index isPrimeBS\n```\n"
license-name: BSD3
