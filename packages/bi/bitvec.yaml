homepage: https://github.com/mokus0/bitvec
changelog-type: ''
hash: 671e79f4ffa6c6397da84f9194aeb6bf96cc604b12ff882a59c1dbb4e1d295a7
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: ! '>=3'
  test-framework-quickcheck2: -any
  HUnit: -any
  QuickCheck: -any
  primitive: -any
  vector: ! '>=0.8'
maintainer: James Cook <mokus@deepbondi.net>
synopsis: Unboxed vectors of bits / dense IntSets
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  primitive: -any
  vector: ! '>=0.8'
all-versions:
- '0.1'
- '0.1.0.1'
author: James Cook <mokus@deepbondi.net>
latest: '0.1.0.1'
description-type: haddock
description: ! 'Another bit-array library for Haskell.  This one defines a `Bit`

  type (which is an instance of all the "expected" classes, including

  numeric ones) and makes that type an instance of `Data.Vector.Unboxed.

  Unbox`, so we get a lot of nice APIs for free.  `Bool` is already an

  unboxable type, but the current unboxed `Vector` implementation packs

  each bit as a byte.  This one packs 8 bits per byte, as expected

  (`UArray` from the `array` package also uses one bit per `Bool`).


  In addition to the `Vector` interface, there are several high-level

  operations and some low-level ones suitable for building new bulk

  operations by viewing the bit-vector as a word vector.'
license-name: PublicDomain
