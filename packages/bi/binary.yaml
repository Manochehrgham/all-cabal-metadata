changelog-type: ''
hash: 4d3038d6076ee96b47109022a613181819881490e0bce011f2c3f562fcced838
test-bench-deps:
  cereal: -any
  bytestring: ! '>=0.9'
  test-framework: -any
  Cabal: -any
  base: ! '>=3.0 && <5'
  filepath: -any
  test-framework-quickcheck2: ! '>=0.3'
  criterion: ==1.*
  HUnit: -any
  array: -any
  containers: -any
  mtl: -any
  attoparsec: -any
  random: ! '>=1.0.1.0'
  deepseq: -any
  QuickCheck: ! '>=2.7'
  directory: -any
synopsis: Binary serialisation for Haskell values using lazy ByteStrings
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=3.0 && <5'
  array: -any
  containers: -any
  ghc-prim: -any
all-versions:
- '0.2'
- '0.3'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.4'
- '0.4.5'
- '0.5'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.1.0'
- '0.5.1.1'
- '0.6.0.0'
- '0.6.1.0'
- '0.6.2.0'
- '0.6.3.0'
- '0.6.4.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.1.0'
- '0.7.2.0'
- '0.7.2.1'
- '0.7.2.2'
- '0.7.2.3'
- '0.7.3.0'
- '0.7.4.0'
latest: '0.7.4.0'
description-type: markdown
description: ! "# binary package #\n\n[![Build Status](https://api.travis-ci.org/kolmodin/binary.png?branch=master)](http://travis-ci.org/kolmodin/binary)\n\n*Efficient,
  pure binary serialisation using lazy ByteStrings.*\n\nThe ``binary`` package provides
  Data.Binary, containing the Binary class,\nand associated methods, for serialising
  values to and from lazy\nByteStrings. \nA key feature of ``binary`` is that the
  interface is both pure, and efficient.\nThe ``binary`` package is portable to GHC
  and Hugs.\n\n## Installing binary from Hackage ##\n\n``binary`` is part of The Glasgow
  Haskell Compiler (GHC) and therefore if you\nhave either GHC or [The Haskell Platform](http://www.haskell.org/platform/)\ninstalled,
  you already have ``binary``.\n\nMore recent versions of ``binary`` than you might
  have installed may be\navailable. You can use ``cabal-install`` to install a later
  version from\n[Hackage](http://hackage.haskell.org/package/binary).\n\n    $ cabal
  update\n    $ cabal install binary\n\n## Building binary ##\n\n``binary`` comes
  with both a test suite and a set of benchmarks.\nWhile developing, you probably
  want to enable both.\nHere's how to get the latest version of the repository, configure
  and build.\n\n    $ git clone git@github.com:kolmodin/binary.git\n    $ cd binary\n
  \   $ cabal update\n    $ cabal configure --enable-tests --enable-benchmarks\n    $
  cabal build\n\nRun the test suite.\n\n    $ cabal test\n\n## Using binary ##\n\nFirst:\n\n
  \   import Data.Binary\n\nand then write an instance of Binary for the type you
  wish to serialise.\nAn example doing exactly this can be found in the Data.Binary
  module.\nYou can also use the Data.Binary.Builder module to efficiently build\nlazy
  bytestrings using the ``Builder`` monoid. Or, alternatively, the\nData.Binary.Get
  and Data.Binary.Put to serialize/deserialize using\nthe ``Get`` and ``Put`` monads.\n\nMore
  information in the haddock documentation.\n\n## Deriving binary instances using
  GHC's Generic ##\n\nBeginning with GHC 7.2, it is possible to use binary serialization
  without\nwriting any instance boilerplate code.\n\n```haskell\n{-# LANGUAGE DeriveGeneric
  #-}\n\nimport Data.Binary\nimport GHC.Generics (Generic)\n\ndata Foo = Foo deriving
  (Generic)\n\n-- GHC will automatically fill out the instance\ninstance Binary Foo\n```\n\n##
  Contributors ##\n\n* Lennart Kolmodin\n* Duncan Coutts\n* Don Stewart\n* Spencer
  Janssen\n* David Himmelstrup\n* BjÃ¶rn Bringert\n* Ross Paterson\n* Einar Karttunen\n*
  John Meacham\n* Ulf Norell\n* Tomasz Zielonka\n* Stefan Karrmann\n* Bryan O'Sullivan\n*
  Bas van Dijk\n* Florian Weimer\n\nFor a full list of contributors, see\n[here](https://github.com/kolmodin/binary/graphs/contributors).\n"
