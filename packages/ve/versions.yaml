homepage: ''
changelog-type: markdown
hash: 40af6c02b39cb804ee5802a8a40081dbd99f8f379a97b0706da8437fef60690c
test-bench-deps:
  either: ! '>=4.4.1'
  base: ! '>=4.8 && <4.9'
  text: ! '>=1.2 && <1.3'
  versions: -any
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.10.1.2'
  microlens: ! '>=0.4 && <0.5'
maintainer: colingw@gmail.com
synopsis: Types and parsers for software version numbers.
changelog: ! 'Changelog

  =========


  2.0.0

  -----

  - Switched to `megaparsec` to perform all parsing as `Text`

  - Support for legacy `String` removed

  - Added more Traversals and INLINE''d all Lenses/Traversals


  1.1.0

  -----

  - Added Lenses and Traversals (no `lens` dependency)

'
basic-deps:
  base: ! '>=4.8 && <4.9'
  text: ! '>=1.2 && <1.3'
  megaparsec: ! '>=4 && <5'
  semigroups: ! '>=0.16.2.2'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.1.0'
- '2.0.0'
author: Colin Woodbury
latest: '2.0.0'
description-type: markdown
description: ! 'versions

  ========


  [![Build Status](https://travis-ci.org/aurapm/haskell-versions.svg?branch=master)](https://travis-ci.org/aurapm/haskell-versions)

  [![Coverage Status](https://coveralls.io/repos/github/aurapm/haskell-versions/badge.svg?branch=master)](https://coveralls.io/github/aurapm/haskell-versions?branch=master)


  A Haskell library for parsing and comparing software version numbers.


  About

  -----

  We like to give version numbers to our software in a myriad of different

  ways. Some ways follow strict guidelines for incrementing and comparison.

  Some follow conventional wisdom and are generally self-consistent. Some are

  just plain asinine. This library provides a means of parsing and comparing

  *any* style of versioning, be it a nice Semantic Version like this:


  > 1.2.3-r1+git123


  ...or a monstrosity like this:


  > 2:10.2+0.0093r3+1-1


  Please switch to [Semantic Versioning](http://semver.org) if you aren''t

  currently using it. It provides consistency in version incrementing and has

  the best constraints on comparisons.


  Usage

  -----

  In general, `parseV` is the function you want. It attempts to parse a given

  Text using the three individual parsers, `semver`, `version` and `mess`. If

  one fails, it tries the next. If you know you only want to parse one

  specific version type, use that parser directly (e.g. `semver`).


  #### Lenses and Traversals

  The parse result types have Lenses/Traversals for accessing their data

  fields. For instance, to increment the patch number of a parsed SemVer, you

  could:


  ```haskell

  incPatch :: SemVer -> SemVer

  incPatch s = s & svPatch %~ (+ 1)

  ```


  Or, something more involved:


  ```haskell

  -- | Get all major versions of legally parsed SemVers.

  majors :: [Text] -> [Int]

  majors vs = vs ^.. each . to semver . _Right . svMajor

  ```


  The `to semver . _Right` is clunky, so we provide some direct `Text`

  Traverals inspired by

  ([micro](http://hackage.haskell.org/package/microlens-aeson))

  [lens-aeson](http://hackage.haskell.org/package/lens-aeson):


  ```haskell

  -- | Get all major versions of legally parsed SemVers.

  majors :: [Text] -> [Int]

  majors vs = vs ^.. each . _SemVer . svMajor

  ```


  Note that `_SemVer` only attempts to parse as true Semantic Versioning. If

  the package versions you''re parsing don''t agree to a standard, you can

  achieve a similar result via:


  ```haskell

  -- | Get all major versions of potentially parsed SemVers.

  majors :: [Text] -> [Int]

  majors vs = vs ^.. each . _Versioning . _Ideal . svMajor

  ```


  We can also use these `Text` Traversals to increment versions, as above:


  ```haskell

  incPatch :: Text -> Text

  incPatch s = s & _SemVer . svPatch %~ (+ 1)


  > incPatch "1.2.3"

  "1.2.4"

  ```

'
license-name: BSD3
