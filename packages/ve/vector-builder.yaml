homepage: https://github.com/nikita-volkov/vector-builder
changelog-type: ''
hash: e89fbdc78d188aa5d61e97594e744c35208decca6ec1a34460ed3a27e4b1556c
test-bench-deps:
  rebase: -any
  vector-builder: -any
  quickcheck-instances: ! '>=0.3.11 && <0.4'
  tasty-quickcheck: ==0.8.*
  tasty-hunit: ==0.9.*
  tasty: ==0.11.*
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
synopsis: Vector builder
changelog: ''
basic-deps:
  base-prelude: <2
  base: ! '>=4.6 && <5'
  semigroups: ! '>=0.16 && <0.20'
  vector: ! '>=0.11 && <0.13'
all-versions:
- '0.1'
- '0.1.1'
- '0.2'
- '0.3'
- '0.3.1'
author: Nikita Volkov <nikita.y.volkov@mail.ru>
latest: '0.3.1'
description-type: haddock
description: ! 'An API for efficient and convenient construction of vectors.

  It provides the composable `Builder` abstraction, which has instances of the `Monoid`
  and `Semigroup` classes.


  [Usage]


  First you use the `Builder` abstraction to specify the structure of the vector.

  Then you execute the builder to actually produce the vector.


  [Example]


  The following code shows how you can efficiently concatenate different datastructures
  into a single immutable vector:


  >

  >import qualified Data.Vector as A

  >import qualified VectorBuilder.Builder as B

  >import qualified VectorBuilder.Vector as C

  >

  >

  >myVector :: A.Vector a -> [a] -> a -> A.Vector a

  >myVector vector list element =

  >  C.build builder

  >  where

  >    builder =

  >      B.vector vector <>

  >      foldMap B.singleton list <>

  >      B.singleton element'
license-name: MIT
