homepage: https://github.com/bos/vector-binary-instances
changelog-type: ''
hash: e1c9182072619a237abba22dae16379792c85eec3b121ce01370ee50fd7e7a39
test-bench-deps:
  bytestring: -any
  base: -any
  criterion: -any
  vector-binary-instances: -any
  binary: -any
  vector: -any
maintainer: dons00@gmail.com, bos@serpentine.com, Ben Gamari <ben@smart-cactus.org>
synopsis: Instances of Data.Binary and Data.Serialize for vector
changelog: ''
basic-deps:
  base: ! '>3 && <4.10'
  binary: ! '>=0.7 && <0.9'
  vector: ! '>=0.6 && <0.12'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.3.0'
author: Don Stewart
latest: '0.2.3.0'
description-type: haddock
description: ! 'Instances for Binary for the types defined in the vector package,

  making it easy to serialize vectors to and from disk. We use the

  generic interface to vectors, so all vector types are supported.

  Specific instances are provided for unboxed, boxed and storable

  vectors.


  To serialize a vector:


  > *Data.Vector.Binary> let v = Data.Vector.fromList [1..10]

  > *Data.Vector.Binary> v

  > fromList [1,2,3,4,5,6,7,8,9,10] :: Data.Vector.Vector

  > *Data.Vector.Binary> encode v

  > Chunk "\NUL\NUL\NUL\NUL\NUL...\NUL\NUL\NUL\t\NUL\NUL\NUL\NUL\n" Empty


  Which you can in turn compress before writing to disk:


  > compress . encode $ v

  > Chunk "\US\139\b\NUL\NUL\N...\229\240,\254:\NUL\NUL\NUL" Empty'
license-name: BSD3
