homepage: http://github.com/Gabriel439/bench
changelog-type: ''
hash: 80d37fff1d0de00dfcf3a7d9e1ed65a462883b7d5d62c168b2e33ca995b1c274
test-bench-deps: {}
maintainer: Gabriel439@gmail.com
synopsis: Command-line benchmark tool
changelog: ''
basic-deps:
  base: ! '>=4.5 && <5'
  text: <1.3
  criterion: ! '>=1.0.0.1 && <1.2'
  turtle: ! '>=1.2.5 && <1.3'
  silently: ! '>=1.1.1 && <1.3'
all-versions:
- '1.0.0'
author: Gabriel Gonzalez
latest: '1.0.0'
description-type: markdown
description: ! "# Bench v1.0.0\n\nThink of this as a more powerful alternative to
  the `time` command.  Use this\ncommand-line tool to benchmark a command using Haskell's
  `criterion` library.\n\nKey features:\n\n* Repeated runs\n* Detailed statistical
  output\n* Gorgeous HTML output (via the `--output` flag)\n  ([Example](http://www.serpentine.com/criterion/fibber.html))\n*
  Also supports CSV or templated output\n\n## Quick Start\n\nFirst, download the\n[Haskell
  toolchain](https://www.haskell.org/downloads#minimal), which provides\nthe `stack`
  build tool.\n\nYou will also need to download [git](https://git-scm.com/downloads)
  if you\nhaven't done so already.\n\nThen run the following commands from a terminal
  to build and install the `bench`\ntool:\n\n```bash\n$ git clone https://github.com/Gabriel439/bench.git\n$
  cd bench\n$ stack install\n```\n\n`stack install` will install `bench` to `~/.local/bin`
  or something similar.\nMake sure that the installation directory is on your executable
  search path\nbefore running the following command.  `stack` will remind you to do
  this if you\nforget.\n\n```bash\n$ bench 'sleep 1'  # Don't forget to quote the
  command line\nbenchmarking sleep 1\ntime                 1.003 s    (1.002 s ..
  1.003 s)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean                 1.003
  s    (1.003 s .. 1.003 s)\nstd dev              92.92 μs   (0.0 s .. 101.8 μs)\nvariance
  introduced by outliers: 19% (moderately inflated)\n```\n\nAll output from the command
  being benchmarked is discarded\n\n## Usage\n\n```\n$ bench --help\nCommand-line
  tool to benchmark other programs\n\nUsage: bench COMMAND ([-I|--ci CI] [-G|--no-gc]
  [-L|--time-limit SECS]\n             [--resamples COUNT] [--regress RESP:PRED..]
  [--raw FILE]\n             [-o|--output FILE] [--csv FILE] [--junit FILE]\n             [-v|--verbosity
  LEVEL] [-t|--template FILE] [-m|--match MATCH]\n             [NAME...] | [-n|--iters
  ITERS] [-m|--match MATCH] [NAME...] |\n             [-l|--list] | [--version])\n\nAvailable
  options:\n  -h,--help                Show this help text\n  COMMAND                  The
  command line to benchmark\n  -I,--ci CI               Confidence interval\n  -G,--no-gc
  \              Do not collect garbage between iterations\n  -L,--time-limit SECS
  \    Time limit to run a benchmark\n  --resamples COUNT        Number of bootstrap
  resamples to perform\n  --regress RESP:PRED..    Regressions to perform\n  --raw
  FILE               File to write raw data to\n  -o,--output FILE         File to
  write report to\n  --csv FILE               File to write CSV summary to\n  --junit
  FILE             File to write JUnit summary to\n  -v,--verbosity LEVEL     Verbosity
  level\n  -t,--template FILE       Template to use for report\n  -m,--match MATCH
  \        How to match benchmark names (\"prefix\" or \"glob\")\n  -n,--iters ITERS
  \        Run benchmarks, don't analyse\n  -m,--match MATCH         How to match
  benchmark names (\"prefix\" or \"glob\")\n  -l,--list                List benchmarks\n
  \ --version                Show version info\n```\n\n## Development Status\n\n[![Build
  Status](https://travis-ci.org/Gabriel439/bench.png)](https://travis-ci.org/Gabriel439/bench)\n\nThis
  is a pretty simple utility which just wraps `criterion` in a command-line\ntool,
  so I don't expect this project to change much.  However, only time will\ntell.\n\n##
  License (BSD 3-clause)\n\nCopyright Gabriel Gonzalez (c) 2016\n\nAll rights reserved.\n\nRedistribution
  and use in source and binary forms, with or without\nmodification, are permitted
  provided that the following conditions are met:\n\n* Redistributions of source code
  must retain the above copyright\n  notice, this list of conditions and the following
  disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright
  notice, this list of conditions and the following\n  disclaimer in the documentation
  and/or other materials provided\n  with the distribution.\n\n* Neither the name
  of  nor the names of other\n  contributors may be used to endorse or promote products
  derived\n  from this software without specific prior written permission.\n\nTHIS
  SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY
  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT
  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
license-name: BSD3
