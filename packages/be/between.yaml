changelog-type: ''
hash: 87982b66c28d9e4d6179343eb6e9032eea14de1ffe26746f60099a1db6da426b
synopsis: Function combinator "between" and derived combinators
changelog: ''
all-versions:
- '0.9.0.0'
- '0.9.0.1'
- '0.9.0.2'
latest: '0.9.0.2'
description-type: haddock
description: ! 'It turns out that this combinator


  > f ~@~ g = (f .) . (. g)


  is a powerful thing. It was abstracted from following (commonly used)

  pattern @f . h . g@ where @f@ and @g@ are fixed.


  This library not only define @~\@~@ combinator, but also some derived

  combinators that can help us to easily define a lot of things including

  lenses. See <http://hackage.haskell.org/package/lens lens package> for

  detais on what lenses are.


  Function @Data.Function.on@ can be implemented using @~\@~@ as:


  > on :: (b -> b -> c) -> (a -> b) -> a -> a -> c

  > on f g = (id ~@~ g ~@~ g) f


  If function @on3@ existed in /base/ then it could be defined as:


  > on3 :: (b -> b -> b -> d) -> (a -> b) -> a -> a -> a -> d

  > on3 f g = (id ~@~ g ~@~ g ~@~ g) f


  Other usage examples and documentation can be found in

  "Data.Function.Between".'
