homepage: https://github.com/trskop/between
changelog-type: markdown
hash: e5681e889ad0444436fa1bd240157a661718663fbe268d0181be23b3ad9a48fb
test-bench-deps: {}
maintainer: peter.trsko@gmail.com
synopsis: Function combinator "between" and derived combinators
changelog: ! "# ChangeLog / ReleaseNotes\n\n## Version 0.9.0.2\n\n* Minor documentation
  changes.\n* Resolving some Haddock issues in documentation.\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/between-0.9.0.2>\n\n\n## Version 0.9.0.1\n\n*
  Removing all INLINE and RULES. Tested it using [ghc-core][] with GHC 7.8.3\n  (bundled
  with [Haskell Platform][] 2014.2.0.0) and it works well.\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/between-0.9.0.1>\n\n\n## Version 0.9.0.0\n\n*
  First public release.\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/between-0.9.0.0>\n\n\n[Hackage]:\n
  \ http://hackage.haskell.org/\n  \"HackageDB (or just Hackage) is a collection of
  releases of Haskell packages.\"\n[Haskell Platform]:\n  http://www.haskell.org/platform/\n
  \ \"The Haskell Platform\"\n[ghc-core]:\n  http://hackage.haskell.org/package/ghc-core\n
  \ \"Display GHC's core and assembly output in a pager\"\n"
basic-deps:
  base: ! '>3 && <5'
all-versions:
- '0.9.0.0'
- '0.9.0.1'
- '0.9.0.2'
author: Peter TrÅ¡ko
latest: '0.9.0.2'
description-type: markdown
description: ! "Between\n=======\n\n[![Hackage](https://budueba.com/hackage/between)][Hackage:
  between]\n\n\nDescription\n-----------\n\nIt turns out that this combinator\n\n
  \   f ~@~ g = (f .) . (. g)\n\nis a powerful thing. It was abstracted from following
  (commonly used)\npattern `f . h . g` where `f` and `g` are fixed.\n\nThis library
  not only define `~@~` combinator, but also some derived\ncombinators that can help
  us to easily define a lot of things including\nlenses. See [lens package][Hackage:
  lens] for detais on what lenses are.\n\nFunction `Data.Function.on` can be implemented
  using `~@~` as:\n\n    on :: (b -> b -> c) -> (a -> b) -> a -> a -> c\n    on f
  g = (id ~@~ g ~@~ g) f\n\nIf function @on3@ existed in /base/ then it could be defined
  as:\n\n    on3 :: (b -> b -> b -> d) -> (a -> b) -> a -> a -> a -> d\n    on3 f
  g = (id ~@~ g ~@~ g ~@~ g) f\n\nFor more examples see documentation.\n\n\nDocumentation\n-------------\n\nStable
  releases with API documentation are available on\n[Hackage][Hackage: between].\n\n\nContributions\n-------------\n\nContributions,
  pull requests and bug reports are welcome! Please don't be\nafraid to contact author
  using GitHub or by e-mail (see `.cabal` file for\nthat).\n\n\n[Hackage: between]:\n
  \   https://hackage.haskell.org/package/between\n[Hackage: lens]:\n    http://hackage.haskell.org/package/lens\n"
license-name: BSD3
