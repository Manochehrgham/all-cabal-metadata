homepage: https://github.com/jdreaver/sum-type-boilerplate#readme
changelog-type: markdown
hash: 430b5ef908a810de26d2038715f1ee60c654d237c297600da89873c25be902ab
test-bench-deps:
  hlint: -any
  base: ! '>=4.9 && <5'
  hspec: -any
  HUnit: -any
  template-haskell: -any
maintainer: David Reaver
synopsis: Library for reducing the boilerplate involved with sum types
changelog: ! "# sum-type-boilerplate Changelog\n\n## 0.1.0\n\n* Initial release. Includes
  a TH function to create a sum type and two TH\n  functions to convert between sum
  types.\n"
basic-deps:
  base: ! '>=4.9 && <5'
  template-haskell: -any
all-versions:
- '0.1.0'
author: David Reaver
latest: '0.1.0'
description-type: markdown
description: ! "# sum-type-boilerplate: A Haskell sum type library\n\n[![CircleCI](https://circleci.com/gh/jdreaver/sum-type-boilerplate.svg?style=svg)](https://circleci.com/gh/jdreaver/sum-type-boilerplate)\n\nThis
  library allows users to use Template Haskell to easily construct and\nmanipulate
  sum types. It was born out of the author's desire to reduce the\nboilerplate associated
  with sum types while keeping the type safety they\nprovide.\n\n## Sum Types\n\nA
  sum type (also called\na [tagged union](https://en.wikipedia.org/wiki/Tagged_union))
  looks like this\nin Haskell:\n\n```haskell\ndata MySum\n  = MySumTypeA TypeA\n  |
  MySumTypeB TypeB\n  | MySumTypeC TypeC\n```\n\nConstructing this when you have a
  large number of types can be error-prone if\nyou intend to have a uniform naming
  scheme, and if you intend to only have each\ntype present once.\n\nIf you have many
  sum types with overlapping sets of types, then functions to\nconvert between them
  can be full of boilerplate.\n\n```haskell\ndata OtherSum\n  = OtherSumTypeA TypeA\n
  \ | OtherSumTypeB TypeB\n\notherSumToMySum :: OtherSum -> MySum\notherSumToMySum
  (OtherSumTypeA typeA) = MySumTypeA typeA\notherSumToMySum (OtherSumTypeB typeB)
  = MySumTypeB typeB\n\nmySumToOtherSum :: MySum -> Maybe OtherSum\nmySumToOtherSum
  (MySumTypeA typeA) = Just $ OtherSumTypeA typeA\nmySumToOtherSum (MySumTypeB typeB)
  = Just $ OtherSumTypeB typeB\nmySumToOtherSum other = Nothing\n```\n\nThe boilerplate
  in examples isn't too bad, but consider writing this when your\nsum type has dozens
  of types in it!\n\n## Where does this library come in?\n\nUsing `sum-type-boilerplate`,
  you can reduce all of the previous code into the\nfollowing:\n\n```haskell\nconstructSumType
  \"MySum\" defaultSumTypeOptions [''TypeA, ''TypeB, ''TypeC]\nconstructSumType \"OtherSum\"
  defaultSumTypeOptions [''TypeA, ''TypeB]\nsumTypeConverter \"otherSumToMySum\" ''OtherSum
  ''MySum\npartialSumTypeConverter \"mySumToOtherSum\" ''MySum ''OtherSum\n```\n\n##
  More features\n\n* This library has an extremely simple implementation. (In fact,
  it is useful\n  as an example if you are learning `template-haskell` for the first
  time.)\n* The only dependency is on `template-haskell`. That means adding it as
  a\n  dependency probably doesn't introduce transitive dependencies.\n* The template
  haskell used here just produces vanilla Haskell data types. No\n  crazy type-level
  magic is going on. That means if you want to ditch this\n  library later on, just
  copy the generated code into your project.\n"
license-name: MIT
