changelog-type: ''
hash: 7da7f77448aaf982884bb72c176318e47b5e7cc327db5e3c191faa174a36c3c7
synopsis: In-memory full text search engine
changelog: ''
all-versions:
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
latest: '0.2.1.1'
description-type: haddock
description: ! 'An in-memory full text search engine library. It lets you

  run full-text queries on a collection of your documents.


  Features:


  * Keyword queries and auto-complete\/auto-suggest queries.


  * Can search over any type of \"document\".

  (You explain how to extract search terms from them.)


  * Supports documents with multiple fields

  (e.g. title, body)


  * Supports documents with non-term features

  (e.g. quality score, page rank)


  * Uses the state of the art BM25F ranking function


  * Adjustable ranking parameters (including field weights

  and non-term feature scores)


  * In-memory but quite compact. It does not keep a copy of

  your original documents.


  * Quick incremental index updates, making it possible to

  keep your text search in-sync with your data.


  It is independent of the document type, so you have to

  write the document-specific parts: extracting search terms

  and any stop words, case-normalisation or stemming. This

  is quite easy using libraries such as

  <http://hackage.haskell.org/package/tokenize tokenize> and

  <http://hackage.haskell.org/package/snowball snowball>.


  The source package includes a demo to illustrate how to

  use the library. The demo is a simplified version of how

  the library is used in the

  <http://hackage.haskell.org/package/hackage-server hackage-server>

  where it provides the backend for the package search feature.'
