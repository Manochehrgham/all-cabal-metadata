homepage: https://github.com/tonyday567/chart-unit
changelog-type: ''
hash: 015e966949d1c50942abec0fdbddfd42ffb71ad276518ba3e361a3ba7e898814
test-bench-deps: {}
maintainer: tonyday567@gmail.com
synopsis: A set of native haskell charts.
changelog: ''
basic-deps:
  diagrams-lib: -any
  chart-unit: -any
  base: ! '>=4.7 && <5'
  diagrams-rasterific: -any
  text: -any
  protolude: -any
  data-default: -any
  diagrams-svg: -any
  containers: -any
  lens: -any
  foldl: -any
  random-fu: -any
  diagrams-core: -any
  colour: -any
  diagrams: -any
  primitive: -any
all-versions:
- '0.1.0.0'
author: Tony Day
latest: '0.1.0.0'
description-type: text
description: ! "```include\nother/header.md\n```\n\n[chart-unit](https://tonyday567.github.io/chart-unit.html)
  [![Build Status](https://travis-ci.org/tonyday567/chart-unit.png)](https://travis-ci.org/tonyday567/chart-unit)\n===\n\nscratchpad\n---\n\nMy
  newest chart `padsvg $ linesXY def [[(0,0),(1,1)],[(0,0),(1,2)]]`\n\n![](other/scratchpad.svg)\n\nThis
  slowly growing collection of charts:\n\n- renders nicely over a wide chart size
  range, svg and png formats.\n- render similarly at different scale\n- are opinionated
  minimalism\n- are unit shapes in the spirit of the [diagrams](http://projects.haskell.org/diagrams/doc/quickstart.html)
  design space.\n- can be quickly integrated into ad-hoc haskell data analytics, providing
  a visual feedback loop.\n\ncharts\n---\n\nScatter\n\n![](other/scatter.svg)\n\nHistogram\n\n![](other/hist.svg)\n\nLine\n\n![](other/line.svg)\n\nLines\n\n![](other/lines.svg)\n\nLabelled
  Bar Chart\n\n![](other/bar.svg)\n\nrasterific png renders\n---\n\n![](other/scratchpad.png)\n\nScatter\n\n![](other/scatter.png)\n\nHistogram\n\n![](other/hist.png)\n\nLine\n\n![](other/line.png)\n\nLines\n\n![](other/lines.png)\n\nLabelled
  Bar Chart\n\n![](other/bar.png)\n\n> {-# OPTIONS_GHC -Wall #-}\n> {-# OPTIONS_GHC
  -fno-warn-type-defaults #-}\n> {-# OPTIONS_GHC -fno-warn-missing-signatures #-}\n>
  import Protolude\n> import Control.Monad.Primitive (unsafeInlineIO)\n> import Diagrams.Prelude
  hiding ((<>))\n> import qualified Control.Foldl as L\n> import qualified Data.Random
  as R\n> import qualified Data.Map.Strict as Map\n> import qualified Data.Text as
  Text\n>\n> import Chart.Unit\n\nsome test data\n---\n\nStandard normal random variates.
  \ Called ys to distinguish from the horizontal axis of the chart (xs) which are
  often implicitly [0..]\n\n> ys :: Int -> IO [Double]\n> ys n =\n>   replicateM n
  $ R.runRVar R.stdNormal R.StdRandom\n>\n\nA bunch of ys, accumulated.\n\n> yss ::
  (Int, Int) -> [[Double]]\n> yss (n,m) = unsafeInlineIO $ do\n>   yss' <- replicateM
  m $ ys n\n>   pure $ (drop 1 . L.scan L.sum) <$> yss'\n>\n\nxys is a list of X,Y
  pairs, correlated normal random variates to add some shape to chart examples.\n\n>
  rXYs :: Int -> Double -> [(Double,Double)]\n> rXYs n c = unsafeInlineIO $ do\n>
  \  s0 <- replicateM n $ R.runRVar R.stdNormal R.StdRandom\n>   s1 <- replicateM
  n $ R.runRVar R.stdNormal R.StdRandom\n>   let s1' = zipWith (\\x y -> c * x + sqrt
  (1 - c * c) * y) s0 s1\n>   pure $ zip s0 s1'\n>\n> xys = rXYs 1000 0.8\n>\n\nXY
  random walk\n\n> rwxy = L.scan (L.Fold (\\(x,y) (x',y') -> (x+x',y+y')) (0.0,0.0)
  identity) (take 100 xys)\n>\n\nxysHist is a histogram of 10000 one-dim random normals.\n\nThe
  data out is a (X,Y) pair list, with mid-point of the bucket as X, and bucket count
  as Y.\n\n> xysHist :: [(Double,Double)]\n> xysHist = unsafeInlineIO $ do\n>   ys'
  <- replicateM 10000 $ R.runRVar R.stdNormal R.StdRandom :: IO [Double]\n>   let
  (f,s,n) = mkTicks' (range1D ys') 100\n>   let cuts = (\\x -> f+s*fromIntegral x)
  <$> [0..n]\n>   let mids = (+(s/2)) <$> cuts\n>   let count = L.Fold (\\x a -> Map.insertWith
  (+) a 1 x) Map.empty identity\n>   let countBool = L.Fold (\\x a -> x + if a then
  1 else 0) 0 identity\n>   let histMap = L.fold count $ (\\x -> L.fold countBool
  (fmap (x >) cuts)) <$> ys'\n>   let histList = (\\x -> Map.findWithDefault 0 x histMap)
  <$> [0..n]\n>   return (zip mids (fromIntegral <$> histList))\n>\n\nScale Robustness\n---\n\nxys
  rendered on the XY plane as dots - a scatter chart with no axes - is invariant to
  scale.  The data could be multiplied by any scalar, and look exactly the same.\n\n![](other/dots.svg)\n\nAxes
  break this scale invariance. Ticks and tick labels can hide this to some extent
  and look almost the same across scales.\n\n![](other/scatter.svg)\n\nThis chart
  will look the same on a data scale change, except for tick magnitudes.\n\nmain\n---\n\n>\n>
  main :: IO ()\n> main = do\n \nSee develop section below for my workflow.\n\n>   padsvg
  $\n>       linesXY def [[(0,0),(1,1)],[(0,0),(1,2)]]\n>   fileSvg \"other/line.svg\"
  (200,200) $\n>     (lineXY def rwxy)\n>   filePng \"other/line.png\" (200,200) $\n>
  \    (lineXY def rwxy)\n>   fileSvg \"other/lines.svg\" (200,200) $\n>     (linesXY
  def $ zip [0..] <$> yss (1000, 10))\n>   filePng \"other/lines.png\" (200,200) $\n>
  \    (linesXY def $ zip [0..] <$> yss (1000, 10))\n>   fileSvg \"other/dots.svg\"
  (200,200) $\n>     (scatter def xys)\n>   filePng \"other/dots.png\" (200,200) $\n>
  \    (scatter def xys)\n>   fileSvg \"other/scatter.svg\" (200,200) $\n>     (scatterXY
  def xys)\n>   filePng \"other/scatter.png\" (200,200) $\n>     (scatterXY def xys)\n>
  \  fileSvg \"other/bar.svg\" (200,200) $\n>     barLabelled def (unsafeInlineIO
  $ ys 10) (fmap Text.pack <$> take 10 $ (:[]) <$> ['a'..])\n>   filePng \"other/bar.png\"
  (200,200) $\n>     barLabelled def (unsafeInlineIO $ ys 10) (fmap Text.pack <$>
  take 10 $ (:[]) <$> ['a'..])\n>   fileSvg \"other/hist.svg\" (200,200) $\n>     barRange
  def xysHist\n>   filePng \"other/hist.png\" (200,200) $\n>     barRange def xysHist\n\ndiagrams
  development recipe\n---\n\nIn constructing new `units`:\n\n- diagrams go from abstract
  to concrete\n- start with the unitSquare: 4 points, 1x1, origin in the center\n-
  work out where the origin should be, given the scaling needed.\n- turn the pointful
  shape into a Trail\n- close the Trail into a SVG-like loop\n- turn the Trail into
  a QDiagram\n\nYou can slide up and down the various diagrams abstraction levels
  creating transformations at each level.  For example, here's something I use to
  work at the point level:\n\n> unitp f = unitSquare # f # fromVertices # closeTrail
  # strokeTrail\n\nworkflow\n---\n\n> padsvg :: ChartSvg -> IO ()\n> padsvg t =\n>
  \  fileSvg \"other/scratchpad.svg\" (400,400) t\n>\n> padpng :: ChartPng -> IO ()\n>
  padpng t =\n>   filePng \"other/scratchpad.png\" (400,400) t\n>\n\nCreate a markdown
  version of readme.lhs:\n\n~~~\npandoc -f markdown+lhs -t html -i readme.lhs -o index.html\n~~~\n\nThen
  fire up an intero session, and use padq to display coding results on-the-fly, mashing
  the refresh button on a browser pointed to readme.html.\n\nor go for a compilation
  loop like:\n\n~~~\nstack install && readme && pandoc -f markdown+lhs -t html -i
  readme.lhs -o index.html --mathjax --filter pandoc-include && pandoc -f markdown+lhs
  -t markdown -i readme.lhs -o readme.md --mathjax --filter pandoc-include\n~~~\n\n"
license-name: BSD3
