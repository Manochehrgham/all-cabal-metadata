homepage: https://john-millikin.com/software/chell/
changelog-type: ''
hash: bca9d9204ddd5698da038853c5748b60580e106357960b48d24db85c7206ac08
test-bench-deps: {}
maintainer: John Millikin <john@john-millikin.com>
synopsis: A simple and intuitive library for automated testing.
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.1 && <5.0'
  text: -any
  patience: ! '>=0.1 && <0.2'
  ansi-terminal: ! '>=0.5 && <0.7'
  options: ! '>=1.0 && <2.0'
  transformers: ! '>=0.2'
  random: ! '>=1.0'
  template-haskell: ! '>=2.3'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.5'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.4'
- '0.4.0.1'
author: John Millikin <john@john-millikin.com>
latest: '0.4.0.1'
description-type: haddock
description: ! 'Chell is a simple and intuitive library for automated testing. It
  natively

  supports assertion-based testing, and can use companion libraries

  such as @chell-quickcheck@ to support more complex testing strategies.


  An example test suite, which verifies the behavior of artithmetic operators.


  @

  &#x7b;-\# LANGUAGE TemplateHaskell \#-&#x7d;


  import Test.Chell


  tests_Math :: Suite

  tests_Math = suite \"math\"

  &#x20;   [ test_Addition

  &#x20;   , test_Subtraction

  &#x20;   ]


  test_Addition :: Test

  test_Addition = assertions \"addition\" $ do

  &#x20;   $expect (equal (2 + 1) 3)

  &#x20;   $expect (equal (1 + 2) 3)


  test_Subtraction :: Test

  test_Subtraction = assertions \"subtraction\" $ do

  &#x20;   $expect (equal (2 - 1) 1)

  &#x20;   $expect (equal (1 - 2) (-1))


  main :: IO ()

  main = defaultMain [tests_Math]

  @


  @

  $ ghc --make chell-example.hs

  $ ./chell-example

  PASS: 2 tests run, 2 tests passed

  @'
license-name: MIT
