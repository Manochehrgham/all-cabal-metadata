changelog-type: ''
hash: 85986c5af75d5315acff2c28c77198eb2962b6ccea7e9ecbe61503c6b62d0ad4
synopsis: Yet Another Logger
changelog: ''
all-versions:
- '0.0.1'
- '0.1'
- '0.1.1'
- '0.1.1.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.3.1'
latest: '0.2.3.1'
description-type: haddock
description: ! 'A logging framework written with flexibility and performance

  in mind.


  = Quick Start


  > import System.Logger

  >

  > main ∷ IO ()

  > main = withConsoleLogger Info $ do

  >     logg Info "moin"

  >     withLabel ("function", "f") f

  >     logg Warn "tschüss"

  >   where

  >     f = withLevel Debug $ do

  >         logg Debug "debug f"


  = Description


  /This Version is yet a preview/


  The logging system consists of four main parts:


  1. The logging front-end are those types and functions that are used

  to produce log messages in the code. This includes the ''LogLevel''

  type, the ''LogPolicy'' type, the ''LogLabel'' and ''LogScope'' types,

  the ''LogFunction'' type, and the ''MonadLog'' type class.


  2. The abstract ''LoggerCtx'' is the context through which the ''LogFunction''

  delivers log messages to the logger back-end.


  3. The formatter is a function for serializing log messages.


  4. The logger back-end is a callback that is invoked by ''Logger'' on

  each log messages. The logger back-end applies the formatting function

  and delivers the log messages to some sink.


  The framework allows to combine this components in a modular way. The

  front-end types, the ''Logger'', and the back-end callback are represented

  by types or type classes. The formatter exists only as a concept

  in the implementation of back-ends. These types and concepts together

  form the abstract logger interface that is defined in the module

  "System.Logger.Types".


  The package also provides a concrete Logger that implements these components

  in the module "System.Logger.Logger" and "System.Logger.Backend.Handle"'
