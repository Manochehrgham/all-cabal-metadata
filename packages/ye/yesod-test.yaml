homepage: http://www.yesodweb.com
changelog-type: markdown
hash: 34e51efdae091d3ddbdd7cb699c39772b0ccb706f0c374aa8630b03d4438e0b3
test-bench-deps:
  bytestring: -any
  yesod-test: -any
  wai: -any
  xml-conduit: -any
  yesod-core: -any
  base: -any
  hspec: -any
  text: -any
  html-conduit: -any
  HUnit: -any
  containers: -any
  yesod-form: -any
maintainer: Michael Snoyman, Greg Weber, Nubis <nubis@woobiz.com.ar>
synopsis: integration testing for WAI/Yesod Applications
changelog: ! '## 1.4.4


  test helpers for CRSF middleware such as addTokenFromCookie


  ## 1.4.3.2


  * Add `addTokenFromCookie` and `addTokenFromCookieNamedToHeaderNamed`, which support
  the new CSRF token middleware [#1058](https://github.com/yesodweb/yesod/pull/1058)

  * Add `getRequestCookies`, which returns the cookies from the most recent request
  [#1058](https://github.com/yesodweb/yesod/pull/1058)


  ## 1.4.3.1


  * Improved README


  ## 1.4.2


  Provide `Example` instance for `YesodExample`.


  ## 1.4.1.1


  Upgrade to hspec 2

'
basic-deps:
  cookie: -any
  bytestring: ! '>=0.9'
  wai: ! '>=3.0'
  case-insensitive: ! '>=0.2'
  xml-conduit: ! '>=1.0'
  yesod-core: ! '>=1.4.14'
  base: ! '>=4.3 && <5'
  time: -any
  blaze-markup: ! '>=0.5.1'
  persistent: ! '>=1.0'
  text: -any
  hspec-core: ==2.*
  monad-control: -any
  network: ! '>=2.2'
  html-conduit: ! '>=0.1'
  HUnit: ! '>=1.2'
  containers: -any
  blaze-builder: -any
  xml-types: ! '>=0.3'
  blaze-html: ! '>=0.5'
  attoparsec: ! '>=0.10'
  wai-extra: -any
  transformers: ! '>=0.2.2'
  http-types: ! '>=0.7'
all-versions:
- '0.1'
- '0.2.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.0.5'
- '0.2.0.6'
- '0.2.1'
- '0.3.0'
- '0.3.0.1'
- '0.3.1'
- '0.3.1.1'
- '0.3.2'
- '0.3.3'
- '0.3.3.1'
- '0.3.3.2'
- '0.3.4'
- '0.3.5'
- '1.2.0'
- '1.2.1'
- '1.2.1.1'
- '1.2.1.2'
- '1.2.1.3'
- '1.2.1.4'
- '1.2.1.5'
- '1.2.2'
- '1.2.3'
- '1.2.3.1'
- '1.2.3.2'
- '1.2.4'
- '1.2.5'
- '1.2.6'
- '1.4.0'
- '1.4.0.1'
- '1.4.0.2'
- '1.4.0.3'
- '1.4.1'
- '1.4.1.1'
- '1.4.2'
- '1.4.2.1'
- '1.4.2.2'
- '1.4.3'
- '1.4.3.1'
- '1.4.4'
author: Nubis <nubis@woobiz.com.ar>
latest: '1.4.4'
description-type: markdown
description: ! "# yesod-test\r\n\r\nPragmatic integration tests for haskell web applications
  using WAI and optionally a database (Persistent).\r\n\r\nIts main goal is to encourage
  integration and system testing of web applications by making everything *easy to
  test*. \r\n\r\nYour tests are like browser sessions that keep track of cookies and
  the last\r\nvisited page. You can perform assertions on the content of HTML responses\r\nusing
  CSS selectors.\r\n\r\nYou can also easily build requests using forms present in
  the current page.\r\nThis is very useful for testing web applications built in yesod
  for example,\r\nwhere your forms may have field names generated by the framework
  or a randomly\r\ngenerated CSRF \"\\_token\" field.\r\n\r\nYour database is also
  directly available so you can use runDB to set up\r\nbackend pre-conditions, or
  to assert that your session is having the desired effect.\r\n\r\nThe testing facilities
  behind the scenes are HSpec (on top of HUnit).\r\n\r\nThe code sample below covers
  the core concepts of yesod-test. Check out the\r\n[yesod-scaffolding for usage in
  a complete application](https://github.com/yesodweb/yesod-scaffold/tree/postgres/test).\r\n\r\n```haskell\r\nspec
  :: Spec\r\nspec = withApp $ do\r\n    describe \"Basic navigation and assertions\"
  $ do\r\n      it \"Gets a page that has a form, with auto generated fields and token\"
  $ do\r\n        get (\"url/to/page/with/form\" :: Text) -- Load a page.\r\n        statusIs
  200 -- Assert the status was success.\r\n\r\n        bodyContains \"Hello Person\"
  -- Assert any part of the document contains some text.\r\n        \r\n        --
  Perform CSS queries and assertions.\r\n        htmlCount \"form .main\" 1 -- It
  matches 1 element.\r\n        htmlAllContain \"h1#mainTitle\" \"Sign Up Now!\" --
  All matches have some text.\r\n\r\n        -- Performs the POST using the current
  page to extract field values:\r\n        request $ do\r\n          setMethod \"POST\"\r\n
  \         setUrl SignupR\r\n          addToken -- Add the CSRF _token field with
  the currently shown value.\r\n\r\n          -- Lookup field by the text on the labels
  pointing to them.\r\n          byLabel \"Email:\" \"gustavo@cerati.com\"\r\n          byLabel
  \"Password:\" \"secret\"\r\n          byLabel \"Confirm:\" \"secret\"\r\n\r\n      it
  \"Sends another form, this one has a file\" $ do\r\n        request $ do\r\n          setMethod
  \"POST\"\r\n          setUrl (\"url/to/post/file/to\" :: Text)\r\n          -- You
  can easily add files, though you still need to provide the MIME type for them.\r\n
  \         addFile \"file_field_name\" \"path/to/local/file\" \"image/jpeg\"\r\n
  \         \r\n          -- And of course you can add any field if you know its name.\r\n
  \         addPostParam \"answer\" \"42\"\r\n\r\n        statusIs 302\r\n\r\n    describe
  \"Database access\" $ do\r\n      it \"selects the list\" $ do\r\n        -- See
  the Yesod scaffolding for the runDB implementation\r\n        msgs <- runDB $ selectList
  ([] :: [Filter Message]) []\r\n        assertEqual \"One Message in the DB\" 1 (length
  msgs)\r\n```\r\n\r\n"
license-name: MIT
