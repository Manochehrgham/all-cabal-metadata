homepage: https://github.com/jamesdabbs/yesod-worker
changelog-type: ''
hash: dabc98b79d275381e34526bc24cbf0186d50760b7914e86bf3b78a776704c442
test-bench-deps: {}
maintainer: jamesdabbs@gmail.com
synopsis: Drop-in(ish) background worker system for Yesod apps
changelog: ''
basic-deps:
  stm: ! '>=2.4.2'
  yesod-core: ! '>=1.4'
  base: ! '>=4.7 && <4.8'
  persistent: ! '>=2.1'
  monad-control: ! '>=0.3'
  fast-logger: ! '>=2.2'
  containers: ! '>=0.5'
  yesod: ! '>=1.4'
  transformers-base: ! '>=0.4.2'
  monad-logger: ! '>=0.3'
  transformers: ! '>=0.4'
  resourcet: ! '>=1.1.2.2'
  template-haskell: -any
all-versions:
- '0.0.1'
author: James Dabbs
latest: '0.0.1'
description-type: markdown
description: ! "See [the demo](https://github.com/jamesdabbs/yesod-worker-demo) for
  an example site with workers set up.\n\n# Usage\n\n## Define your Job type\n\n```\n--
  Up to you where this goes, so long as it's importable\ndata AppJob = CountJob Int
  | UserJob\n```\n\n## Include a queue in your foundation data type\n\n```\n-- Foundation.hs\nimport
  Yesod.Worker (JobQueue, YesodWorker(..), defaultRunW)\n\ndata App = App\n  { settings
  :: AppConfig DefaultEnv Extra\n  ...\n  , appQueue :: JobQueue AppJob\n  }\n```\n\n##
  Specify how to run your jobs\n```\n-- Foundation.hs (provided you don't want to
  orphan the instance)\ninstance YesodWorker App where\n  type Job = AppJob\n  queue
  = appQueue\n  runW = defaultRunW persistConfig connPool\n\n  -- Dummy implementations,
  obviously these would depend on your app\n  perform (CountJob n) = void . forM [1..n]
  $ \\k -> do\n    lift . putStrLn . show $ k\n    lift $ threadDelay 1000000\n  perform
  UserJob = do\n    -- Note that you can run SQL using the `runW` helper\n    n <-
  runW $ count ([] :: [Filter User])\n    lift . putStrLn $ \"There are \" ++ (show
  n) ++ \" users\"\n```\n\n## Start the queue on app boot\n```\n-- Application.hs\nimport
  Yesod.Worker (emptyQueue, spawnWorkers)\n\nmakeFoundation conf = do\n  ...\n  q
  <- emptyQueue\n  let foundation = App conf ... q\n  spawnWorkers foundation\n  ...\n```\n\n##
  Queue up a job\n```\nimport Yesod.Worker (enqueue)\n\ngetWhateverR = do\n  enqueue
  $ CountJob 10\n  ...\n```\n\n# TODO\n\n* Simplify installation?\n* Include job subsite
  for viewing queue and worker status\n* Swappable queue backends (for e.g. Redis)\n*
  Improve error handling / job failures / worker restarts\n* Allow multiple queues
  with customizable priority\n"
license-name: GPL-3
