homepage: https://bitbucket.org/wuzzeb/react-flux
changelog-type: markdown
hash: 65fc608e47558bdf5db0c250ad8625f30ba5ba8a50c4bf887346203f47153e3d
test-bench-deps: {}
maintainer: John Lenz <wuzzeb@gmail.com>
synopsis: A binding to React based on the Flux application architecture for GHCJS
changelog: ! "# 1.0.3\n\n* I switched to using stack to build, and updated the documentation
  to explain how to use stack.  It is\n  still possible to use cabal but I suggest
  using stack.  There is no functionality change in this release,\n  just updated
  documentation.\n\n# 1.0.2\n\n* Update to build with latest ghcjs master.  The breaking
  change was\n  https://github.com/ghcjs/ghcjs-base/commit/968dff527c2be2d3d4815e437ad9b2931ea1f35d\n
  \ which renamed JSRef to JSVal.  Therefore, react-flux no longer builds with ghcjs
  versions without\n  this commit.\n\n# 1.0.1\n\n* Add formatting support for properties
  to `React.Flux.Addons.Intl`.  These are needed for example to translate\n  the placeholder
  text for an input element.  This improvement caused a few changes to the types the
  Internal module.\n\n* Add a new example [purecss-side-menu](https://bitbucket.org/wuzzeb/react-flux/src/tip/example/purecss-side-menu)\n
  \ showing a responsive side menu built with PureCSS.\n\n* Add `classNames` function
  to `React.Flux.PropertiesAndEvents` to allow easily setting class names\n  based
  on calculations.\n\n* Add a new module `React.Flux.Combinators` which is re-exported
  by `React.Flux`.  The `Combinators` module\n  contains useful utilities that while
  not required, make your life a little simpler.\n\n# 1.0.0\n\n* Bindings to react-intl
  (http://formatjs.io/react/) for i18n support.  This is useful even if your app is\n
  \ a single language, as it allows easy number, date, relative time, and message
  formatting like pluralization.\n  It also supports multiple locales and translations
  of messages.\n\n* The type of `callback` has extended to allow arbitrary function
  properties to be\n  passed to foreign classes.  The old `callback` accepted callbacks
  of type `Aeson.Value -> handler`\n  while the new callback allows functions of any
  number of arguments, as long as each argument implements\n  `FromJSVal`.  Since
  `Aeson.Value` implements `FromJSVal`, any existing calls to `callback` should still
  work.\n  This change also caused some changes to types in `React.Flux.Internal`.\n\n*
  Add a function `nestedProperty` to `React.Flux.PropertiesAndEvents` to create nested
  properties.\n\n* Support for React 0.14\n    * React 0.13 and 0.14 are both supported
  from the same Haskell code, the differences are handled internally.\n    * If you
  are using React 0.14, you will have to include `react-dom.min.js` and make sure
  the\n      `ReactDOM` variable is protected by closure similar to how `React` must
  be protected.\n    * `initializeTouchEvents` has been removed from React 0.14, so
  you can remove the call from your app.\n    * The SVG `image_` tag is now supported
  by `React.Flux.DOM`.\n    * The new media events on images and videos don't have
  direct Haskell equivalents, instead the handlers can be\n      created by the new
  `on` function in `React.Flux.PropertiesAndEvents`.\n    * The CSS transitions in
  `React.Flux.Addons.React` were made simpler by just passing the raw\n      properties.
  \ There were several changes to the possible properties in React 0.14 and covering
  them all\n      from Haskell is not worth it when the properties can easily be created
  directly.\n\n* `reactRenderToString` was added to allow executing a react-flux application
  using node.\n\n# 0.9.4\n\n* Fix to build with latest ghcjs-base (requires at least
  aaa4d59117f37d1b9c60a154a9128b3bcc6301cd)\n  of ghcjs-base), so you may need to
  recompile ghcjs and ghcjs-base.\n* Add a function 'property' to create a property
  from any JSVal, not just Aeson values.\n* Add a function 'elementProperty' to create
  a property from a ReactElementM, useful for\n  interacting with foreign React classes.\n\n#
  0.9.3\n\n* Don't require web-routes dependency if not building the routing example\n\n#
  0.9.2\n\n* Bindings to react-bootstrap and the react addons\n* Add new routing example
  application (thanks Vladimir Sekissov!)\n\n# 0.9.1\n\n* Switch to use the improved-base
  branch of ghcjs (thanks Vladimir Sekissov!)\n\n# 0.9.0\n\n* Initial release\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  time: ! '>=1.5'
  unordered-containers: -any
  text: ! '>=1.2'
  react-flux: -any
  mtl: ! '>=2.1'
  deepseq: -any
  aeson: ! '>=0.8'
  template-haskell: ! '>=2.10'
all-versions:
- '0.9.0'
- '0.9.1'
- '0.9.2'
- '0.9.3'
- '0.9.4'
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
author: John Lenz <wuzzeb@gmail.com>
latest: '1.0.3'
description-type: markdown
description: ! "A GHCJS binding to [React](https://facebook.github.io/react/) based
  on the\n[Flux](https://facebook.github.io/flux/) design.  The flux design pushes
  state and complicated logic\nout of the view, allowing the rendering functions and
  event handlers to be pure Haskell functions.\nWhen combined with React's composable
  components and the one-way flow of data, React, Flux, and\nGHCJS work very well
  together.\n\n# Docs\n\nThe [haddocks](https://hackage.haskell.org/package/react-flux)
  contain the documentation.\n\n# Using in your own project\n\nI use stack to build
  my frontend which uses react-flux.  I set up stack and\nghcjs using [these\ninstructions](http://docs.haskellstack.org/en/stable/ghcjs.html).
  \ Note that\nreact-flux requires GHCJS master (a.k.a. improved base).  At the moment
  I want\nto use GHC 7.10.3 and no ghcjs snapshot uses lts-4.1 and GHC 7.10.3, so
  I am\nbuilding ghcjs manually.  So what I do is [install ghcjs from\ngit](https://github.com/ghcjs/ghcjs)
  using the following.  (Once the ghcjs\nsnapshots have caught up I will transition
  to using them and have stack install\nghcjs instead of installing ghcjs manually.)\n\n~~~\n$
  git clone https://github.com/ghcjs/ghcjs.git\n$ cabal install ./ghcjs\n$ ghcjs-boot
  --dev\n~~~\n\nAfter this, in my application which depends on react-flux, I use the
  following `stack.yaml`:\n\n~~~\nresolver: lts-4.1\ncompiler: ghcjs-0.2.0_ghc-7.10.3\npackages:\n
  \   - .\nextra-deps:\n    - react-flux-1.0.3\n~~~\n\n\n# Example Applications\n\nThe
  source contains some [example applications](https://bitbucket.org/wuzzeb/react-flux/src/tip/example).\nTo
  try out the TODO example, clone the repository, set up ghcjs manually as in the
  previous section, and then execute:\n\n~~~\nstack build\nmake\ncd example/todo\nfirefox
  todo.html\n~~~\n\nIf you don't have closure installed, you can open `todo-dev.html`
  instead of `todo.html`.  For more details on\nthe example applications, see the
  [README](https://bitbucket.org/wuzzeb/react-flux/src/tip/example/README.md).\n\n#
  Test Suite\n\nTo run the test suite, first you must build both the example applications
  and\nthe test-client using ghcjs.  (The test-client is a react-flux application\nwhich
  contains code for everything not contained in the todo example.)  This is\nthe first
  `stack build` below.  Then, you must build the test suite, which is a\nhaskell application
  using\n[hspec-webdriver](https://hackage.haskell.org/package/hspec-webdriver).  This\nmust
  be built using GHC (not GHCJS), so there is a separate `stack.yaml` file\nin the
  `test/spec` directory.  In summary, run the following commands:\n\n~~~ {.bash}\nstack
  build\nmake\ncd test/spec\nstack build\n~~~\n\nNext, install [selenium-server-standalone](http://www.seleniumhq.org/download/)
  (also from\n[npm](https://www.npmjs.com/package/selenium-server-standalone-jar)).
  Also, at the moment, the beta\nversion of the react-intl library must be installed
  from npm.\n\n~~~\ncd test/client\nnpm install react-intl@v2.0.0-beta-2\n~~~\n\nFinally,
  start selenium-server-standalone and execute the test suite.  Make sure you also
  have\nclosure installed, since the test suite will compress the todo app before
  testing it.  It must be\nstarted from the `test/spec` directory, otherwise it does
  not find the correct javascript files.\n\n~~~\ncd test/spec\nstack exec react-flux-spec\n~~~\n\n#
  Other Projects\n\nIt differes significantly from the other two react bindings,\n[react-haskell](https://github.com/joelburget/react-haskell)
  and\n[ghcjs-react](https://github.com/fpco/ghcjs-react).  In particular, the major
  difference is how\nevents are handled.  In the Flux design, the state is moved out
  out of the view and then handlers\nproduce actions which transform the state.  Thus
  there is a one-way flow of data from the store into\nthe view.  In contrast, react-haskell
  and ghcjs-react both have event signals propagaing up the\nreact component tree,
  transforming state at each node.  In particular, react-haskell with its InSig\nand
  OutSig have the signals propagate up the tree and optionally transform state at
  each node and\nchange the type of the signal.\n"
license-name: BSD3
