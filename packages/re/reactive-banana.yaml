homepage: http://wiki.haskell.org/Reactive-banana
changelog-type: markdown
hash: 2918f3a7a91cffec5c4a3a7fb0e004f7bf38e2492c98d66b7e3a923050dd80d4
test-bench-deps:
  test-framework-hunit: ! '>=0.2 && <0.4'
  test-framework: ! '>=0.6 && <0.9'
  base: ! '>=4.2 && <5'
  unordered-containers: -any
  HUnit: ! '>=1.2 && <2'
  containers: -any
  vault: -any
  reactive-banana: -any
  hashable: -any
  transformers: -any
  psqueues: -any
maintainer: Heinrich Apfelmus <apfelmus quantentunnel de>
synopsis: Library for functional reactive programming (FRP).
changelog: ! "Changelog for the `reactive-banana` package\n-------------------------------------------\n\n**version
  0.8.1.2**\n\n* Depend on the [psqueues][] package instead of the [pqueue][] package
  for the priority queue.\n\n  [psqueues]: https://hackage.haskell.org/package/psqueues\n
  \ [pqueue]: http://hackage.haskell.org/package/pqueue\n\n**version 0.8.1.1**\n\n*
  Links to the Haskell wiki now point to the `http://wiki.haskell.org` subdomain.\n\n**version
  0.8.1.0**\n\n* Module `Reactive.Banana.Switch` now adheres to the \"Functor Applicative
  Monad Proposal\" proposal][amp-proposal].\n\n  [amp-proposal]: https://wiki.haskell.org/Functor-Applicative-Monad_Proposal\n\n**version
  0.8.0.4**\n\n* Just a reupload. The previous archive was broken.\n\n**version 0.8.0.3**\n\n*
  Export the `Future` type.\n* Restrict `containers` dependency to lower bound 0.5.\n\n**version
  0.8.0.2**\n\n* Fix compilation issue with hiding `empty` from the module `Reactive.Banana.Prim.Order`.\n\n**version
  0.8.0.1**\n\n* New examples `Counter.hs` and `Octave.hs`.\n* Bump `transfomers`
  dependency.\n\n**version 0.8.0.0**\n\n* A new module `Reactive.Banana.Prim` exports
  primitive combinators that you can use to implement your own FRP library with a
  different API.\n* The push-driven implementation in `Reactive.Banana.Prim` now has
  the performance characteristics of an actual push-driven implementation. Some work
  has gone into optimizing constant factors as well. However there is still no garbage
  collection for dynamically created events and behaviors.\n* The `accumE` and `accumB`
  combinators evaluate their state to WHNF to avoid a space leak. (Fixes issue #52).
  On the other hand, `Behavior` values are evaluated on demanded, i.e. only when required
  by the apply combinator `<@>` or similar.\n* Recursion between events and behaviors
  should now work as advertised. (Fixed issue #56).\n* The deprecated `liftIONow`
  function has been removed.\n* The type of the `changes` function now indicates that
  the new Behavior value is only available in the context of `reactimate`. A variant
  `reactimate'` makes this explicit.\n* The module `Control.Event.Handler` now exports
  the `AddHandler` type, which is now a `newtype`. The module `Reactive.Banana.Frameworks.AddHandler`
  has been removed.\n\n**version 0.7.1.0**\n\n* Deprecate the `liftIONow` function
  in favor of `liftIO`.\n\n**version 0.7.0.0**\n\n* *Dynamic event switching*. Combinators
  are now available in the module `Reactive.Banana.Switch`.\n* Rename `NetworkDescription`
  to `Moment`, add class constraint `Frameworks t`.\n* No longer compiles with the
  JavaScript backend of the Utrecht Haskell compiler.\n* Change the `changes` combinator
  to be less useful.\n\n**version 0.6.0.0**\n\n* Can now be compiled with the JavaScript
  backend of the Utrecht Haskell compiler.\n* The push-driven implementations needs
  the `UseExtensions` flag to work. This flag is enabled by default.\n* Minor module
  reorganization.\n\n**version 0.5.0.0** -- [announcement](http://apfelmus.nfshost.com/blog/2012/03/25-frp-banana-0-5.html)\n\nThis
  update includes numerous changes, in particular a complete overhaul of the internal
  implementation. Here a partial list.\n\n* Add `collect`, `spill` and `unionWith`
  combinators to deal with simultaneous events.\n* Remove general `Monoid` instance
  for `Event` to simplify reasoning about simultaneous events.\n* Add `initial` and
  `changes` combinators that allow you to observe updates to `Behavior`. Remove the
  `Reactive.Banana.Incremental` module.\n* Rename most modules,\n* Change type singaturs:
  The main types `Event`, `Behavior` and `NetworkDescription` now carry an additional
  phantom type.\n\n**version 0.4.3.1**\n\n* Model implementation of `accumE` now has
  the intended semantics.\n\n**version 0.4.3.0**\n\n* Change semantics: `IO` actions
  from inside `reactimate` may now interleave as dictated by your event-based framework
  (issue #15).\n* Fix bug: compiling a network twice no longer fails due to lingering
  global state (issue #16).\n* Change type: remove `Typeable` constraint from `interpret`
  and `interpretAsHandler`.\n* Misc: Remove the `BlackBoard` application from the
  repository.\n\n**version 0.4.2.0**\n\n* Change type: remove `Typeable` constraint
  from `fromAddHandler`.\n* Misc: the `Vault` data type gets its own package.\n* Misc:
  `reactive-banana-wx` now compiles properly with cabal.\n* Add some more examples
  to the `reactive-banana-wx` package.\n\n**version 0.4.1.0**\n\n* Add `<@>` operator
  for more convenience when using `apply`.\n* Add support for value recursion to the
  `NetworkDescription` monad.\n* Add many examples to `reactive-banana-wx`.\n\n**version
  0.4.0.0** -- [announcement](http://apfelmus.nfshost.com/blog/2011/07/07-frp-banana-0-4.html)\n\n*
  Add function `fromPoll` to obtain behaviors from mutable data.\n* Change name: `run`
  is now called `actuate`.\n* Add derived data type `Discrete`.\n* Add function `interpretAsHandler`.\n\n**version
  0.3.0.0** -- [announcement](http://apfelmus.nfshost.com/blog/2011/06/22-frp-banana-0-3.html)\n\n*
  change: event networks are now first-class values, you can `pause` or `run` them.\n*
  change type: `AddHandler` now expects a way to unregister event handlers.\n* add
  example `RunPause.hs`\n\n**version 0.2.0.0** -- [announcement](http://apfelmus.nfshost.com/blog/2011/06/22-frp-banana-0-2.html)\n\n*
  change: now implements proper semantics as pioneered by Conal Elliott\n* model implementation
  for semantics\n* push-driven implementation for efficiency\n* add example `SlotMachine.hs`\n\n**version
  0.1.0.0**\n\n* initial release\n"
basic-deps:
  base: ! '>=4.2 && <5'
  unordered-containers: ! '>=0.2.1.0 && <0.3'
  containers: ! '>=0.5 && <0.6'
  vault: ==0.3.*
  hashable: ! '>=1.1 && <1.3'
  transformers: ! '>=0.2 && <0.5'
  psqueues: ! '>=0.2 && <0.3'
all-versions:
- '0.1.0.0'
- '0.1.0.2'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.1.1'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.3.1'
- '0.4.3.2'
- '0.5.0.0'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.0.3'
- '0.6.0.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.1.0'
- '0.7.1.1'
- '0.7.1.2'
- '0.7.1.3'
- '0.8.0.0'
- '0.8.0.1'
- '0.8.0.2'
- '0.8.0.3'
- '0.8.0.4'
- '0.8.1.0'
- '0.8.1.1'
- '0.8.1.2'
author: Heinrich Apfelmus
latest: '0.8.1.2'
description-type: haddock
description: ! 'Reactive-banana is a library for Functional Reactive Programming (FRP).


  FRP offers an elegant and concise way to express interactive programs such as graphical
  user interfaces, animations, computer music or robot controllers. It promises to
  avoid the spaghetti code that is all too common in traditional approaches to GUI
  programming.


  See the project homepage <http://wiki.haskell.org/Reactive-banana>

  for more detailed documentation and examples.


  /Stability forecast:/


  No semantic bugs expected.


  Significant API changes are likely in future versions,

  though the main interface is beginning to stabilize.


  The library features an efficient, push-driven implementation

  and has seen some optimization work.

  However, the inner loop still has a rather large constant factor overhead.

  Moreover, there is currently /no/ garbage collection for events that are

  created dynamically with @Reactive.Banana.Switch@.'
license-name: BSD3
