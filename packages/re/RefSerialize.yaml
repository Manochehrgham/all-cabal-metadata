changelog-type: ''
hash: 390f3078574128f94e82ba0f97233e54f66c0a14fcb84e9c36dd52a85ee8c96e
test-bench-deps: {}
synopsis: Write to and read from ByteStrings maintaining internal memory references
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  stringsearch: -any
  containers: -any
  binary: -any
  hashtables: -any
all-versions:
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.5'
- '0.2.6'
- '0.2.7'
- '0.2.8'
- '0.2.8.1'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.1.0'
- '0.3.1.1'
- '0.3.1.2'
- '0.3.1.3'
- '0.3.1.4'
latest: '0.3.1.4'
description-type: haddock
description: ! 'Read, Show and Binary instances do not check for internal data references
  to the same address.

  As a result, the data is duplicated when serialized. This is a waste of space in
  the filesystem

  and  also a waste of serialization time. but the worst consequence is that, when
  the serialized data is read,

  it allocates multiple copies for the same object when referenced multiple times.
  Because multiple referenced

  data is very typical in a pure language such is Haskell, this means that the resulting
  data loose the beatiful

  economy of space and processing time that referential transparency permits.


  In this release:


  Compatibility with older versions of bytestring that have no ''toStrict'' call


  deserialization is much, much faster by using the stringsearch package


  See "Data.RefSerialize" for details'
