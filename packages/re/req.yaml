homepage: https://github.com/mrkkrp/req
changelog-type: markdown
hash: b77f15fa1001785ea46659f8ae987ea9cd4ef394fb9abf212300d77284ba1ad3
test-bench-deps:
  http-client: ==0.5.*
  bytestring: ! '>=0.10.8 && <0.11'
  case-insensitive: ! '>=0.2 && <1.3'
  base: ! '>=4.7 && <5.0'
  data-default-class: -any
  time: ! '>=1.2 && <1.9'
  unordered-containers: ! '>=0.2.5 && <0.2.9'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  hspec-core: ! '>=2.0 && <3.0'
  req: ! '>=0.2.0'
  blaze-builder: ! '>=0.3 && <0.5'
  mtl: ! '>=2.0 && <3.0'
  QuickCheck: ! '>=2.7 && <3.0'
  http-types: ! '>=0.8 && <10.0'
  aeson: ! '>=0.9 && <1.3'
maintainer: Mark Karpov <markkarpov@openmailbox.org>
synopsis: Easy-to-use, type-safe, expandable, high-level HTTP library
changelog: ! "## Req 0.2.0\n\n* Added support for multipart form data in form of `ReqBodyMultipart`
  body\n  option and `reqBodyMultipart` helper function. This also required a change\n
  \ in type signature of `getRequestContentType`, which now takes `body`, not\n  `Proxy
  body` because we need to extract boundary from `body` and put it\n  into `Content-Type`
  header. This change, however, shouldn't be too\n  dangerous for end-users.\n\n*
  Added support for OAuth 1.0 authentication via `oAuth1` option.\n\n## Req 0.1.0\n\n*
  Initial release.\n"
basic-deps:
  http-client: ! '>=0.5 && <0.6'
  bytestring: ! '>=0.10.8 && <0.11'
  case-insensitive: ! '>=0.2 && <1.3'
  base: ! '>=4.7 && <5.0'
  data-default-class: -any
  time: ! '>=1.2 && <1.9'
  text: ! '>=0.2 && <1.3'
  http-api-data: ! '>=0.2 && <0.4'
  connection: ! '>=0.2.2 && <0.3'
  semigroups: ==0.18.*
  blaze-builder: ! '>=0.3 && <0.5'
  authenticate-oauth: ! '>=1.5 && <1.7'
  http-client-tls: ! '>=0.3.2 && <0.4'
  mtl: ! '>=2.0 && <3.0'
  transformers: ! '>=0.4 && <0.6'
  http-types: ! '>=0.8 && <10.0'
  aeson: ! '>=0.9 && <1.3'
all-versions:
- '0.1.0'
- '0.2.0'
author: Mark Karpov <markkarpov@openmailbox.org>
latest: '0.2.0'
description-type: markdown
description: ! "# Req\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/req.svg?style=flat)](https://hackage.haskell.org/package/req)\n[![Stackage
  Nightly](http://stackage.org/package/req/badge/nightly)](http://stackage.org/nightly/package/req)\n[![Stackage
  LTS](http://stackage.org/package/req/badge/lts)](http://stackage.org/lts/package/req)\n[![Build
  Status](https://travis-ci.org/mrkkrp/req.svg?branch=master)](https://travis-ci.org/mrkkrp/req)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/req/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/req?branch=master)\n\n*
  [Motivation and Req vs other libraries](#motivation-and-req-vs-other-libraries)\n*
  [Unsolved problems](#unsolved-problems)\n* [Related packages](#related-packages)\n*
  [Contribution](#contribution)\n* [License](#license)\n\n```haskell\n{-# LANGUAGE
  OverloadedStrings    #-}\n{-# OPTIONS_GHC -fno-warn-orphans #-}\n\nmodule Main (main)
  where\n\nimport Control.Exception (throwIO)\nimport Network.HTTP.Req\nimport Data.Aeson\n\n--
  Just make your monad stack an instance of MonadHttp in your application\n-- and
  start making requests, enjoy automatic connection sharing.\n\ninstance MonadHttp
  IO where\n  handleHttpException = throwIO\n\nmain :: IO ()\nmain = do\n  let payload
  = object\n        [ \"foo\" .= (10 :: Int)\n        , \"bar\" .= (20 :: Int) ]\n
  \ -- One function, full power and flexibility.\n  r <- req POST -- method\n    (https
  \"httpbin.org\" /: \"post\") -- safe by construction URL\n    (ReqBodyJson payload)
  -- use built-in options or add your own\n    jsonResponse -- specify how to interpret
  response\n    mempty       -- query params, headers, explicit port number, etc.\n
  \ print (responseBody r :: Value)\n```\n\nThis is an easy-to-use, type-safe, expandable,
  high-level HTTP library that\njust works without any fooling around.\n\nWhat does
  the “easy-to-use” phrase mean? It means that the library is\ndesigned to be beginner-friendly,
  so it's simple to add it to your monad\nstack, intuitive to work with, well-documented,
  and does not get in your\nway. Doing HTTP requests is a common task and Haskell
  library for this\nshould be very approachable and clear to beginners, thus certain
  compromises\nwere made. For example, one cannot currently modify `ManagerSettings`
  of\ndefault manager because the library always uses the same implicit global\nmanager
  for simplicity and maximal connection sharing. There is a way to use\nyour own manager
  with different settings, but it requires a bit more typing.\n\n“Type-safe” means
  that the library is protective and eliminates certain\nclass of errors. For example,
  we have correct-by-construction URLs, it's\nguaranteed that user does not send request
  body when using methods like GET\nor OPTIONS, amount of implicit assumptions is
  minimized by making user\nspecify his/her intentions in explicit form (for example,
  it's not possible\nto avoid specifying body or method of a request). Authentication
  methods\nthat assume TLS force user to use TLS on type level. The library carefully\nhides
  underlying types from lower-level `http-client` package because it's\nnot safe enough
  (for example `Request` is an instance of `IsString` and if\nit's malformed, it will
  blow up at run-time).\n\n“Expandable” refers to the ability of the library to be
  expanded without\nugly hacking. For example, it's possible to define your own HTTP
  methods,\nnew ways to construct body of request, new authorization options, new
  ways\nto actually perform request and how to represent/parse response. As user\nextends
  the library to satisfy his/her special needs, the new solutions work\njust like
  built-ins. That said, all common cases are covered by the library\nout-of-the-box.\n\n“High-level”
  means that there are less details to worry about. The library\nis a result of my
  experiences as a Haskell consultant, working for several\nclients who have very
  different projects and so the library adapts easily to\nany particular style of
  writing Haskell applications. For example, some\npeople prefer throwing exceptions,
  while others are concerned with purity:\njust define `handleHttpException` accordingly
  when making your monad\ninstance of `MonadHttp` and it will play seamlessly. Finally,
  the library\ncuts boilerplate considerably and helps write concise, easy to read
  and\nmaintain code.\n\nThe library uses the following mature packages under the
  hood to guarantee\nyou best experience without bugs or other funny business:\n\n*
  [`http-client`](https://hackage.haskell.org/package/http-client) — low\n  level
  HTTP client used everywhere in Haskell.\n\n* [`http-client-tls`](https://hackage.haskell.org/package/http-client-tls)
  —\n  TLS (HTTPS) support for `http-client`.\n\nIt's important to note that since
  we leverage well-known libraries that the\nwhole Haskell ecosystem uses, there is
  no risk in using Req, as the\nmachinery for performing requests is the same as with
  `http-conduit` and\nWreq, it's just the API is different.\n\n## Motivation and Req
  vs other libraries\n\n*This section is my opinion and it contains criticisms of
  other well-known\nlibraries. If you're user/fan of one of these libraries, please
  remember not\nto react aggressively and respect the fact that I may have different
  views\non API design from yours.*\n\nI have spent time to write the library because
  sending HTTP requests is such\na common thing and still there is no high-level library
  for that in Haskell\nthat I could use with pleasure. I'll explain why.\n\nFirst
  of all there is `http-client` and `http-client-tls`. They just work. I\nhave no
  issues with the libraries except that they are too low-level for my\ntaste. Indeed,
  even the docs say that they are low-level and “intended as a\nbase layer for more
  user-friendly packages”. This is exactly how I use them\nin Req, as base level.
  Req is nothing but a different API to `http-client`,\nso it only works because of
  hard work put into `http-client`.\n\n`http-conduit` definitely has its place. For
  one thing it allows you to\nstream request and response bodies in constant memory,
  what other library\nallows you to do that? On the other hand if you take a look
  at\n`Network.HTTP.Simple`, then although it's said that it's a “higher level\nAPI”,
  it's mostly the same as vanilla `http-client` in spirit/approach and\njust adds
  `conduit`-powered functions to perform requests and allows to use\nglobal implicit
  `Manager` (super-cool idea, BTW, Req does the same). If I\ntried to frame what exactly
  I don't like about `http-conduit` in words, then\nit would be “the way requests
  are constructed”. You set, set, set instead of\n*being forced* to declare necessary
  bits and *being allowed* to declare\noptional bits in a way that their combination
  is certainly valid. And you\nparse request from a string without the protection
  of TH that otherwise\nsaves the day as in Yesod.\n\nThen there is Wreq.\n`wreq`\n[doesn't
  see much development lately](https://github.com/bos/wreq/issues/93).\n`wreq` is
  by itself a weird library, IMO. You have functions per method —\nnot very good,
  as there may be new methods, like PATCH which is not new but\nstill missing (well
  you have `customMethod`, but what is the point of having\nper-method functions if
  you have a more general way to use any method? you\nshould be able to just insert
  methods in the “argument slot” of\n`customMethod` and end up with a more general
  solution). Now every method\nfunction has a companion that takes `Options` (like
  you have `get` and\n`getWith`). Why the duplication? Where is generality and flexibility?
  This\nis not all though, because you cannot really use `get` you see in the main\nmodule,
  because you want to have connection sharing. Wreq's author does not\ntake the gift
  of automatic connection re-use `Manager` from `http-client`\nprovides, he invents
  the whole new thing of “sessions”. Only inside a\nsession your connections will
  be shared and re-used. However with the\nsession stuff you have yet another set
  of per-method functions like `get`\nand `getWith` — these are different ones, to
  be used with sessions! Now if\nyou have multi-threaded app, here is a surprise for
  you: you can't share\nconnections between threads as connections are shared only
  inside\n`withSession` friend and “session will no longer be valid after that\nfunction
  returns”. Disclaimer: I don't use Wreq, see below. If something in\nthis paragraph
  is not correct, please let me know and I'll remove it. Also\nthere are valid uses
  for sessions, but the point is that they are too\ninconvenient for common tasks.\n\nIt's
  funny that one client I worked for had to have his own little wrapper\naround `http-client`
  just because he could not possibly use `wreq` and\n`http-client` and friends were
  too low-level. The previous paragraph is\nextracted from a talk with a Haskell developer
  who works for that client. I\nthought to myself “something is wrong with HTTP client
  libraries in Haskell\nif they had to make a wrapper”.\n\nWhat else? I used `servant-client`
  a couple of times but amount of\nboilerplate is too high. If you have several query
  parameters, and you use\njust one of them, good luck passing lots of `Nothing`s.\n\n##
  Unsolved problems\n\nAWS request signing is problematic because request body can
  be in form of\naction to execute (and all that “popper” stuff for streaming), not
  just\n`ByteString` and so getting its digest (hash) is not trivial without running\nthe
  action and consuming body in its entirety before the request in made. In\nWreq the
  author chose to just use `error` when body is not a (strict or\nlazy) `ByteString`.
  Maybe it's OK for Wreq, but I don't consider this proper\nsolution for Req as we
  support full variety of body options. For example\nwhat if I want to upload 1 Gb
  file to S3? I want to stream it in constant\nmemory but at the same time I need
  to calculate its hash before I start\nstreaming. One solution to the problem seems
  to be in taking the hash\nexplicitly (as an argument of hypothetical `awsAuth`)
  and making it\nresponsibility of library user to calculate the hash correctly. I
  don't like\nthis because it's not user-friendly. So the question stays open, for
  now\nthere is no AWS signing functionality provided out-of-the-box.\n\n## Related
  packages\n\nThe following packages are designed to be used with Req:\n\n* [`req-conduit`](https://hackage.haskell.org/package/req-conduit)
  — support\n  for streaming request and response bodies in constant memory.\n\nIf
  you happen to have written a package that adds new features to Req,\nplease submit
  a PR to include it in this list.\n\n## Contribution\n\nIssues, bugs, and questions
  may be reported in [the GitHub issue tracker for\nthis project](https://github.com/mrkkrp/req/issues).\n\nPull
  requests are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright
  © 2016–2017 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
