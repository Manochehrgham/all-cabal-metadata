homepage: http://github.com/ekmett/recursion-schemes/
changelog-type: markdown
hash: d7716f9918f5b22a3dd5a43cf5cd1ccce9f77b2eaefc9ef15713dbbd1219ca04
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Generalized bananas, lenses and barbed wire
changelog: ! '## 5

  * Renamed `Foldable` to `Recursive` and `Unfoldable` to `Corecursive`. With `Foldable`
  in `Prelude` in GHC 7.10+, having a needlessly conflicting name seemed silly.

  * Add support for GHC-8.0.1

  * Use `Eq1`, `Ord1`, `Show1`, `Read1` to derive `Fix`, `Nu` and `Mu` `Eq`, `Ord`
  `Show` and `Read` instances

  * Remove `Prim` data family. `ListF` as a new name for `Prim [a]`, with plenty of
  instances, e.g. `Traversable`.

  * Export `unfix`

  * Add chronomorphisms: `chrono` and `gchrono`.

  * Add `distGApoT`


  ## 4.1.2

  * Support for `free` 4.12.1


  ## 4.1.1

  * Support for GHC 7.10

  * Fixed `para`.


  ## 4.1

  * Support for GHC 7.7+''s generalized `Typeable`.

  * Faster `gapo` and `para` by exploiting sharing.


  ## 4.0


  * Compatibility with `comonad` and `free` version 4.0


  ## 3.0


  * Compatibility with `transformers` 0.3

  * Resolved deprecation warnings caused by changes to `Data.Typeable`

'
basic-deps:
  free: ! '>=4 && <5'
  base: ! '>=4 && <5'
  comonad: ! '>=4 && <6'
  bifunctors: ! '>=4 && <6'
  transformers: ! '>=0.2 && <1'
  transformers-compat: ! '>=0.3 && <1'
all-versions:
- '0.1'
- '0.1.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3.0'
- '0.3.0.1'
- '0.4.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.0.3'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.5.0'
- '0.5.0.1'
- '1.8.0'
- '1.8.0.1'
- '1.8.0.2'
- '2.0'
- '2.0.1'
- '2.0.1.1'
- '2.0.1.2'
- '2.0.2'
- '2.1'
- '3.0'
- '3.0.0.1'
- '3.0.0.2'
- '4.0'
- '4.1'
- '4.1.1'
- '4.1.2'
- '5'
author: Edward A. Kmett
latest: '5'
description-type: markdown
description: ! 'recursion-schemes

  ==========


  [![Hackage](https://img.shields.io/hackage/v/recursion-schemes.svg)](https://hackage.haskell.org/package/recursion-schemes)
  [![Build Status](https://secure.travis-ci.org/ekmett/recursion-schemes.png?branch=master)](http://travis-ci.org/ekmett/recursion-schemes)


  This package includes code for functional programming with bananas, envelopes, lenses,
  barbed wire and all that.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
