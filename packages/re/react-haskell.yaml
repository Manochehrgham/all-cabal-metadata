changelog-type: ''
hash: 4a93e422674084bed41230cedd1b4ee0c92178c85651e10b23c57a806b65b42e
synopsis: Haskell React bindings
changelog: ''
all-versions:
- '1.1.0.0'
- '1.2.0.0'
- '1.3.0.0'
latest: '1.3.0.0'
description-type: haddock
description: ! 'This package provides high level bindings to Facebook''s <http://facebook.github.io/react/
  React> library, meant for use with <http://haste-lang.org Haste>.


  React is a JavaScript library for building user interfaces. React (and React-Haskell)
  is focused on just UI - it''s not a framework.


  Currently React-Haskell can render simple stateful components, but not what React
  calls classes. Put another way, React-Haskell doesn''t support lifecycle methods
  yet.


  Here''s a simple example which demonstrates basic elements, attributes, state, and
  handling events.


  > -- We''re creating a class with JSString state

  > data Example

  > instance ReactKey Example where

  >     type ClassState Example = JSString

  >     type AnimationState Example = ()

  >     type Signal Example = JSString

  >

  > -- updating to the new state without animation

  > transition :: JSString -> JSString -> (JSString, [AnimConfig Example])

  > transition oldState signal = (signal, [])

  >

  > view :: JSString -> React Example ()

  > view str = div_ [ class_ "container" ] $ do

  >     input_ [ value_ str, onChange (Just . targetValue) ]

  >

  > main :: IO ()

  > main = withElem "id" $ \elem ->

  >     render elem =<< createClass view transition "" () []'
