changelog-type: ''
hash: ba5a3fd3fc05955dd05557b5a61e94039dc55088f78be182bbb33cc8a5de0457
test-bench-deps: {}
synopsis: Haskell React bindings
changelog: ''
basic-deps:
  void: ==0.7
  lens-family: -any
  base: ! '>=4.5 && <5'
  monads-tf: -any
  haste-compiler: -any
  transformers: -any
  deepseq: -any
all-versions:
- '1.1.0.0'
- '1.2.0.0'
- '1.3.0.0'
latest: '1.3.0.0'
description-type: haddock
description: ! 'This package provides high level bindings to Facebook''s <http://facebook.github.io/react/
  React> library, meant for use with <http://haste-lang.org Haste>.


  React is a JavaScript library for building user interfaces. React (and React-Haskell)
  is focused on just UI - it''s not a framework.


  Currently React-Haskell can render simple stateful components, but not what React
  calls classes. Put another way, React-Haskell doesn''t support lifecycle methods
  yet.


  Here''s a simple example which demonstrates basic elements, attributes, state, and
  handling events.


  > -- We''re creating a class with JSString state

  > data Example

  > instance ReactKey Example where

  >     type ClassState Example = JSString

  >     type AnimationState Example = ()

  >     type Signal Example = JSString

  >

  > -- updating to the new state without animation

  > transition :: JSString -> JSString -> (JSString, [AnimConfig Example])

  > transition oldState signal = (signal, [])

  >

  > view :: JSString -> React Example ()

  > view str = div_ [ class_ "container" ] $ do

  >     input_ [ value_ str, onChange (Just . targetValue) ]

  >

  > main :: IO ()

  > main = withElem "id" $ \elem ->

  >     render elem =<< createClass view transition "" () []'
