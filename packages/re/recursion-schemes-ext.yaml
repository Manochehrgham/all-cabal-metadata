homepage: https://hub.darcs.net/vmchale/recursion-schemes-ext#readme
changelog-type: ''
hash: 3d43d71a00f1b37b88da5472b052f607a3a03852dcc8e2c971f89e52430730ad
test-bench-deps:
  base: -any
  hspec: -any
  criterion: -any
  recursion-schemes-ext: -any
maintainer: vanessa.mchale@reconfigure.io
synopsis: Amateur addenda to recursion-schemes
changelog: ''
basic-deps:
  composition-prelude: -any
  base: ! '>4.9 && <4.11'
  deepseq: -any
  recursion-schemes: ! '>=5.0'
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.1.0'
author: Vanessa McHale
latest: '0.1.1.0'
description-type: markdown
description: ! "# recursion-schemes-ext\n\nThis adds several functions to\n[recursion-schemes](https://hackage.haskell.org/package/recursion-schemes-5.0.2),\nincluding
  a `cataM`.\n\nAt the moment, you should be careful using functions from this package.
  While\nAPIs will likely be stable, they may have poor performance.\n\n## Pitch\n\nLet's
  say you want to collapse a syntax tree. Suppose further that it's a\nrelatively
  involved syntax tree, and you have some data types that encapsulate\nothers. Here's
  a simple-minded example, where we collapse using traditional\nrecursion schemes:\n\n```haskell\n--
  | We call our co-dependent data types 'Ernie' and 'Bert'. They represent mutually
  recursive\ndata Bert = Bert Ernie\n          | Num Integer\n          | String String\n
  \         | Add Bert Bert\n\ndata Ernie = Ernie Bert\n           | Multiply Ernie
  Ernie\n           | List [Ernie]\n\nmakeBaseFunctor ''Ernie\nmakeBaseFunctor ''Bert\n\ncollapseErnieSyntaxTree
  :: (Recursive Ernie) => Ernie -> Ernie\ncollapseErnieSyntaxTree = cata algebra\n
  \   where algebra (ErnieF e)                                  = Ernie $ collapseBertSyntaxTree'
  e\n          algebra (MultiplyF (Ernie (Num i)) (Ernie (Num j))) = Ernie . Num $
  i * j\n          algebra x                                           = embed x\n\ncollapseBertSyntaxTree
  :: (Recursive Bert) => Bert -> Bert\ncollapseBertSyntaxTree = cata algebra\n    where
  algebra (BertF e)              = Bert $ collapseErnieSyntaxTree' e\n          algebra
  (AddF (Num i) (Num j)) = Num $ i + j\n          algebra x                      =
  embed x\n```\n\nContrast this to the solution using a dendromorphism, viz.\n\n```haskell\n--
  | We call our co-dependent data types 'Ernie' and 'Bert'. They represent mutually
  recursive\ndata Bert = Bert Ernie\n          | Num Integer\n          | String String\n
  \         | Add Bert Bert\n\ndata Ernie = Ernie Bert\n           | Multiply Ernie
  Ernie\n           | List [Ernie]\n\nmakeBaseFunctor ''Ernie\nmakeBaseFunctor ''Bert\n\nentangleFunctors
  [(''Ernie, ''Bert), (''Bert, ''Ernie)]\n\nbertAlgebra :: BertF Bert -> Bert\nbertAlgebra
  (AddF (Num i) (Num j)) = Num $ i + j\nbertAlgebra x                      = embed
  x\n\nernieAlgebra :: ErnieF Ernie -> Ernie\nernieAlgebra (ErnieF (Bert e))                           =
  e\nernieAlgebra (MultiplyF (Ernie (Num i)) (Ernie (Num j))) = Ernie . Num $ i *
  j\nernieAlgebra x                                           = embed x\n\ncollapseErnieSyntaxTree
  :: (Recursive Ernie) => Ernie -> Ernie\ncollapseErnieSyntaxTree = dendro (dummy
  :: Bert) bertAlgebra ernieAlgebra\n\ncollapseBertSyntaxTree :: (Recursive Bert)
  => Bert -> Bert\ncollapseBertSyntaxTree = dendro (dummy :: Ernie) ernieAlgebra bertAlgebra\n```\n\n##
  Anti-Pitch\n\nUsing dendromorphisms rather than catamorphisms is slow. As such,
  for the above\nexample, you'd probably pick the catamorphism most of the time. In
  fact,\ndendromorphisms are really only useful on sufficiently complicated projects\nwhere
  writing correct code would be difficult or inconvenient without them.\n\nMoreover,
  the template Haskell isâ€¦ unwieldy. It'll definitely be shorter and\nmore elegant
  once all is said and done, but you do need to be careful to name\neverything the
  \"correct\" way.\n"
license-name: BSD3
