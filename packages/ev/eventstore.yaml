homepage: http://github.com/YoEight/eventstore
changelog-type: markdown
hash: 6ee2bec4051e704ef937f67b2f165ab39719e89260c4c424f9b27a9e19525098
test-bench-deps:
  stm: -any
  base: -any
  time: -any
  text: -any
  tasty-hunit: -any
  tasty: -any
  eventstore: -any
  aeson: -any
maintainer: yo.eight@gmail.com
synopsis: EventStore TCP Client
changelog: ! '0.9.1.2

  -------

  * Increase aeson upper bound to <0.11


  0.9.1.1

  -------

  * Fix stackage integration.


  0.9.1.0

  -------

  * Introduce convinient persistent subscription functions.

  * Add multi GHC version testing.


  0.9.0.0

  -------

  * Rewrite entirely the internals.

  * Implement integration tests.

  * Rename every `ExpectedVersion` smart constructors.

  * Improve internal and public documentation.

  * Improve failure reports when the connection dropped.

  * Implement more robust internal connection.


  0.8.0.0

  -------

  * Implement competing consumers.

  * Expose an uniform API among all kind of subscriptions.

  * Rewrite internal subscription management.

  * Add missing `Eq` or `Show` instances for exposed datatypes.

  * Add `streamMetadataCustomPropertyValue` and `streamMetadataCustomProperty`.

  * Add logging capability.


  0.7.2.1

  -------

  * Fix compilation issue


  0.7.2.0

  -------

  * Add `setStreamMetadata`

  * Add `getStreamMetadata`


  0.7.1.0

  -------

  * Internal connection changes

  * Allow creating an event with an existing ID


  0.7.0.1

  -------

  * Tight package channnel to connection instance in order to prevent loss on connection
  drops.

  * `Connection` has asynchronous operation for real now.


  0.7.0.0

  -------

  * Fix date conversion. `recordedEventCreateEpoch` is no longer exposed.

  * Add `waitTillCatchup` and `hasCaughtUp` functions.

  * Add `exactStream` `ExpectedVersion` smart constructor. As the result,

  `ExpectedVersion` constructors are no longer exposed. You have to use

  `anyStream`, `noStream`, `emptyStream` or `exactStream` instead.


  0.6.0.1

  -------

  No changes


  0.6.0.0

  -------

  * Support `keepRetrying` reconnection strategy.

'
basic-deps:
  cereal: ! '>=0.4 && <0.5'
  bytestring: ! '>=0.10.4 && <0.11'
  stm: -any
  base: ! '>=4.7 && <5'
  time: ! '>=1.4 && <1.6'
  unordered-containers: -any
  text: ! '>=1.1.1 && <1.3'
  uuid: ==1.3.*
  network: ==2.6.*
  async: ! '>=2.0 && <2.1'
  containers: ! '>=0.5 && <0.6'
  protobuf: ! '>=0.2 && <0.3'
  attoparsec: -any
  random: ==1.*
  aeson: ! '>=0.8 && <0.11'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.1'
- '0.6.0.0'
- '0.6.0.1'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.1.0'
- '0.7.2.0'
- '0.7.2.1'
- '0.8.0.0'
- '0.9.0.0'
- '0.9.1.0'
- '0.9.1.1'
- '0.9.1.2'
author: Yorick Laupa
latest: '0.9.1.2'
description-type: markdown
description: ! "EventStore Haskell TCP client\n=============================\n\n[![Join
  the chat at https://gitter.im/YoEight/eventstore](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/YoEight/eventstore?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build
  Status](https://travis-ci.org/YoEight/eventstore.svg?branch=master)](https://travis-ci.org/YoEight/eventstore)\n\nThat
  driver supports:\n\n  * Read event(s) from regular or $all stream (forward or backward).\n
  \ * Write event(s) to regular stream.\n  * Delete regular stream.\n  * Transactional
  writes to regular stream.\n  * Volatile subscriptions to regular or $all stream.\n
  \ * Catch-up subscriptions to regular or $all stream.\n  * Competing consumers (a.k.a
  Persistent subscriptions) to regular stream.\n  * Authenticated communication with
  EventStore server.\n  * Read stream metadata (ACL and custom properties).\n  * Write
  stream metadata (ACL and custom properties).\n\nNot implemented yet\n===================\n
  \ * Secured connection with the server (SSL).\n\nRequirements\n============\n  *
  GHC        >= 7.8.3\n  * Cabal      >= 1.18\n  * EventStore >= 3.0.0 (>= 3.1.0 if
  you want competing consumers)\n\nInstall\n=======\n\n* Using [Hackage](https://hackage.haskell.org/package/eventstore)\n```\n$
  cabal update\n$ cabal install eventstore\n```\n\n* From source\n```\n$ git clone
  https://github.com/YoEight/eventstore.git\n$ cd eventstore\n$ cabal install --only-dependencies\n$
  cabal configure \n$ cabal install\n```\n\nHow to test\n===========\nTests are available.
  Those assume a server is running on `127.0.0.1` and `1113` port.\n```\n$ cabal install
  --only-dependencies --enable-tests\n$ cabal configure --enable-tests\n$ cabal test\n```\n\nHow
  to use\n==========\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-} -- That library
  uses `Text` pervasively. This pragma permits to use\n                                   --
  String literal when a Text is needed.\nmodule Main where                                   \n\nimport
  Data.Aeson\n-- It requires to have `aeson` package installed. Note that EventStore
  doesn't constraint you to JSON\n-- format but putting common use aside, by doing
  so you'll be able to use some interesting EventStore\n-- features like its Complex
  Event Processing (CEP) capabality.\n                                   \nimport
  Database.EventStore\n-- Note that import also re-exports 'Control.Concurrent.Async'
  module, allowing the use of 'wait'\n-- function for instance.\n\nmain :: IO ()\nmain
  = do\n    -- A common pattern with an EventStore connection is to create a single
  instance only and pass it \n    -- wherever you need it (it's threadsafe). It's
  very important to not consider an EventStore connection like \n    -- its regular
  SQL counterpart. An EventStore connection will try its best to reconnect\n    --
  automatically to the server if the connection dropped. Of course that behavior can
  be tuned\n    -- through some settings.\n    conn <- connect defaultSettings \"127.0.0.1\"
  1113\n    let js  = \"isHaskellTheBest\" .= True -- (.=) comes from Data.Aeson module.\n
  \       evt = createEvent \"programming\" Nothing (withJson js)\n    \n    -- Appends
  an event to a stream named `languages`.    \n    as <- sendEvent conn \"languages\"
  anyVersion evt\n    \n    -- EventStore interactions are fundamentally asynchronous.
  Nothing requires you to wait \n    -- for the completion of an operation, but it's
  good to know if something went wrong.\n    _ <- wait as\n    \n    -- Again, if
  you decide to `shutdown` an EventStore connection, it means your application is
  \n    -- about to terminate.\n    shutdown conn\n    \n    -- Make sure the EventStore
  connection completes every ongoing operation. For instance, if \n    -- at the moment
  we call `shutdown` and some operations (or subscriptions) were still pending,\n
  \   -- the connection aborted all of them.\n    waitTillClosed conn\n```\nNotes\n=====\nThat
  library was tested on Linux and OSX Yosemite.\n\nContributions and bug reports are
  welcome!\n\nBSD3 License \n\n-Yorick Laupa\n"
license-name: BSD3
