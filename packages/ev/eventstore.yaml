homepage: http://github.com/YoEight/eventstore
changelog-type: markdown
hash: bea461dc4c977aa2417e6cc73420733b005201705e3b9f72961c5394371a48d7
test-bench-deps:
  stm: -any
  base: -any
  time: -any
  text: -any
  connection: -any
  dotnet-timespan: -any
  tasty-hunit: -any
  tasty: -any
  eventstore: -any
  aeson: -any
maintainer: yo.eight@gmail.com
synopsis: EventStore TCP Client
changelog: ! '0.13.0.0

  --------

  * Implement SSL Connection

  * Implement `waitConfirmation` function


  0.12.0.0

  --------

  * Quit using internal .NET TimeSpan for dotnet-timespan TimeSpan


  0.11.0.0

  --------

  * Implement Cluster connection.

  * Domain can be used to connect to a server instance.


  0.10.0.2

  --------

  * Bump aeson version.


  0.10.0.1

  --------

  * Bump async version.



  0.10.0.0

  --------

  * Fix $maxAge and $cacheControl TimeSpan metadata serialization.

  * Fix `timeSpanFrom*` functions.

  * Implement `timeSpanTotalDays`, `timeSpanTotalHours`, `timeSpanTotalMinutes` and
  `timeSpanTotalSeconds`.

  * Add `withBinary` and `withBinaryAndMetadata`.

  * Remove useless `TimeSpan` `ToJSON` and `FromJSON` instances.

  * Drop `attoparsec` dependency.


  0.9.1.3

  -------

  * Increase cereal upper bound to <0.6


  0.9.1.2

  -------

  * Increase aeson upper bound to <0.11


  0.9.1.1

  -------

  * Fix stackage integration.


  0.9.1.0

  -------

  * Introduce convinient persistent subscription functions.

  * Add multi GHC version testing.


  0.9.0.0

  -------

  * Rewrite entirely the internals.

  * Implement integration tests.

  * Rename every `ExpectedVersion` smart constructors.

  * Improve internal and public documentation.

  * Improve failure reports when the connection dropped.

  * Implement more robust internal connection.


  0.8.0.0

  -------

  * Implement competing consumers.

  * Expose an uniform API among all kind of subscriptions.

  * Rewrite internal subscription management.

  * Add missing `Eq` or `Show` instances for exposed datatypes.

  * Add `streamMetadataCustomPropertyValue` and `streamMetadataCustomProperty`.

  * Add logging capability.


  0.7.2.1

  -------

  * Fix compilation issue


  0.7.2.0

  -------

  * Add `setStreamMetadata`

  * Add `getStreamMetadata`


  0.7.1.0

  -------

  * Internal connection changes

  * Allow creating an event with an existing ID


  0.7.0.1

  -------

  * Tight package channnel to connection instance in order to prevent loss on connection
  drops.

  * `Connection` has asynchronous operation for real now.


  0.7.0.0

  -------

  * Fix date conversion. `recordedEventCreateEpoch` is no longer exposed.

  * Add `waitTillCatchup` and `hasCaughtUp` functions.

  * Add `exactStream` `ExpectedVersion` smart constructor. As the result,

  `ExpectedVersion` constructors are no longer exposed. You have to use

  `anyStream`, `noStream`, `emptyStream` or `exactStream` instead.


  0.6.0.1

  -------

  No changes


  0.6.0.0

  -------

  * Support `keepRetrying` reconnection strategy.

'
basic-deps:
  http-client: -any
  cereal: ! '>=0.4 && <0.6'
  bytestring: ! '>=0.10.4 && <0.11'
  stm: -any
  base: ! '>=4.7 && <5'
  time: ! '>=1.4 && <1.7'
  unordered-containers: -any
  text: ! '>=1.1.1 && <1.3'
  uuid: ==1.3.*
  async: ! '>=2.0 && <2.2'
  connection: ==0.2.*
  semigroups: ! '>=0.5'
  array: -any
  containers: ! '>=0.5 && <0.6'
  dotnet-timespan: -any
  protobuf: ! '>=0.2 && <0.3'
  random: ==1.*
  aeson: ! '>=0.8 && <0.12'
  dns: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.1'
- '0.6.0.0'
- '0.6.0.1'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.1.0'
- '0.7.2.0'
- '0.7.2.1'
- '0.8.0.0'
- '0.9.0.0'
- '0.9.1.0'
- '0.9.1.1'
- '0.9.1.2'
- '0.9.1.3'
- '0.10.0.0'
- '0.10.0.1'
- '0.10.0.2'
- '0.11.0.0'
- '0.12.0.0'
- '0.13.0.0'
author: Yorick Laupa
latest: '0.13.0.0'
description-type: markdown
description: ! "EventStore Haskell TCP client\n=============================\n\n[![Join
  the chat at https://gitter.im/YoEight/eventstore](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/YoEight/eventstore?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build
  Status](https://travis-ci.org/YoEight/eventstore.svg?branch=master)](https://travis-ci.org/YoEight/eventstore)\n\nThat
  driver supports 100% of EventStore features !\n\nRequirements\n============\n  *
  GHC        >= 7.8.3\n  * Cabal      >= 1.18\n  * EventStore >= 3.0.0 (>= 3.1.0 if
  you want competing consumers)\n\nInstall\n=======\n\n* Using [Hackage](https://hackage.haskell.org/package/eventstore)\n```\n$
  cabal update\n$ cabal install eventstore\n```\n\n* From source\n```\n$ git clone
  https://github.com/YoEight/eventstore.git\n$ cd eventstore\n$ cabal install --only-dependencies\n$
  cabal configure\n$ cabal install\n```\n\nHow to test\n===========\nTests are available.
  Those assume a server is running on `127.0.0.1` and `1113` port.\n```\n$ cabal install
  --only-dependencies --enable-tests\n$ cabal configure --enable-tests\n$ cabal test\n```\n\nHow
  to use\n==========\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-} -- That library
  uses `Text` pervasively. This pragma permits to use\n                                   --
  String literal when a Text is needed.\nmodule Main where\n\nimport Data.Aeson\n--
  It requires to have `aeson` package installed. Note that EventStore doesn't constraint
  you to JSON\n-- format but putting common use aside, by doing so you'll be able
  to use some interesting EventStore\n-- features like its Complex Event Processing
  (CEP) capabality.\n\nimport Database.EventStore\n-- Note that import also re-exports
  'Control.Concurrent.Async' module, allowing the use of 'wait'\n-- function for instance.
  There are also 'NonEmpty' data constructor and 'nonEmpty' function from\n-- 'Data.List.NonEmpty'.\n\nmain
  :: IO ()\nmain = do\n    -- A common pattern with an EventStore connection is to
  create a single instance only and pass it\n    -- wherever you need it (it's threadsafe).
  It's very important to not consider an EventStore connection like\n    -- its regular
  SQL counterpart. An EventStore connection will try its best to reconnect\n    --
  automatically to the server if the connection dropped. Of course that behavior can
  be tuned\n    -- through some settings.\n    conn <- connect defaultSettings (Static
  \"127.0.0.1\" 1113)\n    let js  = \"isHaskellTheBest\" .= True -- (.=) comes from
  Data.Aeson module.\n        evt = createEvent \"programming\" Nothing (withJson
  js)\n\n    -- Appends an event to a stream named `languages`.\n    as <- sendEvent
  conn \"languages\" anyVersion evt\n\n    -- EventStore interactions are fundamentally
  asynchronous. Nothing requires you to wait\n    -- for the completion of an operation,
  but it's good to know if something went wrong.\n    _ <- wait as\n\n    -- Again,
  if you decide to `shutdown` an EventStore connection, it means your application
  is\n    -- about to terminate.\n    shutdown conn\n\n    -- Make sure the EventStore
  connection completes every ongoing operation. For instance, if\n    -- at the moment
  we call `shutdown` and some operations (or subscriptions) were still pending,\n
  \   -- the connection aborted all of them.\n    waitTillClosed conn\n```\nNotes\n=====\nThat
  library was tested on Linux and OSX Yosemite.\n\nContributions and bug reports are
  welcome!\n\nBSD3 License\n\n-Yorick Laupa\n"
license-name: BSD3
