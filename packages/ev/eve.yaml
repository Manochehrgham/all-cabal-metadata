homepage: https://github.com/ChrisPenner/eve#readme
changelog-type: ''
hash: d5f95da3b8b1eb414081533e7e9fdbc4086ecebf0d539285cd4e6cff6eaf2e62
test-bench-deps:
  base: -any
  hspec: -any
  hspec-core: -any
  data-default: -any
  lens: -any
  mtl: -any
  eve: -any
maintainer: christopher.penner@gmail.com
synopsis: An extensible event framework
changelog: ''
basic-deps:
  free: -any
  base: ! '>=4.7 && <5'
  data-default: -any
  containers: -any
  lens: -any
  pipes-parse: -any
  pipes: -any
  pipes-concurrency: -any
  mtl: -any
all-versions:
- '0.1.0'
author: Chris Penner
latest: '0.1.0'
description-type: markdown
description: ! "Eve\n===\n\n[![Join the chat at https://gitter.im/eve-framework/Lobby](https://badges.gitter.im/eve-framework/Lobby.svg)](https://gitter.im/eve-framework/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Hackage](https://img.shields.io/badge/hackage-latest-green.svg)](https://hackage.haskell.org/package/eve)\n\nAn
  extensible event-driven application framework in haskell for building embarassingly
  modular software.\n\nDocumentation\n-------------\nYou can find hackage documentation
  for eve [HERE](https://hackage.haskell.org/package/eve)\n\nGetting started\n---------------\n###
  [Building an App in Eve](https://github.com/ChrisPenner/eve/blob/master/docs/Building-An-App.md)\n\n\\^
  That guide will bring you through the process of making your first app!\n\nIf you
  have any issues (and I'm sure there'll be a few; it's a new project!)\nplease report
  them [here](https://github.com/ChrisPenner/rasa/issues).\n\nCore Principles\n---------------\n\nEve's
  core principle is making it easy to build programs in a modular way.\nThere are
  two key concepts in Eve which you should be aware of:\n\n- Events\n- State\n\nEve
  provides many useful combinators for dispatching events and adding\nlisteners to
  events, events are a broad concept in Eve and can be triggered by\nuser-interaction,
  file-changes, even network sockets! Anything you can think of\nreally! Each time
  an event is fired, your app 'reacts' by running any\nassociated listeners on the
  given event. This is quite similar to other event\nsystems so far; however Eve does
  a few things differently. This is where the\n'State' concept comes in. When writing
  an App, or an extension for an App, in\nEve, you can specify a state object which
  you'd like Eve to keep track of for\nyou, you can run monadic actions over this
  state and do whatever you want with\nit. You can even expose your state-changing
  combinators to other extensions to\nallow them to change the state too! Another
  nifty thing is that events can be\ndispatched on different levels; so for instance
  in the Rasa text editor which\nis built using Eve, there's the notion of 'Global
  Events' and 'Buffer Events'.\nA 'Buffer' is a State object they've defined, and
  they added the `HasEvents`\ntypeclass to it, which now allows them to register listeners
  and dispatch\nevents to a specific instance of a buffer! Trackable states (and therefore\nstate-level
  event listeners) can be nested several levels deep without issue.\nUnlike most event
  systems, Eve also allows Monoidal return values from event\nlisteners, so you can
  collect 'responses' from each event you fire if you wish.\n\nWhen designing applications
  in Eve; it's crucial to think about how the\nstate of you application will be stored,
  and how different components interact.\nEve works best when components are separated
  and communicate with each-other through\nevents. This is because it allows those
  who will eventually write extensions to your\napplication to 'hook' into those events
  to add functionality.\n\nThere are some definite Pros and Cons to Eve's approach:\n\n###
  Pros\n\n-   Implementing most core functionality as extensions ensures a powerful
  and\n    elegant extension interface.\n-   Flexibility & Adaptability; applications
  can be written in such a way that\n    users can replace entire components with
  alternate versions.\n\n### Cons\n\n-   Module cross-dependencies makes the community
  infrastructure more fragile,\n-   This architecture takes some getting used-to.\n\n\nContributing\n============\n\nInstallation\n------------\n\nEve
  uses Stack for reproducible builds.\n\n1. Install [stack](http://seanhess.github.io/2015/08/04/practical-haskell-getting-started.html)\n3.
  Clone this repo and `cd` into the directory\n4. Run `stack build`\n\nRunning Tests\n-------------\n\n-
  `stack test`\n\nContributions\n-------------\n\nChatting about features is a key
  part of Eve's development; come join us in\nthe [Chat Room](https://gitter.im/eve-framework/Lobby)
  to discuss features or \nimprovements!\n"
license-name: BSD3
