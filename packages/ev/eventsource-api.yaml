homepage: https://github.com/YoEight/eventsource-api#readme
changelog-type: markdown
hash: c0c8b7caef2e91ee7c2160e54609f686ad1b1bdc372a9d57c7490c0d7ee5e123
test-bench-deps: {}
maintainer: yo.eight@gmail.com
synopsis: Provides a eventsourcing high level API.
changelog: ! '# Change log


  eventsource-api uses [Semantic Versioning][].

  The change log is available through the [releases on GitHub][].


  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html

  [releases on GitHub]: https://github.com/githubuser/eventsource-api/releases

'
basic-deps:
  base: ! '>=4.9 && <5'
  unordered-containers: -any
  uuid: -any
  protolude: ! '>=0.1.10 && <0.2'
  containers: -any
  mtl: -any
  aeson: -any
all-versions:
- '1.0.0'
- '1.0.1'
author: Yorick Laupa
latest: '1.0.1'
description-type: markdown
description: ! "# [eventsource-api][]\n\nThis project provides what we think be a
  lean eventsourcing API. The goal is to\nset a common ground for eventsourcing-based
  application, yet doesn't force you\nto be trapped under a restrictive framework.\n\nThis
  library main abstraction is the `Store` typeclass.\n\n```haskell\n-- | Main event
  store abstraction. It exposes essential features expected from\n--   an event store.\nclass
  Store store where\n  -- | Appends a batch of events at the end of a stream.\n  appendEvents
  :: (EncodeEvent a, MonadIO m)\n               => store\n               -> StreamName\n
  \              -> ExpectedVersion\n               -> [a]\n               -> m (Async
  EventNumber)\n\n  -- | Appends a batch of events at the end of a stream.\n  readBatch
  :: MonadIO m\n            => store\n            -> StreamName\n            -> Batch\n
  \           -> m (Async (ReadStatus Slice))\n\n  -- | Subscribes to given stream.\n
  \ subscribe :: MonadIO m => store -> StreamName -> m Subscription\n```\n\nThe idea
  is to use any backend of your liking as long as it's able to derive that typeclass
  with its related implicit constraints.\n\n  1. `appendEvents` MUST add events at
  the end of a stream without doing any other alteration on the stream. The order
  of the event's array MUST be respected within the store. Most important, the implementation
  MUST comply to the given `ExpectedVersion` passed by the user.\n  \n  2. `readBatch`
  SHOULD retrieve a set of event given a starting position and a batch size (represented
  by the `Batch` parameter). The returned array MUST have its events ordered by their
  `EventNumber` property.\n\n  3. `subscribe` SHOULD register a subscription to the
  given stream. An implementation MUST allow to subscribe to a stream that doesn't
  exist yet. A subscription allows the user to be notified of any event added to the
  stream. There is no mandatory timing to meet regarding how fast the subscription
  is notified by a change. We only suggest to dispatch new events as soon as possible.\n\n####
  `ExpectedVersion`\n\nA word on `ExpectedVersion`. It's a mean to preserve data consistency
  in a concurrent setting.\n\n```haskell\n-- | The purpose of 'ExpectedVersion' is
  to make sure a certain stream state is\n--   at an expected point in order to carry
  out a write.\ndata ExpectedVersion\n  = AnyVersion\n    -- Stream is a any given
  state.\n  | NoStream\n    -- Stream shouldn't exist.\n  | StreamExists\n    -- Stream
  should exist.\n  | ExactVersion EventNumber\n    -- Stream should be at givent event
  number.\n```\n\nOn a write, if the `ExpectedVersion` condition given by the user
  is not met within the store, the implementation should raise an exception. At the
  moment, the API doesn't capture this situation in the type system.\n\n[eventsource-api]:
  https://github.com/YoEight/eventsource-api\n"
license-name: BSD3
