changelog-type: ''
hash: 6c95b768573943a429551e187a6b2da88cfb155574ad38da705d8f4021b2f388
synopsis: A simple memoization helper library
changelog: ''
all-versions:
- '1.0.0.0'
- '1.0.0.1'
latest: '1.0.0.1'
description-type: haddock
description: ! 'This library encourages you to do memoization

  in three separate steps:


  (1) Create a memoizable function


  (2) Create or select an appropriate memoizer


  (3) Run the memoizer on the memoizable function


  Let''s start with the first.

  When you create a memoizable function,

  you should use the @self@ convention,

  which is that the first input to the function is @self@,

  and all recursive calls are replaced with @self@.

  One common convention that goes well with the @self@ convention

  is using a helper function @go@, like so:


  @

  fib :: Memoizable (Integer -> Integer)

  fib self = go

  \  where go 0 = 1

  \        go 1 = 1

  \        go n = self (n-1) + self (n-2)

  @


  Now for the second. For this example,

  we need a Memoizer that can handle an @Integer@ input,

  and an @Integer@ output. @Data.MemoCombinators@ provides

  @integral@, which handles any @Integral@ input, and

  any output. @Data.MemoUgly@ provides @memo@,

  which can memoize any function @a -> b@, given an @Ord@ instance

  for @a@.


  Third, let''s run our memoizers!

  Since we have decoupled the definition of the memoized function

  from its actual memoization, we can create multiple

  memoized versions of the same function if we so desire.


  @

  import qualified Data.MemoUgly as Ugly

  import qualified Data.MemoCombinators as MC


  fibUgly :: Integer -> Integer

  fibUgly = runMemo Ugly.memo fib


  fibMC :: Integer -> Integer

  fibMC = runMemo MC.integral fib

  @


  You could easily do the same with @Data.MemoTrie.memo@,

  @Data.Function.Memoize.memoize@, etc.


  Using this technique, you can create local memoized functions

  whose memo tables are garbage collected as soon as

  they are no longer needed.'
