homepage: https://github.com/stackbuilders/dotenv-hs
changelog-type: markdown
hash: e6373c7a82d44bbe890c773b590ca3926658a81620a9ee45c0a19a29f6d63236
test-bench-deps:
  exceptions: ! '>=0.8 && <0.9'
  base: ! '>=4.7 && <5.0'
  hspec: -any
  text: -any
  megaparsec: ! '>=6.0 && <7.0'
  base-compat: ! '>=0.4'
  dotenv: -any
  hspec-megaparsec: ! '>=1.0 && <2.0'
  transformers: ! '>=0.4 && <0.6'
maintainer: hackage@stackbuilders.com
synopsis: Loads environment variables from dotenv files
changelog: ! "## MASTER\n## Dotenv 0.5.0.0\n\n* Add [dotenv-safe functionality](https://www.npmjs.com/package/dotenv-safe)\n*
  Add the `Config` type with options to override env variables, and setting the\npath
  for .env and .env.example files.\n* Changed `loadFile` function to get `Config`
  with the paths for the .env file\nand the .env.example file.\n\n## Dotenv 0.4.0.0\n\n*
  Use Megaparsec 6.0\n* Dropped support for GHC 7.6\n\n## Dotenv 0.3.4.0\n\n* Allow
  optparse-applicative 0.14\n\n## Dotenv 0.3.3.0\n\n* Add support for variable expansion.
  Thanks to حبيب الامين (GitHub: habibalamin) for making this contribution.\n\n##
  Dotenv 0.3.2.0\n\n* Add the option to pass arguments to the program passed to Dotenv.
  Thanks to\n  Oleg Grenrus (GitHub: phadej) for making this contribution.\n\n## Dotenv
  0.3.1.0\n\n* Made interface more polymorphic so the functions works in any instance
  of\n  `MonadIO`, not only `IO`. This should reduce amount of lifting in some\n  cases.\n\n*
  Added `onMissingFile` helper to deal with possibly missing files.\n\n* Parser was
  rewritten to take full advantage of Megaparsec.\n  `hspec-megaparsec` is now used
  for testing of the parser.\n\n* Dropped support for GHC 7.4.\n\n## Dotenv 0.3.0.3\n\n*
  Allow optparse-applicative 0.13\n\n## Dotenv 0.3.0.1\n\n* Remove unnecessary package
  dependencies.\n\n## Dotenv 0.3.0.0\n\n* Reverted change to Data.Text in favor of
  String, for maintaining compatibility\n  with common Haskell system libraries. Added
  separate interface for parsing a\n  file into tuples containing Data.Text values.
  Thanks to Daisuke Fujimura\n  (GitHub: fujimura).\n* Fixed parsing of CRLF characters
  for Windows users.\n\n## Dotenv 0.2.0.0 (deprecated)\n\n* Changed public interfaces
  to use Data.Text.\n* Added function `parseFile` to read dotenv file without modifying
  the\n  environment. Thanks to Daisuke Fujimura (GitHub: fujimura) for making this\n
  \ contribution.\n\n## Dotenv 0.1.0.0\n\n* First public release.\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.9'
  base: ! '>=4.7 && <5.0'
  text: -any
  megaparsec: ! '>=6.0 && <7.0'
  process: -any
  base-compat: ! '>=0.4'
  dotenv: -any
  transformers: ! '>=0.4 && <0.6'
  optparse-applicative: ! '>=0.11 && <0.15'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.7'
- '0.1.0.8'
- '0.1.0.9'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.0.3'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.3.0'
- '0.3.4.0'
- '0.4.0.0'
- '0.5.0.0'
author: Justin Leitgeb
latest: '0.5.0.0'
description-type: markdown
description: ! '[![Build Status](https://travis-ci.org/stackbuilders/dotenv-hs.svg?branch=master)](https://travis-ci.org/stackbuilders/dotenv-hs)
  [![Hackage](https://img.shields.io/hackage/v/dotenv.svg)](http://hackage.haskell.org/package/dotenv)


  # Dotenv files for Haskell


  In most applications,

  [configuration should be separated from code](http://12factor.net/config). While

  it usually works well to keep configuration in the environment, there

  are cases where you may want to store configuration in a file outside

  of version control.


  "Dotenv" files have become popular for storing configuration,

  especially in development and test environments. In

  [Ruby](https://github.com/bkeepers/dotenv),

  [Python](https://github.com/theskumar/python-dotenv) and

  [Javascript](https://www.npmjs.com/package/dotenv) there are libraries

  to facilitate loading of configuration options from configuration

  files. This library loads configuration to environment variables for

  programs written in Haskell.


  ## Installation


  In most cases you will just add `dotenv` to your cabal file. You can

  also install the library and executable by invoking `stack install dotenv`.


  ## Usage


  Set configuration variables in a file following the format below:


  ```

  S3_BUCKET=YOURS3BUCKET

  SECRET_KEY=YOURSECRETKEYGOESHERE

  ```


  Then, calling `Dotenv.load` from your Haskell program reads the above

  settings into the environment:


  ```haskell

  import qualified Configuration.Dotenv as Dotenv

  Dotenv.loadFile False "/path/to/your/file"

  ```


  After calling `Dotenv.load`, you are able to read the values set in your

  environment using standard functions from `System.Environment` such as

  `lookupEnv` and `getEnv`.


  ### NOTE: Empty environment variables


  If you need to have empty environment variables in your configuration, you can

  use something like the code below:


  ```haskell

  fromMaybe "" <$> lookupEnv "ENV_VAR"

  ```


  Currently, `dotenv-hs` doesn''t allow you to set empty environment variables,

  because of [setEnv](https://hackage.haskell.org/package/base-4.9.1.0/docs/System-Environment.html#v:setEnv)

  from our `System.Environment`. This is bug reported in [GHC ticket](https://ghc.haskell.org/trac/ghc/ticket/12494).

  We have had many [dicussions](https://github.com/stackbuilders/dotenv-hs/issues/48)

  about this. Fortunately, there is already some work for this issue in

  [GHC Phabricator](https://phabricator.haskell.org/D3726).


  ## Configuration


  The first argument to `loadFile` specifies whether you want to

  override system settings. `False` means Dotenv will respect

  already-defined variables, and `True` means Dotenv will overwrite

  already-defined variables.


  ## Advanced Dotenv File Syntax


  You can add comments to your Dotenv file, on separate lines or after

  values. Values can be wrapped in single or double quotes. Multi-line

  values can be specified by wrapping the value in double-quotes, and

  using the "\n" character to represent newlines.


  The [spec file](spec/Configuration/Dotenv/ParseSpec.hs) is the best

  place to understand the nuances of Dotenv file parsing.


  ## Command-Line Usage


  You can call dotenv from the command line in order to load settings

  from one or more dotenv file before invoking an executable:


  ```shell

  $ dotenv -e mydotenvfile myprogram

  ```


  Aditionally you can pass arguments and flags to the program passed to

  Dotenv:


  ```shell

  $ dotenv -e mydotenvfile myprogram -- --myflag myargument

  ```


  or:


  ```shell

  $ dotenv -e mydotenvfile "myprogram --myflag myargument"

  ```


  Also, you can use a `--example` flag to use [dotenv-safe functionality](https://www.npmjs.com/package/dotenv-safe)

  so that you can have a list of strict envs that should be defined in the environment

  or in your dotenv files before the execution of your program. For instance:


  ```shell

  $ cat .env.example

  DOTENV=

  FOO=

  BAR=


  $ cat .env

  DOTENV=123


  $ echo $FOO

  123

  ```


  This will fail:

  ```shell

  $ dotenv -e .env --example .env.example "myprogram --myflag myargument"

  > dotenv: Missing env vars! Please, check (this/these) var(s) (is/are) set: BAR

  ```


  This will succeed:

  ```shell

  $ export BAR=123 # Or you can do something like: "echo ''BAR=123'' >> .env"

  $ dotenv -e .env --example .env.example "myprogram --myflag myargument"

  ```


  Hint: The `env` program in most Unix-like environments prints out the

  current environment settings. By invoking the program `env` in place

  of `myprogram` above you can see what the environment will look like

  after evaluating multiple Dotenv files.


  ## Author


  Justin Leitgeb


  ## License


  MIT


  ## Copyright


  (C) 2015-2017 [Stack Builders Inc.](http://www.stackbuilders.com)

'
license-name: MIT
