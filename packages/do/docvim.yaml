homepage: https://github.com/wincent/docvim
changelog-type: ''
hash: df7d48700c0e0f75ce58e02f035338318ced30a92a897fc831e9038eacc5e69e
test-bench-deps:
  hlint: -any
  bytestring: -any
  split: -any
  docvim: -any
  base: ==4.*
  tasty-golden: -any
  filepath: -any
  process: -any
  parsec: -any
  dlist: -any
  containers: -any
  lens: -any
  mtl: -any
  tasty-hunit: -any
  pretty-show: -any
  temporary: -any
  tasty: -any
  deepseq: -any
maintainer: greg@hurrell.net
synopsis: Documentation generator for Vim plug-ins
changelog: ''
basic-deps:
  split: -any
  docvim: -any
  base: ==4.8.*
  filepath: -any
  parsec: -any
  dlist: -any
  containers: -any
  lens: -any
  mtl: -any
  pretty-show: -any
  optparse-applicative: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
author: Greg Hurrell
latest: '0.2.0.0'
description-type: markdown
description: ! "# docvim: a documentation generator for Vim plug-ins\n\ndocvim is
  a documentation generator for Vim plug-ins, written in Haskell.\n\n## Quickstart\n\n```bash\n#
  Print Markdown-formatted help documentation for files in current directory\ndocvim\n\n#
  Write Markdown README + Vim help text file for $PLUGIN\ndocvim -c ~/code/$PLUGIN
  ~/code/$PLUGIN/doc/$PLUGIN.txt ~/code/$PLUGIN/README.md\n```\n\n## Usage\n\n```\ndocvim
  - a documentation generator for Vim plug-ins\n\nUsage: docvim [--version] [OUTFILES...]
  [-d|--debug] [-c|--directory DIRECTORY]\n              [-v|--verbose]\n  Generate
  documentation for a Vim plug-in\n\nAvailable options:\n  -h,--help                Show
  this help text\n  --version                Print version information\n  OUTFILES...
  \             Target file(s) for generated output (default:\n                           standard
  output)\n  -d,--debug               Print debug information during processing\n
  \ -c,--directory DIRECTORY Change to DIRECTORY before processing (default: \".\")\n
  \ -v,--verbose             Be verbose during processing\n```\n\n## Syntax\n\n```vim\n\"\"\n\"
  Docblocks start with a pair of double quotes, followed\n\" by standard Vim comments
  (with a double quote prefix)\n\" containing Markdown-like text and optional annotations\n\"
  that look like this:\n\"\n\" ```\n\" @command :Ack {pattern} {options}\n\" ```\n```\n\n###
  Supported Markdown features\n\n    # Top-level heading\n\n    ## Sub-heading\n\n
  \   --- (Horizontal dividers)\n\n    > Blockquote\n\n    `inline code`\n\n    ```\n
  \   fenced codeblocks (leading space syntax not supported)\n    ```\n\n    ![alt
  text](http://example.com/image.jpg)\n    (becomes a link in vimdoc, but an image
  in markdown)\n\n    - Lists.\n\n### Unsupported Markdown syntax\n\n```\n*foo* (emphasis;
  turns into Vim doc targets instead)\n\n*,+ (list syntax; just use - instead)\n\n<html>
  (we don't want ambiguity with things like <leader> and so on)\n```\n\n### Annotations\n\n-
  `@command`\n- `@dedent`\n- `@footer`\n- `@function`\n- `@indent`\n- `@mapping`\n-
  `@mappings`\n- `@option`\n- `@plugin`\n\n## Development\n\n### Convenience wrappers\n\n```bash\nbin/accept
  \ # Accept current \"golden\" test output.\nbin/docvim  # Run the docvim executable.\nbin/golden
  \ # Run just the \"golden\" tests.\nbin/haddock # Produce Haddock documentation.\nbin/lint
  \   # Run the linter.\nbin/tasty   # Run just the Tasty tests.\nbin/test    # Run
  all tests, including lints.\n```\n\nThese are wrappers for the explicit invocations
  described below.\n\n### Set-up\n\nYou can set-up a development environment using
  [Stack] (recommended) or [Cabal]:\n\n```bash\n# Stack:\nbrew install haskell-stack\nstack
  build\n\n# Cabal:\nbrew install cabal-install\ncabal sandbox init\ncabal install
  --only-dependencies --enable-tests\ncabal build\n```\n\n### Running\n\nRun using
  `stack exec` (or `cabal run`) and passing in docvim-specific `OPTIONS`:\n\n```bash\n#
  Stack:\nstack exec docvim [OPTIONS]\n\n# Cabal:\ncabal run -- [OPTIONS]\n```\n\nYou
  can also run the modules from inside the REPL:\n\n```bash\n# Stack:\nstack repl\n>
  pp \"let l:test=1\" -- pretty-prints AST\n\n# Cabal:\ncabal repl\n> import Docvim.Parse\n>
  pp \"let l:test=1\" -- pretty-prints AST\n```\n\n### Building\n\n```bash\nstack
  build --file-watch\n```\n\n### Building and viewing the code-level documentation\n\n```bash\n#
  Stack:\nstack haddock\nopen .stack-work/dist/x86_64-osx/Cabal-1.22.5.0/doc/html/docvim/index.html\n\n#
  Cabal:\ncabal haddock --executables\nopen dist/doc/html/docvim/docvim/index.html\n```\n\n###
  Testing\n\n```bash\n# Stack:\nstack test        # Runs all test suites, including
  linting.\nstack test :tasty # Runs just the Tasty test suite.\n\n# Cabal:\ncabal
  test       # Runs all test suites, including linting.\ncabal test tasty # Runs just
  the Tasty test suite.\n```\n\n#### Updating \"golden\" files\n\n```bash\n# Stack:\nstack
  test --test-arguments=--accept          # Runs all test suites.\nstack test :tasty
  --test-arguments=--accept   # Runs just the Tasty test suite.\n\n# Cabal:\ncabal
  test --test-options=---accept           # Runs all test suites.\ncabal test tasty
  --test-options=---accept     # Runs just the Tasty test suite.\n```\n\n### Linting\n\n```bash\n#
  Stack:\nstack test              # Runs linter as part of overall set of suites.\nstack
  test :hlint       # Runs linter alone.\n\n# Cabal:\ncabal install hlint     # (First-time
  only).\ncabal test              # Runs linter as part of overall set of suites.\ncabal
  test hlint        # Runs linter alone.\n\nhlint src               # If you have
  HLint installed under $PATH.\n```\n\n## FAQ\n\n### Why a new tool and not an existing
  one like [Vimdoc]?\n\n* I wanted to target multiple output formats (Vim help files
  and Markdown).\n* I wanted total control over the presentation of the output.\n*
  It's fun to build new things from scratch.\n* The project is a great fit for my
  learn-me-a-Haskell goal this year.\n\n### Why is it called \"Docvim\"?\n\n\"Vimdoc\"
  was the first name that occurred to me when I started this project, but:\n\n* The
  number one hit for \"vimdoc\" is [this online copy of Vim's own documentation](http://vimdoc.sourceforge.net/).\n*
  The name \"Vimdoc\" is already taken by [a similar project](https://github.com/google/vimdoc).\n\nSo,
  in a remarkable flash of profound creativity, I settled on \"Docvim\" instead, which
  right now yields this pleasing search result:\n\n> Did you mean: dacvim\n\n[Cabal]:
  https://www.haskell.org/cabal/\n[Stack]: http://haskellstack.org/\n[Vimdoc]: https://github.com/google/vimdoc\n"
license-name: MIT
