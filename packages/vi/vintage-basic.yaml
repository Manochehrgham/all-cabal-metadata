changelog-type: ''
hash: e5c68cc01f8e1f5866b24fb2e5e7849e8d1e87b4842b663e94a8fa7768bad78d
test-bench-deps: {}
synopsis: Interpreter for microcomputer-era BASIC
changelog: ''
basic-deps:
  base: ! '>=3'
  time: ! '>=1.1'
  filepath: ! '>=1.1'
  process: ! '>=1'
  parsec: ! '>=2.1'
  HUnit: ! '>=1.2'
  array: ! '>=0.1'
  regex-base: ! '>=0.72'
  regex-posix: ! '>=0.72'
  mtl: ! '>=1.1'
  random: ! '>=1'
  directory: ! '>=1'
all-versions:
- '1.0'
- '1.0.1'
latest: '1.0.1'
description-type: text
description: ! "To compile:\r\n\r\nrunhaskell Setup.hs configure\r\nrunhaskell Setup.hs
  build\r\n\r\nTo run unit tests:\r\n\r\nrunhaskell Setup.hs test\r\n\r\nTo install:\r\n\r\nrunhaskell
  Setup.hs install\r\n\r\nYou can then run the resulting program as\r\n\r\n  vintbas
  [<.bas source file> ...]\r\n\r\nThe monad transformer I created is CPST.  Monad\r\ntransformers
  are basically monad building-blocks.  You\r\nstart with the identity monad and stack
  monad\r\ntransformers on top of it to build a combined monad.\r\nThe ordering is
  very important.  There are monad\r\ntransformers in the Control.Monad.Trans library,\r\nso
  I used them.  Unfortunately you can't stack any\r\nmore monad transformers on top
  of CPST.  It has to be on\r\ntop, because of the type of the shift morphism.  The\r\nstandard
  ContT transformer is similar to my CPST, but\r\ndefines callCC, not shift.  Take
  a look at the type\r\nof callCC in my code.  Notice every time you see a\r\nCPST,
  it is followed by an o.  Notice that every\r\nother morphism in CPST has the same
  property, except\r\nshift.  That is the key to why it's no longer stackable -\r\nmonad
  transformers can take only two type parameters, not\r\nthree.  But I like shift
  and think it's neat that I\r\ncan define callCC in terms of it and reset, but not\r\nvice-versa.
  \ So there.  Plus, my shift and callCC are\r\nrank-3 polymorphic!  Nobody else achieves
  that flexibility.\r\n\r\nOther things we could do:\r\n* Pre-check types\r\n* Pre-check
  labels, generate code in place of labels\r\n* Convert variable references to IORefs\r\n
  \ Is it easiest to do these with staging?\r\n* Consider sending errors to stderr.\r\n*
  On syntax error, consider printing line with marked error.\r\n"
