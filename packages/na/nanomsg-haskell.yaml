changelog-type: text
hash: c7edd701775c835adfa60786f157eb23371ca863b8095873e9154fdf2c6f95f4
test-bench-deps:
  bytestring: ! '>=0.9.0 && <0.11'
  test-framework: -any
  base: ! '>=4.5 && <5'
  test-framework-quickcheck2: -any
  criterion: -any
  nanomsg-haskell: -any
  test-framework-th: -any
  binary: -any
  QuickCheck: -any
  zeromq4-haskell: -any
synopsis: Bindings to the nanomsg library
changelog: ! "0.2.2\n  * Added a thin binary based serialization layer\n  * Benchmarks
  now depend on ZMQ4\n\n"
basic-deps:
  bytestring: ! '>=0.9.0 && <0.11'
  base: ! '>=4.5 && <5'
  binary: ! '>=0.7 && <0.8'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.2.1.1'
- '0.2.2'
latest: '0.2.2'
description-type: markdown
description: ! "# nanomsg-haskell\n\nThis is a Haskell binding for the nanomsg library:
  <http://nanomsg.org/>.\n\nThere's support for [blocking](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:threadWaitRead)
  send and recv, a non-blocking receive,\nand for all the socket types and the functions
  you need to wire them up and\ntear them down again.\n\nMost socket options are available
  through accessor and mutator\nfunctions. Sockets are typed, transports are not.\n\n\n##
  Building\n\nYou would normally make sure the nanomsg library is on your system and
  then\ninstall from Hackage using \"cabal update && cabal install nanomsg-haskell\",\nbut
  can build from the repository following these steps:\n\n  1. Build and install nanomsg
  (and zeromq, if you are building benchmarks)\n  1. git clone https://github.com/ivarnymoen/nanomsg-haskell\n
  \ 1. cd nanomsg-haskell && cabal sandbox init\n  1. cabal install --dependencies-only
  [--enable-tests] [--enable-benchmarks]\n  1. cabal configure [--enable-tests] [--enable-benchmarks]\n
  \ 1. cabal build\n  1. [cabal test]\n\n\n## Usage\n\nSimple pub/sub example:\n\nServer:\n```haskell\nmodule
  Main where\n\nimport Nanomsg\nimport qualified Data.ByteString.Char8 as C\nimport
  Control.Monad (mapM_)\nimport Control.Concurrent (threadDelay)\n\nmain :: IO ()\nmain
  = do\n    withSocket Pub $ \\s -> do\n        _ <- bind s \"tcp://*:5560\"\n        mapM_
  (\\num -> sendNumber s num) (cycle [1..1000000])\n    where\n        sendNumber
  s number = do\n            threadDelay 1000        -- let's conserve some cycles\n
  \           let numAsString = show number\n            send s (C.pack numAsString)\n```\n\nClient:\n```haskell\nmodule
  Main where\n\nimport Nanomsg\nimport qualified Data.ByteString.Char8 as C\nimport
  Control.Monad (forever)\n\nmain :: IO ()\nmain = do\n    withSocket Sub $ \\s ->
  do\n        _ <- connect s \"tcp://localhost:5560\"\n        subscribe s $ C.pack
  \"\"\n        forever $ do\n            msg <- recv s\n            C.putStrLn msg\n```\n\nNonblocking
  client:\n```haskell\nmodule Main where\n\nimport Nanomsg\nimport qualified Data.ByteString.Char8
  as C\nimport Control.Monad (forever)\nimport Control.Concurrent (threadDelay)\n\nmain
  :: IO ()\nmain =\n    withSocket Sub $ \\s -> do\n        _ <- connect s \"tcp://localhost:5560\"\n
  \       subscribe s $ C.pack \"\"\n        forever $ do\n            threadDelay
  700           -- let's conserve some cycles\n            msg <- recv' s\n            C.putStrLn
  $ case msg of\n                Nothing -> C.pack \"No message\"\n                Just
  s  -> s\n```\n"
