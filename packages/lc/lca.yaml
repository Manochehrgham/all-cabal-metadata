homepage: http://github.com/ekmett/lca/
changelog-type: markdown
hash: 34f36899e6f359483ada80a5a9e3a57c9bee005990ade5491f6c81bbf5b3ed9a
test-bench-deps:
  base: -any
  doctest: ! '>=0.8'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: O(log n) persistent on-line lowest common ancestor calculation without preprocessing
changelog: ! '0.3

  ---

  * Updated to build without warnings in the wake of GHC 7.10.

  * Use (and re-export) the new overloaded `null` and `length` from Prelude on GHC
  7.10+

  * Modified `mkeep`, `mdrop` and `mlca` to parameterize them by monoid homomorphisms.
  This permits cheaper summaries to be calculated over the dropped path, when only
  a portion of the information in the path is required.


  0.2.4

  -----

  * Fixed a bug in path reconstruction


  0.2.3

  -----

  * Improved documentation to also note that this package also provides an improvement
  in the online version of the [level ancestor problem](http://en.wikipedia.org/wiki/Level_ancestor_problem).


  0.2.2

  -----

  * Added README

  * Better haddock coverage

  * Added links to documentation

'
basic-deps:
  base: ! '>=4 && <5'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.3'
author: Edward A. Kmett
latest: '0.3'
description-type: markdown
description: ! 'lca: _O(log h)_ Online Lowest Common Ancestor Search

  ====================================================


  [![Build Status](https://secure.travis-ci.org/ekmett/lca.png?branch=master)](http://travis-ci.org/ekmett/lca)


  This package provides a reference implementation of my skew binary random access
  algorithm for performing an

  online lowest common ancestor in logarithmic time _without preprocessing_. This
  improves the previous known

  asymptotic bound for this problem from _O(h)_ to _O(log h)_, where _h_ is the height
  of the tree. Mostly

  importantly this bound is completely independent of the width or overall size of
  the tree, enabling you to

  calculate lowest common ancestors in a distributed fashion with good locality.


  While algorithms exist that that provide _O(1)_ query time, they all require _O(n)_
  preprocessing, where _n_ is

  the size of the entire tree, and so are less suitable for LCA search in areas such
  as revision control where the

  tree is constantly updated, or distributed computing where the tree may be too large
  to fit in any one computer''s

  memory.


  Slides are available as [Purely Functional Data Structures for On-Line LCA](http://www.slideshare.net/ekmett/skewbinary-online-lowest-common-ancestor-search)


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
