changelog-type: ''
hash: 84704c26d861c5e1375b63548dd3ef57b8f0c6f4d09ff5ec6bf8d1aed59e5919
synopsis: Push XML from/to client to/from server over XMPP or HTTP
changelog: ''
all-versions:
- '0.0.0.0'
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
- '0.0.0.5'
- '0.0.0.6'
- '0.0.0.7'
- '0.0.0.8'
- '0.0.0.9'
- '0.0.0.10'
- '0.0.0.11'
- '0.0.0.12'
- '0.0.0.13'
- '0.0.0.14'
- '0.0.0.15'
- '0.0.0.16'
- '0.0.0.17'
- '0.0.0.18'
latest: '0.0.0.18'
description-type: haddock
description: ! "examples/TestSimple.hs\n\nextensions\n\n* ScopedTypeVariables\n\n>
  module TestSimple (testSimple) where\n>\n> import Control.Monad\n> import Control.Concurrent\n>
  import Data.Maybe\n> import Data.Pipe\n> import Data.Pipe.ByteString\n> import System.IO\n>
  import Text.XML.Pipe\n> import Network.XmlPush\n> import Network.XmlPush.Simple\n>\n>
  testSimple :: Handle -> IO ()\n> testSimple h = do\n> \t(sp :: SimplePusher Handle)
  <- generate (One h) ()\n> \tvoid . forkIO . runPipe_ $ readFrom sp\n> \t\t=$= convert
  (xmlString . (: []))\n> \t\t=$= toHandle stdout\n> \trunPipe_ $ fromHandle stdin\n>
  \t\t=$= xmlEvent\n> \t\t=$= convert fromJust\n> \t\t=$= xmlNode []\n> \t\t=$= writeTo
  sp\n\nexamples/simpleClient\n\n> import Network\n> import TestSimple\n>\n> main
  :: IO ()\n> main = testSimple =<< connectTo \"localhost\" (PortNumber 54492)\n\nexamples/simpleServer\n\n>
  import Control.Monad\n> import Control.Concurrent\n> import Network\n>\n> import
  TestSimple\n>\n> main :: IO ()\n> main = forever . (void . forkIO . testSimple .
  fst3 =<<) . accept\n> \t=<< listenOn (PortNumber 54492)\n>\n> fst3 :: (a, b, c)
  -> a\n> fst3 (x, _, _) = x\n"
