homepage: https://github.com/chrisdone/labels#readme
changelog-type: text
hash: a1545f41e2cb55f940028bd85dbe28f941cbe4d572e483cfd7064c7d14689529
test-bench-deps: {}
maintainer: chrisdone@gmail.com
synopsis: Anonymous records via named tuples
changelog: ! "0.2.0:\n\t* Add \"reflect\" and \"labels\" functions.\n\t* Drop support
  for GHC <8.\n\n0.1.2:\n\t* Add docs for \"project\" function.\n\n0.1.1:\n\t* Add
  \"project\" function.\n\n0.1.0:\n\t* Drop the convenience accessor #foo. Must use
  get #foo\n\n0.0.0:\n\t* First version\n"
basic-deps:
  base: ! '>=4.9.0.0 && <5'
  template-haskell: -any
all-versions:
- '0.0.0'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
author: Chris Done
latest: '0.2.0'
description-type: markdown
description: ! "# labels\n\nDeclare and access tuple fields with labels\n\nThis package
  is experimental, exploring the design space opened up by\nthe implemented and to-be-implemented
  work on extensible records in GHC.\n\n*Note: You need GHC 8.0.1 for the `#foo` syntax,
  otherwise you have to\n use `$(\"foo\")` which works on GHC 7.10.*\n\n## Basic examples\n\nThe
  [haddock docs are here.](https://chrisdone.github.io/labels/)\n\nEnable these extensions:\n\n*
  In GHCi: `:set -XOverloadedLabels -XTypeOperators -XDataKinds -XFlexibleContexts`\n\n*
  In a module: `{-# LANGUAGE OverloadedLabels, TypeOperators, DataKinds, FlexibleContexts
  #-}`\n\nLet's use GHCi:\n\n``` haskell\n> import Labels\n> :set -XOverloadedLabels
  -XTypeOperators -XDataKinds -XFlexibleContexts\n```\n\n<table>\n<tr><td>Construct
  a record</td><td><pre lang=\"haskell\">\n> (#foo := \"hi\", #bar := 123)\n(#foo
  := \"hi\",#bar := 123)\n</pre></td></tr>\n<tr><td>Get fields of a record</td><td><pre
  lang=\"haskell\">\n> get #bar (#foo := \"hi\", #bar := 123)\n123\n</pre></td></tr>\n<tr><td>Set
  fields of a record</td><td><pre lang=\"haskell\">\n> set #bar 66 (#foo := \"hi\",
  #bar := 123)\n(#foo := \"hi\",#bar := 66)\n</pre></td></tr>\n<tr><td>Modify fields
  of a record</td><td><pre lang=\"haskell\">\n> modify #mu (*0.1) (#bar := \"hi\",
  #mu := 123)\n(#bar := \"hi\",#mu := 12.3)\n</pre></td></tr>\n<tr><td>Add fields
  to a record</td><td><pre lang=\"haskell\">\n> cons (#mu := [1,2,3]) (#foo := \"hi\",
  #bar := 123)\n(#mu := [1,2,3],#foo := \"hi\",#bar := 123)\n</pre></td></tr>\n<tr><td>Abstraction</td><td><pre
  lang=\"haskell\">\n> let double field record = set field (get field record * 2)
  record\n> double #mu (#bar := \"hi\", #mu := 123)\n(#bar := \"hi\",#mu := 246)\n</pre></td></tr>\n</table>\n"
license-name: BSD3
