homepage: https://github.com/abhinav/language-thrift
changelog-type: markdown
hash: 73a45e34324e9a012e583f852cf7036f3e545b8f8d4807e4a073d0124b8ed13a
test-bench-deps:
  ansi-wl-pprint: -any
  language-thrift: -any
  base: -any
  hspec: ! '>=2.0'
  text: -any
  megaparsec: -any
  QuickCheck: ! '>=2.5'
  hspec-discover: ! '>=2.1'
maintainer: Abhinav Gupta <mail@abhinavg.net>
synopsis: Parser and pretty printer for the Thrift IDL format.
changelog: ! "0.8.0.0\n=======\n\nThis release contains breaking changes. The number
  of transitive dependencies\nhas been reduced significantly.\n\n-   Switched parser
  to `megaparsec`. `trifecta` and `parsers` bring too many\n    dependencies with
  them.\n-   Drop support for `wl-pprint`. Only `ansi-wl-pprint` is supported now.\n-
  \  Drop dependency on `lens`. Lenses for fields of the AST elements are still\n
  \   provided but prisms are not. Use `Control.Lens.makePrisms` to derive your\n
  \   own if needed.\n\n0.7.0.1\n=======\n\n-   Drop use of `TemplateHaskell`.\n\n0.7.0.0\n=======\n\n-
  \  Added source annotations to all `TypeReference` and `ConstValue`\n    constructors.\n-
  \  Added `name` and `srcAnnot` lenses for `Type` and `Definition`.\n\n0.6.2.0\n=======\n\n-
  \  Use more concrete types for lenses which don't need overloading.\n\n0.6.1.0\n=======\n\n-
  \  Output generated by the `ansi-wl-pprint` pretty printer will be colored\n    using
  ANSI escape codes.\n\n0.6.0.1\n=======\n\n-   Export `Pretty` instances from `Language.Thrift.Types`
  instead of requiring\n    a separate import of the corresponding `Pretty` module.\n\n0.6.0.0\n=======\n\n-
  \  Added a pretty printer based on `ansi-wl-pprint`.\n-   Both pretty printing modules
  now export instances of `Pretty` for relevant\n    elements of the AST. These instances
  use `defaultConfig` for printing.\n\n0.5.0.0\n=======\n\nThe AST representation
  has been overhauled to be more consistent and\naccessible. As a result, this release
  contains a number of breaking changes:\n\n-   Moved `Header` records into `Include`
  and `Namespace` types.\n-   Moved `ConstDefinition` record into separate type, `Const`.\n-
  \  Moved `ServiceDefinition` record into separate type, `Service`.\n-   Moved `Type`
  records into separate types: `Typedef`, `Enum`, `Struct`,\n    `Union`, `Exception`,
  `Senum`.\n-   Renamed `FieldType` to `TypeReference`.\n-   Renamed parser and pretty
  printer for `TypeReference` to `typeReference`.\n-   Renamed the following record
  fields: `constType` to `constValueType`,\n    `typedefType` to `typedefTargetType`,
  `fieldType` to `fieldValueType`, and\n    `fieldDefault` to `fieldDefaultValue`.\n-
  \  Hide `function` parser and pretty printer.\n-   Moved type annotations for defined
  types into the records for the types\n    themselves.\n\nOther changes:\n\n-   Added
  lenses and prisms for AST types where appropriate.\n-   Parsing will fail if the
  end of the document is not reached when the parser\n    stops. This fixes the bug
  where the parser would stop half way through a\n    file when it saw a recoverable
  error.\n-   Added source annotations to headers, type references (`DefinedType`)
  and\n    constant value references (`ConstIdentifer`).\n-   Added `i8` as an alias
  for `byte`.\n-   Type annotations are now allowed to have no associated value.\n-
  \  Expose parsers and pretty printers for different headers and definitions.\n-
  \  Fixed a bug which would cause parsing to fail if a definition ended with a\n
  \   semicolon or a comma.\n-   Drop dependency on mtl.\n\n0.4.0.0\n=======\n\n-
  \  Add pretty printing module.\n-   Parsers of different constructors are no longer
  exported by the parsing\n    module; instead only the parsers for their corresponding
  types are\n    exported.\n-   Rename record for field requiredness from `fieldRequiredNess`
  to\n    `fieldRequiredness`.\n\n0.3.0.0\n=======\n\n-   Allow changing the underlying
  parser to any parser that implements the\n    `TokenParsing` class from `parsers`.\n-
  \  Add `thriftIDLParser` for standard use cases.\n-   Add `Language.Thrift.Parser.Trifecta`
  with a standard Trifecta-based\n    parser.\n\n0.2.0.0\n=======\n\n-   Track starting
  positions in source annotations.\n-   Move docs to a separate field.\n\n0.1.0.1\n=======\n\n-
  \  Allow `base` 4.9.\n\n0.1.0.0\n=======\n\n-   Initial release.\n"
basic-deps:
  ansi-wl-pprint: ! '>=0.6 && <0.7'
  base: ! '>=4.7 && <4.9'
  text: ! '>=1.2'
  megaparsec: ! '>=4.0 && <5.0'
  transformers: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.1.0'
- '0.6.2.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.8.0.0'
author: Abhinav Gupta
latest: '0.8.0.0'
description-type: markdown
description: ! "[![build-status]](https://travis-ci.org/abhinav/language-thrift)\n\n`language-thrift`
  provides a parser and pretty printer for the [Thrift IDL\nformat]. In addition to
  parsing the IDL, it keeps track of Javadoc-style\ncomments (`/** ... */`) and attaches
  them to the type, service, function, or\nfield, above which they were added. These
  are retained when the document is\nsent through the pretty printer.\n\nThe parser
  uses [`megaparsec`] and the pretty printer [`ansi-wl-pprint`]. The\npretty printer
  can produce syntax highlighted output.\n\nHaddock-generated docs are available on
  [Hackage] and [here].\n\n  [build-status]: https://travis-ci.org/abhinav/language-thrift.svg?branch=master\n
  \ [Thrift IDL format]: http://thrift.apache.org/docs/idl\n  [`megaparsec`]: http://hackage.haskell.org/package/megaparsec\n
  \ [`ansi-wl-pprint`]: http://hackage.haskell.org/package/ansi-wl-pprint\n  [Hackage]:
  http://hackage.haskell.org/package/language-thrift\n  [here]: http://abhinavg.net/language-thrift/\n"
license-name: BSD3
