changelog-type: markdown
hash: aad304e4ad62fe3525556fc1ad2d51ca2028f3a52a9f4ad1f5643b3e3098b03e
test-bench-deps: {}
synopsis: LambdaCms Core subsite for Yesod apps
changelog: ! 'Change log

  ==========


  #### dev

  * ...


  #### 0.1.0.0

  * Fixes compilation issues with LTS Haskell 2.x


  #### 0.0.8.0

  * Fixes action logging to also work outside of LambdaCms.Core


  #### 0.0.7.2

  * Fixes broken package


  #### 0.0.7.1

  * Initial upload to Hackage

'
basic-deps:
  shakespeare: -any
  friendly-time: ! '>=0.3 && <1.0'
  bytestring: ! '>=0.9 && <0.11'
  wai: -any
  yesod-core: -any
  base: ! '>=4.3 && <5'
  time: ! '>=1.4.2 && <1.5'
  persistent: -any
  text: -any
  uuid: ! '>=1.3.3 && <1.4'
  data-default: -any
  containers: ! '>=0.5.5.1 && <0.6'
  yesod: -any
  gravatar: -any
  yesod-form: -any
  old-locale: ! '>=1.0.0.5 && <1.0.1.0'
  esqueleto: -any
  blaze-html: -any
  mime-mail: ! '>=0.4.5.2 && <0.5'
  file-embed: -any
  template-haskell: -any
  lists: -any
  yesod-auth: -any
all-versions:
- '0.0.7.1'
- '0.0.7.2'
- '0.0.7.3'
- '0.0.8.0'
- '0.1.0.0'
latest: '0.1.0.0'
description-type: markdown
description: ! "\n\n```\n                           ,                     _\n                          /
  \  _, _   /  _/ _,   / ) _  _,\n                         (__ (/ //) () (/ (/   (__
  //)_)\n\n                   developer friendly :: type safe :: performant\n```\n\n\n#
  Rationale\n\nLambdaCms is a set of packaged libraries —containing subsites for the\n[Yesod
  application framework](http://www.yesodweb.com)— which allow rapid\ndevelopment
  of robust and highly performant websites with content management\nfunctionality.\n\nThe
  `lambdacms-*` packages each provide some functionality and can depend\non eachother
  as they depend on other packages.\nThe only mandatory package is `lambdacms-core`
  (this package), it provides\nfunctionality that all other `lambdacms-*` packages
  depend on.\n\nAs mentioned, each `lambdacms-*` package contains a subsite which
  is\n\"mounted\" in a standard Yesod application, which we will refer to as\n\"the
  base application\" or simply \"base\".\nBefore a packaged subsite can be mounted,
  the package needs to be\nincluded as a dependency to the base app's `.cabal` file.
  \ After that\nsome glue code needs to be added to the base app, as explained below.\n\nIn
  the base app we have to:\n\n* configure a database connection,\n* organize the admin
  backend's menu,\n* specify the authentication strategies for admins, and\n* define
  admin user roles and their permissions.\n\nIn the base app we optionally may also:\n\n*
  override default behavior,\n* override UI texts,\n* provide a means to send email
  notifications, and last but not least,\n* write the themes so the website can actually
  be visited (recommended).\n\n\n# Setting up a site with LambdaCms\n\nThis section
  walk through the steps of setting up a site with LambdaCms.\n\n\n### Prerequisites\n\nYou
  need to be reasonably acquinted with Haskell in order to follow\nalong with this
  guide. To learn basic Haskell skills we recommend\nBrent Yorgey's excellent\n[Introduction
  to Haskell](http://www.seas.upenn.edu/~cis194/spring13)\ncourse.\n\nBesides Haskell
  you need to be somewhat familliar with:\n\n* the web technologies (HTTP, HTML, CSS,
  JS, REST),\n* RDBMS/SQL (LambdaCms makes use of a relational database), and\n* the
  Yesod web application framework (for which an [awesome book](http://yesodweb.com/book)
  exists).\n\n\n### Non-Haskell dependencies\n\nFor the connection with the database,
  Haskell libraries typically compile\nagainst non-Haskell libraries. One of the following
  libraries needs to be\navailable:\n\n* For Postgres:\n\n  * Debian/Ubuntu: `libpq-dev`\n
  \ * CentOS/Fedora/RHEL: `postgresql-devel`\n  * Homebrew (OSX): `postgres`\n\n*
  For Mysql:\n\n  * Debian/Ubuntu: `libmysqlclient-dev`\n  * CentOS/Fedora/RHEL: `mysql-devel`\n
  \ * Homebrew (OSX): `mysql`\n\n* For Sqlite\n\n  * Debian/Ubuntu: `libsqlite3-dev`\n
  \ * CentOS/Fedora/RHEL: `sqlite-devel`\n  * Homebrew (OSX): `sqlite`\n\nOn other
  platforms these packages might have different names, but are\nmost likely available.\n\nIf
  you are going to use a database other than Sqlite (which directly writes\nto a file),
  you need to have a database accessible from where you run your\nsite. This means
  you might have to install and setup a database server locally.\n\n\n### The tool
  chain\n\nMake sure to have **GHC** 7.8.3+, **cabal-install** 1.20+, **happy** and
  **alex**\ninstalled; and their binaries available from your shell's `$PATH`.\n\nUse
  the following command to check your system meets the requirements:\n\n```bash\nfor
  c in ghc cabal happy alex; do $c -V | head -n1; done\n```\n\nWhen good to go the
  output should be similar to:\n\n```\nThe Glorious Glasgow Haskell Compilation System,
  version 7.8.4\ncabal-install version 1.20.0.3\nHappy Version 1.19.5 Copyright (c)
  1993-1996 Andy Gill, Simon Marlow (c) 1997-2005 Simon Marlow\nAlex version 3.1.4,
  (c) 2003 Chris Dornan and Simon Marlow\n```\n\nIn case you are **not** good to go,
  you may want to follow the\n[per operating system installation guides on the haskell.org
  website](https://www.haskell.org/downloads)\nwhich provides instructions for installing
  the tool chain and setting\nup your `$PATH`.\n\n\n### Create a project folder\n\nChoose
  a name for your project.  In below we chose `mysite`, which you\nprobably want to
  change. Make sure to choose a valid unix file name\nto avoid naming issues.  Now
  create a directory for your project and\n`cd` into it, by running the following
  commands:\n\n```bash\nexport PROJECT_NAME=mysite; mkdir $PROJECT_NAME; cd $PROJECT_NAME\n```\n\n\n###
  Initialize a cabal sandbox\n\nTo avoid running into version conflicts with other
  Haskell projects\nyou might be working on from the same system, we setup a cabal
  sandbox.\n\nFrom within your project's folder run the following commmand:\n\n```bash\ncabal
  sandbox init\n```\n\n\n### Using LTS Haskell\n\nTo avoid spending too much time
  on build issues we use and recommend\n[LTS Haskell](https://github.com/fpco/lts-haskell#readme).\n\nCurrently
  we develop and test LambdaCms only against the `2.x`\nLTS Haskell releases. As minor
  releases of LTS Haskell should never\ncontain breaking changes, you can safely use
  the latest release of\na major LTS version.\n\nRun the following commands from within
  your project's folder,\nto install the most recent LTS Haskell package set in the
  `2.x` series.\n\n```bash\nwget http://www.stackage.org/lts/2/cabal.config\ncabal
  update\n```\n\n\n### Initializing the base application\n\nFirst we need to install
  the `yesod` command, this command requires a\nlot of dependent packages to be downloaded
  and build (may a while).\nRun this from your project's folder:\n\n```bash\ncabal
  install yesod-bin\n```\n\nWith the following command you create a \"scaffolded\"
  Yesod application.\nThe command is interactive; you need to supply some configuration
  values.\nPick the database of your choice, and choose a project name:\n\n```bash\nyesod
  init --bare\n```\n\nIf you have chosen a database other than Sqlite, you need to
  create a\ndatabase and a sufficiently priviledged database user, and set these\ncredentials
  in the `config/setting.yml` file.\n\nThis installs all dependencies and builds the
  scaffoled application \n(may take a while):\n\n```bash\ncabal install -j --enable-tests
  --max-backjumps=-1 --reorder-goals\n```\n\nIn case you experience problems with
  `cabal install` try changing\n`-j` into `-j1` to prevents concurrent building, and/or
  simply retry\nthe command until you consistently run into the same error.\n\nWhen
  you experience problems during builds, while using LTS `2.x`,\nwe consider this
  a bug. Please\n[raise an issue](https://github.com/lambdacms/lambdacms-core/issues).\n\n\n###
  Testing your Yesod app\n\nThe following commands will run your scaffolded Yesdo
  application\nin development mode.\n\n```bash\nyesod devel\n```\n\nNow test it by
  pointing the browser to:\n[`http://localhost:3000`](http://localhost:3000)\n\nIf
  all went well you are ready to add LambdaCms to your app.\n\n\n### Patching a freshly
  init'ed Yesod app to use `lambdacms-core`\n\nTo add `lambdacms-core` to a freshly
  initialized Yesod application a number\nof files need to be edited. We have prepared
  a patch-set to simplify this\nprocess into a couple of commands.\n\nFirst we need
  to download the patches by cloning the repository, we do so in\n`/tmp`. Then we
  apply the patches with the good old `patch` command.\n\nRun the following from the
  root of your newly created Yesod project:\n\n```bash\n(cd /tmp; git clone https://github.com/lambdacms/lambdacms-patches.git)\npatch
  -p1 < /tmp/lambdacms-patches/all_patches_combined.patch\n```\n\nBecause the cabal
  file has a different name for each project\n(i.e. `<project_name>.cabal`) the patch
  command will notice a patched file\nis missing (we named it `project_name.cabal`).\nWhen
  the patch command tries to patch this file you will be prompted for\nthe name of
  your projects cabal file, after providing the name it will\nsuccessfully complete
  patching.\n\n\n#### Alternatives to the patch set\n\nThere are two alternatives
  to using the patch set:\n\n1. Patch files individually, how to do so is explained
  in the `lambdacms-patches`\n   [README](https://github.com/lambdacms/lambdacms-patches/blob/master/README.md).\n2.
  Follow the [Getting Started Manually](https://github.com/lambdacms/lambdacms-core/wiki/Getting-Started-Manually)\n
  \  guide on the wiki.\n\n\n### Configure the initial administrator\n\nBy default
  the application uses Mozilla's [Persona](https://persona.org)\nto log in: the email
  address used to log in need to be registered with Persona.\nIt is recommended to
  use an email address of a Persona account for\ndevelopment as it simplifies logging
  in during development.\n\nEdit `config/settings.yml` to insert a valid email address.\n\n```yaml\nadmin:
  \"_env:LAMBDACMS_ADMIN:<email address>\"\n```\n\nReplace `<email address>` with
  the email address of an initial administrator\nor developer, so the admin inteface
  can be accessed.\n\n\n### Enjoy!\n\nAfter applying the patches `lambdacms-core`
  is installed in your Yesod application.\nRun `cabal install` (possibly with `-j1`)
  to fetch and build the dependencies.\nThen run the development server.\n\n    yesod
  devel\n\nNow point your browser to\n[`http://localhost:3000/admin`](http://localhost:3000/admin)
  and you will be\nprompted to login.  The setup as described above has selected Mozilla's\nPersona
  as the only means of authentication.  In `config/settings.yml`\nyou have provided
  an email address for the admin user that is created\nif no users exist. If this
  email address is known to Mozilla Persona\nthen you can procede to log in.\n\n\n#
  License\n\nAll code in this repository is released under the MIT license, as specified\nin
  the [LICENSE file](https://github.com/lambdacms/lambdacms-core/blob/master/LICENSE).\n\n\n"
