homepage: http://github.com/LambdaHack/LambdaHack
changelog-type: markdown
hash: 5308b99a7a2b4efc0269dac31aec82a1a55a8571cb96f1122407d3fc3c5949d3
test-bench-deps:
  bytestring: ! '>=0.9.2 && <1'
  stm: ! '>=2.4 && <3'
  base: ! '>=4 && <5'
  hsini: ! '>=0.2 && <2'
  unordered-containers: ! '>=0.2.3 && <1'
  text: ! '>=0.11.2.3 && <2'
  filepath: ! '>=1.2.0.1 && <2'
  async: ! '>=2 && <3'
  data-default: -any
  array: ! '>=0.3.0.3 && <1'
  containers: ! '>=0.5.3.0 && <1'
  enummapset-th: ! '>=0.6.0.0 && <1'
  vector-binary-instances: ! '>=0.2 && <1'
  keys: ! '>=3 && <4'
  binary: ! '>=0.7 && <1'
  assert-failure: ! '>=0.1 && <1'
  ghc-prim: ! '>=0.2'
  old-time: ! '>=1.0.0.7 && <2'
  zlib: ! '>=0.5.3.1 && <1'
  mtl: ! '>=2.0.1 && <3'
  hashable: ! '>=1.1.2.5 && <2'
  pretty-show: ! '>=1.6 && <2'
  transformers: ! '>=0.3 && <1'
  random: ! '>=1.1 && <2'
  deepseq: ! '>=1.3 && <2'
  LambdaHack: -any
  template-haskell: ! '>=2.6 && <3'
  miniutter: ! '>=0.4.4 && <2'
  vector: ! '>=0.10 && <1'
  directory: ! '>=1.1.0.1 && <2'
maintainer: Mikolaj Konarski <mikolaj.konarski@funktory.com>
synopsis: A game engine library for roguelike dungeon crawlers
changelog: ! "## [v0.5.0.0, aka 'Halfway through space'](https://github.com/LambdaHack/LambdaHack/compare/v0.4.101.0...v0.5.0.0)\n\n-
  let AI put excess items in shared stash and use them out of shared stash\n- let
  UI multiple items pickup routine put items that don't fit into equipment into shared
  stash, if possible, not into inventory pack\n- re-enable the ability to hear close,
  invisible foes\n- add a few more AI and autonomous henchmen tactics (CTRL-T)\n-
  keep difficulty setting over session restart\n- change some game start keybindings\n-
  replace the Duel game mode with the Raid game mode\n- various bugfixes, minor improvements
  and balancing\n\n## [v0.4.101.0, aka 'Officially fun'](https://github.com/LambdaHack/LambdaHack/compare/v0.4.100.0...v0.4.101.0)\n\n-
  the game is now officially fun to play\n- introduce unique boss monsters and unique
  artifact items\n- add animals that heal the player\n- let AI gang up, attempt stealth
  and react to player aggressiveness\n- spawn actors fast and close to the enemy\n-
  spawn actors less and less often on a given level, but with growing depth\n- prefer
  weapons with effects, if recharged\n- make the bracing melee bonus additive, not
  multiplicative\n- let explosions buffet actors around\n- make braced actors immune
  to translocation effects\n- use mouse for movement, actor selection, aiming\n- don't
  run straight with selected actors, but go-to cross-hair with them\n- speed up default
  frame rate, slow down projectiles visually\n- rework item manipulation UI\n- you
  can pick up many items at once and it costs only one turn\n- allow actors to apply
  and project from the shared stash\n- reverse messages shown in player diary\n- display
  actor organs and stats\n- split highscore tables wrt game modes\n- move score calculation
  formula to content\n- don't keep the default/example config file commented out;
  was misleading\n- I was naughty again and changed v0.5.0.0 of LambdaHack content
  API slightly\n  one last time\n\n## [v0.4.100.0, aka 'The last thaw'](https://github.com/LambdaHack/LambdaHack/compare/v0.4.99.0...v0.4.100.0)\n\n-
  unexpectedly thaw and freeze again v0.5.0.0 of LambdaHack content API\n- unexpectedly
  implement timeouts and temporary effects easily without FRP\n- make a couple of
  skill levels meaningful and tweak skills of some actors\n- make AI prefer exploration
  of easier levels\n- permit overfull HP and Calm\n- let non-projectile actors block
  view\n- make colorful characters bold (if it resizes your fonts, turn off via colorIsBold
  = False in config file or --noColorIsBold on commandline)\n- start the game with
  a screensaver safari mode\n- add i386 Linux and Windows compilation targets to Makefile\n\n##
  [v0.4.99.0, aka 'Player escapes'](https://github.com/LambdaHack/LambdaHack/compare/v0.2.14...v0.4.99.0)\n\n-
  balance the example game content a bit (campaign still unbalanced)\n- various code
  and documentation tweaks and fixes\n- add cabal flag expose_internal that reveals
  internal library operations\n- merge FactionKind into ModeKind and rework completely
  the semantics\n- compatibility tweaks for Nixpkgs\n- define AI tactics, expose them
  to UI and add one more: follow-the-leader\n- share leader target between the UI
  and AI client of each faction\n- specify monster spawn rate per-cave\n- extend content
  validation and make it more user friendly\n- freeze v0.5.0.0 of LambdaHack content
  API\n\n## [v0.2.14, aka 'Out of balance'](https://github.com/LambdaHack/LambdaHack/compare/v0.2.12...v0.2.14)\n\n-
  tons of new (unbalanced) content, content fields, effects and descriptions\n- add
  a simple cabal test in addition to make-test and travis-test\n- generate items and
  actors according to their rarities at various depths\n- redo weapon choice, combat
  bonuses and introduce armor\n- introduce skill levels for abilities (boolean for
  now, WIP)\n- remove regeneration, re-add through periodically activating items\n-
  ensure passable areas of randomly filled caves are well connected\n- make secondary
  factions leaderless\n- auto-tweak digital line epsilon to let projectiles evade
  obstacles\n- add shrapnel (explosions) and organs (body parts)\n- express actor
  kinds as item kinds (their trunk)\n- add dynamic lights through items, actors, projectiles\n-
  fix and improve item kind and item stats identification\n- make aspects additive
  from all equipment and organ items\n- split item effects into aspects, effects and
  item features\n- rework AI and structure it according to the Ability type\n- define
  Num instance for Dice to make writing it in content easier\n- remove the shared
  screen multiplayer mode and all support code, for now\n- rename all modules and
  nearly all other code entities\n- check and consume HP when calling friends and
  Calm when summoning\n- determine sight radius from items and cap it at current Calm/5\n-
  introduce Calm; use to hear nearby enemies and limit item abuse before death\n-
  let AI actors manage items and share them with party members\n- completely revamp
  item manipulation UI\n- add a command to cede control to AI\n- separate actor inventory,
  10-item actor equipment and shared party stash\n- vi movement keys (hjklyubn) are
  now disabled by default\n- new movement keyset: laptop movement keys (uk8o79jl)\n\n##
  [v0.2.12](https://github.com/LambdaHack/LambdaHack/compare/v0.2.10...v0.2.12)\n\n-
  improve and simplify dungeon generation\n- simplify running and permit multi-actor
  runs\n- let items explode and generate shrapnel projectiles\n- add game difficulty
  setting (initial HP scaling right now)\n- allow recording, playing back and looping
  commands\n- implement pathfinding via per-actor BFS over the whole level\n- extend
  setting targets for actors in UI tremendously\n- implement autoexplore, go-to-target,
  etc., as macros\n- let AI use pathfinding, switch leaders, pick levels to swarm
  to\n- force level/leader changes on spawners (even when played by humans)\n- extend
  and redesign UI bottom status lines\n- get rid of CPS style monads, aborts and WriterT\n-
  benchmark and optimize the code, in particular using Data.Vector\n- split off and
  use the external library assert-failure\n- simplify config files and limit the number
  of external dependencies\n\n## [v0.2.10](https://github.com/LambdaHack/LambdaHack/compare/v0.2.8...v0.2.10)\n\n-
  screensaver game modes (AI vs AI)\n- improved AI (can now climbs stairs, etc.)\n-
  multiple, multi-floor staircases\n- multiple savefiles\n- configurable framerate
  and combat animations\n\n## [v0.2.8](https://github.com/LambdaHack/LambdaHack/compare/v0.2.6.5...v0.2.8)\n\n-
  cooperative and competitive multiplayer (shared-screen only in this version)\n-
  overhauled searching\n- rewritten engine code to have a single server that sends
  restricted game state updates to many fat clients, while a thin frontend layer multiplexes
  visuals from a subset of the clients\n\n## [v0.2.6.5](https://github.com/LambdaHack/LambdaHack/compare/v0.2.6...v0.2.6.5)\n\n-
  this is a minor release, primarily intended to fix the broken haddock documentation
  on Hackage\n- changes since 0.2.6 are mostly unrelated to gameplay:\n    - strictly
  typed config files split into UI and rules\n    - a switch from Text to String throughout
  the codebase\n    - use of the external library miniutter for English sentence generation\n\n##
  [v0.2.6](https://github.com/LambdaHack/LambdaHack/compare/v0.2.1...v0.2.6)\n\n-
  the Main Menu\n- improved and configurable mode of squad combat\n\n## [v0.2.1](https://github.com/LambdaHack/LambdaHack/compare/v0.2.0...v0.2.1)\n\n-
  missiles flying for three turns (by an old kosmikus' idea)\n- visual feedback for
  targeting\n- animations of combat and individual monster moves\n\n## [v0.2.0](https://github.com/LambdaHack/LambdaHack/compare/release-0.1.20110918...v0.2.6)\n\n-
  the LambdaHack engine becomes a Haskell library\n- the LambdaHack game depends on
  the engine library\n"
basic-deps:
  bytestring: ! '>=0.9.2 && <1'
  stm: ! '>=2.4 && <3'
  base: ==4.*
  hsini: ! '>=0.2 && <2'
  unordered-containers: ! '>=0.2.3 && <1'
  text: ! '>=0.11.2.3 && <2'
  filepath: ! '>=1.2.0.1 && <2'
  async: ==2.*
  data-default: -any
  array: ! '>=0.3.0.3 && <1'
  containers: ! '>=0.5.3.0 && <1'
  enummapset-th: ! '>=0.6.0.0 && <1'
  vector-binary-instances: ! '>=0.2 && <1'
  keys: ==3.*
  binary: ! '>=0.7 && <1'
  assert-failure: ! '>=0.1 && <1'
  ghc-prim: ! '>=0.2'
  old-time: ! '>=1.0.0.7 && <2'
  zlib: ! '>=0.5.3.1 && <1'
  mtl: ! '>=2.0.1 && <3'
  hashable: ! '>=1.1.2.5 && <2'
  gtk: ! '>=0.12.1 && <0.14'
  pretty-show: ! '>=1.6 && <2'
  transformers: ! '>=0.3 && <1'
  random: ! '>=1.1 && <2'
  deepseq: ! '>=1.3 && <2'
  LambdaHack: -any
  template-haskell: ! '>=2.6 && <3'
  miniutter: ! '>=0.4.4 && <2'
  vector: ! '>=0.10 && <1'
  directory: ! '>=1.1.0.1 && <2'
all-versions:
- '0.1.20080412'
- '0.1.20080413'
- '0.1.20090606'
- '0.1.20110117'
- '0.1.20110918'
- '0.2.0'
- '0.2.1'
- '0.2.6'
- '0.2.6.5'
- '0.2.8'
- '0.2.10'
- '0.2.10.5'
- '0.2.10.6'
- '0.2.12'
- '0.2.14'
- '0.4.9.0'
- '0.4.99.0'
- '0.4.100.0'
- '0.4.101.0'
- '0.4.101.1'
- '0.5.0.0'
author: Andres Loeh, Mikolaj Konarski
latest: '0.5.0.0'
description-type: markdown
description: ! "LambdaHack [![Build Status](https://travis-ci.org/LambdaHack/LambdaHack.svg?branch=master)](https://travis-ci.org/LambdaHack/LambdaHack)[![Build
  Status](https://drone.io/github.com/LambdaHack/LambdaHack/status.png)](https://drone.io/github.com/LambdaHack/LambdaHack/latest)\n==========\n\nLambdaHack
  is a [Haskell] [1] game engine library for [roguelike] [2]\ngames of arbitrary theme,
  size and complexity. You specify the content\nto be procedurally generated, including
  game rules and AI behaviour.\nThe library lets you compile a ready-to-play game
  binary, using either\nthe supplied or a custom-made main loop. Several frontends
  are available\n(GTK is the default) and many other generic engine components\nare
  easily overridden, but the fundamental source of flexibility lies\nin the strict
  and type-safe separation of code and content and of clients\n(human and AI-controlled)
  and server. Long-term goals for LambdaHack include\nsupport for multiplayer tactical
  squad combat, in-game content creation,\nauto-balancing and persistent content modification
  based on player behaviour.\n\nThe engine comes with a sample code for a little dungeon
  crawler,\ncalled LambdaHack and described in [PLAYING.md](GameDefinition/PLAYING.md).\n\n![gameplay
  screenshot](https://raw.githubusercontent.com/LambdaHack/media/master/screenshot/raid1.png)\n\nOther
  games known to use the LambdaHack library:\n\n* [Allure of the Stars] [6], a near-future
  Sci-Fi game\n* [Space Privateers] [8], an adventure game set in far future\n\nNote:
  the engine and the example game are bundled together in a single\n[Hackage] [3]
  package released under the permissive `BSD3` license.\nYou are welcome to create
  your own games by forking and modifying\nthe single package, but please consider
  eventually splitting your changes\ninto a separate content-only package that depends
  on the upstream\nengine library. This will help us exchange ideas and share improvements\nto
  the common codebase. Alternatively, you can already start the development\nin separation
  by cloning and rewriting [Allure of the Stars] [10]\nor any other pure game content
  package and mix and merge with the example\nLambdaHack game rules at will. Note
  that the LambdaHack sample game\nderives from the [Hack/Nethack visual and narrative
  tradition] [9],\nwhile Allure of the Stars uses the more free-form Moria/Angband
  style\n(it also uses the `AGPL` license, and `BSD3 + AGPL = AGPL`,\nso make sure
  you want to liberate your code and content to such an extent).\n\n\nInstallation
  from binary archives\n---------------------------------\n\nPre-compiled game binaries
  for some platforms are available through\nthe [release page] [11] and from the [Nix
  Packages Collection] [12].\nTo manually install a binary archive, make sure you
  have the GTK\nlibraries suite on your system, unpack the LambdaHack archive\nand
  run the executable in the unpacked directory.\n\nOn Windows, if you don't already
  have GTK installed (e.g., for the GIMP\npicture editor) please download and run
  (with default settings)\nthe GTK installer from\n\nhttp://sourceforge.net/projects/gtk-win/\n\n\nScreen
  and keyboard configuration\n---------------------------------\n\nThe game UI can
  be configured via a config file.\nA file with the default settings, the same as
  built into the binary, is in\n[GameDefinition/config.ui.default](GameDefinition/config.ui.default).\nWhen
  the game is run for the first time, the file is copied to the official\nlocation,
  which is `~/.LambdaHack/config.ui.ini` on Linux and\n`C:\\Users\\<username>\\AppData\\Roaming\\LambdaHack\\config.ui.ini`\n(or
  `C:\\Documents And Settings\\user\\Application Data\\LambdaHack\\config.ui.ini`\nor
  something else altogether) on Windows.\n\nScreen font can be changed and enlarged
  by editing the config file\nat its official location or by CTRL-right-clicking on
  the game window.\n\nIf you use the numeric keypad, use the NumLock key on your keyboard\nto
  toggle the game keyboard mode. With NumLock off, you walk with the numeric\nkeys
  and run with SHIFT (or CONTROL) and the keys. This mode is probably\nthe best if
  you use mouse for running. When you turn NumLock on,\nthe reversed key setup enforces
  good playing habits by setting as the default\nthe run command (which automatically
  stops at threats, keeping you safe)\nand requiring SHIFT (or CONTROL) for the error-prone
  step by step walking.\n\nIf you don't have the numeric keypad, you can use laptop
  keys (uk8o79jl)\nor you can enable the Vi keys (aka roguelike keys) in the config
  file.\n\n\nCompilation from source\n-----------------------\n\nIf you want to compile
  your own binaries from the source code,\nuse Cabal (already a part of your OS distribution,
  or available within\n[The Haskell Platform] [7]), which also takes care of all the
  dependencies.\nYou also need the GTK libraries for your OS. On Linux, remember to
  install\nthe -dev versions as well. On Windows follow [the same steps as for Wine]
  [13].\nOn OSX, if you encounter problems, you may want to\n[compile the GTK libraries
  from sources] [14].\n\nThe latest official version of the library can be downloaded,\ncompiled
  and installed automatically by Cabal from [Hackage] [3] as follows\n\n    cabal
  update\n    cabal install gtk2hs-buildtools\n    cabal install LambdaHack --force-reinstalls\n\nFor
  a newer snapshot, download source from a development branch\nat [github] [5] and
  run Cabal from the main directory\n\n    cabal install gtk2hs-buildtools\n    cabal
  install --force-reinstalls\n\nFor the example game, the best frontend (wrt keyboard
  support and colours)\nis the default gtk. To compile with one of the terminal frontends,\nuse
  Cabal flags, e.g,\n\n    cabal install -fvty --force-reinstalls\n\n\nCompatibility
  notes\n-------------------\n\nIf you are using a terminal frontend, numeric keypad
  may not work\ncorrectly depending on versions of the libraries, terminfo and terminal\nemulators.
  The curses frontend is not fully supported due to the limitations\nof the curses
  library. With the vty frontend started in an xterm,\nCTRL-keypad keys for running
  seem to work OK, but on rxvt they do not.\nThe commands that require pressing CTRL
  and SHIFT together won't\nwork either, but fortunately they are not crucial to gameplay.\nFor
  movement, laptop (uk8o79jl) and Vi keys (hjklyubn, if enabled\nin config.ui.ini)
  should work everywhere. GTK works fine, too, both\nwith numeric keypad and with
  mouse.\n\n\nTesting and debugging\n---------------------\n\nThe [Makefile](Makefile)
  contains many sample test commands.\nNumerous tests that use the screensaver game
  modes (AI vs. AI)\nand the dumb `stdout` frontend are gathered in `make test`.\nOf
  these, travis runs `test-travis-*` on each push to the repo.\nTest commands with
  prefix `frontend` start AI vs. AI games\nwith the standard, user-friendly gtk frontend.\n\nRun
  `LambdaHack --help` to see a brief description of all debug options.\nOf these,
  `--sniffIn` and `--sniffOut` are very useful (though verbose\nand initially cryptic),
  for monitoring the traffic between clients\nand the server. Some options in the
  config file may prove useful too,\nthough they mostly overlap with commandline options
  (and will be totally\nmerged at some point).\n\nYou can use HPC with the game as
  follows (details vary according\nto HPC version). A quick manual playing session\nafter
  the automated tests would be in order, as well, since the tests don't\ntouch the
  topmost UI layer.\n\n    cabal clean\n    cabal install --enable-coverage\n    make
  test\n    hpc report --hpcdir=dist/hpc/dyn/mix/LambdaHack --hpcdir=dist/hpc/dyn/mix/LambdaHack-xxx/
  LambdaHack\n    hpc markup --hpcdir=dist/hpc/dyn/mix/LambdaHack --hpcdir=dist/hpc/dyn/mix/LambdaHack-xxx/
  LambdaHack\n\nNote that debug option `--stopAfter` is required to cleanly terminate\nany
  automated test. This is needed to gather any HPC info, because HPC\nrequires a clean
  exit to save data files.\n\n\nFurther information\n-------------------\n\nFor more
  information, visit the [wiki] [4]\nand see [PLAYING.md](GameDefinition/PLAYING.md),
  [CREDITS](CREDITS)\nand [LICENSE](LICENSE).\n\nHave fun!\n\n\n\n[1]: http://www.haskell.org/\n[2]:
  http://roguebasin.roguelikedevelopment.org/index.php?title=Berlin_Interpretation\n[3]:
  http://hackage.haskell.org/package/LambdaHack\n[4]: https://github.com/LambdaHack/LambdaHack/wiki\n[5]:
  http://github.com/LambdaHack/LambdaHack\n[6]: http://allureofthestars.com\n[7]:
  http://www.haskell.org/platform\n[8]: https://github.com/tuturto/space-privateers\n[9]:
  https://github.com/LambdaHack/LambdaHack/wiki/Sample-dungeon-crawler\n\n[10]: https://github.com/AllureOfTheStars/Allure\n[11]:
  https://github.com/LambdaHack/LambdaHack/releases/latest\n[12]: http://hydra.cryp.to/search?query=LambdaHack\n[13]:
  http://www.haskell.org/haskellwiki/GHC_under_Wine#Code_that_uses_gtk2hs\n[14]: http://www.edsko.net/2014/04/27/haskell-including-gtk-on-mavericks\n"
license-name: BSD3
