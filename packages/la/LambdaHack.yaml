changelog-type: ''
hash: f27ad18c9136f1d17b55be2c75b7fac8b6575b9adff4d1ab39894f86bb319991
synopsis: A game engine library for roguelike dungeon crawlers
changelog: ''
all-versions:
- '0.1.20080412'
- '0.1.20080413'
- '0.1.20090606'
- '0.1.20110117'
- '0.1.20110918'
- '0.2.0'
- '0.2.1'
- '0.2.6'
- '0.2.6.5'
- '0.2.8'
- '0.2.10'
- '0.2.10.5'
- '0.2.10.6'
- '0.2.12'
- '0.2.14'
- '0.4.9.0'
- '0.4.99.0'
- '0.4.100.0'
- '0.4.101.0'
- '0.4.101.1'
latest: '0.4.101.1'
description-type: haddock
description: ! 'LambdaHack is a game engine library for roguelike games

  of arbitrary theme, size and complexity,

  packaged together with a small example dungeon crawler.


  <<https://raw.githubusercontent.com/LambdaHack/media/master/screenshot/skirmish1.png>>


  When completed, the engine will let you specify content

  to be procedurally generated, define the AI behaviour

  on top of the generic content-independent rules

  and compile a ready-to-play game binary, using either

  the supplied or a custom-made main loop.

  Several frontends are available (GTK is the default)

  and many other generic engine components are easily overridden,

  but the fundamental source of flexibility lies

  in the strict and type-safe separation of code from the content

  and of clients (human and AI-controlled) from the server.

  Please see the changelog file for recent improvements

  and the issue tracker for short-term plans. Long term vision

  revolves around procedural content generation and includes

  in-game content creation, auto-balancing and persistent

  content modification based on player behaviour.


  Games known to use the LambdaHack library:


  * Allure of the Stars, a near-future Sci-Fi game,

  <http://hackage.haskell.org/package/Allure>


  * Space Privateers, an adventure game set in far future,

  <http://hackage.haskell.org/package/SpacePrivateers>


  Note: All modules in this library are kept visible,

  to let games override and reuse them.

  OTOH, to reflect that some modules are implementation details

  relative to others, the source code adheres to the following

  convention. If a module has the same name as a directory,

  the module is the exclusive interface to the directory.

  No references to the modules in the directory are allowed

  except from the interface module. This policy is only binding

  when developing the library --- library users are free

  to access any modules, since the library authors are in

  no position to guess their particular needs.'
