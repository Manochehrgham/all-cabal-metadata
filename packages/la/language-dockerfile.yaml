homepage: https://github.com/beijaflor-io/language-dockerfile#readme
changelog-type: ''
hash: 4eee484a68201ec349ae907e9e184e7b920aecb967018a4d33ffc0ca28adf72e
test-bench-deps:
  test-framework-hunit: -any
  free: -any
  bytestring: ! '>=0.10'
  test-framework: -any
  split: ! '>=0.2'
  base: ! '>=4.8 && <5'
  language-dockerfile: -any
  hspec: -any
  ShellCheck: -any
  filepath: -any
  parsec: ! '>=3.1'
  HUnit: ! '>=1.2'
  th-lift-instances: -any
  mtl: -any
  transformers: -any
  QuickCheck: -any
  th-lift: -any
  pretty: -any
  Glob: -any
  template-haskell: -any
  directory: -any
maintainer: tacla.yamada@gmail.com
synopsis: Dockerfile linter, parser, pretty-printer and embedded DSL
changelog: ''
basic-deps:
  free: -any
  bytestring: ! '>=0.10'
  split: ! '>=0.2'
  base: ! '>=4.8 && <5'
  language-dockerfile: -any
  ShellCheck: -any
  parsec: ! '>=3.1'
  th-lift-instances: -any
  mtl: -any
  transformers: -any
  th-lift: -any
  pretty: -any
  template-haskell: -any
all-versions:
- '0.1.2.0'
- '0.2.3.0'
- '0.3.0.0'
author: ! 'Lukas Martinelli,

  Pedro Tacla Yamada'
latest: '0.3.0.0'
description-type: markdown
description: ! "# haskell-language-dockerfile\nDockerfile linter, parser, pretty-printer
  and embedded DSL, forked from\n[hadolint](https://github.com/lukasmartinelli/hadolint).\n\nPublished
  on Hackage as [language-dockerfile](https://hackage.haskell.org/package/language-dockerfile).\n\nIt
  extends hadolint with the pretty-printer and EDSL for writting Dockerfiles in\nHaskell.\n\n-
  [Parsing files](#parsing-files)\n- [Parsing strings](#parsing-strings)\n- [Pretty-printing
  files](#pretty-printing-files)\n- [Writing Dockerfiles in Haskell](#writing-dockerfiles-in-haskell)\n-
  [Using the QuasiQuoter](#using-the-quasiquoter)\n- [Templating Dockerfiles in Haskell](#templating-dockerfiles-in-haskell)\n-
  [Templating Dockerfiles in Haskell](#templating-dockerfiles-in-haskell)\n\n## Parsing
  files\n```haskell\nimport Language.Dockerfile\nmain = do\n    ef <- parseFile \"./Dockerfile\"\n
  \   print ef\n```\n\n## Parsing strings\n```haskell\nimport Language.Dockerfile\nmain
  = do\n    c <- readFile \"./Dockerfile\"\n    print (parseString c)\n```\n\n## Pretty-printing
  files\n```haskell\nimport Language.Dockerfile\nmain = do\n    Right d <- parseFile
  \"./Dockerfile\"\n    putStr (prettyPrint d)\n```\n\n## Writting Dockerfiles in
  Haskell\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport Language.Dockerfile\nmain
  = putStr $ toDockerfileStr $ do\n    from \"node\"\n    run \"apt-get update\"\n
  \   run [\"apt-get\", \"install\", \"something\"]\n    -- ...\n```\n\n## Using the
  QuasiQuoter\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes
  \      #-}\nimport Language.Dockerfile\nmain = putStr $ toDockerfileStr $ do\n    from
  \"node\"\n    run \"apt-get update\"\n    [edockerfile|\n    RUN apt-get update\n
  \   CMD node something.js\n    |]\n    -- ...\n```\n\n## Templating Dockerfiles
  in Haskell\n```haskell\n{-# LANGUAGE FlexibleContexts  #-}\n{-# LANGUAGE OverloadedStrings
  #-}\nimport Control.Monad\nimport Language.Dockerfile\ntags = [\"7.8\", \"7.10\",
  \"8\"]\ncabalSandboxBuild packageName = do\n    let cabalFile = packageName ++ \".cabal\"\n
  \   run \"cabal sandbox init\"\n    run \"cabal update\"\n    add cabalFile (\"/app/\"
  ++ cabalFile)\n    run \"cabal install --only-dep -j\"\n    add \".\" \"/app/\"\n
  \   run \"cabal build\"\nmain =\n    forM_ tags $ \\tag -> do\n        let df =
  toDockerfileStr $ do\n            from (\"haskell\" `tagged` tag)\n            cabalSandboxBuild
  \"mypackage\"\n        writeFile (\"./examples/templating-\" ++ tag ++ \".dockerfile\")
  df\n```\n\n## Using IO in the DSL\nBy default the DSL runs in the `Identity` monad.
  By running in IO we can\nsupport more features like file globbing:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nimport           Language.Dockerfile\nimport qualified
  System.Directory     as Directory\nimport qualified System.FilePath      as FilePath\nimport
  qualified System.FilePath.Glob as Glob\nmain = do\n    str <- toDockerfileStrIO
  $ do\n        fs <- liftIO $ do\n            cwd <- Directory.getCurrentDirectory\n
  \           fs <- Glob.glob \"./test/*.hs\"\n            return (map (FilePath.makeRelative
  cwd) fs)\n        from \"ubuntu\"\n        mapM_ (\\f -> add f (\"/app/\" ++ FilePath.takeFileName
  f)) fs\n    putStr str\n```\n\n## License\nGPLv3\n"
license-name: GPL-3
