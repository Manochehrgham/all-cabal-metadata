changelog-type: ''
hash: 6da02d82fe8a43d9ecc3e7eeddaa980d5d749b2282bc9f0049d5b54cf02ee363
synopsis: Lenses with a southern twang
changelog: ''
all-versions:
- '0.1'
- '0.2'
- '0.2.0.1'
- '0.2.1'
latest: '0.2.1'
description-type: haddock
description: ! 'Why yet /another/ lens library?

  First, none of the existing libraries for Lenses were

  adequate for my needs (specifically for my use of lenses

  in "pez"). And anyway, why not try to create something

  novel and better?


  Distinguishing features:


  - Lenses are parameterized over two Monads (by convention

  @m@ and @w@), and look like @a -> m (b -> w a, b)@. this

  lets us define lenses for sum types, that perform

  validation, that do IO (e.g. persist data to disk),

  etc., etc.


  - a module "Data.Yall.Iso" that complements @Lens@ powerfully


  - a rich set of category-level class instances (for now

  from "categories") for ''Lens'' and ''Iso''. These along

  with the pre-defined primitive lenses and combinators

  give an interface comparable to Arrow


  You should import either "Data.Yall" or "Data.Yall.Lens",

  and optionally "Data.Yall.Iso". "Data.Yall" is a simplified,

  but mostly-compatible, version of a subset of "Data.Yall.Lens".


  /UPDATE/: I have stopped developing this package. Instead you

  should take a look at and contribute to <http://hackage.haskell.org/package/lens>


  /TODOs/:


  - a module providing template haskell deriving of Lenses


  - pre-define lenses for prelude types, State


  /CHANGES/:


  - depend on categories >= 1'
