homepage: https://github.com/M42/mikrokosmos
changelog-type: ''
hash: 87daa3e0be80c2b0b9d2d166bd0df3d9c3873c9bf2233e286d69cededc706ce0
test-bench-deps: {}
maintainer: mromang08+github@gmail.com
synopsis: Lambda calculus interpreter
changelog: ''
basic-deps:
  haskeline: ! '>=0.7'
  base: ! '>=4.7 && <5'
  multimap: -any
  parsec: ! '>=3'
  HUnit: ! '>=1.0'
  containers: ! '>=0.5'
  ansi-terminal: -any
  mtl: ! '>=2.2'
all-versions:
- '0.1.0'
- '0.2.0'
author: Mario Román (M42)
latest: '0.2.0'
description-type: markdown
description: ! "# mikrokosmos\n\n**Mikrokosmos** is an untyped lambda calculus interpreter,
  borrowing its name from the series of\nprogressive piano études *[Mikrokosmos](https://www.youtube.com/watch?v=VEsMk3DAzWM)*
  written by *Bela Bartok*. \nIt aims to provide students with a tool to learn and
  understand lambda calculus.\nIf you want to start learning about lambda calculus,
  I suggest you to read:\n\n * [The wikipedia page on Lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus#Informal_description)\n
  * [A tutorial introduction to the Lambda calculus by Raúl Rojas](www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf)\n\nAnd
  to install and to tinker with this interpreter.\n\n## Installation\n\nMikrokosmos
  is installable from [Hackage](http://hackage.haskell.org/); you can install it directly
  from `cabal`: \n```\ncabal update\ncabal install mikrokosmos\n```\n\nYou can also
  install it by cloning the git repository and using [cabal](https://www.haskell.org/cabal/):\n\n```
  bash\ngit clone https://github.com/M42/mikrokosmos.git\ncd mikrokosmos\ncabal install\n```\n\nIf
  you have `ghc` version 8 or greater you can also compile it directly using:\n\n```
  bash\ngit clone https://github.com/M42/mikrokosmos.git\ncd mikrokosmos\nghc Main.hs\n```\n\n##
  First steps\n\nOnce installed, you can open the interpreter typing `mikrokosmos`
  in your terminal. It will show you a prompt where\nyou can write lambda expressions
  to evaluate them:\n\n![First steps](https://cloud.githubusercontent.com/assets/5337877/18649151/337c6782-7ebe-11e6-9701-495c2cb40675.gif)\n\nYou
  can write expressions using `\\var.` to denote a lambda abstraction on the `var`
  variable and\nyou can bind names to expressions using `=`. As you can see in the
  image, whenever the interpreter finds a known constant, it labels the expression
  with its name.\n\nIf you need help at any moment, you can type `:help` into the
  prompt to get a summary of the available options:\n\n![Help screen](https://cloud.githubusercontent.com/assets/5337877/18882511/bfc84c34-84df-11e6-8215-870b29e49b8f.gif)\n\n##
  The standard library\n\nMikrokosmos comes bundled with a standard library in a file
  called `std.mkr`; if it was not the case for you, you can download the [library](https://raw.githubusercontent.com/M42/mikrokosmos/master/std.mkr)
  from the git repository. It allows you to experiment with [Church encoding](https://en.wikipedia.org/wiki/Church_encoding)
  of booleans,\nintegers and much more. You can load it with `:load std.mkr`, given
  the file is in your working directory; after that, you can use a lot of new constants:\n\n![Standard
  library](https://cloud.githubusercontent.com/assets/5337877/18663278/1a6374e2-7f1e-11e6-99b5-279de7428a10.gif)\n\nAll
  this is written in lambda calculus! You can check the definitions on the `std.mkr`
  file.\n\n## Debugging and verbose mode\n\nIf you want to check how the lambda reductions
  are being performed you can use the **verbose mode**.\nIt can be activated and deactivated
  writing `:verbose`, and it will show you every step on the reduction of\nthe expression,
  coloring the substitution at every step.\n\n![Verbose mode](https://cloud.githubusercontent.com/assets/5337877/18882803/060a2dec-84e1-11e6-9dfa-9c08957b559e.gif)\n\nIt
  uses [DeBruijn notation](https://en.wikipedia.org/wiki/De_Bruijn_notation) to show
  the substitutions, because this is the internal representation used by the interpreter.
  The term in red is being substituted by the term in yellow. \n\n## Advanced data
  structures\n\nThere are representations of structures such as linked lists or trees
  in the standard library. \nYou can use them to do a bit of your usual functional
  programming:\n\n![Trees](https://cloud.githubusercontent.com/assets/5337877/18883269/d7c3d616-84e2-11e6-9fc9-aa6e3df606f9.gif)\n\nOh!
  And you can insert comments with `#`, both in the interpreter and in the files the
  interpreter can load.\n\n### References & interesting links\n* [Build you a Haskell
  - Stephen Diehl](http://dev.stephendiehl.com/fun/003_lambda_calculus.html)  \n*
  [Haskell from Scratch - Jekor](https://www.youtube.com/playlist?list=PLxj9UAX4Em-Ij4TKwKvo-SLp-Zbv-hB4B)
  \  \n* [The Glambda interpreter](https://github.com/goldfirere/glambda)  \n* [Lecture
  notes on the lambda calculus - Peter Selinger](http://www.mscs.dal.ca/~selinger/papers/lambdanotes.pdf)\n"
license-name: GPL-3
