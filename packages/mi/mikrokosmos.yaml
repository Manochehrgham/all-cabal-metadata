homepage: https://github.com/M42/mikrokosmos
changelog-type: ''
hash: 34793c72b906c62eeaf9a08a8f69c3990a3689cf967d3e6d0e520495ed6728e1
test-bench-deps: {}
maintainer: mromang08+github@gmail.com
synopsis: Lambda calculus interpreter
changelog: ''
basic-deps:
  haskeline: ! '>=0.7'
  base: ! '>=4.7 && <5'
  multimap: -any
  parsec: ! '>=3'
  HUnit: ! '>=1.0'
  containers: ! '>=0.5'
  ansi-terminal: -any
  mtl: ! '>=2.2'
all-versions:
- '0.1.0'
author: Mario Román (M42)
latest: '0.1.0'
description-type: markdown
description: ! "# mikrokosmos\n\n**Mikrokosmos** is an untyped lambda calculus interpreter,
  borrowing its name from the series of\nprogressive piano études *[Mikrokosmos](https://www.youtube.com/watch?v=VEsMk3DAzWM)*
  written by *Bela Bartok*. \nIt aims to provide students with a tool to learn and
  understand lambda calculus.\nIf you want to start learning about lambda calculus,
  I suggest you to read:\n\n * [The wikipedia page on Lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus#Informal_description)\n
  * [A tutorial introduction to the Lambda calculus by Raúl Rojas](www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf)\n\nAnd
  to install and to tinker with this interpreter.\n\n## Installation\n\nMikrokosmos
  will be soon installable from [Hackage](http://hackage.haskell.org/). Meanwhile,
  you can install it \ncloning the repository and using [cabal](https://www.haskell.org/cabal/):\n\n```
  bash\ngit clone https://github.com/M42/mikrokosmos.git\ncd mikrokosmos\ncabal install\n```\n\n##
  First steps\n\nOnce installed, you can open the interpreter typing `mikrokosmos`
  in your terminal. It will show you a prompt where\nyou can write lambda expressions
  to evaluate them:\n\n![First steps](https://cloud.githubusercontent.com/assets/5337877/18393670/92728f10-76b6-11e6-88cc-88e7f2cb9114.png)\n\nYou
  can write expressions using `\\var.` to denote a lambda abstraction on the `var`
  variable and\nyou can bind names to expressions using `=`. *But why am I getting
  this weird output?* Well, the interpreter\noutputs the lambda expressions in [De
  Bruijn notation](https://en.wikipedia.org/wiki/De_Bruijn_notation); it is more\ncompact
  and the interpreter works internally with it. However, as you can see in the image,
  whenever the interpreter finds a known constant, it labels the expression with its
  name.\n\nIf you need help at any moment, you can type `:help` into the prompt to
  get a summary of the available options:\n\n![Help screen](https://cloud.githubusercontent.com/assets/5337877/18393812/33e86b6c-76b7-11e6-818b-76b68f599a44.png)\n\n##
  The standard library\n\nMikrokosmos comes bundled with a standard library. It allows
  you to experiment with Church encoding of booleans,\nintegers and much more. You
  can load it with `:load std.mkr`; after that, you can use a lot of new constants:\n\n![Standard
  library](https://cloud.githubusercontent.com/assets/5337877/18394001/1a238ec2-76b8-11e6-90ad-b2385ba60268.png)\n\nAll
  this is written in lambda calculus! You can check the definitions on the `std.mkr`
  file.\n\n## Debugging and verbose mode\n\nIf you want to check how the lambda reductions
  are being performed you can use the **verbose mode**.\nIt can be activated and deactivated
  writing `:verbose`, and it will show you every step on the reduction of\nthe expression,
  coloring the substitution at every step.\n\n![Verbose mode](https://cloud.githubusercontent.com/assets/5337877/18394177/e4925bd4-76b8-11e6-886e-6bd33fe02e88.png)\n\n##
  Advanced data structures\n\nThere are representations of structures such as linked
  lists or trees in the standard library. \nYou can use them to do a bit of your usual
  functional programming:\n\n![Trees](https://cloud.githubusercontent.com/assets/5337877/18394894/5cd41d1e-76bc-11e6-9564-8817992392af.png)\n\nOh!
  And you can insert comments with `#`, both in the interpreter and in the files the
  interpreter can load.\n\n### References & interesting links\n* [Build you a Haskell
  - Stephen Diehl](http://dev.stephendiehl.com/fun/003_lambda_calculus.html)  \n*
  [Haskell from Scratch - Jekor](https://www.youtube.com/playlist?list=PLxj9UAX4Em-Ij4TKwKvo-SLp-Zbv-hB4B)
  \  \n* [The Glambda interpreter](https://github.com/goldfirere/glambda)  \n* [Lecture
  notes on the lambda calculus - Peter Selinger](http://www.mscs.dal.ca/~selinger/papers/lambdanotes.pdf)\n"
license-name: GPL-3
