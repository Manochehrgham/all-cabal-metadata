homepage: https://github.com/nfjinjing/miku
changelog-type: markdown
hash: f4cd69ce1bec02b6178dca4a049ebdee814ef5cab0dd054c8587c0e37445c6df
test-bench-deps: {}
maintainer: Jinjing Wang <nfjinjing@gmail.com>
synopsis: A minimum web dev DSL in Haskell
changelog: ! '2016.3.16


  * Get rid of the Air dependency

  * Rewrite using common Haskell coding convention

'
basic-deps:
  bytestring: -any
  base: ! '>4 && <=6'
  filepath: ! '>=1.4.0.0'
  data-default: -any
  containers: -any
  lens: -any
  mtl: -any
  hack2: ! '>=2012.1.19'
  hack2-contrib: ! '>=2012.1.19'
all-versions:
- '2011.6.11'
- '2011.6.12'
- '2011.6.15'
- '2011.6.18'
- '2011.6.19'
- '2011.6.20'
- '2011.6.24'
- '2012.1.19'
- '2012.10.27'
- '2014.4.14'
- '2014.5.19'
- '2014.11.17'
- '2016.3.16'
author: Jinjing Wang
latest: '2016.3.16'
description-type: markdown
description: ! "# miku\n\nA tiny web dev DSL\n\n## Example\n\n    {-# LANGUAGE OverloadedStrings
  #-}\n\n    import Network.Miku\n    import Hack2.Handler.SnapServer\n\n    main
  = run . miku $ get \"/\" (text \"miku power\")\n\n\n## Installation\n\n    cabal
  update\n    cabal install miku\n    cabal install hack2-handler-snap-server\n\n
  \   -- copy and paste the above example to myapp.hs\n\n    runghc myapp.hs\n\ncheck:
  <http://localhost:3000>\n\n## Quick reference\n\n<https://github.com/nfjinjing/miku/blob/master/test/route_example.hs>\n\n\n##
  Routes\n\n### Verbs\n\n    {-# LANGUAGE OverloadedStrings #-}\n\n    -- use - instead
  of $ for clarity\n    import Air.Light ((-))\n    import Prelude hiding ((-))\n\n
  \   import Network.Miku\n    import Hack2.Handler.SnapServer\n\n    main = run .
  miku - do\n\n      get \"/\" - do\n        -- something for a get request\n\n      post
  \"/\" - do\n        -- for a post request\n\n      put \"/\" - do\n        -- put
  ..\n\n      delete \"/\" - do\n        -- ..\n\n### Captures\n\n    get \"/say/:user/:message\"
  - do\n      text . show =<< captures\n\n    -- /say/miku/hello will output\n    --
  [(\"user\",\"miku\"),(\"message\",\"hello\")]\n\n\n## Static\n\n    -- public serve,
  only allows `./src`\n    public (Just \".\") [\"/src\"]\n\n## Mime types\n\n    --
  treat .hs extension as text/plain\n    mime \"hs\" \"text/plain\"\n\n## Filters\n\n
  \   -- before takes a function of type (Env -> IO Env)\n    before - \\e -> do\n
  \     putStrLn \"before called\"\n      return e\n\n    -- after takes that of type
  (Response -> IO Response)\n    after return\n\n## Hack2 integration\n\n### Use hack2
  middleware\n\n    import Hack2.Contrib.Middleware.SimpleAccessLogger\n\n    middleware
  - simple_access_logger Nothing\n\n### Convert miku into a hack2 application\n\n
  \   -- in Network.Miku.Engine\n\n    miku :: MikuMonad -> Application\n\n\n## Hints\n\n*
  It's recommended to use your own html combinator / template engine. Try DIY with,
  e.g. [moe](http://github.com/nfjinjing/moe).\n* [Example view using custom html
  combinator (moe in this case)](http://github.com/nfjinjing/miku/blob/master/src/test/html_using_moe.hs)\n*
  When inspecting the request, use `ask` defined in `ReaderT` monad to get the `Hack2.Environment`,
  then use helper method defined in `Hack2.Contrib.Request` to query it.\n* `Response`
  is in `StateT`, `html` and `text` are simply helper methods that update the state,
  i.e. setting the response body, content-type, etc.\n* You do need to understand
  monad transformers to reach the full power of `miku`.\n\n## Reference\n\n* miku
  is inspired by [Rack](http://rack.rubyforge.org), [Rails](http://rubyonrails.org),
  [Ramaze](http://ramaze.net), [Happstack](http://happstack.com/) and [Sinatra](http://www.sinatrarb.com/).\n"
license-name: BSD3
