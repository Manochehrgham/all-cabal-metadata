homepage: https://github.com/michalkonecny/mixed-types-num
changelog-type: markdown
hash: 94807ca1644e0c0953bd298ecb456e5a128436d4327584a09e9215fb38e66382
test-bench-deps:
  base: ! '>=4.8 && <4.10'
  hspec: ! '>=2.1 && <2.5'
  mixed-types-num: -any
  QuickCheck: ! '>=2.7 && <2.11'
  hspec-smallcheck: ! '>=0.3 && <0.5'
maintainer: Michal Konecny <mikkonecny@gmail.com>
synopsis: Alternative Prelude with numeric and logic expressions typed bottom-up
changelog: ! "* v 0.3 2017-08-01\n  * renamed the main module to MixedTypesNumPrelude\n
  \ * much faster compilation\n  * Ring and Field are now classes, not synonyms for
  large sets of constraints\n  * many fixes in collect-error framework and its use
  in division and power\n  * Overloaded if-then-else via -XRebindableSyntax\n  * compiling
  with ghc 8.2.1\n\n* v 0.2.0.1\n  * fix compilation bug in test suite\n  * minor
  doc improvements\n  * fix Complex instances of error-throwing division (/!)\n\n*
  v 0.2\n  * new CollectErrors wrapper\n  * CN, specialisation of CollectErrors to
  NumErrors\n  * numerical partial operators (eg division) return a CN type\n  * instances
  for Data.Complex\n\n* v 0.1\n  * first release\n"
basic-deps:
  base: ! '>=4.8 && <4.11'
  hspec: ! '>=2.1 && <2.5'
  smallcheck: ==1.1.*
  convertible: ! '>=1.1.1.0 && <1.2'
  QuickCheck: ! '>=2.7 && <2.11'
  template-haskell: -any
  hspec-smallcheck: ! '>=0.3 && <0.5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2'
- '0.2.0.1'
- '0.3'
author: Michal Konecny
latest: '0.3'
description-type: haddock
description: ! 'This package provides a version of Prelude where

  unary and binary operations such as @not@, @+@, @==@

  have their result type derived from the parameter type(s)

  and thus supports mixed-type arithmetic and comparisons.


  See module "MixedTypesNumPrelude" for further documentation.


  /Ghci 8.0.* fails when loading this package/ due to ghc bug <https://ghc.haskell.org/trac/ghc/ticket/13385#ticket
  13385>.

  This bug does not affect ghci 7.10.3 and ghci 8.2.1.'
license-name: BSD3
