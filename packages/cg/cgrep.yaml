homepage: http://awgn.github.io/cgrep/
changelog-type: ''
hash: ad478239cb5c1daa48da674b9acf34eec10457d6913aab9584718948ee48bd0f
test-bench-deps: {}
maintainer: Nicola Bonelli <nicola@pfq.io>
synopsis: Command line tool
changelog: ''
basic-deps:
  either: ! '>=4.0'
  bytestring: ! '>=0.10'
  split: ! '>=0.2'
  stm: ! '>=2.1'
  base: <5.0
  unordered-containers: ! '>=0.1'
  stringsearch: ! '>=0.3'
  unix-compat: ! '>=0.4'
  filepath: ! '>=1.3'
  async: ! '>=2.0'
  dlist: ! '>=0.3'
  array: ! '>=0.4'
  containers: ! '>=0.5'
  ansi-terminal: ! '>=0.5'
  ghc-prim: ! '>=0.2'
  regex-posix: ! '>=0.90'
  mtl: ! '>=2.0'
  cmdargs: ! '>=0.10'
  safe: ! '>=0.3'
  directory: ! '>=1.2'
all-versions:
- '6.4'
- '6.4.1'
- '6.4.2'
- '6.4.3'
- '6.4.3.1'
- '6.4.4'
- '6.4.5'
- '6.4.6'
- '6.4.7'
- '6.4.8'
- '6.4.9'
- '6.4.10'
- '6.4.11'
- '6.4.12'
- '6.4.13'
- '6.4.14'
- '6.4.15'
- '6.4.16'
- '6.4.17'
- '6.4.18'
- '6.4.19'
- '6.4.20'
- '6.4.21'
- '6.4.22'
- '6.5.0'
- '6.5.1'
author: Nicola Bonelli
latest: '6.5.1'
description-type: markdown
description: ! "CGrep: a context-aware grep for source codes [![Hackage](https://img.shields.io/hackage/v/cgrep.svg?style=flat)](https://hackage.haskell.org/package/cgrep)\n============================================\n\nUsage\n-----\n\nCgrep
  6.5.1 Usage: cgrep [OPTION] [PATTERN] files...\n\ncgrep [OPTIONS] [ITEM]\n\nPattern:\n\n
  \   -f --file=FILE            read PATTERNs from file (one per line)\n    -w --word
  \                force word matching\n    -p --prefix               force prefix
  matching\n    -s --suffix               force suffix matching\n    -e --edit                 use
  edit distance\n    -i --ignore-case          ignore case distinctions\n    -G --regex
  \               regex matching\n\nContext filters (generic):\n\n    -c --code                 enable
  search in source code\n    -m --comment              enable search in comments\n
  \   -l --literal              enable search in string literals\n\nSemantic (generic):\n\n
  \   -S --semantic             \"code\" pattern: _, _1, _2... (identifiers), $,\n
  \                             $1, $2... (optionals), ANY, KEY, STR, CHR, NUM,\n
  \                             HEX, OCT, OR. -> e.g. \"_1(_1 && \\$)\" search for\n
  \                             move constructors, \"struct OR class _ { OR : OR <\"\n
  \                             search for a class declaration\n\nC/C++ language:\n\n
  \      --identifier           identifiers\n       --keyword              keywords\n
  \      --directive            preprocessing directives\n       --header               headers
  names\n       --number               literal numbers\n       --string               literal
  strings\n       --char                 literal chars\n       --oper                 operators\n
  \nOutput control:\n\n    -h --no-filename          suppress the file name prefix
  on output\n    -N --no-line-umber        suppress the line number on output lines\n
  \      --lang=ITEM            specify languages. ie: Cpp, +Haskell, -Makefile\n
  \      --lang-maps            lists the language mappings\n       --force-language=ITEM
  \ force the language\n       --multiline=INT        enable multi-line matching\n
  \   -r --recursive            Enable recursive search (don't follow symlinks)\n
  \   -R --deference-recursive  Recursive, follow symlinks\n    -v --invert-match
  \        select non-matching lines\n       --max-count=INT        stop search in
  files after INT matches\n       --count                print only a count of matching
  lines per file\n       --show-match           show list of matching tokens\n       --color
  \               use colors to highlight the matching strings\n       --format=STRING
  \       format output. Var: #f #n #l #t ## #, #; #0 #1...\n                              e.g.
  \"#f:#n #0 #1\"\n       --json                 format output as json object\n       --xml
  \                 format output as xml document\n  \nConcurrency:\n\n    -j --jobs=INT
  \            Number of jobs\n       --cores=INT            Set number of physical
  processor used\n       --chunk=INT            Set per-job chunk length\n    -a --asynch
  \              Process chunk of files asynchronously\n\nMiscellaneous:\n\n    -d
  --debug=INT            debug level: 1, 2 or 3\n    -n --no-turbo             disable
  turbo mode\n    -? --help                 Display help message\n    -V --version
  \             Print version information\n\n\n"
license-name: GPL-2
