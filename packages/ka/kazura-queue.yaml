homepage: http://github.com/asakamirai/kazura-queue
changelog-type: ''
hash: 1a6a3e0c28fd56623d5145a9c3539223ef899aa3e12be3c4233e66dea8ab2301
test-bench-deps:
  exceptions: ! '>=0.8'
  free: ! '>=4.12'
  kazura-queue: -any
  stm: ! '>=2.4'
  base: -any
  hspec: ! '>=2.1'
  criterion: ! '>=1.1'
  async: ! '>=2.0'
  doctest: ! '>=0.10'
  HUnit: ! '>=1.2'
  containers: ! '>=0.5'
  mtl: ! '>=2.2'
  transformers: ! '>=0.4'
  deepseq: ! '>=1.4'
  QuickCheck: ! '>=2.8'
  hspec-expectations: ! '>=0.7'
maintainer: asakamirai_hackage@towanowa.net
synopsis: Fast concurrent queues much inspired by unagi-chan
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  async: ! '>=2.0'
  containers: ! '>=0.5'
  atomic-primops: ! '>=0.8'
  primitive: ! '>=0.5.3'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
author: Asakamirai
latest: '0.1.0.2'
description-type: haddock
description: ! '"kazura-queue" provides an implementation of FIFO queue.

  It is faster than Chan, TQueue or TChan by the benefit of fetch-and-add

  instruction.


  Main motivation of this package is to solve some difficulty of

  "unagi-chan" package.


  - In "unagi-chan", the item in the queue/chan can be lost when async

  exception is throwed to the read thread while waiting for read.

  (Although it has handler to recover lost item,

  it is difficult to keep FIFO in such case)


  - In "unagi-chan", garbage items of the queue cannot be collected

  immediately.

  Since the buffer in the queue has the reference to the items until the

  buffer is garbage-collected.


  "kazura-queue" is slightly slower than "unagi-chan" instead of solving

  these issues.

  And "kazura-queue" lost broadcast function to improve the second issue.

  It means that kazura-queue is not "Chan" but is just "Queue".'
license-name: BSD3
