homepage: ''
changelog-type: markdown
hash: 4058804b22d9e89443a36c861bf6ff37c50064fab09e34f421ef43095418f8c4
test-bench-deps:
  katip: -any
  unix: -any
  base: -any
  time: -any
  text: -any
  criterion: ! '>=1.1.0.0'
  regex-tdfa-rc: -any
  blaze-builder: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  transformers: -any
  temporary: -any
  tasty: ! '>=0.10.1.2'
  deepseq: -any
  aeson: -any
  template-haskell: -any
  directory: -any
maintainer: ozgun.ataman@soostone.com
synopsis: A structured logging framework.
changelog: ! '0.1.1.0

  ==============


  * Set upper bounds for a few dependencies.

  * Add ExceptT instance for Katip typeclass


  0.1.0.0

  ==============


  * Initial release

'
basic-deps:
  exceptions: ! '>=0.5 && <0.9'
  either: ! '>=4 && <4.5'
  bytestring: ! '>=0.9 && <0.11'
  lens-aeson: <1.1
  hostname: ! '>=1.0 && <1.1'
  unix: ! '>=2.5 && <2.8'
  base: ! '>=4.5 && <5'
  time: ! '>=1 && <1.6'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=0.11 && <1.3'
  monad-control: ! '>=1.0 && <1.1'
  auto-update: ! '>=0.1 && <0.2'
  containers: ! '>=0.4 && <0.6'
  string-conv: ! '>=0.1 && <0.2'
  lens: ! '>=4.4 && <4.14'
  old-locale: ! '>=1.0 && <1.1'
  mtl: ! '>=2.2 && <2.3'
  transformers-base: ! '>=0.4.1 && <0.5'
  transformers: ! '>=0.3 && <0.5'
  resourcet: ! '>=1.1 && <1.2'
  aeson: ! '>=0.6 && <0.12'
  template-haskell: ! '>=2.8 && <2.11'
  transformers-compat: -any
  time-locale-compat: ! '>=0.1.0.1 && <0.2'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
author: Ozgun Ataman
latest: '0.1.1.0'
description-type: markdown
description: ! "# Katip [![Build Status](https://travis-ci.org/Soostone/katip.svg?branch=master)](https://travis-ci.org/Soostone/katip)\n\nKatip
  is a structured logging framework for Haskell.\n\n![Katip](./katip.jpg)\n\nKÃ¢tip
  (pronounced kah-tip) is the Turkish word for scribe.\n\n## Features\n\n* *Structured:*
  Logs are structured, meaning they can be individually\n  tagged with key value data
  (JSON Objects). This helps you add\n  critical details to log messages before you
  need them so that when\n  you do, they are available. Katip exposes a typeclass
  for log\n  payloads so that you can use rich, domain-specific Haskell types to\n
  \ add context that will be automatically merged in with existing log\n  context.\n\n*
  *Easy to Integration:* Katip was designed to be easily integrated\n  into existing
  monads. By using typeclasses for logging facilities,\n  individual subsystems and
  even libraries can easily add their own\n  namespacing and context without having
  any knowledge of their\n  logging environment.\n\n* *Practical Use:* Katip comes
  with a set of convenience facilities\n  built-in, so it can be used without much
  headache even in small\n  projects.\n\n    * A `Handle` backend for logging to files
  in simple settings.\n\n    * A `AnyLogPayload` key-value type that makes it easy
  to log\n      structured columns on the fly without having to define new data\n
  \     types.\n\n    * A `Monadic` interface where logging namespace can be obtained\n
  \     from the monad context.\n\n    * Multiple variants of the fundamental logging
  functions for\n      optionally including fields and line-number information.\n\n*
  *Extensible:* Can be easily extended (even at runtime) to output to\n  multiple
  backends at once (known as scribes). See\n  `katip-elasticsearch` as an example.
  Backends for other forms of\n  storage are trivial to write, including both hosted
  database systems\n  and SaaS logging providers.\n\n* *Debug-Friendly:* Critical
  details for monitoring production systems\n  such as host, PID, thread id, module
  and line location are\n  automatically captured. User-specified attributes such
  as\n  environment (e.g. Production, Test, Dev) and system name are also\n  captured.\n\n*
  *Configurable:* Can be adjusted on a per-scribe basis both with\n  verbosity and
  severity.\n\n    * *Verbosity* dictates how much of the log structure should\n      actually
  get logged. In code you can capture highly detailed\n      metadata and decide how
  much of that gets emitted to each backend.\n\n    * *Severity* AKA \"log level\"
  is specified with each message and\n      individual scribes can decide whether
  or not to record that\n      severity. It is even possible to at runtime swap out
  and replace\n      loggers, allowing for swapping in verbose debug logging at runtime\n
  \     if you want.\n\n* *Battle-Tested:* Katip has been integrated into several
  production\n  systems since 2015 and has logged hundreds of millions of messages\n
  \ to files and ElasticSearch.\n\n\n## Examples\nBe sure to look in the [examples](./examples)
  directory for some examples of how\nto integrate Katip into your own stack.\n\n\n##
  Contributors\n\n* [Ozgun Ataman](https://github.com/ozataman)\n* [Michael Xavier](https://github.com/MichaelXavier)\n*
  [Doug Beardsley](https://github.com/mightybyte)\n"
license-name: BSD3
