homepage: https://github.com/EarthCitizen/escape-artist#readme
changelog-type: ''
hash: a8b2a28cb29fcc89888aedd76d958631b5dbe34374ae5a2333eb95fa886637b0
test-bench-deps:
  bytestring: ! '>=0.10.8.1 && <0.11'
  base: ! '>=4.7 && <5'
  escape-artist: -any
  hspec: ! '>=2.2.4 && <2.3'
  text: ! '>=1.2.2.1 && <1.3'
  silently: ! '>=1.2.5 && <1.3'
  QuickCheck: ! '>=2.9.2 && <2.10'
maintainer: rd.github@gmail.com
synopsis: ANSI Escape Sequence Text Decoration Made Easy
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.8.1 && <0.11'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.2.1 && <1.3'
all-versions:
- '1.0.0'
author: Ryan Daniels
latest: '1.0.0'
description-type: haddock
description: ! 'A library for text decoration with ANSI escape sequences made easy.
  Decorate your terminal text easily and expressively.

  Any complex data type, existing or custom, can be simply colorized by implementing
  the class ''ToEscapable'', then

  output to terminal or converted to ''String'' using the provided functions.


  Simple Example


  @

  import Data.Monoid ((\<\>))

  import Text.EscapeArtist


  underlines = Underline $ FgCyan \"I am underlined\" \<\> UnderlineOff \" but I am
  not \" \<\> FgMagenta \"and I am over here\"


  putEscLn underlines

  @


  <<https://raw.githubusercontent.com/EarthCitizen/escape-artist/master/images/underline_off.png>>


  Implementing ''ToEscapable''


  @

  import Data.Monoid ((\<\>))

  import Text.EscapeArtist


  data ABC = A | B deriving (Show, Eq)


  instance ToEscapable ABC where

  &#x20;   toEscapable (A) = FgRed $ show A

  &#x20;   toEscapable (B) = FgGreen $ show B


  instance (ToEscapable a) => ToEscapable (Maybe a) where

  &#x20;    toEscapable (Just a) = FgGreen \"Just\" \<\> Inherit \" \" \<\> FgYellow
  a

  &#x20;    toEscapable a = FgRed $ show a

  @


  Comprehensive Documentation


  See comprehensive documentation with many examples here:


  <https://github.com/EarthCitizen/escape-artist#readme>'
license-name: BSD3
