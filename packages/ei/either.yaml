homepage: http://github.com/ekmett/either/
changelog-type: markdown
hash: d742065705793aaaee0068c4d54699de01828d46aaa7a0e3b11c997e4f9a7536
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: An either monad transformer
changelog: ! "4.3.4\n-----\n* Support `bifunctors` 5, `profunctors` 5, and `semigroupoids`
  5.\n\n4.3.3.3\n-------\n* Fixed and enhanced documentation for `eitherToError`.\n\n4.3.3.2\n-------\n*
  Support `exceptions` 0.8\n\n4.3.3.1\n-------\n* Support `exceptions` 0.7\n\n4.3.3\n-----\n*
  Added `eitherToError`.\n\n4.3.2.1\n-------\n* Support `monad-control` 1.0\n\n4.3.2\n-----\n*
  Added `Validation`.\n\n4.3.0.2\n-------\n* Updated MonadRandom support.\n\n4.3.0.1\n-------\n*
  Fixed import of `MonadCatch` to support versions of `base` before 4.6\n\n4.3\n---\n*
  Inverted dependency between `free` and `either`.\n\n4.2\n---\n* Added instances
  for `MonadThrow`, `MonadCatch`.\n\n4.1\n---\n* Added instances for `MonadBase`,
  `MonadBaseControl`, and `MonadTransControl`.\n\n4.0\n---\n* Updated dependencies.\n\n3.4.2\n-----\n*
  Added 'Data.Either.Combinators'.\n\n3.4.1\n-----\n* Trustworthy despite UndecidableInstances\n\n3.4\n---\n*
  Delegate `fail` to the underlying `Monad`, rather than `error`.\n\n3.3\n---\n* Inverted
  roles between `Semigroup` and `Alt`. This let us write `Alternative` and `MonadPlus`
  instances that are compatible.\n* Removed the `Functor` constraint on most instances
  in exchange for incurring a `Monad` constraint on `Traversable`. `EitherT`\n  is
  after all, a `Monad` transformer first and foremost.\n\n3.2\n---\n* Changed the
  `Semigroup` to use a `Semigroup` to combine `Left` branches. Left `Alt` untouched,
  so you can mix and match.\n\n3.1\n---\n* Added instances for `mtl` classes and `MonadRandom`.\n*
  The meaning of `mapEitherT` has changed to match `mapErrorT` in the `mtl`. The old
  `mapEitherT` is now `bimapEitherT`.\n\n3.0.3\n-----\n* Started `CHANGELOG`\n"
basic-deps:
  semigroupoids: ! '>=4 && <6'
  exceptions: ! '>=0.5 && <0.9'
  free: ! '>=4.9 && <5'
  MonadRandom: ! '>=0.1 && <0.4'
  base: ! '>=4 && <5'
  monad-control: ! '>=0.3.2 && <1.1'
  semigroups: ! '>=0.8.3.1 && <1'
  bifunctors: ! '>=4 && <6'
  mtl: ! '>=2.0 && <2.3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.2 && <0.5'
  profunctors: ! '>=4 && <6'
all-versions:
- '0.1'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.2.2.2'
- '0.2.2.3'
- '0.2.3'
- '0.2.3.1'
- '0.3'
- '0.3.0.1'
- '3.0'
- '3.0.1'
- '3.0.2'
- '3.0.3'
- '3.1'
- '3.2'
- '3.3'
- '3.4'
- '3.4.1'
- '3.4.2'
- '4.0'
- '4.1'
- '4.1.1'
- '4.1.2'
- '4.3'
- '4.3.0.1'
- '4.3.0.2'
- '4.3.1'
- '4.3.2'
- '4.3.2.1'
- '4.3.3'
- '4.3.3.1'
- '4.3.3.2'
- '4.3.4'
author: Edward A. Kmett
latest: '4.3.4'
description-type: markdown
description: ! 'either

  ======


  [![Build Status](https://secure.travis-ci.org/ekmett/either.png?branch=master)](http://travis-ci.org/ekmett/either)


  This provides an `Either` monad transformer that unlike `ErrorT` is unencumbered
  by a constraint on its `Left` hand argument. This is needed for a number of applications
  of this monad transformer, notably in [recursion-schemes](https://github.com/ekmett/recursion-schemes).


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
