homepage: https://github.com/agentm/project-m36
changelog-type: markdown
hash: 472f6aecf969ef60649f1feb1da336dfce104b00326791f4efff81b12a159fc0
test-bench-deps:
  either: -any
  bytestring: -any
  MonadRandom: -any
  haskeline: -any
  stm: -any
  Cabal: -any
  base: -any
  time: -any
  base64-bytestring: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  http-api-data: -any
  megaparsec: -any
  list-t: -any
  filepath: -any
  criterion: -any
  network: -any
  websockets: -any
  conduit: -any
  semigroups: -any
  uuid-aeson: -any
  HUnit: -any
  path-pieces: -any
  containers: -any
  vector-binary-instances: -any
  cassava: -any
  deepseq-generics: -any
  binary: -any
  network-transport-tcp: -any
  data-interval: -any
  mtl: -any
  hashable: -any
  network-transport: -any
  hashable-time: -any
  project-m36: ==0.1
  attoparsec: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  random: -any
  parallel: -any
  deepseq: -any
  gnuplot: -any
  stm-containers: -any
  aeson: -any
  template-haskell: -any
  vector: -any
  directory: -any
maintainer: agentm@themactionfaction.com
synopsis: Relational Algebra Engine
changelog: ! '# 2017-06-12


  ## add file locking


  This [feature](#102) allows Project:M36 database directories to be shared amongst
  multiple Project:M36 processes. This is similar to how SQLite operates except that
  the remote server mode supports the feature as well. This could allow, for example,
  multi-master, file-based replication across Windows shares or NFS.


  [Documentation](/docs/replication.markdown)


  # 2016-11-30


  ## add functional dependency macro


  Date demonstrates two ways to implement functional dependencies as constraints on
  page 21 in "Database Design and Relational Theory". A similar macros is now implemented
  in the tutd interpreter.


  ```funcdep sname_status (sname) -> (status) s```


  [Documentation](/docs/tutd_tutorial.markdown#functional-dependencies)


  # 2016-09-07


  ## add TransGraphRelationalExpr


  The TransGraphRelationalExpr allows queries against all past states of the database.


  The following example executes a query against two different committed transactions
  using syntax similar to that of git for graph traversal:

  ```:showtransgraphexpr s@master~ join sp@master```


  [Documentation](/docs/transgraphrelationalexpr.markdown)

'
basic-deps:
  ghc: ! '>=7.8 && <=8.1'
  either: -any
  bytestring: -any
  MonadRandom: -any
  unix: -any
  haskeline: -any
  stm: -any
  Cabal: -any
  base: ! '>=4.8 && <5.0'
  time: -any
  distributed-process: ! '>=0.6.6'
  base64-bytestring: -any
  unordered-containers: -any
  text: -any
  uuid: ! '>=1.3.12'
  http-api-data: -any
  megaparsec: ! '>=5.2.0 && <5.3'
  list-t: -any
  filepath: -any
  websockets: -any
  conduit: -any
  semigroups: -any
  uuid-aeson: -any
  HUnit: -any
  path-pieces: -any
  random-shuffle: -any
  distributed-process-client-server: ! '>=0.2.3'
  distributed-process-extras: ! '>=0.3.2'
  containers: -any
  vector-binary-instances: -any
  cassava: ==0.4.*
  deepseq-generics: -any
  ghc-paths: -any
  binary: -any
  cryptohash-sha256: -any
  monad-parallel: -any
  network-transport-tcp: -any
  old-locale: -any
  data-interval: -any
  mtl: -any
  hashable: -any
  network-transport: -any
  hashable-time: -any
  project-m36: ==0.1
  attoparsec: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  random: -any
  parallel: -any
  deepseq: -any
  extended-reals: -any
  gnuplot: -any
  stm-containers: -any
  resourcet: -any
  Glob: -any
  aeson: -any
  distributed-process-async: ! '>=0.2.4'
  template-haskell: -any
  vector: -any
  directory: -any
all-versions:
- '0.1'
author: AgentM
latest: '0.1'
description-type: markdown
description: ! '# Îž Project:M36 Relational Algebra Engine


  *Software can always be made faster, but rarely can it be made more correct.*


  ## Introduction


  Project:M36 implements a relational algebra engine as inspired by the writings of
  Chris Date.


  ## Description


  Unlike most database management systems (DBMS), Project:M36 is opinionated software
  which adheres strictly to the mathematics of the relational algebra. The purpose
  of this adherence is to prove that software which implements mathematically-sound
  design principles reaps benefits in the form of code clarity, consistency, performance,
  and future-proofing.


  Project:M36 can be used as an in-process or remote DBMS.


  Project:M36 is written entirely in the [Haskell programming language](https://www.haskell.org/).


  ## Sample Session


  [![asciicast](https://asciinema.org/a/3syu35c8cydm403292a74l1n5.png)](https://asciinema.org/a/3syu35c8cydm403292a74l1n5)


  ## Try It!


  You can experiment instantly with Project:M36 straight from your browser at [try.project-m36.io](https://try.project-m36.io)!


  ## Use-Cases


  Project:M36 supports multiple frontends which target different audiences.


  * learn about the relational algebra via TutorialD

  * store and manipulate databases

  * use Project:M36 as a native Haskell database backend


  ## Community


  * [Developer''s Blog](https://agentm.github.io/project-m36/)

  * [Mailing List/Discussion Group](https://groups.google.com/d/forum/project-m36)

  * IRC Channel: chat.freenode.net #project-m36


  ## Documentation


  ### Introductory Materials


  1. [Installation and Introduction to Project:M36](docs/introduction_to_projectm36.markdown)

  1. [Introduction to the Relational Algebra](docs/introduction_to_the_relational_algebra.markdown)

  1. [TutorialD Tutorial](docs/tutd_tutorial.markdown)

  1. [15 Minute Tutorial](docs/15_minute_tutorial.markdown)

  1. [Developer''s Change Log](Changelog.markdown)


  ### Database Comparisons


  1. [ACID Database Properties](docs/acid_assessment.markdown)

  1. [On NULL (in SQL)](docs/on_null.markdown)

  1. [Reaching "Out of the Tarpit" with Project:M36](docs/reaching_out_of_the_tarpit.markdown)


  ### Advanced Features


  1. [Transaction Graph Operators](docs/transaction_graph_operators.markdown)

  1. [ProjectM36.Client Library](docs/projectm36_client_library.markdown)

  1. [Adding New Data Types](docs/new_datatypes.markdown)

  1. [Database-Manipulating Functions](docs/database_context_functions.markdown)

  1. [Serving Remote ProjectM36 Databases](docs/server_mode.markdown)

  1. [Using Notifications](docs/using_notifications.markdown)

  1. [Merge Transactions](docs/merge_transactions.markdown)

  1. [WebSocket Server](docs/websocket_server.markdown)

  1. [Atom (Value) Functions](docs/atomfunctions.markdown)

  1. [Trans-Graph Relational Expressions](docs/transgraphrelationalexpr.markdown)

  1. [Isomorphic Schemas](docs/isomorphic_schemas.markdown)

  1. [Replication](docs/replication.markdown)


  ## Development


  Project:M36 is developed in Haskell and compiled with GHC 7.10 or GHC 8.0.2 or later.


  ## Related Projects


  * [The Third Manifesto](http://thethirdmanifesto.com/): the philosophical basis
  for relational algebra engines

  * [Rel](http://reldb.org/): a TutorialD implementation against a BerkeleyDB backend

  * [Andl](http://andl.org/): a new database language with SQLite and PostgreSQL backends

  * [Coddie](https://github.com/scvalencia/Coddie): a python-based relational algebra
  interpreter


  ## Suggested Reading


  * [Out of the Tarpit](http://shaffner.us/cs/papers/tarpit.pdf): a proposed software
  architecture which minimizes state and complexity. Project:M36 implements the requirements
  of this paper.

  * [Database Design & Relational Theory: Normal Forms and All That Jazz](http://shop.oreilly.com/product/0636920025276.do):
  mathematical foundations for the principles of the relational algebra

  * [Database Explorations: Essays on the Third Manifesto and Related Topics](http://bookstore.trafford.com/Products/SKU-000177853/Database-Explorations.aspx):
  additional essays and debates on practical approaches to relational algebra engine
  design

'
license-name: PublicDomain
