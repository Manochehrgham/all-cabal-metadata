homepage: https://github.com/ixmatus/prizm
changelog-type: ''
hash: 234514cb9147b29cb0640551c907213f1709be1f54c2783c738aa9ce38335662
test-bench-deps:
  test-framework-hunit: -any
  prizm: -any
  test-framework: -any
  base: -any
  test-framework-quickcheck2: -any
  HUnit: -any
  convertible: -any
  QuickCheck: -any
  mono-traversable: -any
maintainer: parnell+hackage@digitalmentat.com
synopsis: Convert colors to different color spaces, interpolate colors, and transform
  colors
changelog: ''
basic-deps:
  base: ! '>=4.5 && <5'
  text: ! '>=0.11.2.3'
  convertible: ! '>=1.1'
  mono-traversable: ! '>=1.0'
all-versions:
- '0.3.1.2'
- '1.1.0'
- '2.0.0'
- '2.0.1'
author: Parnell Springmeyer
latest: '2.0.1'
description-type: markdown
description: ! "# Welcome!\n![Hackage Version](https://img.shields.io/hackage/v/prizm.svg?style=flat)\n![Travis
  CI Status](https://travis-ci.org/ixmatus/prizm.svg?branch=master)\n\n`prizm` is
  a Haskell library for transforming colors. Specifically, providing\nfunctions for
  transforming between different color spaces (`CIE` and `sRGB`),\ninterpolating colors
  and adjusting the tint, shade, hue, or lightness of a\ncolor.\n\nThe inspiration
  for this library came from a desire to blend two colors\nrepresented in the `sRGB`
  color space. My research about color blending and\ncolor space representation in
  the computer led me to the conclusion that the\n`CIE L*Ch` color space is the most
  effective for blending because it most\naccurately represents how the human eye
  sees hue and therefore preserves (and\nblends) hue the most accurately.\n\n## Quickstart\n```haskell\n{-#
  LANGUAGE ScopedTypeVariables #-}\n\nimport Data.Convertible\nimport Data.Prizm.Color\nimport
  Data.Prizm.Color.CIE as CIE\n\nmain = do\n  -- Convert RGB colors to the CIE.LCH
  color space\n  let green :: CIE.LCH = convert $ RGB 102 255 0\n      pink  :: CIE.LCH
  = convert $ RGB 255 0 255\n\n      -- Blend with a weight of 50%\n      blended50
  = pink <~> green\n\n      -- Blend with a weight of 20%\n      blended20 = interpolate
  20 (pink,green)\n\n  -- Print the CIE.LCH representation\n  putStrLn $ show blended50\n\n
  \ -- Print the RGB representation of the blended color\n  putStrLn . show $ (convert
  blended20) :: RGB\n\n  -- Print the CSS-friendly hexadecimal RGB representation
  of the blended color\n  putStrLn . show $ (convert blended20) :: Hex\n      \n```\n\n##
  Supported Algorithms\n- `sRGB     <-> CIE XYZ `\n- `CIE XYZ  <-> CIE L*ab`\n- `CIE
  L*ab <-> CIE L*Ch`\n\n## Supported Functions\n- Color interpolation\n- Tinting /
  Darkening\n- Lightness\n- Hue\n- Chroma/Saturation\n\n## Examples\n[Example blending
  with CIELCH converted back to RGB](./blending-test.html).\n\n# References\n- [General
  Color Formulas, Data, and Algorithms](http://www.brucelindbloom.com)\n- [CIE Conversion
  Mathematics](http://rip94550.wordpress.com/2011/07/04/color-cielab-and-tristimulus-xyz/)\n-
  [Conversion Algorithm Sources](http://www.easyrgb.com/index.php?X=MATH&H=01)\n-
  [Good list of useful color manipulation formulas](https://github.com/mikeemoo/ColorJizz-PHP/blob/master/src/MischiefCollective/ColorJizz/ColorJizz.php)\n\n"
license-name: BSD3
