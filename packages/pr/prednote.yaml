changelog-type: ''
hash: 400becc274f8d776b8476bf2a56f4e0b224865cad44907365c82d961e68ef5ce
synopsis: Evaluate and display trees of predicates
changelog: ''
all-versions:
- '0.2.0.0'
- '0.4.0.0'
- '0.6.0.0'
- '0.8.0.0'
- '0.10.0.0'
- '0.12.0.0'
- '0.14.0.0'
- '0.16.0.0'
- '0.18.0.0'
- '0.18.0.4'
- '0.20.0.0'
- '0.22.0.0'
- '0.22.0.2'
- '0.24.0.0'
- '0.24.2.0'
- '0.26.0.0'
- '0.26.0.2'
- '0.26.0.4'
- '0.28.0.0'
- '0.28.0.2'
- '0.30.0.0'
- '0.32.0.0'
- '0.32.0.4'
- '0.32.0.6'
- '0.34.0.0'
- '0.36.0.0'
- '0.36.0.2'
latest: '0.36.0.2'
description-type: haddock
description: ! 'Build and evaluate trees of predicates. For example, you might build

  a predicate of the type Int -> Bool. You do this by assembling

  several predicates into a tree. You can then verbosely evaluate

  this tree, showing why a particular result is reached.


  prednote also provides modules to test several subjects against a

  given predicate, and to parse infix or RPN expressions into a tree of

  predicates.'
