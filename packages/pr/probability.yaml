homepage: http://www.haskell.org/haskellwiki/Probabilistic_Functional_Programming
changelog-type: ''
hash: 66e36aad4ba593aa628cfa9a644fed74452d470be2002dbcca4c82525caa1fa8
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Probabilistic Functional Programming
changelog: ''
basic-deps:
  base: ! '>=2 && <5'
  utility-ht: ! '>=0.0.6 && <0.1'
  containers: ! '>=0.1 && <0.6'
  transformers: ! '>=0.0.1 && <0.6'
  random: ! '>=1.0 && <2'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.2.3'
- '0.2.3.1'
- '0.2.4'
- '0.2.4.1'
- '0.2.5'
- '0.2.5.1'
author: Martin Erwig <erwig@eecs.oregonstate.edu>, Steve Kollmansberger
latest: '0.2.5.1'
description-type: text
description: ! "Probabilistic Functional Programming in Haskell\n\nContact:\nMartin
  Erwig, Oregon State University, erwig@eecs.oregonstate.edu\n\n\nThese files have
  been tested with GHC 6.4\n\nCore Library files:\n\nShow.hs\t\tPretty Printing\nListUtils.hs\t\nPrintList.hs\t\nProbability.hs\tCore
  probabilistic module\nVisualize.hs\tVisualization system for use with R\n\nExamples:\n\nBarber.hs\t\tAn
  example of the queueing system\nBayesianNetwork.hs\tImplementing Bayesian networks\nBoys.hs\t\t\tA
  statistical examples\nNBoys.hs\t\tA generalized version of the previous\nCollection.hs\t\tCollections
  and two examples:\n\t\t\tMarbles and cards\nDice.hs\t\t\tRolling dice\nMontyHall.hs\t\tThe
  \"Monty Hall\" Game (statistical)\nPredator.hs\t\tNon-probabilistic, demonstrates
  visualization\nTreeGrowth.hs\t\tA simple tree growth example\n\n\n\nVisualize output
  is placed in the file FuSE.R which can be loaded into the \nR statistical program
  to see visualizations.\n\nRandomized values can be displayed to the console using
  the printR \nfunction, which shows the value from a IO monad function.\n\n"
license-name: BSD3
