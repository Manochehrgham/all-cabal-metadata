homepage: http://www.bioinf.uni-leipzig.de/Software/gADP/
changelog-type: markdown
hash: 04e87a9c3559cc539687d66d58d6d27c01b661ee4b7f8e71c1ec1b5e8994abe2
test-bench-deps:
  test-framework: ! '>=0.8 && <0.9'
  base: -any
  PrimitiveArray: -any
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  test-framework-th: ! '>=0.2 && <0.3'
  QuickCheck: -any
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Efficient multidimensional arrays
changelog: ! "0.6.0.0\n-------\n\n- moved primitive array classes to Data.PrimitiveArray.Class\n-
  added _from / _to lenses\n- Field1 .. Field6 lenses for indices (Z:.a:.b...) (with
  Z being Field0)\n  - lens stuff currently commented out; aiming to have an extra
  package [lens\n    is fairly heavy]\n- FillTables should work now (with PointL,
  Subword)\n- freezing of whole stacks of (Z:.mutarr:.mutarr:. ...) tables\n- explicit
  'Shape Subword'; this allows for simpler code in a number of places\n  and is especially
  useful for CYK-style algorithms that have a\n  single-dimensional upper-triangular
  matrix.\n- rangeStream of Extshape is new and used by the FillTables module\n- Binary,
  Cereal, Aeson instances for indices and immutable tables\n- orphan instances of
  Binary, Cereal, Aeson for Z, and (:.)\n- topmostIndex returns the final index position
  for CYK-style (bottom to top)\n  parsing\n- removed Data.Array.Repa.Index.Point
  (we have PointL, PointR in Points.hs)\n- added   Data.Array.Repa.Index.Set (for
  sets with an interface, used by\n  Hamiltonian path problems)\n- Data.Array.Repa.Index.Outside
  is now just a newtype wrapped around other\n  Index types. We want to be able to
  say \"a Subword, but for Outside\n  algorithms\"\n- travis-ci integration\n\n0.5.4.0\n-------\n\n-
  actually implemented PointR\n\n- added the rather important strictness annotation
  for mutable arrays in .Zero\n\n0.5.3.0\n-------\n\n- fixed vector-th-unbox problem\n"
basic-deps:
  cereal: ==0.4.*
  bits: ==0.4.*
  base: ! '>=4.7 && <4.9'
  vector-binary-instances: ==0.2.*
  binary: ==0.7.*
  OrderedBits: ==0.0.0.*
  deepseq: ! '>=1.3 && <1.5'
  vector-th-unbox: ==0.2.*
  QuickCheck: ! '>=2.7 && <2.9'
  aeson: ==0.8.*
  primitive: ! '>=0.5.4 && <0.7'
  vector: ==0.10.*
all-versions:
- '0.0.2.1'
- '0.0.2.2'
- '0.0.3.0'
- '0.0.3.1'
- '0.0.4.0'
- '0.1.1.2'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.5.0.0'
- '0.5.2.0'
- '0.5.3.0'
- '0.5.4.0'
- '0.6.0.0'
author: Christian Hoener zu Siederdissen, 2011-2015
latest: '0.6.0.0'
description-type: markdown
description: ! '# PrimitiveArray


  [![Build Status](https://travis-ci.org/choener/PrimitiveArray.svg?branch=master)](https://travis-ci.org/choener/PrimitiveArray)


  PrimitiveArray provides operations on multi-dimensional arrays. Internally, the

  representation is based on the vector library, while the multi-dimensional

  indexing follows repa.


  Primitive arrays are designed to be used together with ADPfusion.




  #### Contact


  Christian Hoener zu Siederdissen

  choener@bioinf.uni-leipzig.de

  http://www.bioinf.uni-leipzig.de/~choener/


'
license-name: BSD3
