homepage: https://github.com/chrisdone/present
changelog-type: ''
hash: 6992eb70ea6d971bfca8080ce9bc19dc1a1bc1544d7e5949e1a932b6d5a20e2f
test-bench-deps: {}
maintainer: chrisdone@gmail.com
synopsis: Make presentations for data types.
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  template-haskell: -any
all-versions:
- '0.0.0'
- '1.0'
- '1.1'
- '2.1'
- '2.2'
- '4.0.0'
- '4.0.1'
author: Chris Done
latest: '4.0.1'
description-type: markdown
description: ! 'present

  =======


  Make presentations for data types.


  ## Install


  Requires: GHC 7.10.3


  Install globally into your GHC''s global database (via stack) with:


  ```

  $ sh install-to-global-db.sh

  ```


  To remove it later:


  ```

  $ sh remove-from-global-db.sh

  ```


  To be added: install via `stack install present`, but it needs to be

  added to an LTS/nightly version first.


  ## Customizing GHCi


  Add to the following to your `~/.ghci`:


  ``` haskell

  :seti -XTemplateHaskell

  :def presentDebug \e -> return ("let it = " ++ e ++ "\n$(Present.presentIt)")

  :def presentQualified \e -> return ("let it = " ++ e ++ "\nPrelude.putStrLn (Present.toShow
  True $(Present.presentIt))")

  :def present \e -> return ("let it = " ++ e ++ "\nPrelude.putStrLn (Present.toShow
  False $(Present.presentIt))")

  :set -package present

  ```


  ## Usage


  ``` haskell

  bash-3.2$ stack exec ghci

  GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help

  package flags have changed, resetting and loading new packages...

  λ> :present "hi"

  "hi"


  λ> :present 123

  123


  λ> data X a = X a Int


  λ> :present X 5 1

  X 5 1


  λ> :present S88.pack "hi"

  PS (ForeignPtr GHC.Prim.Addr# (PlainPtr GHC.Prim.MutableByteArray#)) 0 2


  λ> :present print

  <a_0 -> GHC.Types.IO ()>


  λ> :present print ()

  IO (<GHC.Prim.State# GHC.Prim.RealWorld -> (GHC.Prim.State# GHC.Prim.RealWorld,
  a_0)>)


  λ> :present undefined

  _ :: t_0


  λ> :present id

  <a_0 -> a_0>


  λ> :present [undefined]

  [_ :: t_0]


  ```


  ## Extension


  You can write your own instances like this:


  ``` haskell

  λ> data X = X Int

  λ> :present X 5

  X 5

  λ> instance Present0 X where present0 = ("X",\(X x) -> IntegerPresentation "X" (show
  x))

  λ> :present X 5

  5

  ```

'
license-name: BSD3
