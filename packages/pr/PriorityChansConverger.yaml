changelog-type: ''
hash: 3700eec3b11920c6416349817d0b41d68e16433cd3da96ebe3db260974986f60
synopsis: Read single output from an array of inputs - channels with priorities
changelog: ''
all-versions:
- '0.1'
latest: '0.1'
description-type: haddock
description: ! 'Abbreviation for the @PriorityChansConverger@ is PCC.


  Based on @STM.TChan@, extended with capacity control.

  Wrapped into IO version is also available.


  When user reads from the PCC, the choice is made - from which channel

  to read. System selects a nonempty channel, whose (CurrentPriority,

  StartPriority) tuple is max. The side effect of the channel selection

  is it''s /CurrentPriority/ decrease by one, if it''s value becomes

  less than one, then the /CurrentPriority/ is set to /StartPriority/.


  For the main API interface:


  @import Control.Concurrent.PriorityChansConverger@


  The realization probably isn''t

  very fast and isn''t good at memory economy, since it uses fresh high

  level primitive - STM. It wasn''t intended to be used

  with millions of channels. But it''s max throughput comparing to the

  ordinary @Chan@ throughput is to be estimated (will do it in some

  future version).'
