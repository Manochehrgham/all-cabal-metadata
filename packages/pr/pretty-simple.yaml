homepage: https://github.com/cdepillabout/pretty-simple
changelog-type: ''
hash: 45cfba4264f5865e0e45701e6607917f397f7cf177b68eec037cf24ae8c50ff1
test-bench-deps:
  base: -any
  criterion: -any
  doctest: -any
  pretty-simple: -any
  Glob: -any
maintainer: cdep.illabout@gmail.com
synopsis: pretty printer for data types with a 'Show' instance.
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5'
  text: -any
  parsec: -any
  semigroups: -any
  containers: -any
  ansi-terminal: -any
  lens: -any
  mtl: -any
  pretty-simple: -any
  transformers: -any
  mono-traversable: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '1.0.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.0.0.3'
author: Dennis Gosnell
latest: '1.0.0.3'
description-type: markdown
description: ! "\nText.Pretty.Simple\n==================\n\n[![Build Status](https://secure.travis-ci.org/cdepillabout/pretty-simple.svg)](http://travis-ci.org/cdepillabout/pretty-simple)\n[![Hackage](https://img.shields.io/hackage/v/pretty-simple.svg)](https://hackage.haskell.org/package/pretty-simple)\n[![Stackage
  LTS](http://stackage.org/package/pretty-simple/badge/lts)](http://stackage.org/lts/package/pretty-simple)\n[![Stackage
  Nightly](http://stackage.org/package/pretty-simple/badge/nightly)](http://stackage.org/nightly/package/pretty-simple)\n![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)\n\n`pretty-simple`
  is a pretty printer for Haskell data types that have a `Show`\ninstance.\n\nFor
  example, imagine the following Haskell data types and values:\n\n```haskell\ndata
  Foo = Foo { foo1 :: Integer , foo2 :: [String] } deriving Show\n\nfoo :: Foo\nfoo
  = Foo 3 [\"hello\", \"goodbye\"]\n\ndata Bar = Bar { bar1 :: Double , bar2 :: [Foo]
  } deriving Show\n\nbar :: Bar\nbar = Bar 10.55 [foo, foo]\n```\n\nIf you run this
  in `ghci` and type `print bar`, you'll get output like this:\n\n```haskell\nBar
  {bar1 = 10, bar2 = [Foo {foo1 = 3, foo2 = [\"hello\",\"goodbye\"], foo3 = 3.3},Foo
  {foo1 = 3, foo2 = [\"hello\",\"goodbye\"], foo3 = 3.3}], bar3 = 10.55}\n```\n\nThis
  is pretty hard to read.  Imagine if there were more fields or it were even\nmore
  deeply nested.  It would be even more difficult to read.\n\n`pretty-simple` can
  be used to print `bar` in an easy-to-read format:\n\n![example screenshot](/img/pretty-simple-example-screenshot.png?raw=true
  \"example screenshot\")\n\n## Usage\n\n`pretty-simple` can be easily used from `ghci`
  when debugging.\n\nWhen using `stack` to run `ghci`, just append append the `--package`
  flag to\nthe command line to load `pretty-simple`.\n\n```sh\n$ stack ghci --package
  pretty-simple\n```\n\nOnce you get a prompt in `ghci`, you can use `import` to get
  `pretty-simple`'s\n`pPrint` function in scope.\n\n```haskell\n> import Text.Pretty.Simple
  (pPrint)\n```\n\nYou can test out `pPrint` with simple data types like `Maybe` or
  tuples.\n\n```haskell\n> pPrint $ Just (\"hello\", \"goodbye\")\nJust\n    ( \"hello\"\n
  \   , \"goodbye\"\n    )\n```\n\n## Features\n\n`pretty-simple` has these features:\n\n-
  Easy-to-read\n    - Complex data types are simple to understand.\n- Color\n    -
  Prints in color using ANSI escape codes.\n    - It is possible to print without
  color by using the `pPrintNoColor`\n      function.\n- Rainbox Parentheses\n    -
  Easy to understand deeply nested data types.\n- Configurable Indentation\n    -
  Amount of indentation is configurable with the `pPrintOpt` function.\n- Fast\n    -
  No problem with data types thousands of lines long.\n- Works with any data type
  with a `Show` instance\n    - Some common Haskell data types have a `Show` instance
  that produces\n      non-valid Haskell code.  `pretty-simple` will pretty-print
  even these\n      data types.\n\n## Why not `(some other package)`?\n\nOther pretty-printing
  packages have some combination of these defects:\n\n- No options for printing in
  color.\n- No options for changing the amount of indentation\n- Requires every data
  type to be an instance of some special typeclass (instead\n  of just `Show`).\n-
  Requires all `Show` instances to output valid Haskell code.\n\n## Contributions\n\nFeel
  free to open an issue or PR for any bugs/problems/suggestions/improvements.\n"
license-name: BSD3
