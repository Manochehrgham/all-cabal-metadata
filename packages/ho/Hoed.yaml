homepage: https://wiki.haskell.org/Hoed
changelog-type: text
hash: c7de81f2883655baef1646053d1b0884d0ac676a63a92b1d433294eb5ec42a31
test-bench-deps: {}
maintainer: hoed@maartenfaddegon.nl
synopsis: Lightweight algorithmic debugging.
changelog: ! "0.3.5 Maarten Faddegon 9 Feb 2016\n\n  * Give more control to restrict
  properties when used for judging to make approach sound.\n\n0.3.4 Maarten Faddegon
  8 Jan 2016\n\n  * Added beta functionality of using properties to judge statements.\n\n0.3.3
  Maarten Faddegon 6 Dec 2015\n\n  * Documentation and additional examples.\n\n0.3.2
  Maarten Faddegon 6 Dec 2015\n\n  * Add experimental combinators for property-assisted
  algorithmic debugging.\n\n0.3.1 Maarten Faddegon 20 Nov 2015\n\n  * Some performance
  improvements in Debug.Hoed.Pure; add several extra examples.\n\n0.3.0 Maarten Faddegon
  3 Sep 2015\n\n  * Add Debug.Hoed.Pure, allowing computation tree tracing with higher
  precision without depending on the cost centre stack extension.\n\n0.2.2 Maarten
  Faddegon 14 July 2015\n\n  * Use a preprocessor to make the library work with GHC
  7.10, but also for older versions of GHC. This is related to the \"The Applicative
  Monad Proposal\" and the changes to Template Haskell in GHC 7.10 that are not backward
  compatibility with earlier versions of GHC.\n\n0.2.1 Maarten Faddegon 1 May 2015\n\n
  \ * Small changes to make Hoed work with GHC 7.10\n\n0.2.0 Maarten Faddegon 12 Feb
  2015\n\n  * A threepenny-gui algorithmic debugger.\n  * Construction of computation
  trees with just local annotations. Existing algorithmic debuggers for Haskell require
  a transformation of all modules in a program, even libraries that the user does
  not want to debug and which may use language features not supported by the debugger.
  This is a pity, because a promising approach to debugging is therefore not applicable
  to many real-world programs. We use the cost centre stack from the Glasgow Haskell
  Compiler profiling environment together with runtime value observations to collect
  enough information for algorithmic debugging.\n\n0.1.0.1 Maarten Faddegon 24 May
  2014\n\n  * A tracer library based on Andy Gills HOOD v0.2. Allows to observe intermediate
  values. How values are observed can be derived with the Generic Deriving Mechanism,
  or generated with Template Haskell. \n"
basic-deps:
  cereal: -any
  bytestring: -any
  base: ! '>=4 && <5'
  time: -any
  FPretty: -any
  libgraph: ==1.11
  filepath: -any
  process: -any
  RBTree: ==0.0.5
  array: -any
  containers: -any
  threepenny-gui: ==0.6.0.5
  regex-posix: -any
  mtl: -any
  template-haskell: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
author: Maarten Faddegon
latest: '0.3.6'
description-type: markdown
description: ! "# Hoed - A Lightweight Haskell Tracer and Debugger \n\nHoed is a tracer
  and debugger for the programming language Haskell. To locate a defect with Hoed
  you annotate suspected functions and compile as usual. Then you run your program,
  information about the annotated functions is collected. Finally you connect to a
  debugging session using a webbrowser. See the\n\n  [**Project homepage**](http://wiki.haskell.org/Hoed)\n\nfor
  more information on what it does and how you can use it to find bugs in your code.\n\nSubmit
  feature requests or contribute code on the\n\n  [**Github projectpage**](https://github.com/MaartenFaddegon/Hoed)
  [![Build Status](https://travis-ci.org/MaartenFaddegon/Hoed.svg?branch=master)](https://travis-ci.org/MaartenFaddegon/Hoed)\n"
license-name: BSD3
