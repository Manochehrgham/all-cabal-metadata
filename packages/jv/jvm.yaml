homepage: http://github.com/tweag/inline-java/tree/master/jvm#readme
changelog-type: ''
hash: 6b04747934e03af8dc686b348da1d4f67e71a1c1b52b00f661d6097e5ae84d66
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  jvm: -any
maintainer: m@tweag.io
synopsis: Call JVM methods from Haskell.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.7 && <5'
  jni: ! '>=0.1'
  text: ! '>=1.2'
  singletons: ! '>=2.0'
  distributed-closure: ! '>=0.3'
  vector: ! '>=0.11'
all-versions:
- '0.1'
- '0.1.1'
author: Tweag I/O
latest: '0.1.1'
description-type: markdown
description: ! "# jvm: Call any JVM function from Haskell\n\nThis package enables
  calling any JVM function from Haskell. If you'd\nlike to call JVM methods using
  Java syntax and hence get the Java\ncompiler to scope check and type check all your
  foreign calls, see\n[inline-java][inline-java], which builds on top of this package.\n\n[inline-java]:
  https://github.com/tweag/inline-java#readme\n\n# Example\n\nGraphical Hello World
  using Java Swing:\n\n```Haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE FlexibleInstances
  #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nimport
  Data.Text (Text)\nimport Language.Java\n\nnewtype JOptionPane = JOptionPane (J ('Class
  \"javax.swing.JOptionPane\"))\ninstance Coercible JOptionPane ('Class \"javax.swing.JOptionPane\")\n\nmain
  :: IO ()\nmain = withJVM [] $ do\n    message <- reflect (\"Hello World!\" :: Text)\n
  \   callStatic\n      (classOf (undefined :: JOptionPane))\n      \"showMessageDialog\"\n
  \     [JObject nullComponent, JObject (upcast message)]\n  where\n    nullComponent
  :: J ('Class \"java.awt.Component\")\n    nullComponent = jnull\n```\n"
license-name: BSD3
