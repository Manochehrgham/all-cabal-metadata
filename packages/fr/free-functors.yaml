changelog-type: ''
hash: 83f7759dbcc9420c7933712523c0a0c63d70e26376cc2286c31d45d1fab9b1a2
synopsis: Provides free functors that are adjoint to functors that forget class constraints.
changelog: ''
all-versions:
- '0'
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.3'
- '0.4'
- '0.4.1'
- '0.5'
- '0.6'
- '0.6.1'
- '0.6.1.1'
- '0.6.2'
- '0.6.3'
- '0.6.3.1'
- '0.6.3.2'
- '0.6.3.3'
- '0.6.4'
- '0.6.4.1'
latest: '0.6.4.1'
description-type: haddock
description: ! 'A free functor is a left adjoint to a forgetful functor. It used to
  be the case

  that the only category that was easy to work with in Haskell was Hask itself, so

  there were no interesting forgetful functors.


  But the new ConstraintKinds feature of GHC provides an easy way of creating

  subcategories of Hask. That brings interesting opportunities for free (and cofree)
  functors.


  The examples directory contains an implementation of non-empty lists as free semigroups,

  and automata as free actions. The standard example of free higher order functors
  is free monads,

  and this definition can be found in Data.Functor.HFree.'
