changelog-type: ''
hash: 85a5dac9dd1ccb23e75f84ed17ae3b4c97b954523bcb6561101d2932d2a1e692
synopsis: Operational Applicative, Alternative, Monad and MonadPlus from free types.
changelog: ''
all-versions:
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
latest: '0.5.0.0'
description-type: haddock
description: ! 'A reimplementation of the @operational@ package

  (<http://hackage.haskell.org/package/operational>) using free monads

  (from <http://hackage.haskell.org/package/free>).  This implements

  ideas discussed here:


  * <http://stackoverflow.com/questions/14263363/is-operational-really-isomorphic-to-a-free-monad>


  * <http://www.reddit.com/r/haskell/comments/17a33g/free_functors_the_reason_free_and_operational_are/>


  To understand the basic concepts you can do no better than read

  Heinrich Apfelmus'' @operational@ tutorial:


  * <http://apfelmus.nfshost.com/articles/operational-monad.html>


  In addition to that, this package supplies @operational@-style

  modules for ''Applicative'', ''Alternative'' and ''MonadPlus''.

  ''Applicative'' and ''Alternative'' programs easily admit of static

  analysis.  See these references for discussion and examples:


  * <http://gergo.erdi.hu/blog/2012-12-01-static_analysis_with_applicatives/> (discussion:
  <http://www.reddit.com/r/haskell/comments/143wpd/static_analysis_with_applicatives/>)


  * <http://paolocapriotti.com/blog/2013/04/03/free-applicative-functors/> (discussion:
  <http://www.reddit.com/r/haskell/comments/1bnql3/free_applicative_functors_icfp_submission/>)


  See "Control.Applicative.Operational" for the bulk of the documentation.

  "Control.Alternative.Operational" also has some significant examples.'
