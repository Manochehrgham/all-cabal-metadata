changelog-type: ''
hash: 5f45e6e469ea4b975c734646b1d8ce4869ba3872d2d13bf6dc73ee0ea0916d1e
synopsis: An efficient finite map from (byte)strings to values.
changelog: ''
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.4.1'
latest: '0.2.4.1'
description-type: haddock
description: ! 'An efficient finite map from (byte)strings to values.


  The implementation is based on big-endian patricia

  trees, like "Data.IntMap". We first trie on the

  elements of "Data.ByteString" and then trie on the

  big-endian bit representation of those elements.

  Patricia trees have efficient algorithms for union

  and other merging operations, but they''re also quick

  for lookups and insertions.


  If you are only interested in being able to associate

  strings to values, then you may prefer the @hashmap@

  package which is faster for those only needing a

  map-like structure. This package is intended for

  those who need the extra capabilities that a trie-like

  structure can offer (e.g., structure sharing to

  reduce memory costs for highly redundant keys,

  taking the submap of all keys with a given prefix,

  contextual mapping, extracting the minimum and

  maximum keys, etc.)'
