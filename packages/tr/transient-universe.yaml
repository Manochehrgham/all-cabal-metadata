homepage: http://www.fpcomplete.com/user/agocorona
changelog-type: ''
hash: e288e637f2d87a436600823e7f186c921330f237be350c52b055cee3ebaf69a2
test-bench-deps: {}
maintainer: agocorona@gmail.com
synopsis: ! 'Remote execution and map-reduce: distributed computing for Transient'
changelog: ''
basic-deps:
  transient-universe: -any
  bytestring: -any
  case-insensitive: -any
  stm: -any
  base: ! '>4 && <5'
  time: -any
  text: -any
  TCache: -any
  filepath: -any
  process: -any
  network: -any
  websockets: -any
  containers: -any
  transient: ! '>=0.4.4'
  network-uri: -any
  mtl: -any
  network-info: -any
  hashable: -any
  iproute: -any
  HTTP: -any
  transformers: -any
  random: -any
  vector: -any
  directory: -any
all-versions:
- '0.2'
- '0.3'
- '0.3.1.2'
- '0.3.2'
- '0.3.2.1'
- '0.3.2.2'
- '0.3.2.3'
- '0.3.4'
author: Alberto G. Corona
latest: '0.3.4'
description-type: markdown
description: ! "![](https://raw.githubusercontent.com/agocorona/transient/master/logo.ico)\r\n\r\nSee
  the [Wiki](https://github.com/agocorona/transient/wiki)\r\n\r\ntransient-universe
  is the distributed computing extension of [transient](https://github.com/agocorona/transient).
  \ It support moving computations (Haskell closures) from a computer in the network
  to another even among different architectures:  Linux nodes can work with windows
  and browser nodes running haskell compiled with [ghcjs](https://github.com/ghcjs/ghcjs).\r\n\r\nThe
  primitives that perform the moving of computations are called `wormhole` and `teleport`,
  the names expresses the semantic. Hence the name of the package.\r\n\r\nAll the
  nodes run the same program compiled for different architectures. It defines a Cloud
  way of computing (monad). It is a thin layer on top of transient with additional
  primitives and services that run a single program  in one or many nodes.\r\n\r\nBrowser
  integration\r\n==================\r\n\r\nBrowser nodes, running transient programs
  compiled with ghcjs are integrated with server nodes, using websockets communications.
  Just compile the program with ghcjs and point the browser to http://server:port.
  The server nodes have a HTTP server that will send the compiled program to the browser.\r\n\r\nDistributed
  Browser/server Widgets\r\n-------\r\nBrowser nodes can integrate Hplayground for
  ghcjs, a reactive client side library based in trasient (package ghcjs-hplay) they
  can create widgets with HTML form elements and control the server nodes. A computation
  can move from browser to server and back at runtime despite the different architecture.\r\n\r\nWidgets
  with code running in browser and servers can compose with other widgets. A Browser
  node can gain access to many server nodes trough the  server that delivered the
  web application. \r\n\r\nThese features can make transient ideal for client as well
  as server side-driven applications, whenever distribution and push-driven reactivity
  is necessary either in the servers or in the browser clients.\r\n\r\nMap-reduce\r\n==========\r\ntransient-universe
  implements map-reduce in the style of [spark](http://spark.apache.org) as a particular
  case. It is at the same time a hard test of the distributed primitives since it
  involves a complex choreography of movement of computations. It supports in memory
  operations and caching. resilience (restart from the last checkpoint in case of
  failure) is not implemented but it is foreseen.\r\n\r\nLook at [this article](https://www.schoolofhaskell.com/user/agocorona/estimation-of-using-distributed-computing-streaming-transient-effects-vi-1#distributed-datasets)\r\n\r\nThere
  is a runnable example: [DistrbDataSets.hs](https://github.com/agocorona/transient-universe/blob/master/examples/DistrbDataSets.hs)
  that you can executed with:\r\n\r\n> runghc ./examples/DistrbDataSets.hs\r\n\r\nIt
  uses a number of simulated nodes to calculate the frequency of words in a long text.\r\n\r\n\r\nGeneral
  distributed primitives\r\n=============================\r\n`teleport` is a  primitive
  that translates computations back and forth reusing an already opened connection.\r\n\r\nThe
  connection is initiated by `wormhole`  with another node. This can be done anywhere
  in a computation without breaking composability. As always, Everything is composable.\r\n\r\nboth
  primitives support also streaming among nodes in an efficient way. It means that
  a remote call  can return not a single response but many of them.\r\n\r\nAll the
  other distributed primitives: `runAt`, `streamFrom` `clustered` etc are rewritten
  in terms of these two.\r\n\r\nHow to run the ghcjs example:\r\n=============================\r\nYou
  need ghc and ghcjs installed.\r\n\r\nclone and install perch:\r\n\r\n    > git clone
  https://github.com/geraldus/ghcjs-perch\r\n    > cd ghcjs-perch\r\n    > cabal install
  --ghcjs -f ghcjs\r\n\r\nclone and install  transient:\r\n\r\n    > git clone https://github.com/agocorona/transient\r\n
  \   > cd transient\r\n    > cabal install\r\n    > cabal install --ghcjs\r\n\r\nclone
  and install hplay:\r\n\r\n    > git clone https://github.com/agocorona/ghcjs-hplay\r\n
  \   > cd ghcjs-hplay\r\n    > cabal install\r\n    > cabal install --ghcjs -f ghcjs\r\n\r\nclone
  and install  transient-universe:\r\n\r\n    > git clone https://github.com/agocorona/transient-universe\r\n
  \   > cd transient-universe\r\n    > cabal install\r\n    > cabal install --ghcjs\r\n\r\nfor
  fast development interactions, use the script\r\n\r\n    > buildrun examples/webapp.hs\r\n\r\nThis
  will compile examples/webapp.hs for ghcjs and run it interpreted with runghc\r\n\r\n\r\nthen
  point a browser to: http:localhost:2020\r\n\r\nSee this [video](https://www.livecoding.tv/agocorona/videos/Ke1Qz-seamless-composable-web-programming)
  to see this example running:\r\n\r\nThe test program run among other things, two
  copies of a widget that start, stop and display a counter that run in the server.\r\n\r\nDocumentation\r\n=============\r\n\r\nThe
  [Wiki](https://github.com/agocorona/transient/wiki) is more user oriented\r\n\r\nMy
  video sessions in [livecoding.tv](https://www.livecoding.tv/agocorona/videos/) not
  intended as tutorials or presentations, but show some of the latest features running.\r\n\r\nThe
  articles are more tecnical:\r\n\r\n- [Philosophy, async, parallelism, thread control,
  events, Session state](https://www.fpcomplete.com/user/agocorona/EDSL-for-hard-working-IT-programmers?show=tutorials)\r\n-
  [Backtracking and undoing IO transactions](https://www.fpcomplete.com/user/agocorona/the-hardworking-programmer-ii-practical-backtracking-to-undo-actions?show=tutorials)\r\n-
  [Non-deterministic list like processing, multithreading](https://www.fpcomplete.com/user/agocorona/beautiful-parallel-non-determinism-transient-effects-iii?show=tutorials)\r\n-
  [Distributed computing](https://www.fpcomplete.com/user/agocorona/moving-haskell-processes-between-nodes-transient-effects-iv?show=tutorials)\r\n-
  [Publish-Subscribe variables](https://www.schoolofhaskell.com/user/agocorona/publish-subscribe-variables-transient-effects-v)\r\n-
  [Distributed streaming, map-reduce](https://www.schoolofhaskell.com/user/agocorona/estimation-of-using-distributed-computing-streaming-transient-effects-vi-1)\r\n\r\nThese
  articles contain executable examples (not now, since the site no longer support
  the execution of haskell snippets).\r\n\r\n\r\n\r\nFuture plans\r\n============\r\nThe
  only way to improve it is using it. Please send me bugs and additional functionalities!\r\n\r\n-I
  plan to improve map-reduce to create a viable platform for serious data analysis
  and machine learning using haskell. It will have a  web notebook running in the
  browser.\r\n\r\n-Create services and examples for general Web applications with
  distributed servers and create services for them\r\n\r\n\r\n\r\n\r\n\r\n"
license-name: MIT
