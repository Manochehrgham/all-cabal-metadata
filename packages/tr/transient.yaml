homepage: http://www.fpcomplete.com/user/agocorona
changelog-type: markdown
hash: 78976d8a33ce5ff5e549525574e3e5bf782bffe9e69d739a0ef0a3420f53b3f3
test-bench-deps: {}
maintainer: agocorona@gmail.com
synopsis: Making composable programs with multithreading, events and distributed computing
changelog: ''
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>4 && <5'
  time: -any
  containers: -any
  mtl: -any
  transformers: -any
  random: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.8'
- '0.1.0.9'
- '0.1.1'
- '0.3'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.2.2'
- '0.4.4'
- '0.4.4.1'
- '0.5.1'
author: Alberto G. Corona
latest: '0.5.1'
description-type: markdown
description: ! "![](https://raw.githubusercontent.com/agocorona/transient/master/logo.png)\r\n\r\nNOTE:
  distributed computing and web primitives have been moved to [transient-universe](https://github.com/agocorona/transient-universe)
  and [ghcjs-hplay](https://github.com/agocorona/ghcjs-hplay)\r\n\r\ntransient\r\n=========\r\n\r\nOne
  of the biggest dreams of software engineering is unrestricted composability.\r\n\r\nThis
  may be put in these terms:\r\n\r\nlet `ap1` and `ap2` two applications with arbitrary
  complexity, with all effects including multiple threads, asynchronous IO, indeterminism,
  events and perhaps, distributed computing.\r\n\r\nThen the combinations:\r\n\r\n
  \    - ap1 <|> ap2          -- Alternative expression\r\n     - ap1 >>= \\x -> ap2
  \   -- monadic sequence\r\n     - ap1 <> ap2           -- monoidal expression\r\n
  \    - (,) <$> ap1 <*> ap2  -- Applicative expression\r\n\r\nare possible if the
  types match, and generate new applications that are composable as well.\r\n\r\nTransient
  does exactly that.\r\n\r\nThe operators `<|>` and `<>` can be used for concurrency,
  the operator `<|>` can be used for parallelism and `>>=` for sequencing of threads
  and/or distributed processes. So even in the presence of these effects and others,
  everything is composable.\r\n\r\nFor this purpose transient is an extensible effects
  monad with all major effects and primitives for parallelism, events, asynchronous
  IO, early termination, non-determinism logging and distributed computing. Since
  it is possible to extend it with more effects without adding monad transformers,
  the composability is assured.\r\n\r\nDocumentation\r\n=============\r\n\r\nThe [Wiki](https://github.com/agocorona/transient/wiki)
  is more user oriented\r\n\r\nMy video sessions in [livecoding.tv](https://www.livecoding.tv/agocorona/videos/)
  not intended as tutorials or presentations, but show some of the latest features
  running.\r\n\r\nThe articles are more technical:\r\n\r\n- [Philosophy, async, parallelism,
  thread control, events, Session state](https://www.fpcomplete.com/user/agocorona/EDSL-for-hard-working-IT-programmers?show=tutorials)\r\n-
  [Backtracking and undoing IO transactions](https://www.fpcomplete.com/user/agocorona/the-hardworking-programmer-ii-practical-backtracking-to-undo-actions?show=tutorials)\r\n-
  [Non-deterministic list like processing, multithreading](https://www.fpcomplete.com/user/agocorona/beautiful-parallel-non-determinism-transient-effects-iii?show=tutorials)\r\n-
  [Distributed computing](https://www.fpcomplete.com/user/agocorona/moving-haskell-processes-between-nodes-transient-effects-iv?show=tutorials)\r\n-
  [Publish-Subscribe variables](https://www.schoolofhaskell.com/user/agocorona/publish-subscribe-variables-transient-effects-v)\r\n-
  [Distributed streaming, map-reduce](https://www.schoolofhaskell.com/user/agocorona/estimation-of-using-distributed-computing-streaming-transient-effects-vi-1)\r\n\r\nThese
  articles contain executable examples (not now, since the site no longer support
  the execution of haskell snippets).\r\n"
license-name: MIT
