homepage: http://www.fpcomplete.com/user/agocorona
changelog-type: markdown
hash: ec401f75ca3f9bf45be7927a573123dba17b4047e9659cc028b0e188d1caf9fc
test-bench-deps:
  bytestring: ! '>=0.10.6'
  stm: -any
  base: ! '>=4.8.1 && <5'
  time: ! '>=1.5'
  containers: ! '>=0.5.6'
  mtl: -any
  transformers: ! '>=0.4.2'
  random: -any
  directory: ! '>=1.2.2'
maintainer: agocorona@gmail.com
synopsis: composing programs with multithreading, events and distributed computing
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.6'
  stm: -any
  base: ! '>=4.8.1 && <5'
  time: ! '>=1.5'
  containers: ! '>=0.5.6'
  mtl: -any
  transformers: ! '>=0.4.2'
  random: -any
  directory: ! '>=1.2.2'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.8'
- '0.1.0.9'
- '0.1.1'
- '0.3'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.2.2'
- '0.4.4'
- '0.4.4.1'
- '0.5.1'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.6'
author: Alberto G. Corona
latest: '0.5.6'
description-type: markdown
description: ! "![Transient logo](https://github.com/transient-haskell/transient/raw/master/logo.png)\n=========\n\n[![Hackage](https://img.shields.io/hackage/v/transient.svg)](http://hackage.haskell.org/package/transient)\n[![Stackage
  LTS](http://stackage.org/package/transient/badge/lts)](http://stackage.org/lts/package/transient)\n[![Stackage
  Nightly](http://stackage.org/package/transient/badge/nightly)](http://stackage.org/nightly/package/transient)\n[![Build
  Status](https://api.travis-ci.org/transient-haskell/transient.png?branch=master)](https://travis-ci.org/transient-haskell/transient)\n[![Gitter](https://badges.gitter.im/theam/haskell-do.svg)](https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link)\n\nNOTE:
  distributed computing and web primitives have been moved to [transient-universe](https://github.com/agocorona/transient-universe)
  and [ghcjs-hplay](https://github.com/agocorona/ghcjs-hplay)\n\n\n## Some feedback
  on `transient`:\n\n1. Rahul Muttineni @rahulmutt nov. 09 2016 03:40  Lead developper
  of ETA (the JVM Haskell compiler)\n\n   *It's a bit mind bending in that it's like
  using a higher-level list monad, but it's very, very cool. For beginning Haskellers,
  what would be really useful is a visualisation of what happens when you do various
  distributed/parallel stuff.* **It's almost shocking how effortlessly you can run
  computations across threads/nodes.**\n\n   *The cool part is the composability in
  the distributed setting. *You can make higher-order monadic functions that allow
  you to compose & reuse a long chain of distributed transactions via `wormhole` and
  `teleport`*. Another benefit is that the transaction becomes first class and* **you
  can see exactly what's going on in one place** *instead of distributing the logic
  across actors making the code equivalent to event callbacks, as you've stated.*\n\n
  \ https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?at=58228caa35e6cf054773303b\n\n##
  What is Transient?\n\nOne of the dreams of software engineering is unrestricted
  composability.\n\nThis may be put in these terms:\n\nlet `ap1` and `ap2` two applications
  with arbitrary complexity, with all effects including multiple threads, asynchronous
  IO, indeterminism, events and perhaps, distributed computing.\n\nThen the combinations:\n\n
  \    - ap1 <|> ap2          -- Alternative expression\n     - ap1 >>= \\x -> ap2
  \   -- monadic sequence\n     - ap1 <> ap2           -- monoidal expression\n     -
  (,) <$> ap1 <*> ap2  -- Applicative expression\n\nare possible if the types match,
  and generate new applications that are composable as well.\n\nTransient does exactly
  that.\n\nThe operators `<$>` `<*>` and `<>` express concurrency, the operator `<|>`
  express parallelism and `>>=` for sequencing of threads and/or distributed processes.
  So even in the presence of these effects and others, everything is composable.\n\nFor
  this purpose transient is an extensible effects monad with all major effects and
  primitives for parallelism, events, asynchronous IO, early termination, non-determinism
  logging and distributed computing. Since it is possible to extend it with more effects
  without adding monad transformers, the composability is assured.\n\nDocumentation\n=============\n\nThe
  [Wiki](https://github.com/agocorona/transient/wiki) is more user oriented\n\nMy
  video sessions in [livecoding.tv](https://www.livecoding.tv/agocorona/videos/) not
  intended as tutorials or presentations, but show some of the latest features running.\n\nThe
  articles are more technical:\n\n- [Philosophy, async, parallelism, thread control,
  events, Session state](https://www.fpcomplete.com/user/agocorona/EDSL-for-hard-working-IT-programmers?show=tutorials)\n-
  [Backtracking and undoing IO transactions](https://www.fpcomplete.com/user/agocorona/the-hardworking-programmer-ii-practical-backtracking-to-undo-actions?show=tutorials)\n-
  [Non-deterministic list like processing, multithreading](https://www.fpcomplete.com/user/agocorona/beautiful-parallel-non-determinism-transient-effects-iii?show=tutorials)\n-
  [Distributed computing](https://www.fpcomplete.com/user/agocorona/moving-haskell-processes-between-nodes-transient-effects-iv?show=tutorials)\n-
  [Publish-Subscribe variables](https://www.schoolofhaskell.com/user/agocorona/publish-subscribe-variables-transient-effects-v)\n-
  [Distributed streaming, map-reduce](https://www.schoolofhaskell.com/user/agocorona/estimation-of-using-distributed-computing-streaming-transient-effects-vi-1)\n\nThese
  articles contain executable examples (not now, since the site no longer support
  the execution of haskell snippets).\n"
license-name: MIT
