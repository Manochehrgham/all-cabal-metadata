homepage: https://github.com/aiya000/hs-throwable-exceptions#README.md
changelog-type: ''
hash: d62c12c13b457478a59432779d9d53c663d004f8755d940daf63d933266b0ca5
test-bench-deps:
  either: -any
  base: -any
  throwable-exceptions: -any
  tasty-discover: -any
  text: -any
  safe-exceptions: -any
  tasty-hunit: -any
  tasty: -any
maintainer: aiya000.develop@gmail.com
synopsis: throwable-exceptions gives the easy way to throw exceptions
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  throwable-exceptions: -any
  safe-exceptions: -any
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
author: aiya000
latest: '0.1.0.5'
description-type: markdown
description: ! "# :diamonds: throwable-exceptions :diamonds:\n[![Build Status](https://travis-ci.org/aiya000/hs-throwable-exceptions.svg?branch=master)](https://travis-ci.org/aiya000/hs-throwable-exceptions)\n[![Hackage](https://img.shields.io/hackage/v/lens.svg)](https://hackage.haskell.org/package/throwable-exceptions)\n\nthrowable-exceptions
  gives the easy way to create the data types of `Exception` instance with TemplateHaskell,\nand
  gives the simple data types of `Exception` instance with its value constructor,\nfor
  your haskell project :dog:\n\n- `throwable-exceptions` is available in\n    - [Hackage](https://hackage.haskell.org/package/throwable-exceptions)\n
  \   - [stackage (nightly build)](https://www.stackage.org/nightly-2017-06-18/package/throwable-exceptions)\n\n\n##
  :books: Document is available in here :books:\n\n- [throwable-exceptions - Hackage](https://hackage.haskell.org/package/throwable-exceptions)\n\n\n#
  :muscle: Why we should use this ? :muscle:\nWe want to throw some exception frequently,
  but the mostly throwable exceptions are not given by base.  \nthrowable-exceptions
  complements it :+1:\n\n\n## Examples\n\n- vvv  The summary of the exact examples
  is available here  vvv\n    - [example/Main.hs](https://github.com/aiya000/throwable-exceptions/blob/master/example/Main.hs)\n\n-
  - -\n\nYou can create a data type of `Exception` instance by **a line** :exclamation:\n\n```haskell\nmodule
  Main where\n\ndeclareException \"MyException\"\n-- ^^^\n-- This is same to write
  below line yourself\n--     data MyException a = MyException\n--      { myExceptionCause
  :: String\n--      , MyExceptionClue  :: a --      } deriving (Show, Typeable)\n--
  \    instance (Typeable a, Show a) => Exception (MyException a)\n\nmain :: IO ()\nmain
  = do\n  print $ MyException \"hi\" 10\n  print $ myException \"poi\"\n```\n\n- -
  -\n\nSeveral exception is defined by default :smile:\n\nFor example, [IOException](https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Exception.html#t:IOException)'s
  value constructor is not given :cry:  \nBut you can use `Control.Exception.Throwable.IOException'`
  instead :dog:\n\n```haskell\nmodule Main where\n\nmain :: IO ()\nmain = do\n  throwM
  $ IOException' \"oops!\" \"in main\"\n  throwM $ ioException' \"oops!\"\n```\n\n\n#
  :+1:\nPR is welcome !\n"
license-name: MIT
