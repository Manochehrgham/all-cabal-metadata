changelog-type: ''
hash: ff401adc15c06f3e8b2c3a2ec8211da0d15352b14cf2283d453e314720a23ace
test-bench-deps:
  test-framework-hunit: ! '>=0.2.4 && <0.4'
  test-framework: ! '>=0.2.4 && <0.9'
  stm: ! '>=2.1 && <2.5'
  base: ! '>=4.4 && <4.9'
  HUnit: ! '>=1.2.2 && <1.3'
  concurrent-extra: ! '>=0.5.1 && <0.8'
  threads: -any
synopsis: Fork threads and wait for their result
changelog: ''
basic-deps:
  stm: ! '>=2.1 && <2.5'
  base: ! '>=4.4 && <4.9'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.0.1'
- '0.4.0.2'
- '0.5'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.0.3'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
latest: '0.5.1.3'
description-type: markdown
description: ! 'This package provides functions to fork threads and wait for their

  result, whether it''s an exception or a normal value.


  Besides waiting for the termination of a single thread this packages

  also provides functions to wait for a group of threads to terminate.


  This package is similar to the [threadmanager], [async] and [spawn]

  packages. The advantages of this package are:


  * Simpler API.


  * More efficient in both space and time.


  * No space-leak when forking a large number of threads.


  * Correct handling of asynchronous exceptions.


  * GHC specific functionality like [forkOnIO] and [forkIOUnmasked].


  [threadmanager]:  http://hackage.haskell.org/package/threadmanager

  [async]:          http://hackage.haskell.org/package/async

  [spawn]:          http://hackage.haskell.org/package/spawn

  [forkOnIO]:       http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Conc-Sync.html#v:forkOnIO

  [forkIOUnmasked]: http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Conc-Sync.html#v:forkOnIOUnmasked

'
