homepage: https://github.com/nshimaza/thread-hierarchy#readme
changelog-type: markdown
hash: d4e8c351c07e4ac5022a723c1a51eecb4a247871428267f2fd3936e07fce7745
test-bench-deps:
  thread-hierarchy: -any
  base: -any
  hspec: -any
  containers: -any
maintainer: Naoto.Shimazaki@gmail.com
synopsis: Simple Haskel thread management in hierarchical manner
changelog: ! '## Thread-hierarchy 0.1.0.0


  * Initial release.'
basic-deps:
  base: ! '>=4.7 && <5'
  monad-control: -any
  lifted-base: -any
  containers: -any
  transformers-base: -any
all-versions:
- '0.1.0.0'
author: Naoto Shimazaki
latest: '0.1.0.0'
description-type: markdown
description: ! "# thread-hierarchy\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![Build
  Status](https://travis-ci.org/nshimaza/thread-hierarchy.svg?branch=master)](https://travis-ci.org/nshimaza/thread-hierarchy)\n\nManaging
  Haskell threads in hierarchical manner.\n\nThreads created by newChild guarantee
  automatic cleanup on its exit regardless normal exit\nor cancellation by asynchronous
  exception.\n\nIn order to this module works properly, user must ensure following
  rules.\n\n* User provided thread handler must accept `ThreadMap` as its first argument.\n*
  When new thread created by newChild, handler receives newly created empty `ThreadMap`.\n*
  When the user provided handler creates its child thread, it must use newChild.\n*
  At the same time, the handler must pass the `ThreadMap` received via its argument
  to newChild.\n\n`ThreadMap` is mutable map holding live threads.  Each threads managed
  by this module has its\nown `ThreadMap` instance.  Each `ThreadMap` keeps live \"child\"
  threads for future cleanup on exit.\nPopulating `ThreadMap` is done by newChild
  automatically.\nActually the function newChild accept a `ThreadMap` then mutate
  it.\n\nAt the same time newChild create a new empty `ThreadMap` for newly created
  thread and pass it\nto user provided handler of the new thread.\nAlso newChild automatically
  install cleanup routine which kill all threads living in the new\n`ThreadMap` created
  for the thread.\nThe cleanup routine also unregister itself from `ThreadMap` of
  parent.\n\nIn order to work this properly, user provided thread handler must use
  newChild with `ThreadMap`\ngiven via its argument when it creates its child so that
  cleanup routine can terminate\nits children properly.\n\n\n### Example\n\nWhen you
  create the first thread managed by this module, create a new empty `ThreadMap` then
  call\nnewChild with it.  The newCall automatically install cleanup routine to the
  handler you provided.\n\n```haskell\ncreateRootThread :: IO ThreadId\ncreateRootThread
  = do\n    rootThreadMap <- newThreadMap\n    threadID <- newChild rootThreadMap
  rootThreadHandler\n    return threadID\n```\n\nWhen a thread managed by this module
  creates its child thread, call newChild with `TreadMap`\nreceived via handlers argument.\n\n```haskell\nrootThreadHandler
  :: ThreadMap -> IO ()\nrootThreadHandler myChildrenThreadMap = do\n    void $ newChild
  myChildrenThreadMap $ \\grandChildrenThreadMap -> do\n        yourCode\n        return
  ()\n```\n\nYou can install your own cleanup routine using finally or both resource
  acquisition and cleanup\nroutine using bracket.\n\n```haskell\n    -- Forking a
  new child with your own cleanup\n    void $ newChild childrenOfCurrentThread $ \\childrenOfHandler
  ->\n        yourThreadHandler `finally` yourCleanupRoutine\n\n    -- Forking a new
  child with resource acquisition and cleanup\n    void $ newChild childrenOfCurrentThread
  $ \\childrenOfHandler ->\n        bracket yourResourceAcquiringRoutine yourCleanupRoutine
  yourThreadHandler\n```\n\n### Limitation\n\nCurrently, unlike async function, this
  module is not designed to back any return value\nfrom child thread to parent thread.
  \ This module focuses on guaranteed cleanup on thread termination.\n"
license-name: MIT
