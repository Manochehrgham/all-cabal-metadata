homepage: ''
changelog-type: ''
hash: 683217f8fe6292475b471818c709e101fb56d477d1cec147c9b73a2b5390d1e4
test-bench-deps: {}
maintainer: kolodeznydiver@gmail.com
synopsis: TH implementation of effects.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
  template-haskell: ! '>=2.4 && <2.11'
all-versions:
- '0.1.0.1'
- '0.1.1.0'
author: Kolodezny Diver
latest: '0.1.1.0'
description-type: haddock
description: ! 'This package implements effects, as alternative to monad

  transformers. Actually, the effects themselves are created without

  the use of TH, but the binding of nested effects described by

  mkEff splice. For example.


  > mkEff "MyReader"    ''''Reader    ''''Int       ''''Lift

  > mkEff "SomeState"   ''''State     ''''Bool      ''''MyReader

  > mkEff "OtherRdr"    ''''Reader    ''''Float     ''''SomeState

  >

  > main:: IO ()

  > main = do

  >     r <- runMyReader  100

  >        $ runSomeState False

  >        $ runOtherRdr  pi  $ do

  >             i :: Int   <- ask                    -- MyReader

  >             f :: Float <- ask                    -- OtherRdr

  >             b <- get                             -- SomeState

  >             put $ not b                          -- SomeState

  >             lift $ putStrLn "print from effect!" -- Lift

  >             return $ show $ fromIntegral i * f

  >     print r


  For more information about extensible effects , see the original paper at

  <http://okmij.org/ftp/Haskell/extensible/exteff.pdf>.

  But, this package is significantly different from the original.

  It uses a chains of ordinary GADTs created by TH.

  No Typeable, unsafe... , ExistentialQuantification ...'
license-name: BSD3
