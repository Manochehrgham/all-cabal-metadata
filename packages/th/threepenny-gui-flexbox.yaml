homepage: https://github.com/barischj/threepenny-gui-flexbox
changelog-type: ''
hash: bbdd8f8b0db0135a6da8fc66171022b54b2a0043c22e5c2b702a453df9118803
test-bench-deps: {}
maintainer: barischj@tcd.ie
synopsis: Flexbox layouts for Threepenny-gui.
changelog: ''
basic-deps:
  clay: -any
  base: ! '>=4.7 && <5'
  text: -any
  threepenny-gui-flexbox: -any
  threepenny-gui: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
author: Jeremy Barisch-Rooney
latest: '0.2.0.2'
description-type: text
description: ! "* Threepenny-gui Flexbox [[https://travis-ci.org/barischj/threepenny-gui-flexbox.svg?branch=master]]\n
  \ Flexbox layouts for Threepenny-gui.\n\n  This library was written following the
  wonderful\n  [[https://css-tricks.com/snippets/css/a-guide-to-flexbox][A Complete
  Guide to\n  Flexbox]] and using the wonderful\n  [[https://hackage.haskell.org/package/clay][Clay]]
  library as a CSS DSL.\n\n   [[./example.png]]\n* Usage\n  This library exposes the
  entire Flexbox API.\n\n  We collect the Flexbox properties that apply to the parent
  element, things\n  like ~flex-direction~, in a ~ParentProps~ data type.\n\n  We
  collect the Flexbox properties that apply to the children elements, things\n  like
  ~flex-grow~, in a ~ChildProps~ data type.\n\n  You can set a property by using the
  defaults and over-riding a speicific entry\n  using record syntax:\n  \n  #+BEGIN_SRC
  Haskell\n  defaultChildProps { cFlexGrow = 2 }\n  #+END_SRC\n  \n  What you'll propbably
  use a lot is `flexbox`, which you provide with a parent\n  element and properties,
  and a list of children elements and their respective\n  properties.\n\n  The example
  image above was produced with the below code. It attaches three\n  ~div~ s with
  text \"foo\" to the ~body~ in the ratio 1:2:1. The example can be\n  run with ~stack
  exec threepenny-flexbox-exe~.\n  \n  #+BEGIN_SRC Haskell\n  -- |Example of three
  divs using a flex-grow ratio of 1:2:1.\n  example :: Window -> UI ()\n  example
  w = void $\n    flexbox (getBody w) defaultParentProps $ [grow 1, grow 2, grow 1]\n\n
  \ -- |Example \"foo\" div and given flex-grow value.\n  grow :: Int -> (UI Element,
  ChildProps)\n  grow n = (foo, defaultChildProps { cFlexGrow = n })\n    where foo
  = UI.div # set UI.text \"foo\"\n                       # set UI.style [(\"background-color\",
  \"#F89406\"),\n                                       (\"margin\", \"8px\")]\n  #+END_SRC\n"
license-name: BSD3
