homepage: https://github.com/barischj/threepenny-gui-flexbox
changelog-type: ''
hash: a3c3608ceabd7b543bd5a3d96b35b19b3b88476e262fec489fd146537cf8e12c
test-bench-deps: {}
maintainer: barischj@tcd.ie
synopsis: Flexbox layouts for Threepenny-gui.
changelog: ''
basic-deps:
  clay: -any
  base: ! '>=4.7 && <5'
  text: -any
  threepenny-gui-flexbox: -any
  threepenny-gui: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
author: Jeremy Barisch-Rooney
latest: '0.3.0.2'
description-type: text
description: ! "* Threepenny-gui Flexbox [[https://travis-ci.org/barischj/threepenny-gui-flexbox.svg?branch=master]]
  [[https://img.shields.io/hackage/v/threepenny-gui-flexbox.svg]] [[https://www.stackage.org/package/threepenny-gui-flexbox/badge/nightly?.jpg]]\n\n
  \ Flexbox layouts for Threepenny-gui.\n\n  This library was written following the
  wonderful\n  [[https://css-tricks.com/snippets/css/a-guide-to-flexbox][A Complete
  Guide to\n  Flexbox]] and using the equally wonderful\n  [[https://hackage.haskell.org/package/clay][Clay]]
  library as a CSS domain\n  specific language.\n\n  [[./example.png]]\n\n* Usage\n\n
  \ Flexbox properties that apply to the parent element, things like\n  ~flex-direction~,
  are stored in a ~ParentProps~ data type.\n\n  Flexbox properties that apply to children
  elements, things like ~flex-grow~,\n  are stored in a ~ChildProps~ data type.\n
  \ \n  For both ~ParentProps~ and ~ChildProps~ we provide standard default values,\n
  \ via the respective functions ~parentProps :: ParentProps~ and ~childProps ::\n
  \ ChildProps~.\n\n** Setting Properties\n\n  You can set a property by using the
  defaults and over-riding a specific entry\n  using record syntax.\n  \n  Setting
  ~flex-grow: 2;~ which is a property for a child element:\n  #+BEGIN_SRC Haskell\n
  \ childProps { cFlexGrow = 2 }\n  #+END_SRC\n  \n  You can use Clay to set values
  for some of the more exotic types.\n  \n  Setting ~display: inline-flex;~ which
  is property for a parent element:\n  #+BEGIN_SRC Haskell\n  parentProps { pDisplay
  = Clay.Flexbox.inlineFlex }\n  #+END_SRC\n\n** Full Example\n\n  Once you have your
  properties defined you need to apply them to elements and\n  attach the children
  to the parent. ~flexbox~ provides this functionality, you\n  need to pass a parent
  element and respective properties, and a list of\n  children elements and their
  respective properties.\n\n  The example image above was produced with the below
  code. It attaches three\n  ~div~ s with text \"foo\" to the ~body~ in the ratio
  1:2:1. The example can be\n  run with ~stack exec threepenny-flexbox-exe~.\n  \n
  \ #+BEGIN_SRC Haskell\n  -- |Example of three divs using a flex-grow ratio of 1:2:1.\n
  \ example :: Window -> UI ()\n  example w = void $\n    flexbox (getBody w) parentProps
  $ [grow 1, grow 2, grow 1]\n\n  -- |Example \"foo\" div and given flex-grow value.\n
  \ grow :: Int -> (UI Element, ChildProps)\n  grow n = (foo, childProps { cFlexGrow
  = n })\n    where foo = UI.div # set UI.text \"foo\"\n                       # set
  UI.style [(\"background-color\", \"#F89406\"),\n                                       (\"margin\",
  \"8px\")]\n  #+END_SRC\n\n** More Control\n\n  If you don't want to use ~flexbox~
  but rather set CSS values on elements\n  yourself you can use the functions ~toStyle~
  and ~setProps~.\n\n  ~ParentProps~ and ~ChildProps~ are both an instance of ~ToStyle~,
  defined\n  below. That means you can convert either parent properties or child properties\n
  \ to a ~[(String, String)]~ which is [[http://hackage.haskell.org/package/threepenny-gui/docs/src/Graphics-UI-Threepenny-Core.html#style][how
  Threepenny expects CSS]].\n  \n  #+BEGIN_SRC Haskell\n  -- |Convert to Threepenny
  style.\n  class ToStyle a where\n  toStyle :: a -> [(String, String)]\n  #+END_SRC\n\n
  \ To save a few more characters you can use ~setProps~ to set the given\n  properties
  on an element.\n\n  #+BEGIN_SRC Haskell\n   -- |Set Flexbox properties on an element.\n
  \ setProps :: ToStyle a => UI Element -> a -> UI Element\n  setProps el props =
  el # set UI.style (toStyle props)\n  #+END_SRC\n"
license-name: BSD3
