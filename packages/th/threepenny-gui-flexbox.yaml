homepage: https://github.com/barischj/threepenny-gui-flexbox
changelog-type: ''
hash: 4ca1d59195f7694c962ccb83ef8ad390cda03f1518b6ec4b77927ced398aec0a
test-bench-deps: {}
maintainer: barischj@tcd.ie
synopsis: Flexbox layouts for Threepenny-gui.
changelog: ''
basic-deps:
  clay: -any
  base: ! '>=4.7 && <5'
  text: -any
  threepenny-gui-flexbox: -any
  threepenny-gui: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
- '0.4'
author: Jeremy Barisch-Rooney
latest: '0.4'
description-type: text
description: ! "* Threepenny-gui Flexbox [[https://travis-ci.org/barischj/threepenny-gui-flexbox.svg?branch=master]]
  [[https://img.shields.io/hackage/v/threepenny-gui-flexbox.svg]] [[https://www.stackage.org/package/threepenny-gui-flexbox/badge/nightly?.jpg]]\n\nFlexbox
  layouts for Threepenny-gui.\n\nThis library was written following the wonderful
  [[https://css-tricks.com/snippets/css/a-guide-to-flexbox][A Complete Guide to Flexbox]]
  and\nusing the equally wonderful [[https://hackage.haskell.org/package/clay][Clay]]
  library as a CSS domain specific language.\n\n  [[./example.png]]\n\n* Usage\n\n**
  Properties\n\nUltimately we just want to set Flexbox properties on elements, both
  parent and\nchild elements. In CSS these properties would look like ~flex-grow:
  1;~.\n\nWe collect Flexbox properties that apply to the parent element, things like\n~flex-direction~,
  in a ~ParentProps~ data type. Flexbox properties that apply to\nchild elements,
  things like ~flex-grow~, are collected in a ~ChildProps~ data\ntype.\n  \nIf you
  want ~ChildProps~ with ~flex-grow: 1;~ you can just do:\n\n#+BEGIN_SRC Haskell\nflexGrow
  1\n#+END_SRC\n\nYou can define multiple properties using record syntax:\n\n#+BEGIN_SRC
  Haskell\norder 1 { cflexGrow = 1, cFlexShrink = 2 }\n#+END_SRC\n\nNote that in the
  examples above we used ~flexGrow~ and ~order~ to return\n~ChildProps~ with given
  values set but also with default values set for all\nother Flexbox properties, unless
  record syntax is used to override a property.\n\nSome properties like ~flexGrow~
  simply take an ~Int~ but others take a value\nfrom the ~Clay~ library. Here's an
  example for ~ParentProps~:\n\n#+BEGIN_SRC Haskell\ndisplay Clay.Display.inlineFlex
  { pFlexWrap = Clay.Flexbox.nowrap }\n#+END_SRC\n\nIf you just want ~ParentProps~
  or ~ChildProps~ with default values:\n\n#+BEGIN_SRC Haskell\nparentProps :: ParentProps\nchildProps
  \ :: ChildProps\n#+END_SRC\n  \n** Setting Properties\n\nOnce you have your properties
  defined you'll want to apply them to elements.\nFor this you can use ~setProps~
  which can be used with Threepenny's reverse\nfunction application operator ~#~:\n\n#+BEGIN_SRC
  Haskell\nUI.div # set UI.text \"foo\" # setProps (order 1)\n#+END_SRC\n\nYou can
  also convert ~ParentProps~ or ~ChildProps~ to a ~[(String, String)]~\nwhich is [[http://hackage.haskell.org/package/threepenny-gui/docs/src/Graphics-UI-Threepenny-Core.html#style][how
  Threepenny expects CSS]]. This can be done using ~toStyle~ which is\ndefined in
  the typeclass ~ToStyle~:\n\n#+BEGIN_SRC Haskell\nUI.div # set UI.style (toStyle
  $ order 1)\n#+END_SRC\n\n*** 'flex'\n\nWe provide a utility function ~flex~ which
  takes both parent and child elements\nand their respective ~ParentProps~ and ~ChildProps~,
  applies the respective\nproperties and then returns the parent element with children
  attached. We also\nprovide variants of this function which use default properties
  for parent or\nchildren. Below is a full example demonstrating this, which produced
  the image\nabove.\n  \n#+BEGIN_SRC Haskell\n-- |Example of three divs using a flex-grow
  ratio of 1:2:1.\nexample :: Window -> UI ()\nexample w = void $\n  flex_p (getBody
  w) $ [grow 1, grow 2, grow 1]\n\n-- |Example \"foo\" div and given flex-grow value.\ngrow
  :: Int -> (UI Element, ChildProps)\ngrow n = (foo, flexGrow n)\n  where foo = UI.div
  # set UI.text \"foo\"\n                     # set UI.style [(\"background-color\",
  \"#F89406\"),\n                                     (\"margin\", \"8px\")]\n#+END_SRC\n"
license-name: BSD3
