changelog-type: text
hash: 77d55c0130e6997d8fcee796de18470a2335b783e3a32d6e02ca4c34b30efd64
test-bench-deps: {}
synopsis: Type-threaded list
changelog: ! "    Release history:\n    .\n    [0.3.0.2] Change of repository hosting\n
  \   .\n    [0.3.0.1] Support for (GHC v7.8.2) Added some @Applicative@ instances,
  prepared for the AMP proposal\n    .\n    [0.3] Support for (GHC v7.6.1) @PolyKinds@
  extension, this compiler is required now\n    .\n    [0.2] Several new functions
  introduced, some renamed\n    .\n    [0.1] Initial version\n"
basic-deps:
  base: ! '>=4.6 && <5'
all-versions:
- '0.0'
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
latest: '0.3.0.2'
description-type: haddock
description: ! '@Thrist@ is a list-like data structure (GADT)

  whose elements are values of a two-parameter

  datatype. The typing constraint ensures that

  the second type parameter of a former value

  unifies with the first type parameter of the

  latter.


  This threading of types is the foundation for

  thrists'' nice properties. E.g., paired with a

  suitable semantics, function composition (.)

  can be embedded.


  Technically a thrist is embodying the concept

  of a /free category/.


  Sub-modules demonstrate the power of the thrist

  idea by emulating some familiar data structures.


  For further ideas, please consult the companion

  (draft) paper \"Thrists: Dominoes of Data\" at

  <http://omega.googlecode.com/files/Thrist-draft-2011-11-20.pdf>'
