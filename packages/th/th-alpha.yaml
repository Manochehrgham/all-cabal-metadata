changelog-type: ''
hash: f926d53267a9dd55ab750578cba9ee5664e134e0305e9a8c6db9cc5f52ef6834
test-bench-deps:
  base: ! '>=4 && <5'
  th-alpha: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: ! '>=0.8'
  template-haskell: -any
  derive: -any
synopsis: Alpha equivalence for TH Exp
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  containers: -any
  th-desugar: ! '>=1.4 && <1.6'
  mtl: ! '>=2 && <3'
  mmorph: ! '>1 && <2'
  transformers: -any
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
latest: '0.2.0.2'
description-type: haddock
description: ! 'Compare TH expressions (or clauses, patterns, etc.) for alpha equivalence.

  That is, compare for equality modulo the renaming of bound variables.


  > areExpAEq [| \x -> x |] [| \y -> y |]

  > -- True


  > do

  >    let x = mkName "x"

  >    let y = mkName "y"

  >    runQ $ (LamE [VarP x] (VarE x)) @= (LamE [VarP y] (VarE y))

  > -- True


  This can be useful when for instance testing libraries that use Template

  Haskell - usually correctness is only defined up to alpha equivalence.'
