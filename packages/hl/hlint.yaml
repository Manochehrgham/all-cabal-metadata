changelog-type: text
hash: a1edc1773f3c18809e2fb062f937bb721c617aba009e9742800b051ce040773b
test-bench-deps: {}
synopsis: Source code suggestions
changelog: ! "Changelog for HLint\n\n1.9.20\n    #122, fix the zipWith/repeat hint\n1.9.19\n
  \   #119, don't remove RecursiveDo if they use the rec statement\n    Add a suggestion
  concatMap/map ==> concatMap\n1.9.18\n    More GHC 7.10 warnings and build support\n1.9.17\n
  \   #116, support hscolour-1.21\n1.9.16\n    #108, make \"hlint .\" work again\n1.9.15\n
  \   #106, avoid warnings with GHC 7.10\n    #105, build with GHC 7.10\n1.9.14\n
  \   #649, don't suggest const for values using RecordWildCards\n1.9.13\n    #97,
  remove the encoding bits of the API\n    #98, add an HLint3 prototype API\n    #93,
  make the --quickcheck tests work on GHC 7.8\n    Add --tempdir flag to the test
  mode\n1.9.12\n    #96, fix the --utf8 flag\n    Make Encoding an alias for TextEncoding\n
  \   Default to UTF8 encoding\n1.9.11\n    #95, don't suggest camel case for names
  containing digits\n    Add a dependency on the extra package\n    #92, use a new
  way for determining the color default\n    Add a dependency on ansi-terminal\n1.9.10\n
  \   Spot unsafePerformIO without NOINLINE\n1.9.9\n    #89, fix compiling the executable
  with --flag=-gpl\n1.9.8\n    #82, don't crash on XmlHybrid modules\n    #88, allow
  avoiding HsColour, as it is GPL licensed\n    #87, don't push if down, since it
  can be type incorrect\n1.9.7\n    #86, don't use color unless $TERM claims to support
  it\n1.9.6\n    #85, fix the free variable matching check for lambda\n    #84, suggest
  fmap for Either\n    Make --json put each hint on a different line\n    Support
  -X for extensions to the hse mode\n1.9.5\n    Remove support for GHC 7.2\n    Upgrade
  to haskell-src-exts-1.16\n1.9.4\n    #81, fixes for GHC 7.9\n    #78, add hints
  for list patterns\n    #72, make --color the default on Linux\n1.9.3\n    #73, fix
  multithreading and exceptions\n1.9.2\n    #68, add --no-summary\n1.9.1\n    #65,
  add flip (>>=) ==> (=<<) and the reverse\n    #61, add --json flag\n1.9\n    Remove
  not (isControl x) ==> isPrint (not true for '\\173')\n    #57, warn on invalid pragmas\n
  \   Make the API pass and require comments\n    #59, make sure qualified operators
  match properly\n    Rename notTypeSafe annotation to noTypeCheck\n    Remove an
  invalid rule suggesting tanh\n    #13, add a --quickcheck flag to test the hints\n
  \   Add --typecheck flag to test mode to type check the hints\n    Remove incorrect
  for intercalate to unlines\n    #37, remove incorrect hint for isAlphaNum\n    #45,
  add mapMaybe id ==> catMaybes\n    #42, add some repeat hints\n1.8.61\n    #40,
  allow haskell-src-exts-1.15\n    Don't detect redundant Generics extension\n1.8.60\n
  \   #33, add --cpp-file to preinclude a file\n    #34, add back --quiet flag\n    #639,
  don't suggest evaluate, because not all Monad's are IO\n    #31, delete the elem/notElem
  hints\n    #30, remove weird \"free module\" matching\n    #15, add prototype grep
  mode\n    Change to make test a separate mode\n    #12, more list based suggestions\n
  \   #637, turn off QuasiQuotes by default\n1.8.59\n    #27, fix up directory file
  searching\n1.8.58\n    Move the API to Language.Haskell.HLint2\n    #638, ensure
  $! doesn't break strictness with strict fields\n    #24, don't remove DeriveFunctor
  even when only on a newtype\n    #22, turn off UnboxedTuples by default\n    #21,
  strip /* C style */ comments\n    #635 and #18, require cpphs-1.18.1\n    Switch
  to CmdArgs for command line parsing\n    Remove -x as a synonym for --cross\n1.8.57\n
  \   #6, add a preview of an API\n    #331, improve parse error locations for literate
  Haskell\n1.8.56\n    Remove support for GHC 6.12 and below\n    #317, tone down
  the void hint\n    #16, match not . not (and reverse . reverse etc)\n    Suggest
  <$> instead of fmap f $ ...\n    Tweak some priorities, make >=> a warn and void
  an error\n    #3, make top of the file ANN pragmas work\n    #10, add a suggestion
  to use unlines\n    #11, add a few hints about characters\n    #8, add CHANGES.txt
  to the Cabal package\n1.8.55\n    #627, fix the UnboxedTuples extension warning\n1.8.54\n
  \   Fix a bug when suggesting const\n1.8.53\n    Fix some corner cases when suggesting
  foldr etc.\n    #517, don't introduce new free variables in a replacement\n1.8.52\n
  \   #2, Generic is not newtype derivable\n1.8.51\n    Upgrade to haskell-src-exts-1.14\n1.8.50\n
  \   Eliminate upper bounds on all dependencies\n    #617, fix up notIn to take account
  of Template Haskell variables\n    #573, suggest removing various deriving language
  extensions\n1.8.49\n    Remove ^^ ==> ** hint\n    Remove a duplicate sqrt hint\n
  \   Ensure that --test failures throws an error\n    Fix up the copyright year in
  --help\n1.8.48\n    Brackets at the root of annotations are fine\n    Reduce a few
  more lambda expressions\n1.8.47\n    #613, compatibility with base-4.7\n1.8.46\n
  \   Remove incorrect isPrefixOf hints\n    #586, add span/break/takeWhile/dropWhile
  hints\n    #588, add sort/reverse hints\n    #601, add replicate/map/repeat hints\n
  \   Add a hint about reverse/reverse\n    Add side as an alias for _\n    Add hint
  as an alias for error\n1.8.45\n    #600, hints for unnecessary lazy annotations\n1.8.44\n
  \   #598, warn on unnecessary bang patterns\n1.8.43\n    Change some hint error/warning
  levels\n1.8.42\n    Allow cpphs-1.16\n1.8.41\n    #586, add a rule for takeWhile/dropWhile
  ==> span\n    #522, add hints for the state monad\n    #499, fix up the test suite\n
  \   Fix the side conditions for the `isPrefixOf` hint\n    Add hints about take/drop
  on non positive numbers\n    Add isNat/isPos/isNeg/isNegPos as notes\n    Make the
  notes a structured type\n    Add --proof feature\n    Retire the Prelude.catch hint\n
  \   Additional boolean equality hints\n1.8.40\n    #585, lots of additional list
  based hints\n1.8.39\n    #582, don't suggest renaming with trailingHashes#\n1.8.38\n
  \   #578, treat _ bindings differently in lambdas\n1.8.37\n    #575, allow cpphs-1.15\n1.8.36\n
  \   Make --with imply no default Hint files\n1.8.35\n    #567, avoid duplicate hints
  around (.) hints\n1.8.34\n    Switch license from GPL to BSD3\n1.8.33\n    Lots
  more hints on laziness, foldable and a few others\n    Use mapM_ etc in more situations,
  when using explicit >>=\n1.8.32\n    Add notes about how to deal with imported fixites\n
  \   Add a --with flag for passing settings on the command line\n    #563, make sure
  TypeSig hints get the right function name\n    Update the copyright year to 2012\n
  \   #564, allow brackets and type signatures on annotations\n    Add a note that
  about using !! if the index is negative\n1.8.31\n    Avoid incomplete patterns when
  reading ANN pragmas\n    #555, top-level expressions require TemplateHaskell\n1.8.30\n
  \   Add elemIndex/elemIndices hints\n    Allow cpphs-1.14\n    #551, allow case_
  as a name with an underscore\n1.8.29\n    Allow hscolor-1.20.*\n    #574, add a
  hint to for mapM/zip ==> zipWithM\n1.8.28\n    Fix a bug, >=> hint was missing check
  about removal of free var\n1.8.27\n    Allow haskell-src-exts-1.13.*\n1.8.26\n    Allow
  haskell-src-exts-1.12.*\n    Don't suggest redundant brackets when turning ++ into
  :\n    Add hints suggesting >=> and <=<\n1.8.25\n    Update the copyright year in
  the Cabal file\n    Allow transformers-0.3.*\n1.8.24\n    #531, Make hlint.ghci
  well formed again\n1.8.23\n    Add hints for redundant seq/evaluate using isWHNF\n
  \   #526, don't hint for return $! (x :: Int)\n1.8.22\n    Add hint for $! where
  the RHS is not a variable\n1.8.21\n    #508, add lots of hints from the base library\n
  \   #317, add hints for a >> return () to void\n    Add a fromMaybe/fmap ==> maybe
  hint\n    #304, don't backet tuple sections\n    Add foldl (++) [] ==> concat\n
  \   #512, detect unnecessary case construct\n    When finding hints, don't abort
  on a parse error\n    #507, add exitSuccess hint\n    #505, suggest record patterns\n1.8.20\n
  \   #500, make sure eta reduction has position information\n1.8.19\n    #498, eta
  reduce even if there is a where block\n    #497, don't produce an incorrect lambda
  when suggesting flip\n1.8.18\n    #438, use Foo.Bar to mean Foo/Bar.hs\n    Add
  a --path command line option to say where files live\n    #441, avoid bad matches
  due to automatically eta reducing rules\n    #489, import Foo as Foo is redundant\n
  \   #481, suggest liftM instead of fmap when using the Monad laws\n1.8.17\n    #479,
  allow - as the file to specify using stdin\n1.8.16\n    #478, allow cpphs-1.13.1\n
  \   Never suggest view patterns (they aren't sufficiently better)\n    Don't suggest
  use of Data.Ord.comparing, using `on` is better\n    Only suggest elem/notElem on
  3 or more items\n1.8.15\n    Add --cpp-ansi to turn on ANSI compat in cpphs\n1.8.14\n
  \   #455, GHC 7.2 compatibility\n    Add lots of hints from Lennart Augustsson\n1.8.13\n
  \   #302, add a backup fixity analysis, if the HSE one fails\n    Fix x /= y ||
  x /= z ==> x `notElem` [y,z], should be &&\n1.8.12\n    Allow cpphs-1.12\n1.8.11\n
  \   #440, suggest removing redundant brackets under do\n    #439, don't add redundant
  brackets under do\n1.8.10\n    Upgrade to hscolour-1.19\n1.8.9\n    #436, add a
  hint about mapMaybe/map\n    Upgrade to haskell-src-exts-1.11.1\n    Add a --cross
  flag, to detect hints between multiple modules\n    #428, don't suggest using String
  in an instance head\n1.8.8\n    #384, suggest collapsing multiple imports/exports\n
  \   #374, don't suggest the removal of necessary brackets\n    #337, suggest Control.Exception.catch
  instead of Prelude.catch\n    #412, add hints based on Control.Exception\n    #378,
  suggest removing fromInteger/fromIntegral on literals\n    #369, add notes to a
  few hints about possible pitfalls\n    #409, fix a few cases where definitions suggested
  themselves\n    #410, Support test* as ignored items in settings files\n    #414,
  add isLit* pattern, and hint about ^^ ==> **\n    #420, make the suggestion to use
  let a warning\n    #408, rework the when/unless hints, don't suggest on itself\n
  \   Add duplicate detector, for copy/pasted code\n    #285, don't show duplicate
  filepath separators\n    If the user enters directories containing no files then
  say\n    Make suggesting curry/uncurry a warning instead of an error\n1.8.7\n    Relax
  the transformers dependency, works with 0.0.* and 0.1.*\n1.8.6\n    Export suggestionSeverity/Severity
  from the API\n    Allow hint imports with \"hlint\", as well as the existing \"hint\"\n1.8.5\n
  \   Update the copyright year to 2011\n    #400, support more encoding strings,
  give useful errors\n    #401, rename the report template to report_template.html\n
  \   Replace filter f x /= [] with any f x, and 2 more similar\n1.8.4\n    #308,
  allow haskell-src-exts-1.10.1, which parses Unicode better\n    import qualified
  Char ==> import qualified Data.Char as Char\n    #393, fix suggestion for import
  IO, requires more than System.IO\n    #376, note that RecordWildCards implies DisambiguateRecordFields\n1.8.3\n
  \   Allow uniplate-1.6\n    Switch from mtl to transformers\n    #373, require haskell-src-exts-1.9.6\n
  \   Add a type signature for GHC 7\n    Suggest [x | x <- xs] ==> xs, if x is a
  variable\n1.8.2\n    #371, foo (\\x -> y :: Int -> Int) is not a redundant bracket\n
  \   Add a hint to use just equality rather than isJust/fromJust\n1.8.1\n    Massive
  speed up for files with many naming hints\n    #361, keep module names when suggesting
  infix\n    Add support for wildcard matching on module names\n    #357, don't camel
  case suggest on FOO_A\n    #370, fix building with GHC 6.10.4\n    #313, upgrade
  to haskell-src-exts-1.9.4\n    Workaround for #358, disable empty where hints\n
  \   #355, make \"--ignore=Parse error\" work\n    Add --cpp-simple to run a simple
  CPP to strip lines begining #\n    Add bracketing information if the parent is a
  case\n    Suggest intercalate\n1.8\n    Make --test --hint=file typecheck a file
  for valid hints\n    #347, Suggest use of otherwise, instead of True, in pattern
  guards\n    Add hints about redundant where statements\n    Suggest removal of redundant
  guards\n    Make hints about guards work on patterns/infix matches/case alts\n    Make
  finding guards look a child functions\n    Correctly collapse functions and lambdas
  using the same patterns\n    Suggest promoting patterns bound to lambdas to functions\n
  \   Allow collapsing lambdas sharing pattern variables correctly\n    #344, only
  give one warning for multiple collapsable lambdas\n    #300, substantially improve
  module name resolution with imports\n    BREAKING: imports in hint files require
  import \"hint\" HintFile\n    #335, redundant id should only generate one warning\n
  \   Add a hint for using map (f &&& g)\n    #328, for foo'bar suggest the naming
  fooBar\n    #323, detect redundant brackets in field declarations\n    #321, force
  the whole file before displaying a parse error\n    Make --find more robust, fixes
  a potential parse error\n1.7.3\n    Upgrade to hscolour-1.17\n1.7.2\n    #318, match
  rules by expanding out (.)\n    #319, don't remove lambdas on the right of infix
  operators\n1.7.1\n    Add a --quiet flag, to supress stdout (mainly for API users)\n1.7\n
  \   Add support for HLint.Builtin.All\n    Fix crash on (\\x -> x)\n    Make the
  library correctly honour the data directory\n    Improve the manual, mainly language
  changes and hyperlinking\n    Fix a bug in ListRec, could have _recursive_ in the
  result\n    #315, spot list rec hints through $ and let\n    Add hints based on
  (f $) ==> f, and change in ListRec hints\n    Changes to the lambda suggestions,
  now gives a few more hints\n    Don't suggest importing modules in old-locale/old-time\n
  \   Make the API return the suggestions, rather than just the count\n    #278, add
  -XNoCpp to disable the C preprocessor\n    #279, add -XExt/-XNoExt to choose extensions\n
  \   Remove some redundant brackets in type replacements\n    #286, remove redundant
  brackets in match\n    Additional bracket removal, application under sections\n
  \   #299, rework hints to use flip (suggest infix in some cases)\n    Add some fromMaybe
  hints\n    Fix bug where hints didn't always get names\n    #306, make --find use
  the hints if there are files specified\n    Upgrade to haskell-src-exts-1.9\n    #303,
  allow fixities to be specified in hint files\n1.6.21\n    #287, warn about Haskell
  98 imports\n    #297, add a hint to use mplus\n    #288, detect redundant brackets
  under a lambda\n    #302, remove error about ambiguous fixities\n    #281, enhance
  the redundant monad return warnings\n    #293, eliminate _noParen_ from the result\n
  \   #284, eliminate ViewPatterns from FindHints, hits compiler bug\n    #283, don't
  suggest removal of RecordWildCards\n    Add some hints about concat and (++)\n    #273,
  require haskell-src-exts >= 1.8.2\n1.6.20\n    #275, add more acknowledgements (still
  very incomplete)\n    #254, remove the foldr1/map hint\n    Compress nested lambdas,
  \\x -> \\y -> ... ==> \\x y -> ...\n    Fix minor bug on \\x -> \\x -> foo x x\n
  \   #274, add redundant bracket inside record update/construct\n    #272, don't
  mess up creating sections from qualified names\n    Add some hints to suggest elem\n
  \   Add Paths_hlint to the .cabal file, or the library doesn't link\n    #271, rewrite
  the match engine in terms of SYB\n1.6.19\n    #251, add automatic definition hunting
  with --find\n    #268, rewrite the (.) expansion in hints to fix various bugs\n
  \   #269, replacing a case with an if should generate one hint\n    Document the
  ANN pragmas\n    Require haskell-src-exts-1.8.1\n1.6.18\n    Remove a hint replacing
  do x <- foo; bar x with foo >>= bar\n    #263, support CPP files more fully\n    Upgrade
  to hscolour-1.16\n    Upgrade to cpphs-1.11\n1.6.17\n    Force cpphs-1.10, since
  1.11 breaks the interface\n    More hints from the Data.Maybe module\n    #262,
  add support for the TupleSections extension\n    #264, upgrade to haskell-src-exts-1.8.*,
  fixes QuasiQuote pos\n    Upgrade to cpphs 1.10\n    #266, don't match hints that
  appear to be the definitions\n    #248, tone down the eta reduction hints\n    Add
  support for WARNING pragma's to reclassify hints\n    Support ignoring hints on
  types\n    Give better error messages on incorrect settings files\n    Add temporary
  haskell-src-exts 1.5/1.6 compatibility\n    #327, add hints to use expressions infix\n
  \   #240, if a then True else False no longer suggests a || False\n    Upgrade to
  haskell-src-exts-1.7.*\n    #236, support changing the text encoding with --encoding/--utf8\n
  \   #260, generate nicer lambdas for (($) . f)\n    Add the hint (($) . f) ==> (f
  $)\n1.6.16\n    Further performance enhancements (for details see my blog)\n    Update
  to uniplate 1.5.* (fixes performance bug)\n    Improve speed based on profiling
  (roughly twice as fast)\n    #245, add hints for excess brackets in types and patterns\n
  \   Make 100% redundant brackets an error\n    Fix bug where qualified names did
  not match\n    Remove dependency on SYB\n    #234, allow TH top-level splices for
  ignore\n    #110, add tests for ignoring commands\n1.6.15\n    Upgrade to uniplate
  1.4.* (fixes performance bug)\n    #192, make HLint into a fairly basic library\n
  \   Add --datadir to allow running with a different data directory\n    #254, eliminate
  foldl/map fusion rules (which were untrue)\n    Fix a few typos in the hint rules\n
  \   Upgrade to uniplate 1.3.*\n    Upgrade to haskell-src-exts 1.6.*\n    Add a
  .ghci file snippet\n    #247, Fix bug matching expressions containing position info\n1.6.14\n
  \   Upgrade to haskell-src-exts 1.5.*\n1.6.13\n    #246, redundant brackets in [(...)]\n
  \   Add fold/map fusion hints\n    Don't suggest namings that are already used in
  the module\n    #239, Add suggestions of and/or on foldl\n    Add --extension flag,
  to find files not named .hs/.lhs\n    Only activate the builtin hints when they
  are imported\n    Fix matching bug, said \"Use flip\" on \"\\v -> f v . g\"\n    Suggest
  changing some pattern guards to view patterns\n1.6.12\n    Fix a bug with ignored
  hints being written to reports\n    Upgrade to haskell-src-exts 1.3.*\n    #228,
  suggest let instead of <- return in do statements\n    #229, suggest comparing\n
  \   Qualify all non-Prelude function suggestions\n    #225, Add redundant flip hint\n
  \   #226, Add ((+) x) ==> (x +)\n    #223, TemplateHaskell may allow other extensions
  via code\n    Fix incorrect suggestion on do x <- f ; g x x\n    A few small additional
  hints (use flip, redundant id)\n1.6.11\n    Don't perform type eta reduction\n1.6.10\n
  \   Fix bug, eta reduction on chained infix operators, i.e. x#y#z\n1.6.9\n    #217,
  don't suggest eta reduction on - or +\n    Fix bug, PatternGuards under case alternatives
  were ignored\n1.6.8\n    #213, upgrade to cpphs 1.9\n    Add suggestion to replace
  lambda with operator sections\n    Fix bug, ''Name decided TemplateHaskell was unnecessary\n
  \   HPC statistics, and increase in test coverage\n    Fix bug, import A as Y; import
  A gave import A, missing the as Y\n    Fix bug, type Foo a = Bar a a incorrectly
  suggested eta reduce\n1.6.7\n    NOTE: #213 has not been fixed, cpphs can cause
  hangs\n    Add threaded flag to Cabal to disable -threaded mode\n    #212, fix crash\n
  \   Fix bug, incorrectly decided TemplateHaskell was unnecessary\n1.6.6\n    Upgrade
  to hscolour 1.15\n    Add a hint for using unless\n    #211, add hints for unused
  extensions\n    #188, add pragma hints\n    Add a few additional hints (Functor
  laws)\n    #137, add cpphs support\n    #189, give hints for redundant imports\n
  \   Upgrade to haskell-src-exts 1.1.*\n1.6.5\n    #206, better presentation of parse
  errors\n    #208, give the correct precedence to ==> in source files\n1.6.4\n    Start
  of changelog\n"
basic-deps:
  extra: ! '>=0.5'
  base: ==4.*
  filepath: -any
  process: -any
  uniplate: ! '>=1.5'
  containers: -any
  haskell-src-exts: ! '>=1.16 && <1.17'
  ansi-terminal: ! '>=0.6.2'
  cmdargs: ! '>=0.10'
  cpphs: ! '>=1.18.1'
  transformers: ! '>=0.0'
  hscolour: ! '>=1.21'
  directory: -any
all-versions:
- '1.0.0.0'
- '1.0.0.1'
- '1.2'
- '1.4'
- '1.6'
- '1.6.1'
- '1.6.2'
- '1.6.3'
- '1.6.4'
- '1.6.5'
- '1.6.6'
- '1.6.7'
- '1.6.8'
- '1.6.9'
- '1.6.10'
- '1.6.11'
- '1.6.12'
- '1.6.13'
- '1.6.14'
- '1.6.15'
- '1.6.16'
- '1.6.17'
- '1.6.18'
- '1.6.19'
- '1.6.20'
- '1.6.21'
- '1.7'
- '1.7.1'
- '1.7.2'
- '1.7.3'
- '1.8'
- '1.8.1'
- '1.8.2'
- '1.8.3'
- '1.8.4'
- '1.8.5'
- '1.8.6'
- '1.8.7'
- '1.8.8'
- '1.8.9'
- '1.8.10'
- '1.8.11'
- '1.8.12'
- '1.8.13'
- '1.8.14'
- '1.8.15'
- '1.8.16'
- '1.8.17'
- '1.8.18'
- '1.8.19'
- '1.8.20'
- '1.8.21'
- '1.8.22'
- '1.8.23'
- '1.8.24'
- '1.8.25'
- '1.8.26'
- '1.8.27'
- '1.8.28'
- '1.8.29'
- '1.8.30'
- '1.8.31'
- '1.8.32'
- '1.8.33'
- '1.8.34'
- '1.8.35'
- '1.8.36'
- '1.8.37'
- '1.8.39'
- '1.8.40'
- '1.8.41'
- '1.8.42'
- '1.8.43'
- '1.8.44'
- '1.8.45'
- '1.8.46'
- '1.8.47'
- '1.8.48'
- '1.8.49'
- '1.8.50'
- '1.8.51'
- '1.8.52'
- '1.8.53'
- '1.8.54'
- '1.8.55'
- '1.8.56'
- '1.8.57'
- '1.8.58'
- '1.8.59'
- '1.8.60'
- '1.8.61'
- '1.9'
- '1.9.1'
- '1.9.2'
- '1.9.3'
- '1.9.4'
- '1.9.5'
- '1.9.6'
- '1.9.7'
- '1.9.8'
- '1.9.9'
- '1.9.10'
- '1.9.11'
- '1.9.12'
- '1.9.13'
- '1.9.14'
- '1.9.15'
- '1.9.16'
- '1.9.17'
- '1.9.18'
- '1.9.19'
- '1.9.20'
latest: '1.9.20'
description-type: markdown
description: ! "# HLint [![Hackage version](https://img.shields.io/hackage/v/hlint.svg?style=flat)](https://hackage.haskell.org/package/hlint)
  [![Build Status](https://img.shields.io/travis/ndmitchell/hlint.svg?style=flat)](https://travis-ci.org/ndmitchell/hlint)\n\nHLint
  is a tool for suggesting possible improvements to Haskell code. These suggestions
  include ideas such as using alternative functions, simplifying code and spotting
  redundancies. You can try HLint online at [lpaste.net](http://lpaste.net/) - suggestions
  are shown at the bottom. This document is structured as follows:\n\n* [Installing
  and running HLint](#installing-and-running-hlint)\n* [FAQ](#faq)\n* [Customizing
  the hints](#customizing-the-hints)\n\n### Acknowledgements\n\nThis program has only
  been made possible by the presence of the [haskell-src-exts](https://github.com/haskell-suite/haskell-src-exts)
  package, and many improvements have been made by [Niklas Broberg](http://www.nbroberg.se)
  in response to feature requests. Additionally, many people have provided help and
  patches, including Lennart Augustsson, Malcolm Wallace, Henk-Jan van Tuyl, Gwern
  Branwen, Alex Ott, Andy Stewart, Roman Leshchinskiy, Johannes Lippmann, Iustin Pop,
  Steve Purcell and others.\n\n### Bugs and limitations\n\nBugs can be reported [on
  the bug tracker](https://github.com/ndmitchell/hlint/issues). There are some issues
  that I do not intend to fix:\n\n* HLint operates on each module at a time in isolation,
  as a result HLint does not know about types or which names are in scope.\n* The
  presence of `seq` may cause some hints (i.e. eta-reduction) to change the semantics
  of a program.\n* Either the monomorphism restriction, or rank-2 types, may cause
  transformed programs to require type signatures to be manually inserted.\n* The
  `RebindableSyntax` extension can cause HLint to suggest incorrect changes.\n* HLint
  turns on many language extensions so it can parse more documents, occasionally some
  break otherwise legal syntax - e.g. `{-#INLINE foo#-}` doesn't work with `MagicHash`.
  These extensions can be disabled with `-XNoMagicHash`.\n\n## Installing and running
  HLint\n\nInstallation follows the standard pattern of any Haskell library or program,
  type `cabal update` to update your local hackage database, then `cabal install hlint`
  to install HLint.\n\nOnce HLint is installed, run hlint source where source is either
  a Haskell file, or a directory containing Haskell files. A directory will be searched
  recursively for any files ending with .hs or .lhs. For example, running HLint over
  darcs would give:\n\n\n    $ hlint darcs-2.1.2\n\n    darcs-2.1.2\\src\\CommandLine.lhs:94:1:
  Error: Use concatMap\n    Found:\n      concat $ map escapeC s\n    Why not:\n      concatMap
  escapeC s\n\n    darcs-2.1.2\\src\\CommandLine.lhs:103:1: Warning: Use fewer brackets\n
  \   Found:\n      ftable ++ (map (\\ (c, x) -> (toUpper c, urlEncode x)) ftable)\n
  \   Why not:\n      ftable ++ map (\\ (c, x) -> (toUpper c, urlEncode x)) ftable\n\n
  \   darcs-2.1.2\\src\\Darcs\\Patch\\Test.lhs:306:1: Error: Use a more efficient
  monadic variant\n    Found:\n      mapM (delete_line (fn2fp f) line) old\n    Why
  not:\n      mapM_ (delete_line (fn2fp f) line) old\n\n    ... lots more suggestions
  ...\n\nEach suggestion says which file/line the suggestion relates to, how serious
  the issue is, a description of the issue, what it found, and what you might want
  to replace it with. In the case of the first hint, it has suggested that instead
  of applying `concat` and `map` separately, it would be better to use the combination
  function `concatMap`.\n\nThe first suggestion is marked as an error, because using
  `concatMap` in preference to the two separate functions is always desirable. In
  contrast, the removal of brackets is probably a good idea, but not always. Reasons
  that a hint might be a warning include requiring an additional import, something
  not everyone agrees on, and functions only available in more recent versions of
  the base library.\n\n**Bug reports:** The suggested replacement should be equivalent
  - please report all incorrect suggestions not mentioned as known limitations.\n\n###
  Reports\n\nHLint can generate a lot of information, making it difficult to search
  for particular types of errors. The `--report` flag will cause HLint to generate
  a report file in HTML, which can be viewed interactively. Reports are recommended
  when there are more than a handful of hints.\n\n### Language Extensions\n\nHLint
  enables most Haskell extensions, disabling only those which steal too much syntax
  (currently Arrows, TransformListComp, XmlSyntax and RegularPatterns). Individual
  extensions can be enabled or disabled with, for instance, `-XArrows`, or `-XNoMagicHash`.
  The flag `-XHaskell98` selects Haskell 98 compatibility.\n\n### Emacs Integration\n\nEmacs
  integration has been provided by [Alex Ott](http://xtalk.msk.su/~ott/). The integration
  is similar to compilation-mode, allowing navigation between errors. The script is
  at [hs-lint.el](https://github.com/ndmitchell/hlint/blob/master/data/hs-lint.el),
  and a copy is installed locally in the data directory. To use, add the following
  code to the Emacs init file:\n\n    (require 'hs-lint)\n    (defun my-haskell-mode-hook
  ()\n       (local-set-key \"\\C-cl\" 'hs-lint))\n    (add-hook 'haskell-mode-hook
  'my-haskell-mode-hook)\n\n### GHCi Integration\n\nGHCi integration has been provided
  by Gwern Branwen. The integration allows running `:hlint` from the GHCi prompt.
  The script is at [hlint.ghci](http://community.haskell.org/~ndm/darcs/hlint/data/hlint.ghci),
  and a copy is installed locally in the data directory. To use, add the contents
  to your [GHCi startup file](http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-dot-files.html).\n\n###
  Parallel Operation\n\nTo run HLint on n processors append the flags `+RTS -Nn`,
  as described in the [GHC user manual](http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html).
  HLint will usually perform fastest if n is equal to the number of physical processors.\n\nIf
  your version of GHC does not support the GHC threaded runtime then install with
  the command: `cabal install --flags=\"-threaded\"`\n\n### C preprocessor support\n\nHLint
  runs the [cpphs C preprocessor](http://hackage.haskell.org/package/cpphs) over all
  input files, by default using the current directory as the include path with no
  defined macros. These settings can be modified using the flags `--cpp-include` and
  `--cpp-define`. To disable the C preprocessor use the flag `-XNoCPP`. There are
  a number of limitations to the C preprocessor support:\n\n* HLint will only check
  one branch of an `#if`, based on which macros have been defined.\n* Any missing
  `#include` files will produce a warning on the console, but no information in the
  reports.\n\n### Unicode support\n\nBy default, HLint uses the current locale encoding.
  The encoding can be overridden with either `--utf8` or `--encoding=value`. For descriptions
  of some valid [encodings see the mkTextEncoding documentation](http://haskell.org/ghc/docs/latest/html/libraries/base/System-IO.html#v%3AmkTextEncoding).\n\n##
  FAQ\n\n### Why are suggestions not applied recursively?\n\nConsider:\n\n    foo
  xs = concat (map op xs)\n\nThis will suggest eta reduction to `concat . map op`,
  and then after making that change and running HLint again, will suggest use of `concatMap`.
  Many people wonder why HLint doesn't directly suggest `concatMap op`. There are
  a number of reasons:\n\n* HLint aims to both improve code, and to teach the author
  better style. Doing modifications individually helps this process.\n* Sometimes
  the steps are reasonably complex, by automatically composing them the user may become
  confused.\n* Sometimes HLint gets transformations wrong. If suggestions are applied
  recursively, one error will cascade.\n* Some people only make use of some of the
  suggestions. In the above example using concatMap is a good idea, but sometimes
  eta reduction isn't. By suggesting them separately, people can pick and choose.\n*
  Sometimes a transformed expression will be large, and a further hint will apply
  to some small part of the result, which appears confusing.\n* Consider `f $ (a b)`.
  There are two valid hints, either remove the $ or remove the brackets, but only
  one can be applied.\n\n### Why aren't the suggestions automatically applied?\n\nIf
  you want to automatically apply suggestions, the [Emacs integration](https://rawgithub.com/ndmitchell/hlint/master/hlint.htm#emacs)
  offers such a feature. However, there are a number of reasons that HLint itself
  doesn't have an option to automatically apply suggestions:\n\n* The underlying Haskell
  parser library makes it hard to modify the code, then print it similarly to the
  original.\n* Sometimes multiple transformations may apply.\n* After applying one
  transformation, others that were otherwise suggested may become inappropriate.\n\nI
  am intending to develop such a feature, but the above reasons mean it is likely
  to take some time.\n\n### Why doesn't the compiler automatically apply the optimisations?\n\nHLint
  doesn't suggest optimisations, it suggests code improvements - the intention is
  to make the code simpler, rather than making the code perform faster. The [GHC compiler](http://haskell.org/ghc/)
  automatically applies many of the rules suggested by HLint, so HLint suggestions
  will rarely improve performance.\n\n### Why doesn't HLint know the fixity for my
  custom !@%$ operator?\n\nHLint knows the fixities for all the operators in the base
  library, but no others. HLint works on a single file at a time, and does not resolve
  imports, so cannot see fixity declarations from imported modules. You can tell HLint
  about fixities by putting them in a hint file, or passing them on the command line.
  For example, pass `--with=infixr 5 !@%$`, or put all the fixity declarations in
  a file and pass `--hint=fixities.hs`. You can also use [--find](https://rawgithub.com/ndmitchell/hlint/master/hlint.htm#find)
  to automatically produce a list of fixity declarations in a file.\n\n### How can
  I use `--with` or `--hint` with the default hints?\n\nHLint does not use the default
  set of hints if custom hints are specified on the command line using `--with` or
  `--hint`. To include the default hints either pass `--hint=HLint` on the command
  line, or add import `\"hint\" HLint.HLint` in one of the hint files you specify
  with `--hint`.\n\n### Why do I sometimes get a \"Note\" with my hint?\n\nMost hints
  are perfect substitutions, and these are displayed without any notes. However, some
  hints change the semantics of your program - typically in irrelevant ways - but
  HLint shows a warning note. HLint does not warn when assuming typeclass laws (such
  as `==` being symmetric). Some notes you may see include:\n\n* __Increases laziness__
  - for example `foldl (&&) True` suggests `and` including this note. The new code
  will work on infinite lists, while the old code would not. Increasing laziness is
  usually a good idea.\n* __Decreases laziness__ - for example `(fst a, snd a)` suggests
  a including this note. On evaluation the new code will raise an error if a is an
  error, while the old code would produce a pair containing two error values. Only
  a small number of hints decrease laziness, and anyone relying on the laziness of
  the original code would be advised to include a comment.\n* __Removes error__ -
  for example foldr1 (&&) suggests and including the note \"Removes error on []\".
  The new code will produce `True` on the empty list, while the old code would raise
  an error. Unless you are relying on the exception thrown by the empty list, this
  hint is safe - and if you do rely on the exception, you would be advised to add
  a comment. \n\n### What is the difference between error and warning?\n\nEvery hint
  has a severity level:\n\n* __Error__ - for example `concat (map f x)` suggests `concatMap
  f x` as an \"error\" severity hint. From a style point of view, you should always
  replace a combination of `concat` and `map` with `concatMap`. Note that both expressions
  are equivalent - HLint is reporting an error in style, not an actual error in the
  code.\n* __Warning__ - for example `x !! 0` suggests head x as a \"warning\" severity
  hint. Typically head is a simpler way of expressing the first element of a list,
  especially if you are treating the list inductively. However, in the expression
  `f (x !! 4) (x !! 0) (x !! 7)`, replacing the middle argument with `head` makes
  it harder to follow the pattern, and is probably a bad idea. Warning hints are often
  worthwhile, but should not be applied blindly.\n\nThe difference between error and
  warning is one of personal taste, typically my personal taste. If you already have
  a well developed sense of Haskell style, you should ignore the difference. If you
  are a beginner Haskell programmer you may wish to focus on error hints before warning
  hints.\n\n## Customizing the hints\n\nMany of the hints that are applied by HLint
  are contained in Haskell source files which are installed in the data directory
  by Cabal. These files may be edited, to add library specific knowledge, to include
  hints that may have been missed, or to ignore unwanted hints.\n\n### Choosing a
  package of hints\n\nBy default, HLint will use the `HLint.hs` file either from the
  current working directory, or from the data directory. Alternatively, hint files
  can be specified with the `--hint` flag. HLint comes with a number of hint packages:\n\n*
  __Default__ - these are the hints that are used by default, covering most of the
  base libraries.\n* __Dollar__ - suggests the replacement `a $ b $ c` with `a . b
  $ c`. This hint is especially popular on the [\\#haskell IRC channel](http://www.haskell.org/haskellwiki/IRC_channel).\n*
  __Generalise__ - suggests replacing specific variants of functions (i.e. `map`)
  with more generic functions (i.e. `fmap`).\n\nAs an example, to check the file `Example.hs`
  with both the default hints and the dollar hint, I could type: `hlint Example.hs
  --hint=Default --hint=Dollar`. Alternatively, I could create the file `HLint.hs`
  in the working directory and give it the contents:\n\n    import \"hint\" HLint.Default\n
  \   import \"hint\" HLint.Dollar\n\n### Ignoring hints\n\nSome of the hints are
  subjective, and some users believe they should be ignored. Some hints are applicable
  usually, but occasionally don't always make sense. The ignoring mechanism provides
  features for suppressing certain hints. Ignore directives can either be written
  as pragmas in the file being analysed, or in the hint files. Examples of pragmas
  are:\n\n* `{-# ANN module \"HLint: ignore Eta reduce\" #-}` - ignore all eta reduction
  suggestions in this module (use `module` literally, not the name of the module).\n*
  `{-# ANN myFunction \"HLint: ignore\" #-}` - don't give any hints in the function
  `myFunction`.\n* `{-# ANN myFunction \"HLint: error\" #-}` - any hint in the function
  `myFunction` is an error.\n* `{-# ANN module \"HLint: error Use concatMap\" #-}`
  - the hint to use concatMap is an error.\n* `{-# ANN module \"HLint: warn Use concatMap\"
  #-}` - the hint to use concatMap is a warning.\n\nIgnore directives can also be
  written in the hint files:\n\n* `ignore \"Eta reduce\"` - suppress all eta reduction
  suggestions.\n* `ignore \"Eta reduce\" = MyModule1 MyModule2` - suppress eta reduction
  hints in the `MyModule1` and `MyModule2` modules.\n* `ignore = MyModule.myFunction`
  - don't give any hints in the function `MyModule.myFunction`.\n* `error = MyModule.myFunction`
  - any hint in the function `MyModule.myFunction` is an error.\n* `error \"Use concatMap\"`
  - the hint to use `concatMap` is an error.\n* `warn \"Use concatMap\"` - the hint
  to use `concatMap` is a warning.\n\nThese directives are applied in the order they
  are given, with later hints overriding earlier ones.\n\n### Adding hints\n\nThe
  hint suggesting `concatMap` is defined as:\n\n    error = concat (map f x) ==> concatMap
  f x\n\nThe line can be read as replace `concat (map f x)` with `concatMap f x`.
  All single-letter variables are treated as substitution parameters. For examples
  of more complex hints see the supplied hints file. In general, hints should not
  be given in point free style, as this reduces the power of the matching. Hints may
  start with `error` or `warn` to denote how severe they are by default. If you come
  up with interesting hints, please submit them for inclusion.\n\nYou can search for
  possible hints to add from a source file with the `--find` flag, for example:\n\n
  \   $ hlint --find=src/Utils.hs\n    -- hints found in src/Util.hs\n    warn = null
  (intersect a b) ==> disjoint a b\n    warn = dropWhile isSpace ==> trimStart\n    infixr
  5 !:\n\nThese hints are suitable for inclusion in a custom hint file. You can also
  include Haskell fixity declarations in a hint file, and these will also be extracted.
  If you pass only `--find` flags then the hints will be written out, if you also
  pass files/folders to check, then the found hints will be automatically used when
  checking.\n"
