changelog-type: ''
hash: a2e51b1d4097692c5a621df15ea18c18034c7df254352e401c1092928b639fc2
synopsis: Cairo backend for diagrams drawing EDSL
changelog: ''
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.5.0.1'
- '0.5.0.2'
- '0.6'
- '0.7'
- '1.0'
- '1.0.1'
- '1.0.1.1'
- '1.0.1.2'
- '1.1'
- '1.1.0.1'
- '1.1.0.2'
- '1.2'
- '1.2.0.1'
- '1.2.0.2'
- '1.2.0.3'
- '1.2.0.4'
- '1.2.0.5'
- '1.2.0.6'
- '1.2.0.7'
- '1.3'
- '1.3.0.1'
latest: '1.3.0.1'
description-type: haddock
description: ! 'A full-featured backend for rendering

  diagrams using the cairo rendering engine.


  This ultimately depends on a C library, via

  Haskell''s FFI, and can be difficult to install on

  some platforms. If you are just looking for a

  quick way to visualize diagrams, try the

  diagrams-svg backend; if you want raster output

  like PNG, try the diagrams-rasterific backend; if

  you want to embed diagrams in LaTeX documents,

  try diagrams-pgf.


  * "Diagrams.Backend.Cairo.CmdLine" - if you''re

  just getting started with diagrams, begin here.


  * "Diagrams.Backend.Cairo" - look at this next.

  The general API for the cairo backend.


  * "Diagrams.Backend.Cairo.Internal" - the

  implementation guts of the cairo backend.

  Users should normally not need to import this

  module.


  * "Diagrams.Backend.Cairo.List" - render diagrams

  to two-dimensional lists of colors (/i.e./

  pixels).


  * "Diagrams.Backend.Cairo.Ptr" - render diagrams

  to buffers in memory.'
