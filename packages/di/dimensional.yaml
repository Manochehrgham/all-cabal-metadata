homepage: https://github.com/bjornbm/dimensional-dk/
changelog-type: ''
hash: 7fbdbe60b9dac65d4f6b7eb696218e2ef3ddeb9254152fb29507467907350f6f
test-bench-deps:
  base: -any
  criterion: -any
  HUnit: -any
  dimensional: -any
  deepseq: -any
maintainer: bjorn@buckwalter.se
synopsis: ! 'Statically checked physical dimensions,

  using Type Families and Data Kinds.'
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  numtype-dk: ! '>=0.5 && <1.1'
  exact-pi: ! '>=0.2.1.1 && <0.3'
  deepseq: ! '>=1.3'
  vector: ! '>=0.10'
all-versions:
- '0.7'
- '0.7.1'
- '0.7.2'
- '0.7.3'
- '0.8'
- '0.8.0.1'
- '0.8.2.1'
- '0.9'
- '0.10'
- '0.10.1'
- '0.10.1.1'
- '0.10.1.2'
- '0.10.2'
- '0.12'
- '0.12.1'
- '0.12.1.1'
- '0.12.2'
- '0.12.3'
- '0.13'
- '0.13.0.1'
- '0.13.0.2'
- '1.0.0.0'
author: Bjorn Buckwalter
latest: '1.0.0.0'
description-type: markdown
description: ! "dimensional\r\n==============\r\n\r\nThis library provides statically-checked
  dimensional arithmetic for physical quantities, using the 7 SI base dimensions.\r\n\r\nData
  kinds and closed type families provide a flexible, safe, and discoverable implementation
  that leads to largely self-documenting\r\nclient code.\r\n\r\n[![Build Status](https://travis-ci.org/bjornbm/dimensional-dk.svg?branch=master)](https://travis-ci.org/bjornbm/dimensional-dk)\r\n[![Hackage
  Version](http://img.shields.io/hackage/v/dimensional.svg)](http://hackage.haskell.org/package/dimensional)\r\n\r\nUsage\r\n-----\r\n\r\nSimply
  importing `Numeric.Units.Dimensional.Prelude` provides access to dimensional arithmetic
  opertors, SI units and other common units\r\naccepted for use with the SI, and convenient
  aliases for quantities with commonly used dimensions.\r\n\r\nThe `Unit d a` type
  represents a unit with dimension `d`, whose conversion factor to the coherent SI
  base unit of the corresponding dimension\r\nis represented by a value of type `a`.
  `a` is commonly chosen to be `Double`, but can be any `Floating` type. Where possible,
  support is also\r\nprovided for `Fractional` or `Num` values.\r\n\r\nSimilarly,
  the `Quantity d a` type represents a quantity with dimension `d`, whose numeric
  value is of type `a`. Aliases allow the use of, e.g.,\r\n`Length Double` to mean
  `Quantity DLength Double`. A complete list of available aliases is given in the
  haddock documentation for the\r\n`Numeric.Units.Dimensional.Quantities`.\r\n\r\n```haskell\r\n{-#
  LANGUAGE NoImplicitPrelude #-}\r\n\r\nimport Numeric.Units.Dimensional.Prelude\r\nimport
  Numeric.Units.Dimensional.NonSI (gee)\r\n\r\nradiusOfEarth :: Length Double\r\nradiusOfEarth
  = 6371 *~ kilo meter\r\n\r\nmassOfEarth :: Mass Double\r\nmassOfEarth = 5.97e24
  *~ kilo gram\r\n\r\ng :: GravitationalParameter Double\r\ng = 6.67384e-11 *~ (meter^pos3
  * (kilo gram)^neg1 * second^neg2)\r\n\r\ngravitationalFieldStrength :: Mass a ->
  Length a -> Acceleration a\r\ngravitationalFieldStrength m r = g * m / r^pos2\r\n\r\napproximateAccelerationDueToGravityOnEarth
  = gravitationalFieldStrength massOfEarth radiusOfEarth\r\n\r\ndifferenceFromStandardValue
  = approximateAccelerationDueToGravityOnEarth /~ gee\r\n```\r\n\r\nContributing\r\n------------\r\n\r\nFor
  project information (issues, updates, wiki, examples) see:\r\n  https://github.com/bjornbm/dimensional-dk\r\n"
license-name: BSD3
