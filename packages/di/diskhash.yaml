homepage: ''
changelog-type: text
hash: d6aa219131e3d9386f45ec6029b2335815ad93c726a4fced060c74f1b3996c82
test-bench-deps:
  test-framework-hunit: -any
  diskhash: -any
  bytestring: ==0.10.*
  test-framework: -any
  base: ! '>4.8 && <5'
  test-framework-quickcheck2: -any
  HUnit: -any
  test-framework-th: -any
  QuickCheck: -any
  directory: -any
maintainer: Luis Pedro Coelho
synopsis: Disk-based hash table
changelog: ! "Version 0.0.1.2 2017-06-27 by luispedro\n\t* Fix cabal release: include
  C header files in extra-source-files\n\nVersion 0.0.1.1 2017-06-27 by luispedro\n\t*
  Fix cabal release: include C header files\n\nVersion 0.0.1 2017-06-27 by luispedro\n\t*
  First release. Basic funcionality\n"
basic-deps:
  bytestring: ==0.10.*
  base: ! '>4.8 && <5'
all-versions:
- '0.0.1.0'
- '0.0.1.1'
- '0.0.1.2'
author: Luis Pedro Coelho
latest: '0.0.1.2'
description-type: markdown
description: ! "# Disk-based hashtable\n\n[![Travis](https://api.travis-ci.org/luispedro/diskhash.png)](https://travis-ci.org/luispedro/diskhash)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n\nA
  simple disk-based hash table.\n\nThe code is in C, wrappers are provided for Python,
  Haskell, and C++. The\nwrappers follow similar APIs with variations to accomodate
  the language\nspecificity. They all use the same underlying code, so you can open
  a hashtable\ncreated in C from Haskell, modify it within your Haskell code, and
  open the\nresult in Python (although Python's version currently only deals with
  integers,\nstored as longs).\n\nCross-language functionality will work best for
  very simple types so that you\ncan control their binary representation (64-bit integers,
  for example).\n\nReading does not touch the disk representation at all and, thus,
  can be done on\ntop of read-only files or using multiple threads. Writing or modifying
  values\nis, however, not thread-safe.\n\n## Examples\n\nThe following examples all
  create a hashtable to store longs (`int64_t`), then\nset the value associated with
  the key `\"key\"` to 9. In the current API, the\nmaximum size of the keys needs
  to be pre-specified, which is the value `15`\nbelow.\n\n### Raw C\n\n```c\n#include
  <stdio.h>\n#include <inttypes.h>\n#include \"diskhash.h\"\n\nint main(void) {\n
  \   HashTableOpts opts;\n    opts.key_maxlen = 15;\n    opts.object_datalen = sizeof(int64_t);\n
  \   char* err = NULL;\n    HashTable* ht = dht_open(\"testing.dht\", opts, O_RDWR|O_CREAT,
  &err);\n    if (!ht) {\n        if (!err) err = \"Unknown error\";\n        fprintf(stderr,
  \"Failed opening hash table: %s.\\n\", err);\n        return 1;\n    }\n    long
  i = 9;\n    dht_insert(ht, \"key\", &i);\n    \n    long* val = (long*) dht_lookup(ht,
  \"key\");\n    printf(\"Looked up value: %l\\n\", *val);\n\n    dht_free(ht);\n
  \   return 0;\n}\n```\n\n### Haskell\n\nIn Haskell, you have different types/functions
  for read-write and read-only\nhashtables.\n\nRead write example:\n\n```haskell\nimport
  Data.DiskHash\nimport Data.Int\nmain = do\n    ht <- htOpenRW \"testing.dht\" 15\n
  \   htInsertRW ht \"key\" (9 :: Int64)\n    val <- htLookupRW \"key\" ht\n    print
  val\n```\n\nRead only example (`htLookupRO` is pure in this case):\n\n```haskell\nimport
  Data.DiskHash\nimport Data.Int\nmain = do\n    ht <- htOpenRO \"testing.dht\" 15\n
  \   let val :: Int64\n        val = htLookupRO \"key\" ht\n    print val\n```\n\n\n###
  Python\n\nPython's interface is more limited and only integers are supported as
  values in\nthe hash table (they are stored as 64-bit integers).\n\n```python\nimport
  diskhash\ntb = diskhash.Str2int(\"testing.dht\", 15)\ntb.insert(\"key\", 9)\nprint(tb.lookup(\"key\"))\n```\n\nThe
  Python interface is currently Python 3 only. Patches to extend it to 2.7\nare welcome,
  but it's not a priority.\n\n\n### C++\n\nIn C++, a simple wrapper is defined, which
  provides a modicum of type-safety.\nYou use the `DiskHash<T>` template. Additionally,
  errors are reported through\nexceptions (both `std::bad_alloc` and `std::runtime_error`
  can be thrown) and\nnot return codes.\n\n```c++\n#include <iostream>\n#include <string>\n\n#include
  <diskhash.hpp>\n\nint main() {\n    const int key_maxlen = 15;\n    dht::DiskHash<uint64_t>
  ht(\"testing.dht\", key_maxlen, dht::DHOpenRW);\n    std::string line;\n    uint64_t
  ix = 0;\n    while (std::getline(std::cine, line)) {\n        if (line.length()
  > key_maxlen) {\n            std::cerr << \"Key too long: '\" << line << \"'. Aborting.\\n\";\n
  \           return 2;\n        }\n        const bool inserted = ht.insert(line.c_str(),
  ix);\n        if (!inserted) {\n            std::cerr  << \"Found repeated key '\"
  << line << \"' (ignored).\\n\";\n        }\n        ++ix;\n    }\n    return 0;\n}\n```\n\n##
  Statibility\n\nThis is _beta_ software. It is good enough that I am using it, but
  the API can\nchange in the future with little warning. The binary format is versioned
  (the\nmagic string encodes its version, so changes can be detected).\n\n[Automated
  unit testing](https://travis-ci.org/luispedro/diskhash) ensures that\nbasic mistakes
  will not go uncaught.\n\n## Limitations\n\n- You must specify the maximum key size.
  This can be worked around either by\n  pre-hashing the keys (with a strong hash)
  or using multiple hash tables for\n  different key sizes. Neither is currently implemented
  in diskhash.\n\n- You cannot delete objects. This was not a necessity for my uses,
  so it was\n  not implemented. A simple implementation could be done by marking objects
  as\n  \"deleted\" in place and recompacting when the hash table size changes or
  with\n  an explicit `dht_gc()` call. It may also be important to add functionality
  to\n  shrink hashtables so as to not waste disk space.\n\nLicense: MIT\n\n"
license-name: MIT
