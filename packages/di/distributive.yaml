homepage: http://github.com/ekmett/distributive/
changelog-type: markdown
hash: 6566eadd2af824f39f7e3c0c9d49bdd469048ec5939fac6e7dfb1df58d8eb541
test-bench-deps:
  base: ! '>=4'
  filepath: ! '>=1.2'
  doctest: ! '>=0.9.1'
  directory: ! '>=1.0'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Distributive functors -- Dual to Traversable
changelog: ! '0.5

  ---

  * Added flags for removing some dependencies.

  * Support `doctests` when building to non-standard locations (such as when using
  `stack`.)

  * Support `base-orphans`


  0.4.4

  -----

  * `transformers 0.4` compatibility


  0.4.3.1

  -----

  * Fixed builds with older versions of GHC


  0.4.2

  -------

  * Added `Data.Distributive.Generic`.


  0.4.1

  -----

  * `Control.Monad.Instances` is deprecated in GHC 7.8. Don''t import it there.


  0.4

  ---

  * Added support for `Data.Tagged` and `Data.Proxy`.


  0.3.1

  -----

  * Minor documentation fix


  0.3

  ---

  * Added instances for `Control.Applicative.Backwards` and `Data.Functor.Reverse`
  from `transformers` 0.3, taking them from `transformers-compat` if necessary for
  `transformers` 0.2


'
basic-deps:
  base: ! '>=4 && <5'
  base-orphans: ! '>=0.5 && <1'
  tagged: ! '>=0.7 && <1'
  transformers: ! '>=0.2 && <0.6'
  transformers-compat: ! '>=0.3 && <1'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.2.0.1'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.3.2'
- '0.4.4'
- '0.5'
author: Edward A. Kmett
latest: '0.5'
description-type: markdown
description: ! 'distributive

  ============


  [![Hackage](https://img.shields.io/hackage/v/distributive.svg)](https://hackage.haskell.org/package/distributive)
  [![Build Status](https://secure.travis-ci.org/ekmett/distributive.png?branch=master)](http://travis-ci.org/ekmett/distributive)


  This package provides the notion that is categorically dual to `Traversable`.


  A `Distributive` `Functor` is one that you can push any functor inside of.


  ```haskell

  distribute :: (Functor f, Distributive g) => f (g a) -> g (f a)

  ```


  Compare this with the corresponding Traversable notion, `sequenceA`.


  ```haskell

  sequenceA :: (Applicative f, Traversable g) => g (f a) -> f (g a)

  ```


  This package includes instances for common types, and includes other methods similar
  to `traverse` which fuse the use of `fmap`.


  We only require `Functor` rather than some dual notion to `Applicative`, because
  the latter cannot meaningfully exist in Haskell

  since all comonoids there are trivial.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
