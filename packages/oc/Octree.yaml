changelog-type: text
hash: 5db0b530d4b4d9bdd6b45de7e58e03e8d8733415ca3dfe5e01ca7a30e125a4be
test-bench-deps:
  base: ! '>=4.0 && <4.9'
  markdown-unlit: -any
  AC-Vector: ! '>=2.3.0'
  QuickCheck: ! '>=2.4.0'
synopsis: Simple unbalanced Octree for storing data about 3D points
changelog: ! "-*-Changelog-*-\n\n0.5.4.2 Apr 2014\n\t* Passes GHC 7.10 RC Dec 22 2014
  build.\n\n0.5.4.1 Apr 2014\n\t* Bump up upper bounds for GHC 7.10\n\n0.5.3 Apr 2014\n\t*
  Switched to automatically derived Functor, Foldable, Traversable\n"
basic-deps:
  base: ! '>=4.0 && <4.9'
  AC-Vector: ! '>=2.3.0'
  QuickCheck: ! '>=2.4.0'
all-versions:
- '0.2'
- '0.2.0.1'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.3'
- '0.4'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4.1'
- '0.5.4.2'
latest: '0.5.4.2'
description-type: text
description: ! "octree\n======\nThis is a simple Octree implementation in Haskell.\n\n[![Build
  Status](https://api.travis-ci.org/BioHaskell/octree.png?branch=master)](https://www.travis-ci.org/BioHaskell/octree)\n\nTo
  use simply:\n\n~~~ {.haskell}\nmodule Main where\n\nimport Data.Octree as O\n\nimport
  Data.Vector.V3\n\nmain = do let oct = fromList [(Vector3 1 2 3, \"a\"),\n                              (Vector3
  3 4 5, \"b\"),\n                              (Vector3 8 8 8, \"c\")]\n              report
  msg elt = putStrLn $ msg ++ show elt\n          report \"Nearest     :\" $ O.nearest
  \    oct     $ Vector3 2 2 3\n          report \"Within range:\" $ O.withinRange
  oct 5.0 $ Vector3 2 2 3\n          return ()\n~~~\n\n*For now it uses AC-Vector
  package for vectors, but I may change it to use Tensor package used by OpenGL package,
  if there is interest.*\n*So far I still wait for package with vector operations
  (like dot, cross producton, vector projection and rejection) on Tensor types.*\n\nOfficial
  releases are on [Hackage](http://hackage.haskell.org/package/Octree).\n\nThis package
  is also a part of [Stackage](http://daniel-diaz.github.io/stackagelist/) - a stable
  subset of Hackage.\n"
