homepage: https://github.com/tomjaguarpaw/haskell-opaleye
changelog-type: markdown
hash: 89c88b17345e194a4521ba72ad38d8074bf9620102becd846b0c1c74788595ed
test-bench-deps:
  base: ==4.*
  time: -any
  semigroups: -any
  containers: -any
  product-profunctors: ! '>=0.6'
  contravariant: -any
  postgresql-simple: -any
  opaleye: -any
  multiset: -any
  QuickCheck: -any
  profunctors: -any
maintainer: Purely Agile
synopsis: An SQL-generating DSL targeting PostgreSQL
changelog: ! "## 0.4.2.0\n\n* Added `.===` and `./==` for comparison of product types\n*
  Added `keepWhen` as an alternative to `restrict`\n* Added `constant` conversion
  to and from Aeson\n* Added `pgValueJSON` and `pgValueJSONB`\n\n## 0.4.1.0\n\n* Added
  `Opaleye.Constant` for lifting constant values\n* Support microseconds in `pgLocalTime`,
  `pgTimeOfDay` and `pgUTCTime`\n* Added `unsafeCompositeField` to help with defining
  composite types\n* `Order` is an instance of `Semigroup`\n\nThanks to Adam Bergmark
  and Matt Wraith for helping with these\nchanges.\n\n## 0.4.0.0\n\n* Added `runUpdateReturning`\n*
  Ordering operators and `max` and `min` aggregators are now restricted to a typeclass\n*
  Added `stringAgg` and `arrayAgg` aggregations.\n* Added `PGOrd` typeclass for typesafe
  ordering operations.\n* Support sorting NULLs first or last with `ascNullsFirst`
  and `descNullsFirst`\n* Added JSON types\n* Added `runInsertMany`\n\nThanks to Travis
  Staton, Jakub Ryška and Christopher Lewis for\nhelping with these changes.\n\n##
  0.3.1.2\n\n* Use time >= 1.4 and time-locale-compat\n\n## 0.3.1.1\n\n* Bump time
  to >= 1.5\n\n## 0.3.1\n\n* SQL code generator escapes column names, so table column
  names can\n  be the same as SQL keywords.\n* Add `like` operator\n* Add the types
  `PGCitext`, `PGArray`, `PGBytea`\n\n## 0.3\n\n* Replace `Default QueryRunner` with
  a new class\n  `DefaultQueryRunnerColumn`, migrate with `s/Default\n  QueryRunner/DefaultQueryRunnerColumn`
  and\n  `s/def/queryRunnerColumnDefault/`\n* Remove `ShowConstant`, use the monomorphic
  functions defined in the\n  new module `Opaleye.PGTypes` instead. You will need
  to replace\n  `Column Bool` with `Column PGBool` etc. in query signatures\n* Re-export
  more modules from `Opaleye`\n* Add `boolAnd`, `boolOr,` `max`, and `min` aggregators\n*
  Add `lower` and `upper`\n* Add operator fixities\n* Add `maybeToNullable`\n* Add
  column instances for `Bool`, `UUID`, `Text`, and `UTCTime`\n* Expose fieldQueryRunnerColumn
  from Opaleye.RunQuery\n* Add `unsafeCast`\n* Re-export `Unpackspec` from `Opaleye.Manipulation`\n"
basic-deps:
  void: ! '>=0.4 && <0.8'
  bytestring: ! '>=0.10 && <0.11'
  case-insensitive: ! '>=1.2 && <1.3'
  base: ! '>=4 && <5'
  time: ! '>=1.4 && <1.6'
  text: ! '>=0.11 && <1.3'
  uuid: ! '>=1.3 && <1.4'
  semigroups: ! '>=0.13 && <0.19'
  product-profunctors: ! '>=0.6.2 && <0.8'
  contravariant: ! '>=1.2 && <1.5'
  postgresql-simple: ! '>=0.4.8.0 && <0.6'
  base16-bytestring: ! '>=0.1.1.6 && <0.2'
  attoparsec: ! '>=0.10.3 && <0.14'
  transformers: ! '>=0.3 && <0.6'
  pretty: ! '>=1.1.1.0 && <1.2'
  aeson: ! '>=0.6 && <0.12'
  profunctors: ! '>=4.0 && <5.3'
  time-locale-compat: ! '>=0.1 && <0.2'
all-versions:
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.1.2'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
author: Purely Agile
latest: '0.4.2.0'
description-type: markdown
description: ! '# Brief introduction to Opaleye [![Hackage version](https://img.shields.io/hackage/v/opaleye.svg?style=flat)](https://hackage.haskell.org/package/opaleye)
  [![Build Status](https://img.shields.io/travis/tomjaguarpaw/haskell-opaleye.svg?style=flat)](https://travis-ci.org/tomjaguarpaw/haskell-opaleye)


  Opaleye is a Haskell library that provides an SQL-generating embedded

  domain specific language for targeting Postgres.  You need Opaleye if

  you want to use Haskell to write typesafe and composable code to query

  a Postgres database.


  > "Opaleye really is great. You''ve managed to bring what is so

  wonderful about relational databases and give it type safety and

  composition (i.e. what is wonderful about Haskell)" &ndash; Daniel

  Patterson, [Position Development](http://positiondev.com/)


  Opaleye allows you to define your database tables and write queries

  against them in Haskell code, and aims to be typesafe in the sense

  that if your code compiles then the generated SQL query will not fail

  at runtime.  A wide range of SQL functionality is supported including

  inner and outer joins, restriction, aggregation, distinct, sorting and

  limiting, unions and differences.  Facilities to insert to, update and

  delete from tables are also provided.  Code written using Opaleye is

  composable at a very fine level of granularity, promoting code reuse

  and high levels of abstraction.


  ## Getting Opaleye


  * Github: https://github.com/tomjaguarpaw/haskell-opaleye

  * Hackage: https://hackage.haskell.org/package/opaleye


  ## Tutorials


  Please get started with Opaleye by referring to these two tutorials


  * [Basic tutorial](https://github.com/tomjaguarpaw/haskell-opaleye/blob/master/Doc/Tutorial/TutorialBasic.lhs)

  * [Manipulation tutorial](https://github.com/tomjaguarpaw/haskell-opaleye/blob/master/Doc/Tutorial/TutorialManipulation.lhs)


  # Contact


  ## Contact the author


  The main author of Opaleye is Tom Ellis.  He can be [contacted via

  email](http://web.jaguarpaw.co.uk/~tom/contact/).


  ## File bugs


  Please file bugs on the [Opaleye GitHub issue tracking

  page](https://github.com/tomjaguarpaw/haskell-opaleye/issues/).


  ## Mailing list


  Please join the [opaleye-users mailing

  list](https://lists.sourceforge.net/lists/listinfo/opaleye-users).


  # `Internal` modules


  Opaleye exports a number of modules named `Opaleye.Internal....`.

  They are provided in case of urgent need for access to the internals,

  but they are not intended to be used by API consumers and if you find

  yourself repeatedly accessing them this is a sign that either you or

  Opaleye are doing something wrong.  In such a case please file a bug.


  The interface of `Internal` modules does not follow the PVP and may

  break between minor releases, so be careful.


  # Commercial support


  Commercial support for Opaleye is provided by [Purely

  Agile](http://www.purelyagile.com/).


  # Backup maintainers


  In the event of the main developer becoming unreachable, please

  contact the following who are authorised to make bugfixes and

  dependency version bumps:


  * Adam Bergmark

  * Erik Hesselink

  * Oliver Charles


  # Contributors


  The Opaleye Project was founded by Tom Ellis, inspired by theoretical

  work on databases by David Spivak.  Much of the implementation was

  based on ideas and code from the HaskellDB project by Daan Leijen,

  Conny Andersson, Martin Andersson, Mary Bergman, Victor Blomqvist,

  Bjorn Bringert, Anders Hockersten, Torbjorn Martin, Jeremy Shaw and

  Justin Bailey.


  The following individuals and organisations have made helpful

  contributions:


  * Silk (Erik Hesselink, Adam Bergmark)

  * Karamaan (Christopher Lewis)

  * Fynder (Renzo Carbonara, Oliver Charles)

  * Daniel Patterson

  * Jakub Ryška

  * Travis Staton


  Joseph Abrahamson, Alfredo Di Napoli and Mietek Bak performed useful

  reviews of early versions which helped improve the codebase.

'
license-name: BSD3
