homepage: https://github.com/passy/optparse-text#readme
changelog-type: ''
hash: f3587ef372dd8b1059f8fc25b18263c06515d43498ed0a79797a800e373b7e65
test-bench-deps:
  base: ! '>=4.6 && <5'
  hspec: -any
  text: -any
  optparse-applicative: -any
  optparse-text: -any
maintainer: Pascal Hartig <i@passy.me>
synopsis: Data.Text helpers for optparse-applicative
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5'
  text: -any
  optparse-applicative: -any
all-versions:
- '0.1.0.0'
author: ''
latest: '0.1.0.0'
description-type: markdown
description: ! "# optparse-text\n[![Build Status](https://travis-ci.org/passy/optparse-text.svg?branch=master)](https://travis-ci.org/passy/optparse-text)\n\n>
  Helpers for\n> [`optparse-applicative`](https://hackage.haskell.org/package/optparse-applicative)\n>
  to deal with [`Data.Text`](https://hackage.haskell.org/package/text).\n\n## Example\n\n```haskell\nimport
  qualified Data.Text                 as T\nimport qualified Options.Applicative       as
  Opt\nimport qualified Options.Applicative.Text  as OptT\n\ndata Options = Options
  { text    :: T.Text\n                       , textArg :: T.Text\n                       ,
  textOpt :: T.Text }\n  deriving (Eq, Show)\n\noptParser :: Opt.Parser Options\noptParser
  = Options <$> Opt.argument OptT.text ( Opt.metavar \"TEXT\" )\n                 <*>
  OptT.textArgument ( Opt.metavar \"TEXT2\" )\n                 <*> OptT.textOption
  ( Opt.long \"textopt\" )\n```\n\n## Status\n\nAbout to be published.\n\n## Alternatives\n\nYou
  may want to consider using\n[optparse-generic](https://github.com/Gabriel439/Haskell-Optparse-Generic-Library)\nwhich
  has built-in support for Text and provides a very convient generic\ninterface to
  optparse avoiding a lot of boilerplate.\n"
license-name: BSD3
