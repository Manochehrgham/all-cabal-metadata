homepage: https://bitbucket.org/bwbush/opengl-dlp-stereo
changelog-type: ''
hash: 6cb26ea7f6e274d84dbf54a230730fe74e8d2db8fec5660912d698425e005e01
test-bench-deps: {}
maintainer: Brian W Bush <consult@brianwbush.info>
synopsis: Library and example for using DLP stereo in OpenGL
changelog: ''
basic-deps:
  OpenGL: ! '>=2.8'
  GLUT: ! '>=2.4'
  base: ! '>=4.6 && <5'
  vector: ! '>=0.10'
all-versions:
- '0.1.2.5'
- '0.1.2.6'
author: Brian W Bush <consult@brianwbush.info>
latest: '0.1.2.6'
description-type: markdown
description: ! "Functions for using DLP stereo with 3-D Ready Sync projectors and
  OpenGL\n========================================================================\n\nThis
  Haskell package contains functions for rendering 3D stereo using DLP 3-D Ready Sync
  projectors and active-shutter stereo glasses.  It also includes [a sample application](https://youtu.be/l3rZbMB2XjM)
  and notes regarding hardware setup for DLP.  In particular, note that this technique
  does not require a graphics card that supports `GL_STEREO`.\n\nThe code conforms
  to the specification <<http://lists.gnu.org/archive/html/bino-list/2013-03/pdfz6rW7jUrgI.pdf>>
  and is based on the implementation for the stereo movie viewer Bino <<http://git.savannah.gnu.org/cgit/bino.git/tree/src/video_output.cpp?id=bino-1.6.1#n1389>>.\n\n\nSkeletal
  example illustrating the use of frame-sequential DLP\n-------------------------------------------------------------\n\n```haskell\nmain
  :: IO ()\nmain = do\n  _ <- getArgsAndInitialize\n  initialDisplayMode $= [WithDepthBuffer,
  DoubleBuffered]\n  _ <- createWindow \"DLP Stereo OpenGL Example\"\n  depthFunc
  $= Just Less \n  dlp <- initDlp                                                         --
  Initialize the DLP state.\n  displayCallback $= display dlp                                         --
  The display callback needs the DLP state.\n  idleCallback $= Just (postRedisplay
  Nothing)                           -- The idle callback must force redisplay for
  frame-sequential encoding.\n  mainLoop\n\nencoding :: DlpEncoding\nencoding = FrameSequential
  \                                              -- Frame-sequential encoding is usually
  easiest to code.\n\ndisplay :: IORef DlpState -> DisplayCallback\ndisplay dlp =
  do\n  clear [ColorBuffer, DepthBuffer]\n  isLeftEye <- showEye' LeftDlp encoding
  dlp                             -- Determine whether to draw the view for the left
  or right eye.\n  translate $ Vector3 (if isLeftEye then -0.05 else 0.05 :: GLfloat)
  0 0 -- Shift the view slightly, depending on for which eye to draw.\n  renderPrimitive
  . . .                                                  -- All of the rendering actions
  go here.\n  drawDlp encoding dlp                                                   --
  Draw the colored DLP reference line just before swapping framebuffers.\n  swapBuffers\n```\n\n\nNotes
  on hardware and software\n------------------------------\n\nThis code has been validated
  with the following configuration of hardware and software:\n\n*   Optoma ML550 WXGA
  500 Lumen 3D Ready Portable DLP LED Projector, running 120 Hz at 1024x768 resolution\n*
  \  Optoma ZD302 DLP Link Active Shutter 3D Glasses\n*   Ubuntu 15.04, 64-bit\n*
  \  NVIDIA Driver Version 340.93, with `xorg.conf` option `Stereo` set to `8`\n*
  \  GHC 7.6.3\n*   OpenGL == 2.8.0.0\n*   GLUT == 2.4.0.0\n"
license-name: MIT
