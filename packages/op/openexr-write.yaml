homepage: https://github.com/pavolzetor/openexr-write#readme
changelog-type: markdown
hash: 879417743fcfa3a09d2a624c2bdcfc1fe9e86692fe369cf5f946c45ef04592d3
test-bench-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  hspec: -any
  openexr-write: -any
  vector: -any
  directory: -any
maintainer: pavol@klacansky.com
synopsis: Library for writing images in OpenEXR HDR file format.
changelog: ''
basic-deps:
  bytestring: -any
  split: -any
  base: ! '>=4.8 && <5'
  binary: -any
  zlib: -any
  data-binary-ieee754: -any
  deepseq: -any
  vector-split: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Pavol Klacansky
latest: '0.1.0.1'
description-type: markdown
description: ! "Haskell OpenEXR Library\n=======================\n\nThis library can
  write colored images which use floating point values into\nOpenEXR (v2) high-dynamic-range
  file format.\n\nSupported features:\n\n- scanline format\n- compression (ZIPS, ZIP)\n-
  pixel format (RGB float32)\n\n\n\nUsage\n-----\n\nModify project's `stack.yaml`
  by adding path to `openexr-write` package.\n\n```\npackages:\n- '.'\n- path/openexr-write\n```\n\nAn
  image can be written by calling `writeFile` function. For example,\nfollowing code
  stores a compressed image consisting of one red pixel.\n\n```\nmodule Main where\n\nimport
  qualified Data.Vector      as V\nimport qualified Graphics.OpenEXR as EXR\n\n\nmain
  :: IO ()\nmain = do\n        let image = EXR.ImageRGBF 1 1 (V.fromList [EXR.PixelRGBF
  1.0 0.0 0.0])\n        EXR.writeFile \"image.exr\" image EXR.ZipCompression\n```\n"
license-name: GPL-3
