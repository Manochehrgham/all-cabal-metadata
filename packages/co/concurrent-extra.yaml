changelog-type: ''
hash: 57fa11cf4c6280b97d69c7860e19aafc0b2c280cd3a89ad60a8f87918b76b987
test-bench-deps:
  test-framework-hunit: ! '>=0.2.4 && <0.4'
  test-framework: ! '>=0.2.4 && <0.9'
  stm: ! '>=2.1.2.1 && <2.5'
  base: ! '>=3 && <5'
  unbounded-delays: ! '>=0.1 && <0.2'
  async: ! '>=2.0 && <2.1'
  HUnit: ! '>=1.2.2 && <1.3'
  random: ! '>=1.0 && <1.2'
synopsis: Extra concurrency primitives
changelog: ''
basic-deps:
  stm: ! '>=2.1.2.1 && <2.5'
  base: ! '>=3 && <5'
  unbounded-delays: ! '>=0.1 && <0.2'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.4'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.0.1'
- '0.7'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.0.3'
- '0.7.0.4'
- '0.7.0.5'
- '0.7.0.6'
- '0.7.0.7'
- '0.7.0.8'
- '0.7.0.9'
latest: '0.7.0.9'
description-type: markdown
description: ! "The `concurrent-extra` package offers among other things the following\nselection
  of synchronisation primitives:\n\n* `Broadcast`: Wake multiple threads by broadcasting
  a value.\n\n* `Event`: Wake multiple threads by signalling an event.\n\n* `Lock`:
  Enforce exclusive access to a resource. Also known as a\n  binary semaphore or mutex.
  The package additionally provides an\n  alternative that works in the `STM` monad.\n\n*
  `RLock`: A lock which can be acquired multiple times by the same\n  thread. Also
  known as a reentrant mutex.\n\n* `ReadWriteLock`: Multiple-reader, single-writer
  locks. Used to\n  protect shared resources which may be concurrently read, but only\n
  \ sequentially written.\n\n* `ReadWriteVar`: Concurrent read, sequential write variables.\n\nPlease
  consult the API documentation of the individual modules for\nmore detailed information.\n\nThis
  package was inspired by the concurrency libraries of\n[Java](http://download.oracle.com/javase/6/docs/technotes/guides/concurrency/index.html)\nand
  [Python](http://docs.python.org/py3k/library/threading.html).\n"
