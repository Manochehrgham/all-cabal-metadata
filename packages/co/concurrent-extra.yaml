changelog-type: ''
hash: 6c0977fa2db5a169c928064298d5f91aeb82c09491899bd1e13a1faf14f40ebe
synopsis: Extra concurrency primitives
changelog: ''
all-versions:
- '0.1'
- '0.1.0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.4'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.0.1'
- '0.7'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.0.3'
- '0.7.0.4'
- '0.7.0.5'
- '0.7.0.6'
- '0.7.0.7'
- '0.7.0.8'
- '0.7.0.9'
latest: '0.7.0.9'
description-type: haddock
description: ! 'The @concurrent-extra@ package offers among other things the

  following selection of synchronisation primitives:


  * @Broadcast@: Wake multiple threads by broadcasting a value.


  * @Event@: Wake multiple threads by signalling an event.


  * @Lock@: Enforce exclusive access to a resource. Also known as a

  binary semaphore or mutex. The package additionally provides an

  alternative that works in the @STM@ monad.


  * @RLock@: A lock which can be acquired multiple times by the same

  thread. Also known as a reentrant mutex.


  * @ReadWriteLock@: Multiple-reader, single-writer locks. Used to

  protect shared resources which may be concurrently read, but only

  sequentially written.


  * @ReadWriteVar@: Concurrent read, sequential write variables.


  Please consult the API documentation of the individual modules for

  more detailed information.


  This package was inspired by the concurrency libraries of Java and

  Python.'
