changelog-type: ''
hash: b3108865b6201634e842b8c0863a57a398b32c2efe271c1807f07a204e886c07
synopsis: MVars and Channels with distinguished input and output side
changelog: ''
all-versions:
- '0.0'
- '0.0.0.1'
latest: '0.0.0.1'
description-type: haddock
description: ! 'MVars and Channels with distinguished input and output side.

  When threads communicate via an MVar or a Chan

  there are often clearly defined roles,

  which thread is the sender and which one is receiver.

  We provide wrappers around the standard concurrency communication channels

  that make the distinction clear and type safe.


  For example, if a function has a parameter of type @TChan.In@

  then it is sure that it will only write to that channel.

  Additionally if the compiler warns about an unused @TChan.Out@

  that was created by @TChan.new@

  then you know that the receiver part of your communication is missing.


  This package requires only Haskell 98.


  Related packages:


  * @stm-split@: transactional communication in @STM@ monad


  * @chan-split@: follows the same idea as this package and @stm-split@

  but requires multi-parameter type classes with functional dependencies.


  * @privileged-concurrency@:


  * @split-channel@:'
