changelog-type: markdown
hash: 405fb1511bb930d9f1429e0dea20c516b80b96a3a98425cd8cfb707e6aad3311
test-bench-deps: {}
synopsis: Comonads
changelog: ! '4.2.5

  -------

  * Added a `MINIMAL` pragma to `Comonad`.


  4.2.4

  -----

  * Added Kenneth Foner''s fixed point as `kfix`.


  4.2.3

  -----

  * Add `Comonad` and `ComonadEnv` instances for `Arg e` from `semigroups 0.16.3`
  which can be used to extract the argmin or argmax.


  4.2.2

  -----

  * `contravariant` 1.0 support


  4.2.1

  -----

  * Added flags that supply unsupported build modes that can be convenient for sandbox
  users.


  4.2

  ---

  * `transformers 0.4` compatibility


  4.1

  ---

  * Fixed the ''Typeable'' instance for ''Cokleisli on GHC 7.8.1


  4.0.1

  -----

  * Fixes to avoid warnings on GHC 7.8.1


  4.0

  ---

  * Merged the contents of `comonad-transformers` and `comonads-fd` into this package.


  3.1

  ---

  * Added `instance Comonad (Tagged s)`.


  3.0.3

  -----

  * Trustworthy or Safe depending on GHC version


  3.0.2

  -------

  * GHC 7.7 HEAD compatibility

  * Updated build system

'
basic-deps:
  base: ! '>=4 && <5'
  distributive: ! '>=0.2.2 && <1'
  semigroups: ! '>=0.8.3.1 && <1'
  tagged: ! '>=0.1 && <1'
  containers: ! '>=0.3 && <0.6'
  contravariant: ! '>=0.2.0.1 && <2'
  transformers: ! '>=0.2 && <0.5'
  transformers-compat: ! '>=0.3 && <1'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.3.0'
- '0.4.0'
- '0.5.0'
- '0.6.0'
- '0.6.1'
- '0.6.1.1'
- '0.6.1.2'
- '0.6.2'
- '0.6.2.1'
- '0.7.0'
- '0.9.0'
- '0.9.0.1'
- '1.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.1.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.1'
- '1.1.1.1'
- '1.1.1.2'
- '1.1.1.3'
- '1.1.1.4'
- '1.1.1.5'
- '1.1.1.6'
- '3.0'
- '3.0.0.1'
- '3.0.0.2'
- '3.0.1.1'
- '3.0.2'
- '3.0.3'
- '3.1'
- '4.0'
- '4.0.1'
- '4.2'
- '4.2.1'
- '4.2.2'
- '4.2.3'
- '4.2.4'
- '4.2.5'
latest: '4.2.5'
description-type: markdown
description: ! "comonad\n=======\n\n[![Build Status](https://secure.travis-ci.org/ekmett/comonad.png?branch=master)](http://travis-ci.org/ekmett/comonad)\n\nThis
  package provides comonads, the categorical dual of monads.\n\n    class Functor
  w => Comonad w where\n        extract :: w a -> a\n        duplicate :: w a -> w
  (w a)\n        extend :: (w a -> b) -> w a -> w b\n\nThere are two ways to define
  a comonad:\n\nI. Provide definitions for 'extract' and 'extend' satisfying these
  laws:\n\n    extend extract      = id\n    extract . extend f  = f\n    extend f
  . extend g = extend (f . extend g)\n\nIn this case, you may simply set 'fmap' =
  'liftW'.\n\nThese laws are directly analogous to the laws for monads\nand perhaps
  can be made clearer by viewing them as laws stating\nthat Cokleisli composition
  must be associative, and has extract for\na unit:\n\n    f =>= extract   = f\n    extract
  =>= f   = f\n    (f =>= g) =>= h = f =>= (g =>= h)\n\nII. Alternately, you may choose
  to provide definitions for 'fmap',\n'extract', and 'duplicate' satisfying these
  laws:\n\n    extract . duplicate      = id\n    fmap extract . duplicate = id\n
  \   duplicate . duplicate    = fmap duplicate . duplicate\n\nIn this case you may
  not rely on the ability to define 'fmap' in\nterms of 'liftW'.\n\nYou may of course,
  choose to define both 'duplicate' /and/ 'extend'.\nIn that case you must also satisfy
  these laws:\n\n    extend f  = fmap f . duplicate\n    duplicate = extend id\n    fmap
  f    = extend (f . extract)\n\nThese are the default definitions of 'extend' and'duplicate'
  and\nthe definition of 'liftW' respectively.\n\nContact Information\n-------------------\n\nContributions
  and bug reports are welcome!\n\nPlease feel free to contact me through github or
  on the #haskell IRC channel on irc.freenode.net.\n\n-Edward Kmett\n"
