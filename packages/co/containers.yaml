homepage: ''
changelog-type: markdown
hash: 1d561fba67a42c08e50acb29502d781aea5fd0aaa5d759bcfc235f616226920d
test-bench-deps:
  test-framework-hunit: -any
  test-framework: ! '>=0.3.3'
  base: ! '>=4.3 && <5'
  test-framework-quickcheck2: ! '>=0.2.9'
  criterion: ! '>=0.4.0 && <1.2'
  HUnit: -any
  array: -any
  containers: -any
  ghc-prim: -any
  ChasingBottoms: -any
  transformers: -any
  random: <1.2
  deepseq: ! '>=1.2 && <1.5'
  QuickCheck: ! '>=2.4.0.1'
maintainer: libraries@haskell.org
synopsis: Assorted concrete container types
changelog: ! "# Changelog for [`containers` package](http://github.com/haskell/containers)\n\n##
  0.5.10.1\n\n* Planned for GHC 8.2.\n\n* Fix completely incorrect implementations
  of `Data.IntMap.restrictKeys` and\n  `Data.IntMap.withoutKeys`. Make the tests for
  these actually run. (Thanks\n  to Tom Smalley for reporting this.)\n  \n* Fix a
  minor bug in the `Show1` instance of `Data.Tree`. This produced valid\n  output,
  but with fewer parentheses than `Show`. (Thanks, Ryan Scott.)\n\n* Add `MonadZip`
  instance for `Data.Sequence`.\n\n* Remove meaningless stability annotations (Thanks,
  Simon Jakobi.)\n\n## 0.5.9.1\n\n* Add `merge` and `mergeA` for `Data.IntMap`.\n\n*
  Add instances for `Data.Graph.SCC`: `Foldable`, `Traversable`, `Data`,\n  `Generic`,
  `Generic1`, `Eq`, `Eq1`, `Show`, `Show1`, `Read`, and `Read1`.\n\n* Add lifted instances
  (from `Data.Functor.Classes`) for `Data.Sequence`,\n  `Data.Map`, `Data.Set`, `Data.IntMap`,
  and `Data.Tree`. (Thanks to\n  Oleg Grenrus for doing a lot of this work.)\n\n*
  Properly deprecate functions in `Data.IntMap` long documented as deprecated.\n\n*
  Rename several internal modules for clarity. Thanks to esoeylemez for starting\n
  \ this process.\n\n* Make `Data.Map.fromDistinctAscList` and `Data.Map.fromDistinctDescList`
  more\n  eager, improving performance.\n\n* Plug space leaks in `Data.Map.Lazy.fromAscList`
  and\n `Data.Map.Lazy.fromDescList` by manually inlining constant functions.\n\n*
  Add `lookupMin` and `lookupMax` to `Data.Set` and `Data.Map` as total\nalternatives
  to `findMin` and `findMax`.\n\n* Add `!?` to `Data.Map` as a total alternative to
  `!`.\n\n* Avoid using `deleteFindMin` and `deleteFindMax` internally, preferring\ntotal
  functions instead. New implementations of said functions lead to slight\nperformance
  improvements overall.\n\n## 0.5.8.1 *Aug 2016*\n\n### General package changes\n\n
  \ * Remove all attempts to support nhc98 and any versions of GHC\n    before 7.0.\n\n
  \ * Integrate benchmarks with Cabal. (Thanks, Gabriel Gonzalez!)\n  \n  * Make Cabal
  report required extensions properly, and stop using\n    default extensions. Note
  that we do *not* report extensions conditionally enabled\n    based on GHC version,
  as doing so would lead to a maintenance nightmare\n    with no obvious benefits.\n\n
  \ * Use `BangPatterns` throughout to reduce noise. This extension\n    is now *required*
  to compile `containers`.\n\n  * Improve QuickCheck properties taking arbitrary functions
  by using\n    `Test.QuickCheck.Function.Fun` instead of evil `Show` instances\n
  \   for functions.\n\n  * Expose several internal modules through Cabal (as requested
  by\n    Edward Kmett). These remain completely unsupported.\n\n### New exports and
  instances\n\n  * Add `alterF`, `restrictKeys`, and `withoutKeys` to `Data.Map`\n
  \   and `Data.IntMap`.\n\n  * Add `take`, `drop`, `splitAt`, `takeWhileAntitone`,
  `dropWhileAntitone`,\n    and `spanAntitone` for `Data.Map` and `Data.Set`. Thanks
  to Cale Gibbard\n    for suggesting these.\n\n  * Add `merge`, `mergeA`, and associated
  merge tactics for `Data.Map`.\n    Many thanks to Cale Gibbard, Ryan Trinkle, and
  Dan Doel for\n    inspiring the merge idea and helping refine the interface.\n\n
  \ * Add `fromDescList`, `fromDescListWith`, `fromDescListWithKey`,\n    and `fromDistinctDescList`
  to `Data.Map`.\n\n  * Add `fromDescList` and `fromDistinctDescList` to `Data.Set`.\n\n
  \ * Add `Empty`, `:<|`, and `:|>` pattern synonyms for `Data.Sequence`.\n\n  * Add
  `adjust'`, `(!?)`, `lookup`, `chunksOf`, `cycleTaking`, `insertAt`, `deleteAt`,
  `intersperse`,\n    `foldMapWithIndex`, and `traverseWithIndex` for `Data.Sequence`.\n\n
  \ * Derive `Generic` and `Generic1` for `Data.Tree.Tree`, `Data.Sequence.ViewL`,\n
  \   and `Data.Sequence.ViewR`.\n\n  * Add `foldTree` for `Data.Tree`. (Thanks, Daniel
  Wagner!)\n\n### Semantic changes\n\n  * Make `Data.Sequence.splitAt` strict in its
  arguments. Previously,\n    it returned a lazy pair.\n\n  * Fix completely erroneous
  definition of `length` for `Data.Sequence.ViewR`.\n  \n  * Make `Data.Map.Strict.traverseWithKey`
  force result values before\n    installing them in the new map.\n\n  * Make `drawTree`
  handle newlines better. (Thanks, recursion-ninja!)\n\n### Deprecations\n\n  * All
  functions in `Data.Map` proper that have been documented as deprecated since\n    version
  0.5 or before now have `DEPRECATED` pragmas and will actually be\n    removed after
  another cycle or two.\n\n  * Tree printing functions in `Data.Map` intended for
  library debugging are now\n    deprecated. They will continue to be available for
  the foreseeable future in\n    an internal module.\n\n### Performance changes\n\n
  \ * Substantially speed up `splitAt`, `zipWith`, `take`, `drop`,\n    `fromList`,
  `partition`, `foldl'`, and `foldr'` for `Data.Sequence`.\n    Special thanks to
  Lennart Spitzner for digging into the performance\n    problems with previous versions
  of `fromList` and finding a way to\n    make it really fast. Slightly optimize `replicateA`.
  Stop `traverse`\n    from performing many unnecessary `fmap` operations.\n\n  *
  Most operations in `Data.Sequence` advertised as taking logarithmic\n    time (including
  `><` and `adjust`) now use their full allotted time\n    to avoid potentially building
  up chains of thunks in the tree. In general,\n    the only remaining operations
  that avoid doing more than they\n    really need are the particular bulk creation
  and transformation functions\n    that really benefit from the extra laziness. There
  are some situations\n    where this change may slow programs down, but I think having
  more\n    predictable and usually better performance more than makes up for that.\n\n
  \ * Add rewrite rules to fuse `fmap` with `reverse` for `Data.Sequence`.\n\n  *
  Switch from *hedge* algorithms to *divide-and-conquer* algorithms\n    for union,
  intersection, difference, and merge in both `Data.Map`\n    and `Data.Set`. These
  algorithms are simpler, are known to be\n    asymptotically optimal, and are faster
  according to our benchmarks.\n\n  * Speed up `adjust` for `Data.Map`. Allow `map`
  to inline, and\n    define a custom `(<$)`. This considerably improves mapping with\n
  \   a constant function.\n\n  * Remove non-essential laziness in `Data.Map.Lazy`
  implementation.\n\n  * Speed up deletion and alteration functions for `Data.IntMap`.\n\n\n##
  0.5.7.1  *Dec 2015*\n\n  * Planned to bundle with GHC 8.0.1.\n\n  * Add `IsString`
  instance to `Data.Sequence`.\n\n  * Define `Semigroup` instances for `Data.Map`,
  `Data.Set`, `Data.IntMap`,\n    `Data.IntSet` and `Data.Sequence`.\n\n## 0.5.6.2
  \ *Dec 2014*\n\n  * Bundled with GHC 7.10.1.\n\n  * Add role annotations for `Data.Map`
  and `Data.Set`.\n\n  * Add `IsList` instances for `Data.Map`, `Data.Set`, `Data.IntMap`
  and\n    `Data.IntSet`.\n\n  * Several performance improvements for `Data.Sequence`.\n\n
  \ * Add `Data.Sequence.fromFunction` and `Data.Sequence.fromArray`.\n\n## 0.5.4.0
  \ *Jan 2014*\n\n  * Bundled with GHC 7.8.1.\n\n  * The `Data.Map.fromList` and `Data.Set.fromList`
  now use linear-time\n    algorithm if the input is sorted, without need to call
  `fromDistinctAscList`.\n\n  * Implement indexing operations (`lookupIndex`, `findIndex`,
  `elemAt`,\n    `deletaAt`) for `Data.Set` too.\n\n  * Add `Applicative` and `Alternative`
  instances for `Data.Sequence`.\n\n  * Add `foldMapWithKey` to `Data.Map` and `Data.IntMap`.\n\n
  \ * Implement poly-kinded `Typeable`.\n\n  * Add `Functor` instance for `Data.Graph.SCC`.\n\n
  \ * Add `Data.Map.splitRoot` and `Data.Set.splitRoot`.\n\n## 0.5.0.0  *May 2012*\n\n
  \ * Bundled with GHC 7.6.1.\n\n  * Major improvements since last release:\n    *
  a clearer distinction between value-lazy and value-strict containers,\n    * performance
  improvements across the board,\n    * a big internal clean-up, and\n    * new functions
  for e.g. merging, updating, and searching containers.\n\n  * While the old `Data.Map`
  and\n    `Data.IntMap` modules will continue to exist for the foreseeable future,
  we've\n    abandoned the practice of having the strict and lazy versions of each\n
  \   function distinguished by an apostrophe. The distinction is instead made at\n
  \   the module level, by introducing four new modules:\n    * Data.Map.Strict\n
  \   * Data.Map.Lazy\n    * Data.IntMap.Strict\n    * Data.IntMap.Lazy\n\n    This
  split has three benefits:\n    * It makes the choice between value-strict and value-lazy
  containers\n      more declarative; you pick once at import time, instead of having
  to\n      remember to use the strict or lazy versions of a function every time\n
  \     you modify the container.\n    * It alleviates a common source of performance
  issues, by forcing the\n      user to think about the strictness properties upfront.
  For example,\n      using insertWith instead of insertWith' is a common source of\n
  \     containers-related performance bugs.\n    * There are fewer functions per
  module, making it easier to get an\n      overview of each module.\n\n  * Note that
  the types used in the strict and lazy APIs are the same, so\n    you can still use
  the same container in a \"mixed\" manner, if needed.\n\n  * The `Data.IntSet` representation
  changed to store small sets using\n    bits in an `Word`. Larger sets are stored
  as a collection of such\n    dense small sets, connected together by a prefix trie.\n\n##
  0.4.2.1  *Feb 2012*\n\n  * Bundled with GHC 7.4.1.\n\n  * `Data.Map now exports
  `foldr`, `foldr'`, `foldl` and `foldl'`.\n\n  * `Data.Set now exports `foldr`, `foldr'`,
  `foldl` and `foldl'`.\n\n  * `Data.IntMap now exports `foldr`, `foldr'`, `foldl`,
  `foldl'`, `foldrWithKey`, `foldrWithKey'`, `foldlWithKey` and `foldlWithKey'`.\n\n
  \ * `Data.IntSet now exports `foldr`, `foldr'`, `foldl` and `foldl'`.\n\n  * `Data.Map.foldWithKey`
  is no longer deprecated, although it is expected to be deprecated again in the future.\n\n
  \ * There are now `NFData` instance for `Data.Map.Map`, `Data.Set.Set`, `Data.IntMap.IntMap`,
  `Data.IntSet.IntSet` and `Data.Tree.Tree`.\n\n## 0.4.1.0  *Aug 2011*\n\n  * Bundled
  with GHC 7.2.1.\n\n  * `Data.Map` now exports new functions `foldrWithKey'` and
  `foldlWithKey'`, which are strict variants of `foldrWithKey` and `foldlWithKey`
  respectively.\n\n  * `Data.IntMap` now exports new functions `insertWith'` and `insertWithKey'`,
  which are strict variants of `insertWith` and `insertWithKey` respectively.\n\n##
  0.4.0.0  *Nov 2010*\n\n  * Bundled with GHC 7.0.1.\n\n  * Strictness is now more
  consistent, with containers being strict in their elements even in singleton cases.\n\n
  \ * There is a new function `insertLookupWithKey'` in `Data.Map`.\n\n  * The `foldWithKey`
  function in `Data.Map` has been deprecated in favour of `foldrWithKey`.\n\n## 0.3.0.0
  \ *Dec 2009*\n\n  * Bundled with GHC 6.12.1.\n\n  * `mapAccumRWithKey` has been
  added to `Data.IntMap`.\n\n  * A `Traversable` instance has been added to `Data.IntMap.IntMap`.\n\n
  \ * The types of `Data.IntMap.intersectionWith` and `Data.IntMap.intersectionWithKey`
  have been changed from\n    `intersectionWith :: (a -> b -> a) -> IntMap a -> IntMap
  b -> IntMap a`\n    `intersectionWithKey :: (Key -> a -> b -> a) -> IntMap a ->
  IntMap b -> IntMap a`\n    to\n    `intersectionWith :: (a -> b -> c) -> IntMap
  a -> IntMap b -> IntMap c`\n    `intersectionWithKey :: (Key -> a -> b -> c) ->
  IntMap a -> IntMap b -> IntMap c`\n\n  * The types of `Data.IntMap.findMin` and
  `Data.IntMap.findMax` have been changed from\n    `findMin :: IntMap a -> a`\n    `findMax
  :: IntMap a -> a`\n    to\n    `findMin :: IntMap a -> (Int,a)`\n    `findMax ::
  IntMap a -> (Int,a)`\n\n  * `Data.Map` now exports `mapAccumRWithKey`, `foldrWithKey`,
  `foldlWithKey` and `toDescList`.\n\n  * `Data.Sequence` now exports `replicate`,
  `replicateA`, `replicateM`, `iterateN`, `unfoldr`, `unfoldl`, `scanl`, `scanl1`,
  `scanr`, `scanr1`, `tails`, `inits`, `takeWhileL`, `takeWhileR`, `dropWhileL`, `dropWhileR`,
  `spanl`, `spanr`, `breakl`, `breakr`, `partition`, `filter`, `sort`, `sortBy`, `unstableSort`,
  `unstableSortBy`, `elemIndexL`, `elemIndicesL`, `elemIndexR`, `elemIndicesR`, `findIndexL`,
  `findIndicesL`, `findIndexR`, `findIndicesR`, `foldlWithIndex`, `foldrWithIndex`,
  `mapWithIndex`, `zip`, `zipWith`, `zip3`, `zipWith3`, `zip4` and `zipWith4`.\n\n##
  0.2.0.0  *Nov 2008*\n\n  * Bundled with GHC 6.10.1.\n\n  * Various result type now
  use `Maybe` rather than allowing any `Monad`.\n\n## 0.1.0.0  *Nov 2007*\n\n  * Bundled
  with GHC 6.8.1.\n\n  * Initial split off from GHC base.\n"
basic-deps:
  base: ! '>=4.3 && <5'
  array: -any
  ghc-prim: -any
  deepseq: ! '>=1.2 && <1.5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.2.1'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.3.0'
- '0.5.3.1'
- '0.5.4.0'
- '0.5.5.0'
- '0.5.5.1'
- '0.5.6.0'
- '0.5.6.1'
- '0.5.6.2'
- '0.5.6.3'
- '0.5.7.0'
- '0.5.7.1'
- '0.5.8.2'
- '0.5.10.1'
author: ''
latest: '0.5.10.1'
description-type: haddock
description: ! 'This package contains efficient general-purpose implementations

  of various basic immutable container types.  The declared cost of

  each operation is either worst-case or amortized, but remains

  valid even if structures are shared.'
license-name: BSD3
