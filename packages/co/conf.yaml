changelog-type: ''
hash: db2c247ac3a3f21c8291df3642bc7d86707884fecc166e15ff3ab0c05769f17d
test-bench-deps: {}
synopsis: Parser for Haskell-based configuration files.
changelog: ''
basic-deps:
  base: ! '>=4.6 && <4.7'
  haskell-src: -any
all-versions:
- '0.1.0.0'
latest: '0.1.0.0'
description-type: markdown
description: ! "Conf: Haskell-Style Config Parsing\n===\n\nThis package is designed
  to allow you to create configuration files\nwith declarative Haskell and parse the
  values back into Haskell code.\nThe benefit here is to have a configuration file
  in Haskell that does\nnot have to be recompiled - it is interpreted/parsed at runtime
  in a \ntype-safe manner.\n\n```haskell\n-- Example configuration \"my-config\"\nfoo
  = [\"bar\", \"baz\"]\nspam = Eggs\n```\n\n```haskell\n-- Example application\nimport
  Data.Conf\nimport Data.Maybe\n\ndata Spam = Eggs | Parrot | SomethingEntirelyDifferent\n
  \   deriving (Show, Read)\n\ngetSpam :: Conf -> Spam\ngetSpam = fromMaybe SomethingEntirelyDifferent
  . getConf \"spam\"\n\ngetFoo :: Conf -> Maybe [Int]\ngetFoo = getConf \"foo\"\n\nmain
  = do\n    conf <- readConf \"/path/to/my-config\"\n    let spam = getSpam conf\n
  \   print spam  -- Output: \"Eggs\"\n    let foo = getFoo conf\n    print foo   --
  Output: \"Nothing\"\n```\n\n"
