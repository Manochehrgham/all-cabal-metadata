changelog-type: ''
hash: e4d66d7bc5db2b96292da5dc91574daa7b83a6d0d068f95193b039c88cd46e33
synopsis: A message-passing library for simplifying network applications
changelog: ''
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.7'
- '0.1.0.8'
- '0.1.0.9'
- '0.1.0.10'
- '0.1.0.11'
- '0.1.0.12'
- '0.1.0.13'
- '0.1.0.14'
- '0.1.0.15'
latest: '0.1.0.15'
description-type: haddock
description: ! 'Inspired by Erlang''s simple message-passing facilities, courier provides
  roughly similar

  capabilities. Applications simply create one or more endpoints,

  bind each to a transport using a given name, then can freely

  send / receive messages to other endpoints just by referencing the name each endpoint

  bound to its transport.


  A primary driver of this package''s design is separation of concerns: many algorithms

  (especially for distributed applications) depend upon a message-passing foundation,

  but the algorithms are sufficiently complex that the details of how those messages

  are transmitted among nodes are best hidden away and solved separately from

  the distributed algorithm itself.  With this in mind, this package aims

  to provide a variety of transports as well as support for common communication

  idioms (e.g., in order message delivery, selective out of order message delivery,

  synchronous RPC, etc.).


  Applications may process messages in the order received at an endpoint, or use

  selective message reception to process the first message arriving at an endpoint

  that also matches a provided selection function. Through selective message reception,

  applications may approximate the style of an Erlang application, and enjoy better

  composability of message reception with multiple independent dispatch routines or

  message pumps.'
