homepage: https://github.com/glguy/config-value
changelog-type: markdown
hash: dc79d6c7a1c4be4d0f1e967405a1255f56245a6c181dc0d076bd6ade764924d7
test-bench-deps: {}
maintainer: emertens@gmail.com
synopsis: Simple, layout-based value language similar to YAML or JSON
changelog: ! '0.4.0.1

  ----

  * Loosen version constraints to build back to GHC 7.4.2

  * Remove unused bytestring dependency


  0.4

  ----

  * Make `Atom` a newtype to help distinguish it from `Text`

  * Add `values` traversal for traversing individual elements of a list


  0.3

  -----

  * Replace `yes` and `no` with generalized atoms

  * Add character index to error position

  * Add human readable error messages


  0.2

  -----

  * Take `Text` as the input to `parse`


  0.1.1

  -----

  * Added `Config.Lens` module

  * Added aligned fields to pretty printer


  0.1

  -----

  * Initial release

'
basic-deps:
  base: ! '>=4.5 && <4.9'
  text: ! '>=1.2.0.4 && <1.3'
  array: ! '>=0.4 && <0.6'
  transformers: ! '>=0.2 && <0.5'
  pretty: ! '>=1.1.1.0 && <1.2'
all-versions:
- '0.1'
- '0.1.1'
- '0.2'
- '0.3'
- '0.4'
- '0.4.0.1'
author: Eric Mertens
latest: '0.4.0.1'
description-type: markdown
description: ! "# config-value\n\n[![Build Status](https://secure.travis-ci.org/glguy/config-value.svg)](http://travis-ci.org/glguy/config-value)\n\nThis
  package implements a simple, layout-based value definition language\nused for supplying
  configuration values to various applications.\n\nExample\n-------\n```\n-- Line
  comments until newline\nlayout:\n  based:\n    configuration:\n      {} -- empty
  section\n\n    sections:\n     \"glguy\"\n\n    {- Block comments\n       {- nested
  comments -}\n       \"O'caml style {- strings in comments\"\n       so you can comment
  out otherwise valid\n       portions of your config\n    -}\n    atoms      : yes\n\n
  \   decimal    : -1234\n    hexadecimal: 0x1234\n    octal      : 0o1234\n    binary
  \    : 0b1010\n\nlists:\n   * sections: in-lists\n     next-section: still-in-list\n
  \  * [ \"inline\", \"lists\" ]\n   * * \"nestable\"\n     * \"layout\"\n     * \"lists\"\n
  \  * 3\n\nunicode : \"standard Haskell format strings (1 ≤ 2)\\x2228(2 ≤ 3)\"\n```\n\nFormat\n------\n\nThe
  language supports: Strings, Atoms, Integers, Lists, Nested Sections.\n\nSections
  are layout based. The contents of a section must be indented further than the section
  heading.\nThe whitespace between a section heading and its colon is not significant.
  Section names must start with\na letter and may contain letters, numbers, dashes
  (`-`), underscores (`_`), and periods (`.`).\n\nLists are either layout based with
  `*` prefixes or inline surrounded by `[` and `]` delimited by `,`\n\nStrings are
  surrounded by `\"` and use Haskell-style escapes.\n\nNumbers support decimal, hexadecimal
  (`0x`), octal (`0o`), and binary (`0b`).\n\nAtoms follow the same lexical rule as
  section heading.\n"
license-name: MIT
