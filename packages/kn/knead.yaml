homepage: http://hub.darcs.net/thielema/knead/
changelog-type: ''
hash: 44122797237c51806d410e047b8ca65ccd629eabf1ad8ce139772f0571b8945f
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Repa array processing using LLVM JIT
changelog: ''
basic-deps:
  llvm-tf: ! '>=3.0.3 && <3.0.4'
  base: ! '>=4 && <5'
  storable-tuple: ! '>=0.0 && <0.1'
  storable-record: ! '>=0.0.3 && <0.1'
  utility-ht: ! '>=0.0.1 && <0.1'
  llvm-extra: ! '>=0.6 && <0.7'
all-versions:
- '0.2'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.2'
description-type: haddock
description: ! 'This library processes arrays like @Repa@ and @Accelerate@,

  but it uses the just-in-time compiler of @LLVM@

  for generating the machine code.

  That is, you get very efficient vectorised code

  that can be run without a GPU.

  You do not need to care about inlining and strictness annotations,

  because the LLVM code is by default inlined and strict.

  The package is the basis for an LLVM backend for the @Accelerate@ framework.


  Highlights:


  * Very flexible index handling,

  even more flexible than the one of ''Data.Array''.

  It is much more expressive and type-safe than that of @repa@ and @array@.


  * Extensible element types, e.g. complex numbers.

  (Maybe this is also possible with accelerate, e.g. with RGB type.)


  * Every compilable program also runs.

  In contrast to that, @accelerate@ may accept a program

  that cannot be run by a particular backend, like @accelerate-cuda@.


  Known deficiencies:


  * The functions do not check array bounds.

  (Of course, we can think about temporary bound checking

  for debugging purposes.)


  * The package does not try to distribute work across multiple processors.

  It is certainly simpler, more efficient and more reliable

  if you do that at a higher level.


  The name of the package is inspired by the visualization of typical operations

  like reshaping, collapsing a dimension and extruding another one.'
license-name: BSD3
