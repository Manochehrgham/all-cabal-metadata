homepage: https://github.com/neovimhaskell/nvim-hs
changelog-type: markdown
hash: bfb5e7e4fb009413a7f8dfe17acbf4251d8b83b34dd6ca91e9fdf297ed9fd586
test-bench-deps:
  foreign-store: -any
  exceptions: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: -any
  setenv: ! '>=0.1.1.3'
  ansi-wl-pprint: -any
  dyre: -any
  stm: -any
  base: ! '>=4.6 && <5'
  time: -any
  hspec: ==2.*
  text: -any
  megaparsec: -any
  filepath: -any
  process: -any
  network: -any
  lifted-base: -any
  conduit: -any
  data-default: -any
  HUnit: -any
  conduit-extra: -any
  containers: -any
  utf8-string: -any
  hslogger: -any
  messagepack: -any
  nvim-hs: -any
  mtl: -any
  transformers-base: -any
  transformers: -any
  optparse-applicative: -any
  QuickCheck: ! '>=2.6'
  hspec-discover: -any
  resourcet: -any
  template-haskell: -any
  time-locale-compat: -any
  directory: -any
maintainer: woozletoff@gmail.com
synopsis: Haskell plugin backend for neovim
changelog: ! "# 0.2.0\n\n* Replace error code of remote functions to return\n  `Either
  NeovimException a` instead of a generic messagepack `Object`\n\n* Export API functions
  that throw a `NeovimException` instead of returning\n  `Either NeovimExeception
  a`.\n\n* Replace three element tuple for stateful function declaration (#53)\n\n*
  Add a stack template for easier setup\n\n* Exceptions from pure code are now caught
  (#48)\n\n# 0.1.0\n\n* Adjust parser for output of `nvim --api-info`\n\n* Adjust
  parser of ConfigHelper plugin\n\n# 0.0.7\n\n* Adjust handling of string sent by
  neovim in API generation.\n\n# 0.0.6\n\n* Noteworthy new API functions for the user's
  convenience:\n\n  - `errOnInvalidResult`\n  - `(:+)`\n\n* ansi-wl-pprint is used
  for pretty printing of various things now. Most\n  notably, the error type has been
  changed from `String` to `Doc`.\n  This is a breaking change, but it was kind of
  announced in the issues\n  list. In any case, uses of `err` can be fixed by enabling
  the\n  `OverloadedStrings` extension. Other breakages have to be fixed by hand.\n\n#
  0.0.5\n\n* Documentation received some love.\n\n* A few renames of repurposed internals.\n\n#
  0.0.3\n\n* Debugging facilities for ghci have been added. Check out the\n  `Neovim.Debug`
  module! These few functions are very valuable to debug your\n  code or even the
  code of nvim-hs itself.\n\n* Startup code now has a special `Neovim` environment
  which has access to\n  some of the internals that may or may not be useful. This
  change allowed\n  the ConfigHelper plugin to be included as a normal, separable
  plugin.\n  Unfortunately, this potentially breaks the plugin startup code of some\n
  \ existing plugins.\n\n* Neovim context is no longer a type synonym, but a newtype
  wrapper around\n  the previous type synonym with an added `ResourceT` wrapper. The
  functions\n  from `MonadReader` are now actually exported as those.\n\n  As a consequence,
  some of your code may break if you lack some specific\n  instances which were auto-derived
  before. Send a PR or open a ticket to\n  resolve this.\n\n* Add handling for some
  kind of variadic arguments handling.\n\n  A command or function will be passed `Nothing`
  as it's\n  last arguments if the argument type is wrapped in `Maybe`\n  and the
  invocation on the side of neovim did not pass those\n  arguments.\n\n# 0.0.2\n\n*
  Add handling for special command options\n\n  This breaks code that used `command`
  or `command'` to export\n  functionality. You should replace the options with a
  list\n  of `CommandOptions`.\n\n  An export like `$(command' foo) def { cmdSync
  = Async }` must be redefined\n  to `$(command' foo) [CmdSync Async]`.\n\n# 0.0.1\n\n*
  Usable prototype implementation\n"
basic-deps:
  foreign-store: -any
  exceptions: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: ! '>=0.7.3'
  setenv: ! '>=0.1.1.3'
  ansi-wl-pprint: -any
  dyre: -any
  stm: -any
  base: ! '>=4.6 && <5'
  time: -any
  text: -any
  megaparsec: <6
  monad-control: -any
  filepath: -any
  process: -any
  network: -any
  lifted-base: -any
  conduit: -any
  data-default: -any
  conduit-extra: -any
  containers: -any
  utf8-string: -any
  hslogger: -any
  messagepack: ! '>=0.5.4'
  nvim-hs: -any
  mtl: ! '>=2.2.1 && <2.3'
  transformers-base: -any
  transformers: -any
  optparse-applicative: -any
  deepseq: ! '>=1.1 && <1.5'
  resourcet: -any
  template-haskell: -any
  time-locale-compat: -any
  directory: -any
all-versions:
- '0.2.3'
author: Sebastian Witte
latest: '0.2.3'
description-type: markdown
description: ! "# nvim-hs\n\nNeovim API for Haskell plugins as well as a plugin provider.\nThis
  library and executable should provide a basis for developing\nplugins. This package
  should only contain broadly useful interfaces\nto write plugins for neovim in haskell.
  The design goal is to create\nan easy to use API that avoids most of the boilerplate
  while still retaining\nsome sense of reliability and type safety. Since Template
  Haskell is used\nto generate the neovim bindings and to avoid some of the boilerplate\nhandy
  work, some exotic operating systems and architectures may not work.\n\n[![Build
  Status](https://travis-ci.org/neovimhaskell/nvim-hs.svg?branch=master)](https://travis-ci.org/neovimhaskell/nvim-hs)\n[![Hackage
  version](https://img.shields.io/hackage/v/nvim-hs.svg?style=flat)](https://hackage.haskell.org/package/nvim-hs)\n\n#
  What do I have to expect if I were to use it now?\n\nCheck the issue list here on
  github.\n\n# How do I start using this?\n\nFirst, you have to decide how you want
  to manage your plugins. Every section\nof this chapter describes an alternative
  way to manage your plugins. It\nstarts with a list of pros and cons and then explains
  what you have to do to\nget rolling and how you would install a `nvim-hs`-compatible
  plguin. The\ngeneral library documentation is in the haddocks on\n([hackage](http://hackage.haskell.org/package/nvim-hs-0.2.0/docs/Neovim.html)).\nIf
  you are new to Haskell development or you don't really care how you manage\nyour
  plugins, I (saep) recommend the stack template approach.\n\n## Stack via the template\n\n###
  Pros\n\n- Easy to setup because of the template\n- Flexible dependency management;
  everything that stack supports can be done, this\n  includes packages on stackage,
  packages on hackage, local packages and repositories\n- Reprobucible; if it works
  once, it will work in the future\n- If you don't use stack just for neovim plugins
  and you have other projects with the\n  same (or a similiar) lts (long term support)
  version, you save compilation time on the\n  initial setup\n\n### Cons\n\n- A bit
  verbose; you have to add dependencies twice if they are not in the stackage snapshot\n\n###
  Installation\n\nFirst, you must [install stack](https://docs.haskellstack.org/en/stable/README/).\n\nYou
  have to have installed neovim and the executable `nvim` must be on the path.\n(The
  API code generation calls `nvim --api-info`.)\n\nAfterwards, you switch to your
  neovim configuration folder (typically `~/.config/nvim`) and\nyou have to create
  your plugin project.\n\n> cd ~/.config/nvim\n\n> stack new my-nvim-hs https://raw.githubusercontent.com/neovimhaskell/nvim-hs/master/stack-template.hsfiles
  --bare --omit-packages --ignore-subdirs\n\nSince `nvim-hs` is not yet on stackage,
  you have to edit the generated\n`stack.yaml` file by hand (sorry about that). Replace
  the packages list with\none containing the current directory and the extra-deps
  list with a\ndependency to nvim-hs. The lines of the file that look like this\n\n```yaml\npackages:
  []\n\nextra-deps: []\n```\n\nshould become:\n\n```yaml\npackages:\n- .\n\nextra-deps:\n-
  nvim-hs-0.2.2\n```\n\nNow, you have to compile everything.\n\n> stack setup\n\n>
  stack build\n\nIf there are no errors (there shouldn't be any), you only have to
  tell neovim how to start this.\nAdd the following to your `init.vim`:\n\n```vimL\nif
  has('nvim') \" This way, you can also put this in your plain vim config\n\n\t\"
  function which starts a nvim-hs instance with the supplied name\n\tfunction! s:RequireHaskellHost(name)\n\t\t\"
  It is important that the current working directory (cwd) is where\n\t\t\" your configuration
  files are.\n\t\treturn jobstart(['stack', 'exec', 'nvim-hs', a:name.name], {'rpc':
  v:true, 'cwd': expand('$HOME') . '/.config/nvim'})\n\tendfunction\n\n\t\" Register
  a plugin host that is started when a haskell file is opened\n\tcall remote#host#Register('haskell',
  \"*.l\\?hs\", function('s:RequireHaskellHost'))\n\n\t\" But if you need it for other
  files as well, you may just start it\n\t\" forcefully by requiring it\n\tlet hc=remote#host#Require('haskell')\nendif\n```\n\nIf
  you start neovim now, you can use the predefined functions from the template.\n\n>
  :echo NextRandom()\n\nshould print a random number.\n\n### Installing a plugin from
  Hackage\n\nLet's take [nvim-hs-ghcid](http://hackage.haskell.org/package/nvim-hs-ghcid)\nas
  an example. Since it is not on stackage, have to declare the dependency\nin the
  `my-nvim-hs.cabal` file and in the `stack.yaml` file. In the `.cabal`\nfile, add
  `nvim-hs-ghcid` to the `build-depends` section. It should look\nlike this:\n\n```cabal\n
  \ build-depends:       base >= 4.7 && < 5\n                     , nvim-hs >= 0.2.0
  && < 1.0.0\n                     , nvim-hs-ghcid\n```\n\nYou can omit the version
  number, since you will have to define it in the\n`stack.yaml` file and you are managing
  you dependencies with stack anyways.\nThe `extra-deps` section of the `stack.yaml`
  should look like this:\n\n```yaml\nextra-deps:\n- nvim-hs-0.2.2\n- nvim-hs-contrib-0.2.0\n-
  nvim-hs-ghcid-0.2.0\n```\n\nWhat is the `nvim-hs-contrib` dependency we had to add
  there? The plugin we\nchose to install had a dependency to a haskell project that
  is not on\nstackage. You have to add these to the stack.yaml file as well, although
  you\ndo not necessarily have to add them to the cabal file. This is exactly the\ndisadvantage
  of using stack for this.  The benefit is that you will have a\nreproducible build
  in the future and you don't have to hunt down a working\nset of version boundariesfor
  every dependency you have. A little effort now\nwill save you more time later!\n\nNote
  that I (saep) intend to add `nvim-hs` and `nvim-hs-contrib` to stackage\nonce I
  feel I should switch to version 1.0.0. Then, you wouldn't have to\nedit the `stack.yaml`
  for this. If you want to update a dependency/plugin,\nyou have to manually increment
  the version number in the stack.yaml file and\npossibly fix the compilation errors
  that arise. If you want a rolling\nrelease for a plugin, follow the instructions
  for installing a plugin from\ngit.\n\nTo use the plugin, add it to the plugins list
  of the `nvim.hs` file in\n`~/.config/nvim`:\n\n```haskell\nimport Neovim\n\nimport
  qualified Neovim.Example.Plugin as Example\nimport qualified Neovim.Ghcid as Ghcid\n\nmain
  :: IO ()\nmain = do\n    neovim defaultConfig\n        { plugins = plugins defaultConfig
  ++\n            [ Example.plugin\n            , Ghcid.plugin\n            ]\n        }\n```\n\n\n###
  Installing a plugin from git\n\nThis method is best suited for plugins that update
  a lot and for which you need\nthe most recent version most of the time. If you don't
  intend to work on the\ncode of that plugin repository, you can add it to the plugin
  list of your\nplugin manager (e.g. [vim-plug](https://github.com/junegunn/vim-plug)).
  \nThis way, you get updates if you update all your normal vim plugins.\nTo stay
  with the example of the previous section, we use the `nvim-hs-ghcid`\nplugin again.\n\nAdd
  the plugin to your plugin manager (here with vim-plug as an example):\n\n```vimL\nPlug
  'saep/nvim-hs-ghcid', { 'for': ['haskell'] }\n```\n\nOnce vim-plug has cloned or
  updated the repository, add the plugin to the\npackages list of the `stackage.yaml`
  file. The packages list should look\nlike this:\n\n```yaml\npackages:\n- .\n- plugged/nvim-hs-ghcid\n```\n\nAs
  long as you have the repository in this list, you don't have to specify\nit as a
  dependency  anywhere else, you still have to add the plugins'\ndependencies to the
  `stack.yaml` file, though. It should look like this:\n\n```yaml\nextra-deps:\n-
  nvim-hs-0.2.2\n- nvim-hs-contrib-0.2.0\n```\n\nAdd the plugin to the plugins list
  in `nvim.hs` in exactly the same way as\ndescribed in the previous chapter.\n\nThe
  downside of this is that your compilation times will be longer the more\nplugins
  you include this way.\n\n### Writing your own functions that you can call from neovim\n\nThe
  stack template generated a few files for you that you can use as a\ntemplate to
  write your own plugins. If you edit them and make a mistake that\nthe Haskell compiler
  can detect, an item in the quickfix list should appear.\nThis is, unless you removed
  `plugins defaultConfig` from `nvim.hs`.\n\n# Contributing\n\nDocumentation, typo
  fixes and alike will almost always be merged.\n\nIf you want to bring forward new
  features or convenience libraries\nfor interacting with neovim, you should create
  an issue first. The features\nof this (cabal) project should be kept small as this
  helps\nreducing the development time. (For some tests it is\nnecessary to issue
  `cabal install`, so any change to to a module can\nsignificantly increase the compilation
  time.)\nIf your idea solves a general problem, feel free to open an issue in the\nlibrary
  project of nvim-hs:\n[nvim-hs-contrib](https://github.com/neovimhaskell/nvim-hs-contrib)\n\n"
license-name: Apache-2.0
