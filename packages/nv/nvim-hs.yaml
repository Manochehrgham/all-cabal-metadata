homepage: https://github.com/neovimhaskell/nvim-hs
changelog-type: markdown
hash: d1535301b395924a78e1e7ffcc629a52d0c3757ab3db33f47455b8bf1d519d70
test-bench-deps:
  foreign-store: -any
  exceptions: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: -any
  setenv: ! '>=0.1.1.3'
  ansi-wl-pprint: -any
  dyre: -any
  stm: -any
  base: ! '>=4.6 && <5'
  time: -any
  hspec: ==2.*
  text: -any
  filepath: -any
  process: -any
  network: -any
  lifted-base: -any
  parsec: ! '>=3.1.9'
  conduit: -any
  data-default: -any
  HUnit: -any
  conduit-extra: -any
  containers: -any
  utf8-string: -any
  hslogger: -any
  messagepack: ! '>=0.5'
  nvim-hs: -any
  mtl: ! '>=2.2.1 && <2.3'
  transformers-base: -any
  transformers: -any
  optparse-applicative: -any
  QuickCheck: ! '>=2.6'
  hspec-discover: -any
  resourcet: -any
  template-haskell: -any
  time-locale-compat: -any
  directory: -any
maintainer: woozletoff@gmail.com
synopsis: Haskell plugin backend for neovim
changelog: ! "# 0.0.8\n\n* Adjust version range for messagepack rpc library and adjust
  implementation to\n  the changes in that library\n\n# 0.0.7\n\n* Adjust handling
  of string sent by neovim in API generation.\n\n# 0.0.6\n\n* Noteworthy new API functions
  for the user's convenience:\n\n  - `errOnInvalidResult`\n  - `(:+)`\n\n* ansi-wl-pprint
  is used for pretty printing of various things now. Most\n  notably, the error type
  has been changed from `String` to `Doc`.\n  This is a breaking change, but it was
  kind of announced in the issues\n  list. In any case, uses of `err` can be fixed
  by enabling the\n  `OverloadedStrings` extension. Other breakages have to be fixed
  by hand.\n\n# 0.0.5\n\n* Documentation received some love.\n\n* A few renames of
  repurposed internals.\n\n# 0.0.3\n\n* Debugging facilities for ghci have been added.
  Check out the\n  `Neovim.Debug` module! These few functions are very valuable to
  debug your\n  code or even the code of nvim-hs itself.\n\n* Startup code now has
  a special `Neovim` environment which has access to\n  some of the internals that
  may or may not be useful. This change allowed\n  the ConfigHelper plugin to be included
  as a normal, separable plugin.\n  Unfortunately, this potentially breaks the plugin
  startup code of some\n  existing plugins.\n\n* Neovim context is no longer a type
  synonym, but a newtype wrapper around\n  the previous type synonym with an added
  `ResourceT` wrapper. The functions\n  from `MonadReader` are now actually exported
  as those.\n\n  As a consequence, some of your code may break if you lack some specific\n
  \ instances which were auto-derived before. Send a PR or open a ticket to\n  resolve
  this.\n\n* Add handling for some kind of variadic arguments handling.\n\n  A command
  or function will be passed `Nothing` as it's\n  last arguments if the argument type
  is wrapped in `Maybe`\n  and the invocation on the side of neovim did not pass those\n
  \ arguments.\n\n# 0.0.2\n\n* Add handling for special command options\n\n  This
  breaks code that used `command` or `command'` to export\n  functionality. You should
  replace the options with a list\n  of `CommandOptions`.\n\n  An export like `$(command'
  foo) def { cmdSync = Async }` must be redefined\n  to `$(command' foo) [CmdSync
  Async]`.\n\n# 0.0.1\n\n* Usable prototype implementation\n"
basic-deps:
  foreign-store: -any
  exceptions: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: ! '>=0.7.3'
  setenv: ! '>=0.1.1.3'
  ansi-wl-pprint: -any
  dyre: -any
  stm: -any
  base: ! '>=4.6 && <5'
  time: -any
  text: -any
  monad-control: -any
  filepath: -any
  process: -any
  network: -any
  lifted-base: -any
  parsec: ! '>=3.1.9'
  conduit: -any
  data-default: -any
  conduit-extra: -any
  containers: -any
  utf8-string: -any
  hslogger: -any
  messagepack: ! '>=0.5'
  nvim-hs: -any
  mtl: ! '>=2.2.1 && <2.3'
  transformers-base: -any
  transformers: -any
  optparse-applicative: -any
  resourcet: -any
  template-haskell: -any
  time-locale-compat: -any
  directory: -any
all-versions:
- '0.0.6'
- '0.0.7'
- '0.0.8'
author: Sebastian Witte
latest: '0.0.8'
description-type: markdown
description: ! '# nvim-hs


  Neovim API for Haskell plugins as well as a plugin provider.

  This library and executable should provide a basis for developing

  plugins. This package should only contain broadly useful interfaces

  to write plugins for neovim in haskell. The design goal is to create

  an easy to use API that avoids most of the boilerplate while still retaining

  some sense of reliability and type safety. Since Template Haskell is used

  to generate the neovim bindings and to avoid some of the boilerplate

  handy work, some exotic operating systems and architectures may not work.


  [![Build Status](https://travis-ci.org/neovimhaskell/nvim-hs.svg?branch=master)](https://travis-ci.org/neovimhaskell/nvim-hs)

  [![Hackage version](https://img.shields.io/hackage/v/nvim-hs.svg?style=flat)](https://hackage.haskell.org/package/nvim-hs)


  # What do I have to expect if I were to use it now?


  Check the issue list here on github.


  # How do I start using this?


  All you need to know is inside the

  [Neovim](https://github.com/neovimhaskell/nvim-hs/blob/master/library/Neovim.hs)

  module ([hackage](http://hackage.haskell.org/package/nvim-hs-0.0.5/docs/Neovim.html)).


  # Contributing


  Documentation, typo fixes and alike will almost always be merged.


  If you want to bring forward new features or convenience libraries

  for interacting with neovim, you should create an issue first. The features

  of this (cabal) project should be kept small as this helps

  reducing the development time. (For some tests it is

  necessary to issue `cabal install`, so any change to to a module can

  significantly increase the compilation time.)

  If your idea solves a general problem, feel free to open an issue in the

  library project of nvim-hs:

  [nvim-hs-contrib](https://github.com/neovimhaskell/nvim-hs-contrib)


'
license-name: Apache-2.0
