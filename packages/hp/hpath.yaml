homepage: ''
changelog-type: text
hash: 03deed92b75470b15afe0e8d390f647e647fd40816c56fac3a11f457df605ab5
test-bench-deps:
  bytestring: -any
  unix: -any
  base: -any
  hspec: ! '>=1.3'
  filepath: ! '>=1.2 && <1.5'
  criterion: ! '>=0.6 && <1.2'
  process: ! '>=1.0 && <1.3'
  doctest: ! '>=0.8'
  HUnit: -any
  utf8-string: -any
  hpath: -any
  QuickCheck: -any
  directory: ! '>=1.1 && <1.3'
maintainer: Julian Ospald <hasufell@posteo.de>
synopsis: Support for well-typed paths
changelog: ! "0.7.0:\n\t* use 'sendfile' from 'simple-sendfile' in _copyFile and do
  read/write as a fallback only\n\t* add isFileName, hasParentDir, hiddenFile to System.Posix.FilePath\n\t*
  add our own openFd version for more control\n\t* small documentation improvements\n\t*
  add a getDirectoryContents' version that works on Fd\n\t* lift version constraints
  in benchmark\n\t* remove fpToString and userStringToFP, use Data.ByteString.UTF8
  directly instead\n0.6.0:\n\t* fixes 'throwDestinationInSource' to be more reliable.\n\t*
  removes some unused HPathIOException constructors\n\t* consistently provide exception
  constructor identifiers\n\t* be less harsh when non-supported file types get passed
  to our functions, possibly ignoring them\n\t* minor cleanups\n0.5.9:\n\t* Adds our
  posix-paths fork and a lot of IO operations.\n0.5.8:\n\t* First version of the fork.\n0.5.7:\n\t*
  Fix haddock problem.\n0.5.6:\n\t* Reject only .. and .\n0.5.5:\n\t* Use filepath's
  isValid function for additional sanity checks\n0.5.4:\n\t* Disable parsing of path
  consisting only of \".\"\n\t* Add NFData instance for Path\n\t* Some typo/docs improvements\n\t*
  Add standard headers to modules\n0.5.3:\n\t* Added conversion functions.\n\n0.2.0:\n\n
  \       * Rename parentAbs to simply parent.\n\t* Add dirname.\n\n0.3.0:\n\t* Removed
  Generic instance.\n\n0.4.0:\n\t* Implemented stricter parsing, disabling use of
  \"..\".\n\t* Made stripDir generic over MonadThrow\n\n0.5.0:\n\t* Fix stripDir p
  p /= Nothing bug.\n\n0.5.2:\n\t* Removed unused DeriveGeneric.\n"
basic-deps:
  exceptions: -any
  bytestring: ! '>=0.9.2.0'
  unix: ! '>=2.5'
  base: ! '>=4.2 && <5'
  hspec: -any
  unix-bytestring: -any
  word8: -any
  simple-sendfile: ! '>=0.2.22'
  utf8-string: -any
  deepseq: -any
all-versions:
- '0.5.9'
- '0.6.0'
- '0.7.0'
author: Julian Ospald <hasufell@posteo.de>
latest: '0.7.0'
description-type: markdown
description: ! '# HPath


  [![Build Status](https://api.travis-ci.org/hasufell/hpath.png?branch=master)](http://travis-ci.org/hasufell/hpath)


  Support for well-typed paths in Haskell. Also provides ByteString based filepath

  manipulation.


  ## Motivation


  The motivation came during development of

  [hsfm](https://github.com/hasufell/hsfm)

  which has a pretty strict File type, but lacks a strict Path type, e.g.

  for user input.


  The library that came closest to my needs was

  [path](https://github.com/chrisdone/path),

  but the API turned out to be oddly complicated for my use case, so I

  decided to fork it.


  Similarly, [posix-paths](https://github.com/JohnLato/posix-paths)

  was exactly what I wanted for the low-level operations, but upstream seems dead,

  so it is forked as well and merged into this library.


  ## Goals


  * well-typed paths

  * high-level API to file operations like recursive directory copy

  * safe filepath manipulation, never using String as filepath, but ByteString

  * still allowing sufficient control to interact with the underlying low-level calls


  ## Differences to ''path''


  * doesn''t attempt to fake IO-related information into the path, so whether a path
  points to a file or directory is up to your IO-code to decide...

  * trailing path separators will be preserved if they exist, no messing with that

  * uses safe ByteString for filepaths under the hood instead of unsafe String

  * fixes broken [dirname](https://github.com/chrisdone/path/issues/18)

  * renames dirname/filename to basename/dirname to match the POSIX shell functions

  * introduces a new `Path Fn` for safe filename guarantees and a `RelC` class

  * allows pattern matching via unidirectional PatternSynonym

  * uses simple doctest for testing

  * allows `~/` as relative path, because on posix level `~` is just a regular filename
  that does _NOT_ point to `$HOME`

  * remove TH, it sucks


  ## Differences to ''posix-paths''


  * `hasTrailingPathSeparator` behaves in the same way as `System.FilePath`

  * `dropTrailingPathSeparator` behaves in the same way as `System.FilePath`

  * added various functions like `isValid`, `normalise` and `equalFilePath`

  * uses the `word8` package for save word8 literals instead of `OverloadedStrings`

  * has custom versions of `openFd` and `getDirectoryContents`


'
license-name: GPL-2
