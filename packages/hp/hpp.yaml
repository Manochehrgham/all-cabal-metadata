homepage: https://github.com/acowley/hpp
changelog-type: markdown
hash: 4cdac0109e05e5beb4de3adcc8ed276acd46757f2ddeec0c44504edc5e565558
test-bench-deps: {}
maintainer: acowley@gmail.com
synopsis: A Haskell pre-processor
changelog: ! "# 0.4.0\n\n- Simplify the parsing machinery\n- Don't remove C++-style
  single-line comments\n- Don't error on unknown cpp directives\n  Previously, a line
  beginning with \"#-}\" would cause an error\n- Don't do trigraph replacement by
  default.\n  Haskell allows \"??\" in operator names and you can be sure `lens` uses
  it!\n\n# 0.3.1\n\nAddress a change wherein GHC 8 will pass `-include` arguments
  without a space between \"-include\" and the file to be included.\n\n# 0.3\n\nSwitch
  to a stream processing model.\n\nThis library is designed to have minimal dependencies,
  so we now have\na bespoke implementation of a cross between the pipes and machines\nlibraries
  included.\n\nThis change was done to make some parsing\noperations easier, believe
  it or not. For example, most pre-processing\nis done on a line-by-line basis, but
  we must also support macro\nfunction applications that cross line boundaries. Thus
  the expansion\nlogic can not merely be given one line at a time from an input\nfile.
  Previously, a heuristic tried to combine consecutive lines\nbefore the parsing stage.
  Now, the parser itself is able to pull\ntokens in across lines when necessary.\n\nTL;DR:
  The upshot is that processing `/usr/include/stdio.h` on OS X (a\nsurprisingly complicated
  file!)  now uses 78% of the time and 0.38%\nthe memory of previous versions of `hpp`.\n\n#
  0.1\n\nFirst release!\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <4.10'
  time: ! '>=1.5'
  bytestring-trie: -any
  filepath: -any
  semigroups: ! '>=0.18 && <0.19'
  ghc-prim: -any
  hpp: -any
  transformers: ! '>=0.4'
  directory: -any
all-versions:
- '0.1.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0'
author: Anthony Cowley
latest: '0.4.0'
description-type: markdown
description: ! '`hpp` is a Haskell pre-processor that is also a C90-compatible

  pre-processor (with the addition of a `--cpp` flag). It is

  packaged as both a library and an executable.


  To use as a Haskell preprocessor for resolving `#ifdef` conditionals

  and macro expansion, an invocation might look like,


  ```

  hpp -DDEBUG Foo.hs

  ```


  To use as a C preprocessor, an invocation might look like,


  ```

  hpp -DDEBUG --cpp foo.c

  ```


  To have GHC use `hpp` as the C pre-processor, add this line to the top

  of a Haskell source file that makes use of the `CPP` `LANGUAGE`

  pragma,


  ```

  {-# OPTIONS_GHC -cpp -pgmPhpp #-}

  ```


  Or add this line to your `.cabal` file:


  ```

  ghc-options: -pgmPhpp

  ```


  Note that you will need to ensure that the `hpp` executable is available in your
  build environment (e.g. you can add `hpp` as a `build-depends` in your `.cabal`
  file).

'
license-name: BSD3
