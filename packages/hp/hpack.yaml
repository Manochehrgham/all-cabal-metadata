homepage: https://github.com/sol/hpack#readme
changelog-type: ''
hash: 60b75b53efd981cbf039ff7732b8f60edbd670f9038bcf6f5c657a8af76f3639
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  hspec: ==2.*
  text: -any
  filepath: -any
  containers: -any
  mockery: ! '>=0.3'
  base-compat: ! '>=0.8'
  interpolate: -any
  temporary: -any
  deepseq: -any
  aeson-qq: -any
  QuickCheck: -any
  Glob: -any
  aeson: ! '>=0.11'
  yaml: -any
  directory: -any
maintainer: Simon Hengel <sol@typeful.net>
synopsis: An alternative format for Haskell packages
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  containers: -any
  base-compat: ! '>=0.8'
  deepseq: -any
  Glob: -any
  aeson: ! '>=0.11'
  yaml: -any
  hpack: -any
  directory: -any
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.4.0'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.6.0'
- '0.7.0'
- '0.7.1'
- '0.8.0'
- '0.9.1'
- '0.10.0'
- '0.11.0'
- '0.11.1'
- '0.11.2'
- '0.12.0'
- '0.13.0'
- '0.14.0'
- '0.14.1'
- '0.15.0'
- '0.16.0'
author: ''
latest: '0.16.0'
description-type: markdown
description: ! "# hpack: An alternative format for Haskell packages\n\n## Examples\n\n
  * Given this [package.yaml](https://github.com/sol/hpack/blob/master/package.yaml)
  running `hpack` will generate [hpack.cabal](https://github.com/sol/hpack/blob/master/hpack.cabal)\n
  * Given this [package.yaml](https://github.com/zalora/getopt-generics/blob/master/package.yaml)
  running `hpack` will generate [getopt-generics.cabal](https://github.com/zalora/getopt-generics/blob/master/getopt-generics.cabal)\n
  * Given this [package.yaml](https://github.com/hspec/sensei/blob/master/package.yaml)
  running `hpack` will generate [sensei.cabal](https://github.com/hspec/sensei/blob/master/sensei.cabal)\n
  * Given this [package.yaml](https://github.com/haskell-compat/base-orphans/blob/master/package.yaml)
  running `hpack` will generate [base-orphans.cabal](https://github.com/haskell-compat/base-orphans/blob/master/base-orphans.cabal)\n\n##
  Documentation\n\n### Getting started\n\nOne easy way of getting started is to use\n[hpack-convert](http://hackage.haskell.org/package/hpack-convert)
  to convert an\nexisting cabal file into a `package.yaml`.\n\n### Quick-reference\n\n####
  Top-level fields\n\n| Hpack | Cabal | Default | Notes | Example |\n| --- | --- |
  --- | --- | --- |\n| `name` | `name` | | | |\n| `version` | `version` | `0.0.0`
  | | |\n| `synopsis` | `synopsis` | | | |\n| `description` | `description` | | |
  |\n| `category` | `category` | | | |\n| `stability` | `stability` | | | |\n| `homepage`
  | `homepage` | If `github` given, `<repo>#readme` | | |\n| `bug-reports` | `bug-reports`
  | If `github` given, `<repo>/issues` | | |\n| `author` | `author` | | May be a list
  | |\n| `maintainer` | `maintainer` | | May be a list | |\n| `copyright` | `copyright`
  | | May be a list |\n| `license` | `license` | | | |\n| `license-file` | `license-file`
  | `LICENSE` if file exists | | |\n| `tested-with` | `tested-with` | | | |\n| `build-type`
  | `build-type` | `Simple` | Must be `Simple`, `Configure`, `Make`, or `Custom` |
  |\n| | `cabal-version` | `>= 1.10` or `>= 1.21` | `>= 1.21` if library component
  has `reexported-modules` field | |\n| `extra-source-files` | `extra-source-files`
  | | Accepts [glob patterns](#file-globbing) | |\n| `data-files` | `data-files` |
  | Accepts [glob patterns](#file-globbing) | |\n| `github` | `source-repository head`
  | | Accepts `user/repo` or `user/repo/subdir` | `github: foo/bar`\n| `git`    |
  `source-repository head` | | No effect if `github` given | `git: https://my.repo.com/foo`
  |\n| `flags`  | `flag <name>` | | Map from flag name to flag (see [Flags](#flags))
  | |\n| `library` | `library` | | See [Library fields](#library-fields) | |\n| `executables`
  | `executable <name>` | | Map from executable name to executable (see [Executable
  fields](#executable-fields)) | |\n| `tests` | `test-suite <name>` | | Map from test
  name to test (see [Test fields](#test-fields)) | |\n| `benchmarks` | `benchmark
  <name>` | | Map from benchmark name to benchmark (see [Benchmark fields](#benchmark-fields))
  | |\n\n#### Global top-level fields\n\nThese fields are merged with all library,
  executable, test, and benchmark components.\n\n| Hpack | Cabal | Default | Notes
  |\n| --- | --- | --- | --- |\n| `source-dirs` | `hs-source-dirs` | | |\n| `default-extensions`
  | `default-extensions` | | |\n| `other-extension` | `other-extensions` | | |\n|
  `ghc-options` | `ghc-options` | | |\n| `ghc-prof-options` | `ghc-prof-options` |
  | |\n| `cpp-options` | `cpp-options` | | |\n| `cc-options` | `cc-options` | | |\n|
  `c-sources` | `c-sources` | | |\n| `extra-lib-dirs` | `extra-lib-dirs` | | |\n|
  `extra-libraries` | `extra-libraries` | | |\n| `include-dirs` | `include-dirs` |
  | |\n| `install-includes` | `install-includes` | | |\n| `ld-options` | `ld-options`
  | | |\n| `buildable` | `buildable` | | May be overridden by later stanza |\n| `dependencies`
  | `build-depends` | | |\n| `build-tools` | `build-tools` | | |\n| `when` | | | Accepts
  a list of conditionals (see [Conditionals](#conditionals)) |\n\n#### <a name=\"library-fields\"></a>Library
  fields\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| `exposed`
  | `exposed` | | |\n| `exposed-modules` | `exposed-modules` | All modules in `source-dirs`
  less `other-modules` | |\n| `other-modules` | `other-modules` | All modules in `source-dirs`
  less `exposed-modules` | |\n| `reexported-modules` | `reexported-modules` | | |\n|
  | `default-language` | `Haskell2010` | |\n\n#### <a name=\"executable-fields\"></a>Executable
  fields\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| `main`
  | `main-is` | | |\n| `other-modules` | `other-modules` | | |\n| | `default-language`
  | `Haskell2010` | |\n\n#### <a name=\"test-fields\"></a>Test fields\n\n| Hpack |
  Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| | `type` | `exitcode-stdio-1.0`
  | |\n| `main` | `main-is` | | |\n| `other-modules` | `other-modules` | | |\n| |
  `default-language` | `Haskell2010` | |\n\n#### <a name=\"benchmark-fields\"></a>Benchmark
  fields\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| | `type`
  | `exitcode-stdio-1.0` | |\n| `main` | `main-is` | | |\n| `other-modules` | `other-modules`
  | | |\n| | `default-language` | `Haskell2010` | |\n\n#### <a name=\"flags\"></a>Flags\n\n|
  Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| `description` |
  `description` | | Optional |\n| `manual` | `manual` | | Required (unlike Cabal)
  |\n| `default` | `default` | | Required (unlike Cabal) |\n\n#### <a name=\"conditionals\"></a>
  Conditionals\n\nConditionals with no else branch:\n\n- Must have a `condition` field\n-
  May have any number of other fields\n\nFor example,\n\n    when:\n      - condition:
  os(darwin)\n        extra-lib-dirs: lib/darwin\n\nbecomes\n\n    if os(darwin)\n
  \     extra-lib-dirs:\n        lib/darwin\n\nConditionals with an else branch:\n\n-
  Must have a `condition` field\n- Must have a `then` field, itself an object containing
  any number of other fields\n- Must have a `else` field, itself an object containing
  any number of other fields\n- All other top-level fields are ignored\n\nFor example,\n\n
  \   when:\n      - condition: flag(fast)\n        then:\n          ghc-options:
  -O2\n        else:\n          ghc-options: -O0\n\nbecomes\n\n    if flag(fast)\n
  \     ghc-options: -O2\n    else\n      ghc-options: -O0\n\n\n### <a name=\"file-globbing\"></a>File
  globbing\n\nAt place where you can specify a list of files you can also use glob
  patterns.\nGlob patters and ordinary file names can be freely mixed, e.g.:\n\n```yaml\nextra-source-files:\n
  \ - static/*.js\n  - static/site.css\n```\n\nGlob patterns are expanded according
  to the following rules:\n\n - `?` and `*` are expanded according to POSIX (they
  match arbitrary\n   characters, except for directory separators)\n - `**` is expanded
  in a `zsh`-like fashion (matching across directory\n   separators)\n - `?`, `*`
  and `**` do not match a `.` at the beginning of a file/directory\n\n### Slides\n\n
  - Slides from my talk about `hpack` at the Singapore Haskell meetup:\n   http://typeful.net/talks/hpack\n\n##
  Vim integration\n\nTo run `hpack` automatically on modifications to `package.yaml`
  add the\nfollowing to your `~/.vimrc`:\n\n```vim\nautocmd BufWritePost package.yaml
  silent !hpack --silent\n```\n"
license-name: MIT
