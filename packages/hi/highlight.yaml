homepage: https://github.com/cdepillabout/highlight
changelog-type: ''
hash: b1c71aec0fe76c583cc08b9e781c8a6d81a274dcda4c838610c3fade2aed84c8
test-bench-deps:
  bytestring: -any
  unix: -any
  base: -any
  tasty-golden: -any
  highlight: -any
  criterion: -any
  process: -any
  doctest: -any
  lens: -any
  base-compat: -any
  pipes: -any
  transformers: -any
  tasty: -any
  QuickCheck: -any
  transformers-compat: -any
  directory: -any
maintainer: cdep.illabout@gmail.com
synopsis: Command line tool for highlighting parts of files matching a regex.
changelog: ''
basic-deps:
  mtl-compat: ! '>=0.2'
  bytestring: ! '>=0.9'
  unix: ! '>=2.0'
  base: ! '>=4.7 && <5'
  pipes-bytestring: ! '>=2'
  regex: ! '>=0.10'
  pipes-group: ! '>=1'
  text: ! '>=1.2'
  highlight: -any
  regex-with-pcre: ! '>=1.0'
  filepath: ! '>=1'
  semigroups: ! '>=0.15'
  containers: ! '>=0.5'
  ansi-terminal: ! '>=0.6'
  lens: ! '>=3'
  base-compat: ! '>=0.8'
  pipes: ! '>=4'
  mtl: ! '>=2.0'
  transformers: ! '>=0.2'
  optparse-applicative: ! '>=0.11'
  pipes-safe: ! '>=2'
  system-filepath: ! '>=0.4'
  transformers-compat: ! '>=0.3'
  directory: ! '>=1.2'
all-versions:
- '0.1.0.0'
author: Dennis Gosnell
latest: '0.1.0.0'
description-type: markdown
description: ! "\nHighlight\n=========\n\n[![Build Status](https://secure.travis-ci.org/cdepillabout/highlight.svg)](http://travis-ci.org/cdepillabout/highlight)\n[![Hackage](https://img.shields.io/hackage/v/highlight.svg)](https://hackage.haskell.org/package/highlight)\n[![Stackage
  LTS](http://stackage.org/package/highlight/badge/lts)](http://stackage.org/lts/package/highlight)\n[![Stackage
  Nightly](http://stackage.org/package/highlight/badge/nightly)](http://stackage.org/nightly/package/highlight)\n![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)\n\n`highlight` is a
  \n\nFor example, imagine the following Haskell data types and values:\n\n```haskell\ndata
  Foo = Foo { foo1 :: Integer , foo2 :: [String] } deriving Show\n\nfoo :: Foo\nfoo
  = Foo 3 [\"hello\", \"goodbye\"]\n\ndata Bar = Bar { bar1 :: Double , bar2 :: [Foo]
  } deriving Show\n\nbar :: Bar\nbar = Bar 10.55 [foo, foo]\n```\n\nIf you run this
  in `ghci` and type `print bar`, you'll get output like this:\n\n```haskell\n> print
  bar\nBar {bar1 = 10.55, bar2 = [Foo {foo1 = 3, foo2 = [\"hello\",\"goodbye\"]},Foo
  {foo1 = 3, foo2 = [\"hello\",\"goodbye\"]}]}\n```\n\nThis is pretty hard to read.
  \ Imagine if there were more fields or it were even\nmore deeply nested.  It would
  be even more difficult to read.\n\n`pretty-simple` can be used to print `bar` in
  an easy-to-read format:\n\n![example screenshot](/img/pretty-simple-example-screenshot.png?raw=true
  \"example screenshot\")\n\n## Usage\n\n## Features\n\n## Why not `(some other package)`?\n\n##
  Contributions\n\nFeel free to open an\n[issue](https://github.com/cdepillabout/pretty-simple/issues)
  or\n[PR](https://github.com/cdepillabout/pretty-simple/pulls) for any\nbugs/problems/suggestions/improvements.\n"
license-name: BSD3
