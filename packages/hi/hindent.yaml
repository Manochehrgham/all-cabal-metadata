changelog-type: ''
hash: c44f831ec44f714c17cdfc04429aadcbf98373fbc3955f1c31412b91fa0447e9
test-bench-deps:
  hindent: -any
  base: ! '>=4 && <5'
  hspec: -any
  text: -any
  monad-loops: -any
  data-default: -any
  haskell-src-exts: ==1.16.*
  mtl: -any
  directory: -any
synopsis: Extensible Haskell pretty printer
changelog: ''
basic-deps:
  descriptive: ! '>=0.7 && <0.10'
  hindent: -any
  base: ! '>=4.7 && <5'
  text: -any
  monad-loops: -any
  data-default: -any
  haskell-src-exts: ==1.16.*
  ghc-prim: -any
  mtl: -any
  transformers: -any
  applicative-quoters: -any
  directory: -any
all-versions:
- '0.0'
- '1.0'
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- '3.0'
- '3.1'
- '3.2'
- '3.3'
- '3.4'
- '3.5'
- '3.6'
- '3.7'
- '3.8'
- '3.9'
- '3.9.1'
- '4.0'
- '4.1.0'
- '4.1.1'
- '4.2.0'
- '4.2.1'
- '4.2.2'
- '4.2.3'
- '4.2.4'
- '4.3.0'
- '4.3.1'
- '4.3.2'
- '4.3.3'
- '4.3.4'
- '4.3.5'
- '4.3.6'
- '4.3.7'
- '4.3.8'
- '4.3.9'
- '4.3.10'
- '4.3.11'
- '4.3.12'
- '4.4.0'
- '4.4.1'
- '4.4.2'
latest: '4.4.2'
description-type: markdown
description: ! "\n# hindent [![Hackage](https://img.shields.io/hackage/v/hindent.svg?style=flat)](https://hackage.haskell.org/package/hindent)
  [![Build Status](https://travis-ci.org/chrisdone/hindent.png)](https://travis-ci.org/chrisdone/hindent)\n\nExtensible
  Haskell pretty printer. Both a library and an\nexecutable. Currently a work in progress
  (see\n[FIXME items](https://github.com/chrisdone/hindent/blob/master/src/HIndent/Pretty.hs)).\n\n[Documentation](http://chrisdone.github.io/hindent/)\n\n##
  Install\n\n    $ cabal install hindent\n\nYou might need to `cabal install happy`
  if haskell-src-exts complains.\n\n## Usage\n\n    $ hindent\n    hindent: arguments:
  --style [fundamental|chris-done|johan-tibell|gibiansky]\n\n## Emacs\n\nIn\n[elisp/hindent.el](https://github.com/chrisdone/hindent/blob/master/elisp/hindent.el)\nthere
  is `hindent-mode`, which provides keybindings to reindent parts of the\nbuffer:\n\n-
  `M-q` reformats the current declaration.  When inside a comment, it fills the\n
  \ current paragraph instead, like the standard `M-q`.\n- `C-M-\\` reformats the
  current region.\n\nTo enable it, add the following to your init file:\n\n```lisp\n(add-hook
  'haskell-mode-hook #'hindent-mode)\n```\n\nBy default it uses the style called `fundamental`,
  if you want to use\nanother, `johan-tibell`, run `M-x customize-variable\nhindent-style`.
  If you want to configure per-project, make a file\ncalled `.dir-locals.el` in the
  project root directory like this:\n\n``` lisp\n((nil . ((hindent-style . \"johan-tibell\"))))\n```\n\n##
  Vim\n\nBasic support is provided through [vim/hindent.vim](https://github.com/chrisdone/hindent/blob/master/vim/hindent.vim),\nwhich
  sets hindent as the formatter used by `gq` for haskell files. The formatting style\ndefaults
  to `fundamental` but can be configured by setting `g:hindent_style` to the desired
  style.\n\nNote that unlike in emacs you have to take care of selecting a sensible
  buffer region as input to\nhindent yourself. If that is too much trouble you can
  try [vim-textobj-haskell](https://github.com/gilligan/vim-textobj-haskell) which
  provides a text object for top level bindings.\n\n## Contributing your own printer
  style\n\nThis package comes with a basic fundamental pretty printer, which is\nprobably
  not desirable to use.\n\nIt comes with other styles implemented on top of this fundamental\nprinter,
  in the modules in `HIndent.Styles.*`.\n\nMake a module `HIndent.Styles.YourName`
  in which to place the printer.\n\nTo define your own, see\n[HIndent.Styles.Fundamental](https://github.com/chrisdone/hindent/blob/master/src/HIndent/Styles/Fundamental.hs)\nfor
  a starting point. This module defines a blank style, adds no\nadditional extensions.
  Customizations are specified via the\n`styleExtenders` property. See\n[HIndent.Styles.ChrisDone](https://github.com/chrisdone/hindent/blob/master/src/HIndent/Styles/ChrisDone.hs)\nfor
  an example of a non-trivial style.\n\nUseful combinators can be found in\n[HIndent.Pretty](https://github.com/chrisdone/hindent/blob/master/src/HIndent/Pretty.hs)\nfor
  defining printers. When you want to use a fundamental printer, use\n`prettyNoExt`
  instead of `pretty`. Comments will still be inserted by\n`prettyNoExt`.\n\nIf you
  want to contribute it to the package, add it to the list of\nstyles in\n[HIndent](https://github.com/chrisdone/hindent/blob/master/src/HIndent.hs)\nand
  export it, and open a pull request. Use\n[the Erlang git commit guide](https://github.com/erlang/otp/wiki/Writing-good-commit-messages)\nfor
  your commits.\n\n## Remaining issues\n\n* Add test suite.\n* Flesh out more obscure
  parts of the AST.\n* Improve comment re-insertion.\n* Possibly: Support formatting
  whole modules.\n* Implement some operator-specific layouts: e.g.\n\n        Foo
  <$> foo\n            <*> bar\n            <*> mu\n\n## Example\n\nInput code:\n\n```
  haskell\nfoo = do print \"OK, go\"; foo (foo bar) -- Yep.\n          (if bar then
  bob else pif) (case mu {- cool -} zot of\n            Just x -> return (); Nothing
  -> do putStrLn \"yay\"; return 1) bill -- Etc\n  where potato Cakes {} = 2 * x foo
  * bar / 5\n```\n\n### Fundamental\n\nThis is an intentionally very dumb style that
  demands extension.\n\n``` haskell\nfoo =\n  do print\n       \"OK, go\"\n     foo\n
  \      (foo\n          bar)\n       (if bar\n           then bob\n           else
  pif)\n       (case mu {- cool -}\n               zot of\n          Just x ->\n            return\n
  \             ()\n          Nothing ->\n            do putStrLn\n                 \"yay\"\n
  \              return\n                 1)\n       bill -- Etc\n  where potato Cakes{}
  =\n          2 * x\n                foo * bar / 5\n```\n\n### Johan Tibell\n\nDocumented
  in\n[the style guide](https://github.com/tibbe/haskell-style-guide).\nThis printer
  style uses some simple heuristics in deciding when to go\nto a new line or not,
  and custom handling of do, if, case alts, rhs,\netc.\n\n``` haskell\nfoo = do\n
  \   print \"OK, go\"\n    foo\n        (foo bar)\n        (if bar\n             then
  bob\n             else pif)\n        (case mu {- cool -} zot of\n             Just
  x ->\n                 return ()\n             Nothing -> do\n                 putStrLn
  \"yay\"\n                 return 1)\n        bill -- Etc\n  where\n    potato Cakes{}
  =\n        2 * x foo * bar / 5\n```\n\n### Chris Done\n\nMy style is documented
  in\n[the style guide](https://github.com/chrisdone/haskell-style-guide).\nThis printer
  style uses some simple heuristics in deciding when to go\nto a new line or not.\n\n```
  haskell\nfoo =\n  do print \"OK, go\"\n     foo (foo bar)\n         (if bar\n             then
  bob\n             else pif)\n         (case mu {- cool -} zot of\n            Just
  x -> return ()\n            Nothing ->\n              do putStrLn \"yay\"\n                 return
  1)\n         bill -- Etc\n  where potato Cakes{} = 2 * x foo * bar / 5\n```\n\n###
  Andrew Gibiansky\n\n``` haskell\nfoo = do\n  print \"OK, go\"\n  foo (foo bar) --
  Yep.\n   (if bar\n       then bob\n       else pif) (case mu {- cool -} zot of\n
  \                   Just x -> return ()\n                    Nothing -> do\n                      putStrLn
  \"yay\"\n                      return 1) bill -- Etc\n\n  where\n    potato Cakes{}
  = 2 * x foo * bar / 5\n```\n"
