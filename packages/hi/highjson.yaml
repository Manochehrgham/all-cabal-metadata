homepage: https://github.com/agrafix/highjson
changelog-type: ''
hash: e6b17f1cc2eaff6845fef598aff0bca2ae378ceea247e4c58344c7396dde6a10
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: ! '>=2.0'
  text: -any
  criterion: ! '>=1.1'
  deepseq: -any
  highjson: -any
  aeson: ! '>=0.9'
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Very fast JSON parsing
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.4.0'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2.5'
  text: ! '>=1.1.1'
  containers: -any
  hvect: ! '>=0.2'
  hashable: ! '>=1.1.2'
  attoparsec: ! '>=0.13.0.0'
  scientific: ! '>=0.3.3'
  vector: ! '>=0.7.1'
all-versions:
- '0.1.0.0'
author: Alexander Thiemann <mail@athiemann.net>
latest: '0.1.0.0'
description-type: markdown
description: ! "highjson\n=====\n\n[![Build Status](https://travis-ci.org/agrafix/highjson.svg)](https://travis-ci.org/agrafix/highjson)\n\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/highjson.svg)](http://packdeps.haskellers.com/reverse/highjson)\n\n##
  Intro\n\nHackage: [highjson](http://hackage.haskell.org/package/highjson)\n\nLow
  boilerplate, easy to use and very fast Haskell JSON parsing. **WARNING: Work in
  progress!**\n\n## Usage\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport
  Data.Json.Parser\n\ndata SomeDummy\n   = SomeDummy\n   { sd_int :: Int\n   , sd_bool
  :: Bool\n   , sd_text :: T.Text\n   , sd_either :: Either Bool T.Text\n   , sd_maybe
  :: Maybe Int\n   } deriving (Show, Eq)\n\ninstance JsonReadable SomeDummy where\n
  \   readJson =\n       runSpec SomeDummy $\n          \"int\" :&&: \"bool\" :&&:
  \"text\" :&&: \"either\" :&&: \"maybe\" :&&: ObjSpecNil\n\ntest =\n    parseJsonBs
  \"{\\\"int\\\": 34, \\\"text\\\": \\\"Teext\\\", \\\"bool\\\": true, \\\"either\\\":
  false}\"\n                               == Right (SomeDummy 34 True \"Teext\" (Left
  False) Nothing)\n```\n\n## Install\n\n* Using cabal: `cabal install highjson`\n*
  From Source: `git clone https://github.com/agrafix/highjson.git && cd highjson &&
  cabal install`\n\n## Todo\n\n* Implement proper string parsing (handle escape charaters)\n*
  Write more tests\n* Allow fast json generation via object specs\n* Generate typescript
  interfaces from object specs\n* ...\n\n## Benchmarks\n\nTo run the benchmarks, use
  `cabal bench`. Current results on my MacBook Pro:\n\n```\n$ cabal bench\nPreprocessing
  library highjson-0.1.0.0...\n[1 of 1] Compiling Data.Json.Parser ( src/Data/Json/Parser.hs,
  dist/build/Data/Json/Parser.o )\nIn-place registering highjson-0.1.0.0...\nPreprocessing
  benchmark 'highjson-benchmarks' for highjson-0.1.0.0...\n[1 of 1] Compiling Main
  \            ( bench/Twitter.hs, dist/build/highjson-benchmarks/highjson-benchmarks-tmp/Main.o
  ) [Data.Json.Parser changed]\nLinking dist/build/highjson-benchmarks/highjson-benchmarks
  ...\nRunning 1 benchmarks...\nBenchmark highjson-benchmarks: RUNNING...\nbenchmarking
  twitter/aeson\ntime                 2.200 ms   (2.044 ms .. 2.349 ms)\n                     0.983
  R²   (0.975 R² .. 0.996 R²)\nmean                 2.065 ms   (2.031 ms .. 2.120
  ms)\nstd dev              138.3 μs   (93.40 μs .. 204.8 μs)\nvariance introduced
  by outliers: 48% (moderately inflated)\n\nbenchmarking twitter/highjson\ntime                 2.058
  ms   (2.032 ms .. 2.087 ms)\n                     0.997 R²   (0.994 R² .. 0.999
  R²)\nmean                 2.077 ms   (2.050 ms .. 2.115 ms)\nstd dev              103.6
  μs   (80.86 μs .. 138.0 μs)\nvariance introduced by outliers: 35% (moderately inflated)\n```\n\nThe
  benchmarks are derived from [aeson](https://github.com/bos/aeson)'s\ntwitter-json-parsing
  benchmarks and should probably more there when this library is in a\nmore complete
  state.\n"
license-name: MIT
