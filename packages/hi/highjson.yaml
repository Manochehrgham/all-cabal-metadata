homepage: https://github.com/agrafix/highjson
changelog-type: ''
hash: 43dfdccb019371e90a5ebe1d0eb7b37ad661abb63aceb5c3ab50d0c3331453a1
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: ! '>=2.0'
  text: -any
  criterion: ! '>=1.1'
  deepseq: -any
  QuickCheck: ! '>=2.8'
  highjson: -any
  aeson: ! '>=0.8'
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Very fast JSON serialisation and parsing library
changelog: ''
basic-deps:
  buffer-builder: ! '>=0.2.4'
  bytestring: ! '>=0.10.4.0'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2.5'
  text: ! '>=1.1.1'
  containers: -any
  hvect: ! '>=0.2'
  hashable: ! '>=1.1.2'
  attoparsec: ! '>=0.12.0.0'
  scientific: ! '>=0.3.3'
  vector: ! '>=0.7.1'
all-versions:
- '0.1.0.0'
- '0.2.0.1'
- '0.2.0.2'
author: Alexander Thiemann <mail@athiemann.net>
latest: '0.2.0.2'
description-type: markdown
description: ! "highjson\n=====\n\n[![Build Status](https://travis-ci.org/agrafix/highjson.svg)](https://travis-ci.org/agrafix/highjson)\n\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/highjson.svg)](http://packdeps.haskellers.com/reverse/highjson)\n\n##
  Intro\n\nHackage: [highjson](http://hackage.haskell.org/package/highjson)\n\nLow
  boilerplate, easy to use and very fast Haskell JSON serialisation and parsing. **WARNING:
  Work in progress!**\n\n## Usage\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\ndata
  SomeDummy\n   = SomeDummy\n   { sd_int :: Int\n   , sd_bool :: Bool\n   , sd_text
  :: T.Text\n   , sd_either :: Either Bool T.Text\n   , sd_maybe :: Maybe Int\n   }
  deriving (Show, Eq)\n\nsomeDummySpec =\n    JsonSpec SomeDummy $\n    \"int\" .=
  sd_int\n    :+: \"bool\" .= sd_bool\n    :+: \"text\" .= sd_text\n    :+: \"either\"
  .= sd_either\n    :+: \"maybe\" .=? sd_maybe\n    :+: EmptySpec\n\ninstance ToJson
  SomeDummy where\n    toJson = makeSerialiser someDummySpec\n\ninstance JsonReadable
  SomeDummy where\n    readJson = makeParser someDummySpec\n\ntest =\n    parseJsonBs
  \"{\\\"int\\\": 34, \\\"text\\\": \\\"Teext\\\", \\\"bool\\\": true, \\\"either\\\":
  false}\"\n        == Right (SomeDummy 34 True \"Teext\" (Left False) Nothing)\n
  ```\n\nFor more usage examples check the tests.\n\n## Install\n\n* Using cabal:
  `cabal install highjson`\n* From Source: `git clone https://github.com/agrafix/highjson.git
  && cd highjson && cabal install`\n\n## Todo\n\n* Implement proper string parsing
  (handle escape charaters)\n* Write more tests\n* Generate typescript interfaces
  from object specs\n* ...\n\n## Benchmarks\n\nTo run the benchmarks, use `cabal bench`.
  Current results on my MacBook Pro:\n\n```\n$ cabal bench\nPreprocessing library
  highjson-0.2.0.0...\nIn-place registering highjson-0.2.0.0...\nPreprocessing benchmark
  'highjson-benchmarks' for highjson-0.2.0.0...\nRunning 1 benchmarks...\nBenchmark
  highjson-benchmarks: RUNNING...\nbenchmarking twitter/aeson\ntime                 2.148
  ms   (2.102 ms .. 2.187 ms)\n                     0.997 R²   (0.995 R² .. 0.999
  R²)\nmean                 2.137 ms   (2.112 ms .. 2.169 ms)\nstd dev              99.12
  μs   (81.84 μs .. 120.1 μs)\nvariance introduced by outliers: 31% (moderately inflated)\n\nbenchmarking
  twitter/highjson\ntime                 2.196 ms   (2.162 ms .. 2.235 ms)\n                     0.998
  R²   (0.996 R² .. 0.999 R²)\nmean                 2.222 ms   (2.195 ms .. 2.252
  ms)\nstd dev              94.52 μs   (75.45 μs .. 125.1 μs)\nvariance introduced
  by outliers: 28% (moderately inflated)\n```\n\nThe benchmarks are derived from [aeson](https://github.com/bos/aeson)'s\ntwitter-json-parsing
  benchmarks and should probably more there when this library is in a\nmore complete
  state.\n"
license-name: MIT
