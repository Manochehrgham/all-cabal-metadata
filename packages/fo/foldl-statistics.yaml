homepage: http://github.com/Data61/foldl-statistics#readme
changelog-type: markdown
hash: 771acf77e5a2920fea02847f2b6bf9ea0d5e56d07f9aeef889f8cf4d283d37b0
test-bench-deps:
  mwc-random: ! '>=0.13 && <0.14'
  base: ! '>=4.7 && <5.0'
  criterion: ! '>=1.1 && <1.2'
  quickcheck-instances: ! '>=0.3 && <0.4'
  foldl-statistics: -any
  tasty-quickcheck: ! '>=0.8 && <0.9'
  foldl: ! '>=1.1 && <1.3'
  statistics: ==0.13.*
  tasty: ! '>=0.11 && <0.12'
  profunctors: ! '>=5.2 && <5.3'
  vector: ==0.11.*
maintainer: Alex.Mason@data61.csiro.au
synopsis: ! 'Statistical functions from the statistics package implemented as

  Folds.'
changelog: ! '# 0.1.3.0

  - Added unbiased versions of LMVSK functions


  # 0.1.2.0

  - Exposed monoidal LMVSKState

  - Improved testing, including for fastLMVSK


  # 0.1.1.0

  - Add fastLMVSK (length, mean, variance, skewness and kurtosis)

  - Add fastLinearReg (count, slope, (Y) intercept and correlation of `(x,y)`)



  # 0.1.0.0

  - Initial release

'
basic-deps:
  base: ! '>=4.7 && <5'
  semigroups: -any
  math-functions: ! '>=0.1 && <0.3'
  foldl: ! '>=1.1 && <1.3'
  profunctors: ! '>=5.2 && <5.3'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.3.0'
author: Alex Mason
latest: '0.1.3.0'
description-type: markdown
description: ! "# foldl-statistics\nA reimplementation of the [Statistics.Sample](https://hackage.haskell.org/package/statistics/docs/Statistics-Sample.html)\nmodule
  using the [foldl](https://www.stackage.org/lts-5.1/package/foldl) package.\nThe
  intention of this package is to allow these algorithms to be used on a much broader
  set of data input types,\nincluding lists and streaming libraries such as `conduit`
  and `pipes`, and any other type which is `Foldable`.\n\nAll statistics in this package
  can be computed with no more than two passes over the data - once to compute the
  mean and once to compute \nany statistics which require the mean. this is achieved
  because foldl `Fold`s are `Applicative`, which means that to compute, for example,
  the first 4 central moments as well as the count, the following could be used:\n\n```haskell\nimport
  Control.Foldl as F\n\n...\n\ndataseries :: [Double]\ndataseries = ...\n\n    ...\n
  \   let m = F.fold mean dataseries\n       (c2,c3,c4,c5,n) = flip F.fold dataseries
  $ \n                        (\\(c2,c3) (c4,c5) n -> (c2,c3,c4,c5,n)) \n                        <$>
  centralMoment 2 3 m\n                        <*> centralMoment 4 5 m\n                        <*>
  F.length\n```\n\nwhich traverses the data twice, once to compute the mean `m`, and
  once to compute all the central moments and the count concurrently. This brings
  along with it for free the ability to compute streaming statistics, such as the
  mean of all data seen so far, using the `foldl`'s `scan` function.\n\nWhere possible,
  care has been taken to ensure the numerical stability of the computation of statistics.\n\nSeveral
  algorithms require the mean of the data to be known before computing the statistic,
  such as `skewness`, `kurtosis` and other `centralMoment`s.\nThere are 'fast' implementations
  for calculating the variance, unbiased variance and standard deviation, which can
  be computed without knowing the mean\n*a priori*, but which may produce less accurate
  results.\n\n## Performance & Correctness\nBenchmarks are included comparing performance
  to the [statistics](https://hackage.haskell.org/package/statistics) package. In
  nearly all cases, the implementations in this package perform better than those
  in `statistics` on the same inputs, and in several cases, performing two passes
  (to compute the mean and another statistic) is faster than the equivalent `statistics`
  implementation.\n\nThis speed has not come at the cost of correctness; all `Fold`s
  are tested against their `statistics` counterparts to ensure the results are identical.\n\nThese
  results can be confirmed by running\n\n    stack build --test --bench --benchmark-arguments
  \"--output bench.html\"\n\nwhich will print out the results of the tests against
  `statistics` and then run the benchmark (this may take several minutes and is best
  run on a \"quiet\" machine which is doing very little other than running the benchmark).
  The results of the benchmarking are then available in the file `bench.html`.\n\n"
license-name: BSD3
