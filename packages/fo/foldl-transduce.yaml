homepage: ''
changelog-type: text
hash: 33a8ea18b1310f3fea9700bd5131ffc22e462211b12a90cb1cc3eac8ae74517a
test-bench-deps:
  base: ! '>=4.4 && <5'
  text: -any
  criterion: ! '>=1.1.0.0 && <1.2'
  doctest: ! '>=0.10.1'
  foldl: -any
  foldl-transduce: -any
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.10.1.1'
maintainer: diaz_carrete@yahoo.com
synopsis: Transducers for foldl folds.
changelog: ! "# 0.2.1.0\n\n- Comonad and Extend instances for Transducer \n- Added
  words splitter\n- Added take, drop, takeWhile, dropWhile transducers\n\n# 0.2.0.0\n\n-
  Removed the Spliiter type. Now it's transducers for everything!\n- generalizeTransducer
  -> _generalize\n- simplifyTransducer -> _simplify\n- removed chokepoint and chokepointM\n\n\n#
  0.1.2.0\n\n- Added explicit bifunctors dependency.\n- Added Transduce', TransduceM'
  type synonyms.\n- Added groups', groupsM'.\n\n\n# 0.1.1.0\n\n- Changed signatures
  of transduce' and transduceM'.\n- generalize' -> generalizeTransducer\n- simplify'
  -> simplifyTransducer\n- dropped direct profunctors dependency.\n"
basic-deps:
  semigroupoids: ! '>=5.0'
  bytestring: ! '>=0.9.2.1 && <0.11'
  base: ! '>=4 && <5'
  comonad: ==4.*
  text: ! '>=0.11.2.0 && <1.3'
  containers: <0.6
  bifunctors: ==5.*
  foldl: ! '>=1.1 && <2'
  transformers: ! '>=0.2.0.0 && <0.5'
all-versions:
- '0.0.1'
- '0.1.0.0'
- '0.1.0.1'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.2.3'
- '0.2.0.0'
- '0.2.1.0'
author: Daniel Diaz
latest: '0.2.1.0'
description-type: markdown
description: ! "## What's in this library?\n\nStateful transducers and streaming-preserving
  group operations for the folds in\nGabriel Gonzalez's [foldl](http://hackage.haskell.org/package/foldl)
  package.\n\n## When to use this library?\n\n- When you want to wrap a stateful decoder
  over a **Fold**. An example is\ndecoding UTF-8: the decoder must be stateful because
  a multi-byte character may\nhave been split across two blocks of bytes.\n\n- When
  you want to tweak the stream of data that arrives into a **Fold**, but\nonly at
  certain positions. Stripping whitespace at the beginning of a text\nstream, for
  example.\n\n- When you want to perform group operations without breaking \"streaminess\",\nsimilar
  to what [pipes-group](http://hackage.haskell.org/package/pipes-group)\ndoes.\n\n##
  Why use this library for grouping instead of **pipes-group**?\n\nGrouping fold-side
  instead of producer-side has the advantage that, since the\nresults are still **Fold**s,
  you can combine them using **Applicative**.\n\nAlso, **Fold**s can work with sources
  other than **Producer**s from pipes.\n\nGrouping fold-side has limitations as well:\n\n-
  You can't perform bracketing operations like \"withFile\" that span the folding\n
  \ of an entire group. pipes-group allows them.\n\n- There doesn't seem to be a way
  to just take the first N groups in a stream\n  and afterwards rejoin them.\n\n-
  You have more flexibility in pipes-group to decide how to fold a group based\n  on
  previous results.\n"
license-name: BSD3
