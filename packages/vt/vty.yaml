homepage: https://github.com/coreyoconnor/vty
changelog-type: text
hash: 05eaaa0561c93dae6e53f41441346db5d45d7bc6ae1e7d1815686e3216452441
test-bench-deps:
  test-framework-hunit: -any
  quickcheck-assertions: ! '>=0.1.1'
  bytestring: -any
  test-framework: ==0.8.*
  unix: -any
  stm: -any
  Cabal: ! '>=1.20'
  base: ==4.*
  text: ! '>=0.11.3'
  string-qq: -any
  vty: -any
  data-default: ! '>=0.5.3'
  HUnit: -any
  smallcheck: ==1.*
  containers: -any
  blaze-builder: ! '>=0.3.3.2 && <0.5'
  utf8-string: ! '>=0.3 && <1.1'
  mtl: ! '>=1.1.1.0 && <2.3'
  terminfo: ! '>=0.3 && <0.5'
  random: ! '>=1.0 && <1.2'
  deepseq: ! '>=1.1 && <1.5'
  QuickCheck: ! '>=2.7'
  test-framework-smallcheck: ==0.2.*
  microlens-mtl: -any
  microlens: -any
  vector: ! '>=0.7'
maintainer: Corey O'Connor (coreyoconnor@gmail.com)
synopsis: A simple terminal UI library
changelog: ! "5.9.1\n  - Vty now only emits UTF8 charset sequences in terminals without
  a\n    preexisting UTF8 declaration to avoid emitting garbage sequences\n    (fixes
  #89)\n\n5.9\n  - Added new Output methods supportsBell and ringTerminalBell to find
  out\n    whether the output device has an audio bell and to ring it (see #102)\n\n5.8.1\n
  \ - Fixed \"refresh\" to work as advertised (see #104)\n\n5.8\n  - API change: EvPaste
  input event now provides paste data as a raw\n    ByteString rather than a String
  to allow the application to decode\n    how best to decode it\n\n5.7.1\n  - ModeDemo:
  added an explicit Control.Applicative import for older GHCs\n\n5.7\n  - Mouse and
  paste modes are now off by default.\n  - The Config type got new fields: mouseMode
  and bracketedPasteMode.  These\n    determine whether these modes are enabled initially
  (for terminals\n    that support them).\n  - Added a Mode type for modal terminal
  features (mouse events, bracketed\n    paste mode) that is used with new Output
  interface functions:\n    * supportsMode :: Mode -> Bool tells whether the device
  supports a\n      mode\n    * setMode :: Mode -> Bool -> IO () turns a mode on or
  off\n    * getModeStatus :: Mode -> IO Bool tells you whether a mode is on or\n
  \     off\n  - Added a new demo program, ModeDemo.hs, to demonstrate usage of modes\n\n5.6\n
  \ - Added support for normal and extended mouse modes in Xterm-like\n    terminals
  via the MouseDown and MouseUp Event constructors\n  - Added support for bracketed
  paste mode in Xterm-like terminals via\n    the EvPaste event constructor\n  - Added
  derived Show instances for Event and Button (thanks Felix\n    Hirn)\n  - Now TERM
  values containing \"screen\" will automatically use the\n    XtermColor driver rather
  than just TerminfoBased\n\n5.5.0\n  - Replaced lens dependency with microlens, microlens-mtl,
  microlens-th dependencies. Issue #90\n    - Thanks Jonathan Daugherty\n  - Cabal
  corrections.\n    - Thanks Lennart Spitzner\n\n5.4.0\n  - Changed eventChannel of
  Graphics.Vty.Input from Chan to TChan. This enables clients to query if\n    there
  are no pending events. The Graphics.Vty interface nextEvent is unchanged. Clients
  that use\n    eventChannel directly will require updating.\n    https://github.com/coreyoconnor/vty/issues/60\n5.3.1\n
  \ - Reverted cabal file to depend on Cabal >= 1.18 instead of 1.20 due\n    to possibly
  breaking this on reasonable GHC versions\n\n5.3\n  - Upgraded QuickCheck dependency
  to 2.7\n  - The standard IO Config (standardIOConfig) was overriding any provided
  application config.\n    In addition, the inputFd and outputFd could not be changed
  if mkVty was used.\n    Fixed.\n  - Correct handling of display attributes at end
  of line. The output attributes are set to default\n    at the end of content for
  the line and at the start of a new line.  Previously the current\n    attribute
  would extend to the next start of content. This was odd to reason about and was
  the\n    cause of https://github.com/coreyoconnor/vty/issues/76\n    IIRC Yi requires
  the old behavior to display the selection region correctly.\n  - shutdown of the
  input thread is now performed using killThread and synchronization on an MVar.\n
  \   For correct handling of the terminal read vmin and vtime the read must be a
  blocking read on an\n    OS thread. This places a threadWaitRead, which will be
  interrupted by the killThread, prior to\n    the uninterruptable read. An alternative
  would be to re-import the read foreign call as\n    interruptable.\n\n5.2.11\n  -
  deepseq bounds increased for tests.\n  - Clean up warnings when compiling on 7.10\n
  \   - Thanks Eric Mertens\n  - Avoid discarding input bytes after multi-byte encoded
  codepoint\n    - Thanks Eric Mertens\n\n5.2.10\n  - \"str\" now returns EmptyImage
  for empty strings to match behavior of other string-like Image constructors (fixes
  #74)\n    - Thanks Jonathan Daugherty\n\n5.2.9\n  - dependency version bumps\n    -
  https://github.com/coreyoconnor/vty/pull/71\n    - https://github.com/coreyoconnor/vty/pull/70\n
  \ - Correct/Simplify the example code\n    - Thanks glguy\n    - https://github.com/coreyoconnor/vty/pull/69\n\n5.2.8\n
  \ - blaze-builder, lens, utf8-string version constraint bump\n      - Thanks glguy\n
  \     - https://github.com/coreyoconnor/vty/pull/67\n  - Do not differentiate based
  on TERM_PROGRAM\n      - https://github.com/coreyoconnor/vty/issues/68\n\n5.2.7\n
  \ - lens and deepseq constraint bump + misc\n      - Thanks ethercrow\n      - https://github.com/coreyoconnor/vty/pull/66\n\n5.2.6\n
  \ - lens constraint bump\n      - Thanks alexander-b!\n      - https://github.com/coreyoconnor/vty/pull/64\n\n5.2.5\n
  \ - lens and random version constraint bump.\n      - Thanks RyanGlScott!\n      -
  https://github.com/coreyoconnor/vty/pull/62\n\n5.2.4\n  - removed -fpic from cc-options.
  No longer required.\n      - https://github.com/coreyoconnor/vty/issues/61\n      -
  https://ghc.haskell.org/trac/ghc/ticket/9657\n      - Thanks Fuuzetsu!\n\n5.2.3\n
  \ - evaluate/compile the input parsing table once instead of each keystroke.\n      -
  https://github.com/coreyoconnor/vty/pull/59\n      - Thanks ethercrow!\n\n5.2.2\n
  \ - When looking at input for an event, don't look too deep.\n      - https://github.com/coreyoconnor/vty/pull/57\n
  \     - Thanks ethercrow!\n\n5.2.1\n  - Bump upper version bound for lens to 4.5.
  Thanks markus1189!\n\n5.2.0\n  - Config structure now specifies file descriptor
  to use. The default is stdInput and stdOutput\n    file descriptors. Previously
  Vty used stdInput for input and the follow code for output:\n      - hDuplicate
  stdout >>= handleToFd >>= (`hSetBuffering` NoBuffering)\n      - the difference
  was required by Vty.Inline. Now, Vty.Inline uses the Config structure options\n
  \       to acheive the same effect.\n  - removed: derivedVtime, derivedVmin, inputForCurrentTerminal,
  inputForNameAndIO,\n    outputForCurrentTerminal, outputForNameAndIO\n  - added:
  inputForConfig, outputForConfig\n  - updates to vty-rogue from jtdaugherty. Thanks!\n
  \ - the oldest version of GHC tested to support vty is 7.6.2.\n  - the oldest version
  of GHC that vty compiles under is 7.4.2\n\n5.1.4\n  - merged https://github.com/coreyoconnor/vty/pull/51
  thanks trofi!\n\n5.1.1\n  - merged https://github.com/coreyoconnor/vty/pull/48 thanks
  sjmielke!\n  - jtdaugherty resolved a number of compiler warnings. Thanks!\n\n5.1.0\n
  \ - vmin and vtime can be specified however the application requires. See Graphics.Vty.Config.\n
  \ - fixed the processing of input when vmin is set > 1.\n\n5.0.0\n  - The naming
  convention now matches:\n    - http://www.haskell.org/haskellwiki/Programming_guidelines#Naming_Conventions\n
  \ - all projects using vty for input must be compiled with -threaded. Please notify
  vty author if\n    this is not acceptable.\n  - mkVtyEscDelay has been removed.
  Use \"mkVty def\". Which initialized vty with the default\n    configuration.\n
  \ - input handling changes\n    - KASCII is now KChar\n    - KPN5 is now KCenter\n
  \   - tests exist.\n    - Applications can add to the input tables by setting inputMap
  of the Config.\n      See Graphics.Vty.Config\n    - Users can define input table
  extensions that will apply to all vty applications.\n      See Graphics.Vty.Config\n
  \   - terminal timing is now handled by selecting an appropriate VTIME. Previously
  this was\n      implemented within Vty itself. This reduced complexity in vty but
  provides a different meta\n      key behavior and implies a requirement on -threaded.\n
  \   - The time vty will wait to verify an ESC byte means a single ESC key is the\n
  \     singleEscPeriod of the Input Config structure.\n  - removed the typeclass
  based terminal and display context interface in favor of a data\n    structure of
  properties interface.\n  - renamed the Terminal interface to Output\n  - The default
  picture for an image now uses the \"clear\" background. This background fills\n
  \   background spans with spaces or just ends the line.\n    - Previously the background
  defaulted to the space character. This causes issues copying\n      text from a
  text editor. The text would end up with extra spaces at the end of the line.\n  -
  Layer support\n    - Each layer is an image.\n    - The layers for a picture are
  a list of images.\n    - The first image is the top-most layer. The images are ordered
  from top to bottom.\n    - The transparent areas for a layer are the backgroundFill
  areas. backgroundFill is\n      added to pad images when images of different sizes
  are joined.\n    - If the background is clear there is no background layer.\n    -
  If there is a background character then the bottom layer is the background layer.\n
  \   - emptyPicture is a Picture with no layers and no cursor\n    - addToTop and
  addToBottom add a layer to the top and bottom of the given Picture.\n  - compatibility
  improvements:\n    - terminfo based terminals with no cursor support are silently
  accepted. The cursor\n      visibility changes in the Picture will have no effect.\n
  \   - alternate (setf/setb) color maps supported. Though colors beyond the first
  8 are just a\n      guess.\n    - added \"rgbColor\" for easy support of RGB specified
  colors.\n    - Both applications and users can add to the mapping used to translate
  from input bytes to\n      events.\n  - Additional information about input and output
  process can be appended to a debug log\n    - Set environment variable VTY_DEBUG_LOG
  to path of debug log\n    - Or use \"debugLog <path>\" config directive\n    - Or
  set 'debugLog' property of the Config provided to mkVty.\n  - examples moved to
  vty-examples package. See test directory for cabal file.\n    - vty-interactive-terminal-test\n
  \     - interactive test. Useful for building a bug report for vty's author.\n      -
  test/interactive_terminal_test.hs\n    - vty-event-echo\n      - view a input event
  log for vty. Example of interacting with user.\n      - test/EventEcho.hs\n    -
  vty-rogue\n      - The start of a rogue-like game. Example of layers and image build
  operations.\n      - test/Rogue.hs\n    - vty-benchmark\n      - benchmarks vty.
  A series of tests that push random pictures to the terminal. The\n        random
  pictures are generated using QuickCheck. The same generators used in the\n        automated
  tests.\n      - test/benchmark.hs\n\n4.7.0.0\n    - API changes:\n       - Added
  Graphics.Vty.Image.crop: Ensure an image is no larger than the specified size.\n
  \      - Added Graphics.Vty.Image.pad: Ensure an image is no smaller than the specified
  size.\n       - Added Graphics.Vty.Image.translate: Offset an image.\n    - Thanks
  Ben Boeckel <MathStuf@gmail.com> for these features.\n\n4.3.0.0\n\n4.2.1.0\n    -
  API changes:\n        - Attr record accessor fore_color changed to attr_fore_color\n
  \       - Attr record accessor back_color changed to attr_back_color\n        -
  Attr record accessor style changed to attr_style\n        - Added an \"inline\"
  display attribute changing DSL:\n            - put_attr_change applies a display
  attribute change immediately to a terminal\n            - For instance, can be used
  to change the display attrbiutes of text output via putStrLn\n              and
  putStr. EX: \"put_attr_change $ back_color red\" will set the\n              background
  color to red.\n            - Changes do not apply to a Picture output via output_picture.\n
  \           - See Graphics.Vty.Inline\n        - Moved all IO actions into any monad
  an instance of MonadIO\n\n4.0.0.1\n    - binding for mk_wcswidth was incorrect.
  Most platforms just magically worked due to\n      coincidence.\n\n4.0.0\n    -
  API changes:\n        - \"getSize\" has been removed. Use \"terminal vty >>= display_bounds\"
  where \"vty\" is an\n          instance of the Vty data structure.\n        - added
  a \"terminal\" field to the Vty data structure. Accesses the TerminalHandle associated\n
  \         with the Vty instance.\n        - Graphics.Vty.Types has undergone a number
  of changes. Summary:\n          - Partitioned into Graphics.Vty.Attributes for display
  attributes. Graphics.Vty.Image for\n            image combinators. Graphics.Vty.Picture
  for final picture construction.\n        - Graphics.Vty.Attributes:\n          -
  \"setFG\" and \"setBG\" are now \"with_fore_color\" and \"with_back_color\"\n          -
  All other \"set..\" equations similarly replaced.\n          - \"attr\" is now \"def_attr\",
  short for \"default display attributes\" Also added a\n            \"current_attr\"
  for \"currently applied display attributes\"\n        - Graphics.Vty.Image:\n          -
  \"horzcat\" is now \"horiz_cat\"\n          - \"vertcat\" is now \"vert_cat\"\n
  \         - \"renderBS\" is now \"utf8_bytestring\"\n          - \"renderChar\"
  is now \"char\"\n          - \"renderFill\" is now \"char_fill\"\n          - added
  a \"utf8_string\" and \"string\" (AKA \"iso_10464_string\") for UTF-8 encoded Strings\n
  \           and ISO-10464 encoded Strings. String literals in GHC have an ISO-10464
  runtime\n            representation.\n        - Graphics.Vty.Picture:\n          -
  exports Graphics.Vty.Image\n          - \"pic\" is now \"pic_for_image\"\n          -
  added API for setting background fill pattern.\n    - Completely rewritten output
  backend.\n        - Efficient, scanline style output span generator. Has not been
  fully optimized, but good\n          enough.\n        - The details required to
  display the desired picture on a terminal are well encapsulated.\n        - Terminfo
  based display terminal implementation. With specialized derivitives for xterm,\n
  \         Terminal.app, and iTerm.app.\n            - Attempts to robustly handle
  even terminals that don't support all display attributes.\n            - I've tested
  the following terminals with success: iTerm.app, Terminal.app, xterm,\n              rxvt,
  mlterm, Eterm, gnome-terminal, konsole, screen, linux vty. Hopefully you will be\n
  \             as successfull.\n        - Improved unicode support. Double wide characters
  will display as expected.\n    - 256 color support. See Graphics.Vty.Attributes.Color240.
  The actual output color is adjusted\n      according to the number of colors the
  terminal supports.\n    - The Graphics.Vty.Image combinators no longer require matching
  dimensions to arguments.\n      Unspecified areas are filled in with a user-customizable
  background pattern. See\n      Graphics.Vty.Picture.\n    - output images are always
  cropped to display size.\n    - Significant code coverage by QuickCheck tests. An
  interactive test for those final properties\n      that couldn't be automatically
  verified.\n\n    issues resolved:\n        - \"gnome terminal displays non-basic
  attributes as strikethrough\"\n            - http://trac.haskell.org/vty/ticket/14\n
  \       - \"Multi-byte characters are not displayed correctly on update\"\n            -
  http://trac.haskell.org/vty/ticket/10\n        - \"Redraw does not handle rendering
  a line that extends beyond screen width characters\"\n            - http://trac.haskell.org/vty/ticket/13\n
  \       - \"The <|> and <-> combinators should be more forgiving of mismatched dimensions\"\n
  \           - http://trac.haskell.org/vty/ticket/9\n        - \"256-color support\"\n
  \           - http://trac.haskell.org/vty/ticket/19\n"
basic-deps:
  microlens-th: -any
  bytestring: -any
  unix: -any
  stm: -any
  base: ==4.*
  text: ! '>=0.11.3'
  vty: -any
  filepath: ! '>=1.0 && <2.0'
  parsec: ! '>=2 && <4'
  data-default: ! '>=0.5.3'
  containers: -any
  blaze-builder: ! '>=0.3.3.2 && <0.5'
  utf8-string: ! '>=0.3 && <1.1'
  mtl: ! '>=1.1.1.0 && <2.3'
  hashable: ! '>=1.2'
  terminfo: ! '>=0.3 && <0.5'
  transformers: ! '>=0.3.0.0'
  parallel: ! '>=2.2 && <3.3'
  deepseq: ! '>=1.1 && <1.5'
  microlens-mtl: -any
  microlens: -any
  vector: ! '>=0.7'
  directory: -any
all-versions:
- '3.0.0'
- '3.0.1'
- '3.0.2'
- '3.0.4'
- '3.1.0'
- '3.1.2'
- '3.1.4'
- '3.1.6'
- '3.1.8'
- '3.1.8.2'
- '3.1.8.4'
- '4.0.0'
- '4.0.0.1'
- '4.2.1.0'
- '4.4.0.0'
- '4.4.0.0.1'
- '4.6.0.1'
- '4.6.0.2'
- '4.6.0.4'
- '4.6.0.6'
- '4.7.0.0'
- '4.7.0.4'
- '4.7.0.6'
- '4.7.0.8'
- '4.7.0.10'
- '4.7.0.12'
- '4.7.0.14'
- '4.7.0.18'
- '4.7.0.20'
- '4.7.1'
- '4.7.2'
- '4.7.3'
- '4.7.4'
- '4.7.5'
- '5.0.0'
- '5.0.1'
- '5.0.2'
- '5.1.0'
- '5.1.1'
- '5.1.3'
- '5.1.4'
- '5.2.0'
- '5.2.1'
- '5.2.2'
- '5.2.3'
- '5.2.4'
- '5.2.5'
- '5.2.6'
- '5.2.7'
- '5.2.8'
- '5.2.9'
- '5.2.10'
- '5.2.11'
- '5.3'
- '5.3.1'
- '5.4.0'
- '5.5.0'
- '5.6'
- '5.7'
- '5.7.1'
- '5.8'
- '5.8.1'
- '5.9'
- '5.9.1'
author: AUTHORS
latest: '5.9.1'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/coreyoconnor/vty.png)](https://travis-ci.org/coreyoconnor/vty)\n\n`vty`
  is a terminal interface library.\n\nThis project is hosted on github.com: https://github.com/coreyoconnor/vty\n\nInstall
  via `git` with:\n\n```\ngit clone git://github.com/coreyoconnor/vty.git\n```\n\nInstall
  via `cabal` with:\n\n```\ncabal install vty\n```\n\n# Features\n\n* Support for
  a large number of terminals. vt100, ansi, hurd, linux, screen etc\n  etc. Anything
  with a sufficient terminfo entry.\n\n* Automatic handling of window resizes.\n\n*
  If the terminal support UTF-8 then vty supports Unicode output.\n\n* Handles multi-column
  glyphs. (Requires user to properly configure terminal.)\n\n* Efficient output. Output
  buffering and terminal state changes are minimized.\n\n* Minimizes repaint area.
  Virtually eliminating the flicker problems that\n  plagues ncurses programs.\n\n*
  A pure, compositional interface for efficiently constructing display images.\n\n*
  Automatically decodes keyboard keys into (key,[modifier]) tuples.\n\n* Automatically
  supports refresh on Ctrl-L.\n\n* Automatically supports timeout after for lone ESC.
  The timeout is\n  customizable.\n\n* Interface is designed for easy compatible extension.\n\n*
  Supports ANSI graphics modes (SGR as defined in console_codes(4)) with a\n  type-safe
  interface. Gracefull fallback for terminals that do not support, or\n  partially
  support the standard ANSI graphics modes.\n\n* Properly handles cleanup, but not
  due to signals.\n\n* Comprehensive test suite.\n\n# Known Issues\n\n* Terminals
  have numerous quirks and bugs. vty picks what works best for the\n  author in ambigious,
  or buggy situations.\n\n* Signal handling of STOP, TERM and INT are non existent.\n\n*
  The character encoding of the terminal is assumed to be UTF-8 if\n  unicode is used.\n\n*
  Terminfo is assumed to be correct unless there is an override configured.\n  Some
  terminals will not have correct special key support (shifted F10 etc).\n  See Config
  for customizing vty's behavior for a particular terminal.\n\n* Uses the TIOCGWINSZ
  ioctl to find the current window size, which appears to be\n  limited to Linux and
  BSD.\n\n* Supports \"normal\" and \"extended\" (SGR) mouse modes as described at\n
  \ http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking\n\n*
  Supports bracketed paste mode as described at\n  http://cirw.in/blog/bracketed-paste\n\n#
  Platform Support\n\n## Posix Terminals\n\nUses terminfo to determine terminal protocol.
  With some special rules to handle\nsome omissions from terminfo.\n\n## Windows\n\ncygwin
  only.\n\n# Development Notes\n\n## Under NixOS\n\n### Using cabal\n\nAfter installing
  ncurses to user env.\n\n~~~\nLIBRARY_PATH=$HOME/.nix-profile/lib/ cabal configure
  --enable-tests --extra-lib-dirs=$HOME/.nix-profile/lib\nLIBRARY_PATH=$HOME/.nix-profile/lib/
  cabal build\nLIBRARY_PATH=$HOME/.nix-profile/lib/ cabal test\n~~~\n\n### Using stack\n\n~~~\nstack
  build\nstack test\nstack install\n~~~\n\n## Coverage\n\nAs of last testing, profiling
  causes issues with coverage when enabled. To\nevaluate coverage configure as follows:\n\n~~~\nrm
  -rf dist ; cabal configure --enable-tests --enable-library-coverage \\\n  --disable-library-profiling
  \\\n  --disable-executable-profiling\n~~~\n\n## Profiling\n\n\n~~~\nrm -rf dist
  ; cabal configure --enable-tests --disable-library-coverage \\\n  --enable-library-profiling
  \\\n  --enable-executable-profiling\n~~~\n"
license-name: BSD3
