homepage: https://github.com/brendanhay/amazonka
changelog-type: ''
hash: 7119c99a4de9727b54aeb392a7f6a0402da8c7c9d5963526766b51650dd29dcd
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  amazonka-test: ==1.4.3.*
  amazonka-core: ==1.4.3.*
  tasty-hunit: -any
  amazonka-gamelift: ==1.4.3.*
  tasty: -any
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Amazon GameLift SDK.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  amazonka-core: ==1.4.3.*
all-versions:
- '1.4.0'
- '1.4.1'
- '1.4.2'
- '1.4.3'
author: Brendan Hay
latest: '1.4.3'
description-type: markdown
description: ! "# Amazon GameLift SDK\n\n* [Version](#version)\n* [Description](#description)\n*
  [Contribute](#contribute)\n* [Licence](#licence)\n\n\n## Version\n\n`1.4.3`\n\n\n##
  Description\n\nAmazon GameLift Service\n\nWelcome to the /Amazon GameLift API Reference/.
  Amazon GameLift is a managed Amazon Web Services (AWS) service for developers who
  need a scalable, server-based solution for multiplayer games. Amazon GameLift provides
  setup and deployment of game servers, and handles infrastructure scaling and session
  management. For more information about the GameLift service, including a feature
  overview, getting started guide, and tutorial, see the accompanying <http://docs.aws.amazon.com/gamelift/latest/developerguide/
  Amazon GameLift Developer Guide>.\n\nThis reference describes the low-level service
  API for GameLift. You can call this API directly or use the <https://aws.amazon.com/tools/
  AWS SDK> for your preferred language. The AWS SDK includes a set of high-level GameLift
  actions multiplayer game sessions. Alternatively, you can use the <https://aws.amazon.com/cli/
  AWS command-line interface> (CLI) tool, which includes commands for GameLift. For
  administrative actions, you can use the Amazon GameLift console.\n\n__Managing Game
  and Player Sessions Through GameLift__\n\nCall these actions from your game clients
  and\\/or services to create and manage multiplayer game sessions.\n\n-   __Game
  sessions__\n    -   < CreateGameSession>\n    -   < DescribeGameSessions>\n    -
  \  < DescribeGameSessionDetails>\n    -   < UpdateGameSession>\n-   __Player sessions__\n
  \   -   < CreatePlayerSession>\n    -   < CreatePlayerSessions>\n    -   < DescribePlayerSessions>\n-
  \  __Other actions:__\n    -   < GetGameSessionLogUrl>\n\n__Setting Up Game Servers__\n\nUse
  these administrative actions to configure GameLift to host your game servers. When
  configuring GameLift, you\\'ll need to (1) configure a build for your game and provide
  build files, and (2) set up one or more fleets to host game sessions.\n\n-   __Build
  actions:__\n    -   < ListBuilds>\n    -   < CreateBuild>\n    -   < DescribeBuild>\n
  \   -   < UpdateBuild>\n    -   < DeleteBuild>\n    -   < RequestUploadCredentials>\n-
  \  __Fleet actions:__\n    -   < ListFleets>\n    -   < CreateFleet>\n    -   Describe
  fleet actions:\n        -   < DescribeFleetAttributes>\n        -   < DescribeFleetCapacity>\n
  \       -   < DescribeFleetPortSettings>\n        -   < DescribeFleetUtilization>\n
  \       -   < DescribeEC2InstanceLimits>\n        -   < DescribeFleetEvents>\n    -
  \  Update fleet actions:\n        -   < UpdateFleetAttributes>\n        -   < UpdateFleetCapacity>\n
  \       -   < UpdateFleetPortSettings>\n    -   < DeleteFleet>\n-   __Alias actions:__\n
  \   -   < ListAliases>\n    -   < CreateAlias>\n    -   < DescribeAlias>\n    -
  \  < UpdateAlias>\n    -   < DeleteAlias>\n    -   < ResolveAlias>\n-   __Scaling
  policy actions:__\n    -   < PutScalingPolicy>\n    -   < DescribeScalingPolicies>\n
  \   -   < DeleteScalingPolicy>\n\nDocumentation is available via [Hackage](http://hackage.haskell.org/package/amazonka-gamelift)\nand
  the [AWS API Reference](https://aws.amazon.com/documentation/).\n\nThe types from
  this library are intended to be used with [amazonka](http://hackage.haskell.org/package/amazonka),\nwhich
  provides mechanisms for specifying AuthN/AuthZ information and sending requests.\n\nUse
  of lenses is required for constructing and manipulating types.\nThis is due to the
  amount of nesting of AWS types and transparency regarding\nde/serialisation into
  more palatable Haskell values.\nThe provided lenses should be compatible with any
  of the major lens libraries\n[lens](http://hackage.haskell.org/package/lens) or
  [lens-family-core](http://hackage.haskell.org/package/lens-family-core).\n\n## Contribute\n\nFor
  any problems, comments, or feedback please create an issue [here on GitHub](https://github.com/brendanhay/amazonka/issues).\n\n>
  _Note:_ this library is an auto-generated Haskell package. Please see `amazonka-gen`
  for more information.\n\n\n## Licence\n\n`amazonka-gamelift` is released under the
  [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/).\n\nParts of the
  code are derived from AWS service descriptions, licensed under Apache 2.0.\nSource
  files subject to this contain an additional licensing clause in their header.\n"
license-name: OtherLicense
