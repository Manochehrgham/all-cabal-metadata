homepage: https://github.com/brendanhay/amazonka
changelog-type: ''
hash: a6bbbcda71577f385884008c1bf9b8b6c0c29746253e410b8107dadfa78033b1
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  amazonka-test: ==1.4.3.*
  amazonka-core: ==1.4.3.*
  tasty-hunit: -any
  tasty: -any
  amazonka-codepipeline: ==1.4.3.*
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Amazon CodePipeline SDK.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  amazonka-core: ==1.4.3.*
all-versions:
- '1.0.0'
- '1.0.1'
- '1.1.0'
- '1.2.0'
- '1.2.0.1'
- '1.2.0.2'
- '1.3.0'
- '1.3.1'
- '1.3.2'
- '1.3.3'
- '1.3.3.1'
- '1.3.4'
- '1.3.5'
- '1.3.6'
- '1.3.7'
- '1.4.0'
- '1.4.1'
- '1.4.2'
- '1.4.3'
author: Brendan Hay
latest: '1.4.3'
description-type: markdown
description: ! "# Amazon CodePipeline SDK\n\n* [Version](#version)\n* [Description](#description)\n*
  [Contribute](#contribute)\n* [Licence](#licence)\n\n\n## Version\n\n`1.4.3`\n\n\n##
  Description\n\nAWS CodePipeline __Overview__\n\nThis is the AWS CodePipeline API
  Reference. This guide provides descriptions of the actions and data types for AWS
  CodePipeline. Some functionality for your pipeline is only configurable through
  the API. For additional information, see the <http://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html
  AWS CodePipeline User Guide>.\n\nYou can use the AWS CodePipeline API to work with
  pipelines, stages, actions, gates, and transitions, as described below.\n\n/Pipelines/
  are models of automated release processes. Each pipeline is uniquely named, and
  consists of actions, gates, and stages.\n\nYou can work with pipelines by calling:\n\n-
  \  < CreatePipeline>, which creates a uniquely-named pipeline.\n-   < DeletePipeline>,
  which deletes the specified pipeline.\n-   < GetPipeline>, which returns information
  about a pipeline structure.\n-   < GetPipelineState>, which returns information
  about the current state of the stages and actions of a pipeline.\n-   < ListPipelines>,
  which gets a summary of all of the pipelines associated with your account.\n-   <
  StartPipelineExecution>, which runs the the most recent revision of an artifact
  through the pipeline.\n-   < UpdatePipeline>, which updates a pipeline with edits
  or changes to the structure of the pipeline.\n\nPipelines include /stages/, which
  are which are logical groupings of gates and actions. Each stage contains one or
  more actions that must complete before the next stage begins. A stage will result
  in success or failure. If a stage fails, then the pipeline stops at that stage and
  will remain stopped until either a new version of an artifact appears in the source
  location, or a user takes action to re-run the most recent artifact through the
  pipeline. You can call < GetPipelineState>, which displays the status of a pipeline,
  including the status of stages in the pipeline, or < GetPipeline>, which returns
  the entire structure of the pipeline, including the stages of that pipeline. For
  more information about the structure of stages and actions, also refer to the <http://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-structure.html
  AWS CodePipeline Pipeline Structure Reference>.\n\nPipeline stages include /actions/,
  which are categorized into categories such as source or build actions performed
  within a stage of a pipeline. For example, you can use a source action to import
  artifacts into a pipeline from a source such as Amazon S3. Like stages, you do not
  work with actions directly in most cases, but you do define and interact with actions
  when working with pipeline operations such as < CreatePipeline> and < GetPipelineState>.\n\nPipelines
  also include /transitions/, which allow the transition of artifacts from one stage
  to the next in a pipeline after the actions in one stage complete.\n\nYou can work
  with transitions by calling:\n\n-   < DisableStageTransition>, which prevents artifacts
  from transitioning to the next stage in a pipeline.\n-   < EnableStageTransition>,
  which enables transition of artifacts between stages in a pipeline.\n\n__Using the
  API to integrate with AWS CodePipeline__\n\nFor third-party integrators or developers
  who want to create their own integrations with AWS CodePipeline, the expected sequence
  varies from the standard API user. In order to integrate with AWS CodePipeline,
  developers will need to work with the following items:\n\n-   Jobs, which are instances
  of an action. For example, a job for a source action might import a revision of
  an artifact from a source.\n\n    You can work with jobs by calling:\n\n    -   <
  AcknowledgeJob>, which confirms whether a job worker has received the specified
  job,\n    -   < GetJobDetails>, which returns the details of a job,\n    -   < PollForJobs>,
  which determines whether there are any jobs to act upon,\n    -   < PutJobFailureResult>,
  which provides details of a job failure, and\n    -   < PutJobSuccessResult>, which
  provides details of a job success.\n-   Third party jobs, which are instances of
  an action created by a partner action and integrated into AWS CodePipeline. Partner
  actions are created by members of the AWS Partner Network.\n\n    You can work with
  third party jobs by calling:\n\n    -   < AcknowledgeThirdPartyJob>, which confirms
  whether a job worker has received the specified job,\n    -   < GetThirdPartyJobDetails>,
  which requests the details of a job for a partner action,\n    -   < PollForThirdPartyJobs>,
  which determines whether there are any jobs to act upon,\n    -   < PutThirdPartyJobFailureResult>,
  which provides details of a job failure, and\n    -   < PutThirdPartyJobSuccessResult>,
  which provides details of a job success.\n\nDocumentation is available via [Hackage](http://hackage.haskell.org/package/amazonka-codepipeline)\nand
  the [AWS API Reference](https://aws.amazon.com/documentation/).\n\nThe types from
  this library are intended to be used with [amazonka](http://hackage.haskell.org/package/amazonka),\nwhich
  provides mechanisms for specifying AuthN/AuthZ information and sending requests.\n\nUse
  of lenses is required for constructing and manipulating types.\nThis is due to the
  amount of nesting of AWS types and transparency regarding\nde/serialisation into
  more palatable Haskell values.\nThe provided lenses should be compatible with any
  of the major lens libraries\n[lens](http://hackage.haskell.org/package/lens) or
  [lens-family-core](http://hackage.haskell.org/package/lens-family-core).\n\n## Contribute\n\nFor
  any problems, comments, or feedback please create an issue [here on GitHub](https://github.com/brendanhay/amazonka/issues).\n\n>
  _Note:_ this library is an auto-generated Haskell package. Please see `amazonka-gen`
  for more information.\n\n\n## Licence\n\n`amazonka-codepipeline` is released under
  the [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/).\n\nParts
  of the code are derived from AWS service descriptions, licensed under Apache 2.0.\nSource
  files subject to this contain an additional licensing clause in their header.\n"
license-name: OtherLicense
