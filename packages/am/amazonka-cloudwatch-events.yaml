homepage: https://github.com/brendanhay/amazonka
changelog-type: ''
hash: 32bbd840bd66d6d4834ab22b1ea2d1f8de7425570a5ffc9eef2a64d046f2c7ea
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  amazonka-test: ==1.4.0.*
  amazonka-core: ==1.4.0.*
  tasty-hunit: -any
  tasty: -any
  amazonka-cloudwatch-events: ==1.4.0.*
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Amazon CloudWatch Events SDK.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  amazonka-core: ==1.4.0.*
all-versions:
- '1.4.0'
author: Brendan Hay
latest: '1.4.0'
description-type: markdown
description: ! "# Amazon CloudWatch Events SDK\n\n* [Version](#version)\n* [Description](#description)\n*
  [Contribute](#contribute)\n* [Licence](#licence)\n\n\n## Version\n\n`1.4.0`\n\n\n##
  Description\n\nAmazon CloudWatch Events helps you to respond to state changes in
  your\nAWS resources. When your resources change state they automatically send\nevents
  into an event stream. You can create rules that match selected\nevents in the stream
  and route them to targets to take action. You can\nalso use rules to take action
  on a pre-determined schedule. For example,\nyou can configure rules to:\n\n-   Automatically
  invoke an AWS Lambda function to update DNS entries\n    when an event notifies
  you that Amazon EC2 instance enters the\n    running state.\n-   Direct specific
  API records from CloudTrail to an Amazon Kinesis\n    stream for detailed analysis
  of potential security or availability\n    risks.\n-   Periodically invoke a built-in
  target to create a snapshot of an\n    Amazon EBS volume.\n\nFor more information
  about Amazon CloudWatch Events features, see the\n<http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide
  Amazon CloudWatch Developer Guide>.\n\nDocumentation is available via [Hackage](http://hackage.haskell.org/package/amazonka-cloudwatch-events)\nand
  the [AWS API Reference](https://aws.amazon.com/documentation/).\n\nThe types from
  this library are intended to be used with [amazonka](http://hackage.haskell.org/package/amazonka),\nwhich
  provides mechanisms for specifying AuthN/AuthZ information and sending requests.\n\nUse
  of lenses is required for constructing and manipulating types.\nThis is due to the
  amount of nesting of AWS types and transparency regarding\nde/serialisation into
  more palatable Haskell values.\nThe provided lenses should be compatible with any
  of the major lens libraries\n[lens](http://hackage.haskell.org/package/lens) or
  [lens-family-core](http://hackage.haskell.org/package/lens-family-core).\n\n## Contribute\n\nFor
  any problems, comments, or feedback please create an issue [here on GitHub](https://github.com/brendanhay/amazonka/issues).\n\n>
  _Note:_ this library is an auto-generated Haskell package. Please see `amazonka-gen`
  for more information.\n\n\n## Licence\n\n`amazonka-cloudwatch-events` is released
  under the [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/).\n\nParts
  of the code are derived from AWS service descriptions, licensed under Apache 2.0.\nSource
  files subject to this contain an additional licensing clause in their header.\n"
license-name: OtherLicense
