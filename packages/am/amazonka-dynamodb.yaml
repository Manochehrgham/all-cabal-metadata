homepage: https://github.com/brendanhay/amazonka
changelog-type: ''
hash: 166ab44e153f65a587fba69b993dbd8c7e269e5e2f55dde524845b7bca41a76a
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  lens: -any
  amazonka-dynamodb: ==1.0.1
  amazonka-test: ==1.0.1
  amazonka-core: ==1.0.1
  tasty-hunit: -any
  tasty: -any
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Amazon DynamoDB SDK.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  amazonka-core: ==1.0.1.*
all-versions:
- '0.0.0'
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.0.6'
- '0.0.7'
- '0.0.8'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '1.0.0'
- '1.0.1'
author: Brendan Hay
latest: '1.0.1'
description-type: markdown
description: ! "# Amazon DynamoDB SDK\n\n* [Version](#version)\n* [Description](#description)\n*
  [Contribute](#contribute)\n* [Licence](#licence)\n\n\n## Version\n\n`1.0.1`\n\n\n##
  Description\n\nAmazon DynamoDB\n\n__Overview__\n\nThis is the Amazon DynamoDB API
  Reference. This guide provides\ndescriptions and samples of the low-level DynamoDB
  API. For information\nabout DynamoDB application development, see the\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/
  Amazon DynamoDB Developer Guide>.\n\nInstead of making the requests to the low-level
  DynamoDB API directly\nfrom your application, we recommend that you use the AWS
  Software\nDevelopment Kits (SDKs). The easy-to-use libraries in the AWS SDKs make\nit
  unnecessary to call the low-level DynamoDB API directly from your\napplication.
  The libraries take care of request authentication,\nserialization, and connection
  management. For more information, see\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/UsingAWSSDK.html
  Using the AWS SDKs with DynamoDB>\nin the /Amazon DynamoDB Developer Guide/.\n\nIf
  you decide to code against the low-level DynamoDB API directly, you\nwill need to
  write the necessary code to authenticate your requests. For\nmore information on
  signing your requests, see\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/API.html
  Using the DynamoDB API>\nin the /Amazon DynamoDB Developer Guide/.\n\nThe following
  are short descriptions of each low-level API action,\norganized by function.\n\n__Managing
  Tables__\n\n-   /CreateTable/ - Creates a table with user-specified provisioned\n
  \   throughput settings. You must designate one attribute as the hash\n    primary
  key for the table; you can optionally designate a second\n    attribute as the range
  primary key. DynamoDB creates indexes on\n    these key attributes for fast data
  access. Optionally, you can\n    create one or more secondary indexes, which provide
  fast data access\n    using non-key attributes.\n\n-   /DescribeTable/ - Returns
  metadata for a table, such as table size,\n    status, and index information.\n\n-
  \  /UpdateTable/ - Modifies the provisioned throughput settings for a\n    table.
  Optionally, you can modify the provisioned throughput\n    settings for global secondary
  indexes on the table.\n\n-   /ListTables/ - Returns a list of all tables associated
  with the\n    current AWS account and endpoint.\n\n-   /DeleteTable/ - Deletes a
  table and all of its indexes.\n\nFor conceptual information about managing tables,
  see\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html
  Working with Tables>\nin the /Amazon DynamoDB Developer Guide/.\n\n__Reading Data__\n\n-
  \  /GetItem/ - Returns a set of attributes for the item that has a\n    given primary
  key. By default, /GetItem/ performs an eventually\n    consistent read; however,
  applications can request a strongly\n    consistent read instead.\n\n-   /BatchGetItem/
  - Performs multiple /GetItem/ requests for data items\n    using their primary keys,
  from one table or multiple tables. The\n    response from /BatchGetItem/ has a size
  limit of 16 MB and returns a\n    maximum of 100 items. Both eventually consistent
  and strongly\n    consistent reads can be used.\n\n-   /Query/ - Returns one or
  more items from a table or a secondary\n    index. You must provide a specific hash
  key value. You can narrow\n    the scope of the query using comparison operators
  against a range\n    key value, or on the index key. /Query/ supports either eventual
  or\n    strong consistency. A single response has a size limit of 1 MB.\n\n-   /Scan/
  - Reads every item in a table; the result set is eventually\n    consistent. You
  can limit the number of items returned by filtering\n    the data attributes, using
  conditional expressions. /Scan/ can be\n    used to enable ad-hoc querying of a
  table against non-key\n    attributes; however, since this is a full table scan
  without using\n    an index, /Scan/ should not be used for any application query
  use\n    case that requires predictable performance.\n\nFor conceptual information
  about reading data, see\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html
  Working with Items>\nand\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html
  Query and Scan Operations>\nin the /Amazon DynamoDB Developer Guide/.\n\n__Modifying
  Data__\n\n-   /PutItem/ - Creates a new item, or replaces an existing item with
  a\n    new item (including all the attributes). By default, if an item in\n    the
  table already exists with the same primary key, the new item\n    completely replaces
  the existing item. You can use conditional\n    operators to replace an item only
  if its attribute values match\n    certain conditions, or to insert a new item only
  if that item\n    doesn\\'t already exist.\n\n-   /UpdateItem/ - Modifies the attributes
  of an existing item. You can\n    also use conditional operators to perform an update
  only if the\n    item\\'s attribute values match certain conditions.\n\n-   /DeleteItem/
  - Deletes an item in a table by primary key. You can\n    use conditional operators
  to perform a delete an item only if the\n    item\\'s attribute values match certain
  conditions.\n\n-   /BatchWriteItem/ - Performs multiple /PutItem/ and /DeleteItem/\n
  \   requests across multiple tables in a single request. A failure of\n    any request(s)
  in the batch will not cause the entire\n    /BatchWriteItem/ operation to fail.
  Supports batches of up to 25\n    items to put or delete, with a maximum total request
  size of 16 MB.\n\nFor conceptual information about modifying data, see\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html
  Working with Items>\nand\n<http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html
  Query and Scan Operations>\nin the /Amazon DynamoDB Developer Guide/.\n\nDocumentation
  is available via [Hackage](http://hackage.haskell.org/package/amazonka-dynamodb)\nand
  the [AWS API Reference](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/Welcome.html).\n\nThe
  types from this library are intended to be used with [amazonka](http://hackage.haskell.org/package/amazonka),\nwhich
  provides mechanisms for specifying AuthN/AuthZ information and sending requests.\n\nUse
  of lenses is required for constructing and manipulating types.\nThis is due to the
  amount of nesting of AWS types and transparency regarding\nde/serialisation into
  more palatable Haskell values.\nThe provided lenses should be compatible with any
  of the major lens libraries\n[lens](http://hackage.haskell.org/package/lens) or
  [lens-family-core](http://hackage.haskell.org/package/lens-family-core).\n\n## Contribute\n\nFor
  any problems, comments, or feedback please create an issue [here on GitHub](https://github.com/brendanhay/amazonka/issues).\n\n>
  _Note:_ this library is an auto-generated Haskell package. Please see `amazonka-gen`
  for more information.\n\n\n## Licence\n\n`amazonka-dynamodb` is released under the
  [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/).\n\nParts of the
  code are derived from AWS service descriptions, licensed under Apache 2.0.\nSource
  files subject to this contain an additional licensing clause in their header.\n"
license-name: OtherLicense
