homepage: https://github.com/brendanhay/amazonka
changelog-type: ''
hash: f823f68e914ad29ac1ab4fb341a006fd8aed91f439a75aa1235b8d42cc98f336
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  amazonka-test: ==1.4.4.*
  amazonka-core: ==1.4.4.*
  tasty-hunit: -any
  tasty: -any
  amazonka-discovery: ==1.4.4.*
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Amazon Application Discovery Service SDK.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  amazonka-core: ==1.4.4.*
all-versions:
- '1.4.2'
- '1.4.3'
- '1.4.4'
author: Brendan Hay
latest: '1.4.4'
description-type: markdown
description: ! "# Amazon Application Discovery Service SDK\n\n* [Version](#version)\n*
  [Description](#description)\n* [Contribute](#contribute)\n* [Licence](#licence)\n\n\n##
  Version\n\n`1.4.4`\n\n\n## Description\n\nThe AWS Application Discovery Service
  helps Systems Integrators quickly and reliably plan application migration projects
  by automatically identifying applications running in on-premises data centers, their
  associated dependencies, and their performance profile.\n\nPlanning data center
  migrations can involve thousands of workloads that are often deeply interdependent.
  Application discovery and dependency mapping are important early first steps in
  the migration process, but difficult to perform at scale due to the lack of automated
  tools.\n\nThe AWS Application Discovery Service automatically collects configuration
  and usage data from servers to develop a list of applications, how they perform,
  and how they are interdependent. This information is securely retained in an AWS
  Application Discovery Service database which you can export as a CSV file into your
  preferred visualization tool or cloud migration solution to help reduce the complexity
  and time in planning your cloud migration.\n\nThe Application Discovery Service
  is currently available for preview. Only customers who are engaged with <https://aws.amazon.com/professional-services/
  AWS Professional Services> or a certified AWS partner can use the service. To see
  the list of certified partners and request access to the Application Discovery Service,
  complete the following <http://aws.amazon.com/application-discovery/preview/ preview
  form>.\n\nThis API reference provides descriptions, syntax, and usage examples for
  each of the actions and data types for the Discovery Service. The topic for each
  action shows the API request parameters and the response. Alternatively, you can
  use one of the AWS SDKs to access an API that is tailored to the programming language
  or platform that you\\'re using. For more information, see <http://aws.amazon.com/tools/#SDKs
  AWS SDKs>.\n\nThis guide is intended for use with the <http://docs.aws.amazon.com/application-discovery/latest/userguide/what-is-appdiscovery.html
  AWS Discovery Service User Guide>.\n\nThe following are short descriptions of each
  API action, organized by function.\n\n__Managing AWS Agents Using the Application
  Discovery Service__\n\nAn AWS agent is software that you install on on-premises
  servers and virtual machines that are targeted for discovery and migration. Agents
  run on Linux and Windows Server and collect server configuration and activity information
  about your applications and infrastructure. Specifically, agents collect the following
  information and send it to the Application Discovery Service using Secure Sockets
  Layer (SSL) encryption:\n\n-   User information (user name, home directory)\n\n-
  \  Group information (name)\n\n-   List of installed packages\n\n-   List of kernel
  modules\n\n-   All create and stop process events\n\n-   DNS queries\n\n-   NIC
  information\n\n-   TCP\\/UDP process listening ports\n\n-   TCPV4\\/V6 connections\n\n-
  \  Operating system information\n\n-   System performance\n\n-   Process performance\n\nThe
  Application Discovery Service API includes the following actions to manage AWS agents:\n\n-
  \  /StartDataCollectionByAgentIds/: Instructs the specified agents to start collecting
  data. The Application Discovery Service takes several minutes to receive and process
  data after you initiate data collection.\n\n-   /StopDataCollectionByAgentIds/:
  Instructs the specified agents to stop collecting data.\n\n-   /DescribeAgents/:
  Lists AWS agents by ID or lists all agents associated with your user account if
  you did not specify an agent ID. The output includes agent IDs, IP addresses, media
  access control (MAC) addresses, agent health, host name where the agent resides,
  and the version number of each agent.\n\n__Querying Configuration Items__\n\nA /configuration
  item/ is an IT asset that was discovered in your data center by an AWS agent. When
  you use the Application Discovery Service, you can specify filters and query specific
  configuration items. The service supports Server, Process, and Connection configuration
  items. This means you can specify a value for the following keys and query your
  IT assets:\n\n__Server__\n\n-   server.HostName\n\n-   server.osName\n\n-   server.osVersion\n\n-
  \  server.configurationId\n\n-   server.agentId\n\n__Process__\n\n-   process.name\n\n-
  \  process.CommandLine\n\n-   process.configurationId\n\n-   server.hostName\n\n-
  \  server.osName\n\n-   server.osVersion\n\n-   server.configurationId\n\n-   server.agentId\n\n__Connection__\n\n-
  \  connection.sourceIp\n\n-   connection.sourcePort\n\n-   connection.destinationIp\n\n-
  \  connection.destinationPort\n\n-   sourceProcess.configurationId\n\n-   sourceProcess.commandLine\n\n-
  \  sourceProcess.name\n\n-   destinationProcessId.configurationId\n\n-   destinationProcess.commandLine\n\n-
  \  destinationProcess.name\n\n-   sourceServer.configurationId\n\n-   sourceServer.hostName\n\n-
  \  sourceServer.osName\n\n-   sourceServer.osVersion\n\n-   destinationServer.configurationId\n\n-
  \  destinationServer.hostName\n\n-   destinationServer.osName\n\n-   destinationServer.osVersion\n\nThe
  Application Discovery Service includes the following actions for querying configuration
  items.\n\n-   /DescribeConfigurations/: Retrieves a list of attributes for a specific
  configuration ID. For example, the output for a /server/ configuration item includes
  a list of attributes about the server, including host name, operating system, number
  of network cards, etc.\n\n-   /ListConfigurations/: Retrieves a list of configuration
  items according to the criteria you specify in a filter. The filter criteria identify
  relationship requirements. For example, you can specify filter criteria of process.name
  with values of /nginx/ and /apache/.\n\n__Tagging Discovered Configuration Items__\n\nYou
  can tag discovered configuration items. Tags are metadata that help you categorize
  IT assets in your data center. Tags use a /key/-/value/ format. For example, \n
  \   @\n    {\\\"key\\\": \\\"serverType\\\", \\\"value\\\": \\\"webServer\\\"}\n
  \   @\n    .\n\n-   /CreateTags/: Creates one or more tags for a configuration items.\n\n-
  \  /DescribeTags/: Retrieves a list of configuration items that are tagged with
  a specific tag. /Or/, retrieves a list of all tags assigned to a specific configuration
  item.\n\n-   /DeleteTags/: Deletes the association between a configuration item
  and one or more tags.\n\n__Exporting Data__\n\nYou can export data as a CSV file
  to an Amazon S3 bucket or into your preferred visualization tool or cloud migration
  solution to help reduce the complexity and time in planning your cloud migration.\n\n-
  \  /ExportConfigurations/: Exports all discovered configuration data to an Amazon
  S3 bucket. Data includes tags and tag associations, processes, connections, servers,
  and system performance. This API returns an export ID which you can query using
  the GetExportStatus API.\n\n-   /DescribeExportConfigurations/: Gets the status
  of the data export. When the export is complete, the service returns an Amazon S3
  URL where you can download CSV files that include the data.\n\nDocumentation is
  available via [Hackage](http://hackage.haskell.org/package/amazonka-discovery)\nand
  the [AWS API Reference](https://aws.amazon.com/documentation/).\n\nThe types from
  this library are intended to be used with [amazonka](http://hackage.haskell.org/package/amazonka),\nwhich
  provides mechanisms for specifying AuthN/AuthZ information and sending requests.\n\nUse
  of lenses is required for constructing and manipulating types.\nThis is due to the
  amount of nesting of AWS types and transparency regarding\nde/serialisation into
  more palatable Haskell values.\nThe provided lenses should be compatible with any
  of the major lens libraries\n[lens](http://hackage.haskell.org/package/lens) or
  [lens-family-core](http://hackage.haskell.org/package/lens-family-core).\n\n## Contribute\n\nFor
  any problems, comments, or feedback please create an issue [here on GitHub](https://github.com/brendanhay/amazonka/issues).\n\n>
  _Note:_ this library is an auto-generated Haskell package. Please see `amazonka-gen`
  for more information.\n\n\n## Licence\n\n`amazonka-discovery` is released under
  the [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/).\n\nParts
  of the code are derived from AWS service descriptions, licensed under Apache 2.0.\nSource
  files subject to this contain an additional licensing clause in their header.\n"
license-name: OtherLicense
