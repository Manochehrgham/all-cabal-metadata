homepage: https://github.com/brendanhay/amazonka
changelog-type: ''
hash: 6564eee5a4614165e998b89d187aff85a5e19a6855adab47771be4839848fb95
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  amazonka-test: ==1.4.2.*
  amazonka-core: ==1.4.2.*
  tasty-hunit: -any
  tasty: -any
  amazonka-discovery: ==1.4.2.*
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Amazon Application Discovery Service SDK.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  amazonka-core: ==1.4.2.*
all-versions:
- '1.4.2'
author: Brendan Hay
latest: '1.4.2'
description-type: markdown
description: ! "# Amazon Application Discovery Service SDK\n\n* [Version](#version)\n*
  [Description](#description)\n* [Contribute](#contribute)\n* [Licence](#licence)\n\n\n##
  Version\n\n`1.4.2`\n\n\n## Description\n\nThe AWS Application Discovery Service
  helps Systems Integrators quickly\nand reliably plan application migration projects
  by automatically\nidentifying applications running in on-premises data centers,
  their\nassociated dependencies, and their performance profile.\n\nPlanning data
  center migrations can involve thousands of workloads that\nare often deeply interdependent.
  Application discovery and dependency\nmapping are important early first steps in
  the migration process, but\ndifficult to perform at scale due to the lack of automated
  tools.\n\nThe AWS Application Discovery Service automatically collects\nconfiguration
  and usage data from servers to develop a list of\napplications, how they perform,
  and how they are interdependent. This\ninformation is securely retained in an AWS
  Application Discovery Service\ndatabase which you can export as a CSV file into
  your preferred\nvisualization tool or cloud migration solution to help reduce the\ncomplexity
  and time in planning your cloud migration.\n\nThe Application Discovery Service
  is currently available for preview.\nOnly customers who are engaged with\n<https://aws.amazon.com/professional-services/
  AWS Professional Services>\nor a certified AWS partner can use the service. To see
  the list of\ncertified partners and request access to the Application Discovery\nService,
  complete the following\n<http://aws.amazon.com/application-discovery/preview/ preview
  form>.\n\nThis API reference provides descriptions, syntax, and usage examples for\neach
  of the actions and data types for the Discovery Service. The topic\nfor each action
  shows the API request parameters and the response.\nAlternatively, you can use one
  of the AWS SDKs to access an API that is\ntailored to the programming language or
  platform that you\\'re using. For\nmore information, see <http://aws.amazon.com/tools/#SDKs
  AWS SDKs>.\n\nThis guide is intended for use with the\n<http://docs.aws.amazon.com/application-discovery/latest/userguide/what-is-appdiscovery.html
  AWS Discovery Service User Guide>.\n\nThe following are short descriptions of each
  API action, organized by\nfunction.\n\n__Managing AWS Agents Using the Application
  Discovery Service__\n\nAn AWS agent is software that you install on on-premises
  servers and\nvirtual machines that are targeted for discovery and migration. Agents\nrun
  on Linux and Windows Server and collect server configuration and\nactivity information
  about your applications and infrastructure.\nSpecifically, agents collect the following
  information and send it to\nthe Application Discovery Service using Secure Sockets
  Layer (SSL)\nencryption:\n\n-   User information (user name, home directory)\n\n-
  \  Group information (name)\n\n-   List of installed packages\n\n-   List of kernel
  modules\n\n-   All create and stop process events\n\n-   DNS queries\n\n-   NIC
  information\n\n-   TCP\\/UDP process listening ports\n\n-   TCPV4\\/V6 connections\n\n-
  \  Operating system information\n\n-   System performance\n\n-   Process performance\n\nThe
  Application Discovery Service API includes the following actions to\nmanage AWS
  agents:\n\n-   /StartDataCollectionByAgentIds/: Instructs the specified agents to\n
  \   start collecting data. The Application Discovery Service takes\n    several
  minutes to receive and process data after you initiate data\n    collection.\n\n-
  \  /StopDataCollectionByAgentIds/: Instructs the specified agents to\n    stop collecting
  data.\n\n-   /DescribeAgents/: Lists AWS agents by ID or lists all agents\n    associated
  with your user account if you did not specify an agent\n    ID. The output includes
  agent IDs, IP addresses, media access\n    control (MAC) addresses, agent health,
  host name where the agent\n    resides, and the version number of each agent.\n\n__Querying
  Configuration Items__\n\nA /configuration item/ is an IT asset that was discovered
  in your data\ncenter by an AWS agent. When you use the Application Discovery Service,\nyou
  can specify filters and query specific configuration items. The\nservice supports
  Server, Process, and Connection configuration items.\nThis means you can specify
  a value for the following keys and query your\nIT assets:\n\n__Server__\n\n-   server.HostName\n\n-
  \  server.osName\n\n-   server.osVersion\n\n-   server.configurationId\n\n-   server.agentId\n\n__Process__\n\n-
  \  process.name\n\n-   process.CommandLine\n\n-   process.configurationId\n\n-   server.hostName\n\n-
  \  server.osName\n\n-   server.osVersion\n\n-   server.configurationId\n\n-   server.agentId\n\n__Connection__\n\n-
  \  connection.sourceIp\n\n-   connection.sourcePort\n\n-   connection.destinationIp\n\n-
  \  connection.destinationPort\n\n-   sourceProcess.configurationId\n\n-   sourceProcess.commandLine\n\n-
  \  sourceProcess.name\n\n-   destinationProcessId.configurationId\n\n-   destinationProcess.commandLine\n\n-
  \  destinationProcess.name\n\n-   sourceServer.configurationId\n\n-   sourceServer.hostName\n\n-
  \  sourceServer.osName\n\n-   sourceServer.osVersion\n\n-   destinationServer.configurationId\n\n-
  \  destinationServer.hostName\n\n-   destinationServer.osName\n\n-   destinationServer.osVersion\n\nThe
  Application Discovery Service includes the following actions for\nquerying configuration
  items.\n\n-   /DescribeConfigurations/: Retrieves a list of attributes for a\n    specific
  configuration ID. For example, the output for a /server/\n    configuration item
  includes a list of attributes about the server,\n    including host name, operating
  system, number of network cards, etc.\n\n-   /ListConfigurations/: Retrieves a list
  of configuration items\n    according to the criteria you specify in a filter. The
  filter\n    criteria identify relationship requirements. For example, you can\n
  \   specify filter criteria of process.name with values of /nginx/ and\n    /apache/.\n\n__Tagging
  Discovered Configuration Items__\n\nYou can tag discovered configuration items.
  Tags are metadata that help\nyou categorize IT assets in your data center. Tags
  use a /key/-/value/\nformat. For example,\n@{\\\"key\\\": \\\"serverType\\\", \\\"value\\\":
  \\\"webServer\\\"}@.\n\n-   /CreateTags/: Creates one or more tags for a configuration
  items.\n\n-   /DescribeTags/: Retrieves a list of configuration items that are\n
  \   tagged with a specific tag. /Or/, retrieves a list of all tags\n    assigned
  to a specific configuration item.\n\n-   /DeleteTags/: Deletes the association between
  a configuration item\n    and one or more tags.\n\n__Exporting Data__\n\nYou can
  export data as a CSV file to an Amazon S3 bucket or into your\npreferred visualization
  tool or cloud migration solution to help reduce\nthe complexity and time in planning
  your cloud migration.\n\n-   /ExportConfigurations/: Exports all discovered configuration
  data to\n    an Amazon S3 bucket. Data includes tags and tag associations,\n    processes,
  connections, servers, and system performance. This API\n    returns an export ID
  which you can query using the GetExportStatus\n    API.\n\n-   /DescribeExportConfigurations/:
  Gets the status of the data export.\n    When the export is complete, the service
  returns an Amazon S3 URL\n    where you can download CSV files that include the
  data.\n\nDocumentation is available via [Hackage](http://hackage.haskell.org/package/amazonka-discovery)\nand
  the [AWS API Reference](https://aws.amazon.com/documentation/).\n\nThe types from
  this library are intended to be used with [amazonka](http://hackage.haskell.org/package/amazonka),\nwhich
  provides mechanisms for specifying AuthN/AuthZ information and sending requests.\n\nUse
  of lenses is required for constructing and manipulating types.\nThis is due to the
  amount of nesting of AWS types and transparency regarding\nde/serialisation into
  more palatable Haskell values.\nThe provided lenses should be compatible with any
  of the major lens libraries\n[lens](http://hackage.haskell.org/package/lens) or
  [lens-family-core](http://hackage.haskell.org/package/lens-family-core).\n\n## Contribute\n\nFor
  any problems, comments, or feedback please create an issue [here on GitHub](https://github.com/brendanhay/amazonka/issues).\n\n>
  _Note:_ this library is an auto-generated Haskell package. Please see `amazonka-gen`
  for more information.\n\n\n## Licence\n\n`amazonka-discovery` is released under
  the [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/).\n\nParts
  of the code are derived from AWS service descriptions, licensed under Apache 2.0.\nSource
  files subject to this contain an additional licensing clause in their header.\n"
license-name: OtherLicense
