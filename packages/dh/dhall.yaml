homepage: ''
changelog-type: markdown
hash: db3ef321779914424384f8de57f5ebd3d1a376df783aada41ef8c393ee7da032
test-bench-deps:
  base: ! '>=4 && <5'
  dhall: -any
  text: ! '>=0.11.1.0 && <1.3'
  tasty-hunit: ! '>=0.9.2 && <0.10'
  tasty: ! '>=0.11.2 && <0.12'
  vector: ! '>=0.11.0.0 && <0.12'
maintainer: Gabriel439@gmail.com
synopsis: A configuration language guaranteed to terminate
changelog: ! "1.5.0\n\n* BREAKING CHANGE: Add list concatenation operator: `(#)`\n
  \   * This is a breaking change because it adds a new constructor to the `Expr`\n
  \     type which breaks exhaustive pattern matches\n* BREAKING CHANGE: Add `Interpret`
  support for lazy `Text`\n    * This is a breaking change because it renames `text`
  to `strictText`\n* Add `Interpret` instance for decoding (a limited subset of) Dhall
  functions\n* Dhall no longer requires Template Haskell to compile\n    * This helps
  with cross-compilation\n* Add `rawInput` utility for decoding a Haskell value from
  the `Expr` type\n* Add `loadWith`/`normalizeWith` utilities for normalizing/importing
  modules\n  with a custom context\n* Export `Type` constructor\n\n1.4.2\n\n* Fix
  missing `Prelude` files in package archive uploaded to Hackage\n\n1.4.1\n\n* Fix
  missing `tests/Tutorial.hs` module in package archive uploaded to Hackage\n\n1.4.0\n\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: You can now supply custom headers for\n
  \ URL imports with the new `using` keyword\n    * This is a breaking change to the
  language because this adds a new reserved\n      `using` keyword\n    * This is
  a breaking change to the API because this adds a new field to the\n      `URL` constructor
  to store optional custom headers\n* BUG FIX: `:` is no longer a disallowed path
  character\n    * This was breaking URL imports with a port\n* BUG FIX: If you import
  a home-anchored path (i.e. `~/foo`) and that imports a\n  relative path (like `./bar`),
  then the canonical path of the relative import\n  should be home-anchored (i.e.
  `~/bar`).  However, there was a bug that made\n  lose the home anchor (i.e. `./foo/bar`),
  which this release fixes\n  likely fail due to no longer being home-anchored (i.e.
  `./foob\n* Add support for string interpolation\n* `merge` no longer requires a
  type annotation if you are merging at least one\n  alternative\n* Expanded Prelude\n
  \   * `./Prelude/Optional/all`\n    * `./Prelude/Optional/any`\n    * `./Prelude/Optional/filter`\n
  \   * `./Prelude/Optional/length`\n    * `./Prelude/Optional/null`\n    * `./Prelude/Text/concatMap`\n
  \   * `./Prelude/Text/concatMapSep`\n    * `./Prelude/Text/concatSep`\n* Rearrange
  detailed error messages to put summary information at the bottom of\n  the message\n\n1.3.0\n\n*
  BREAKING CHANGE TO THE API: Add support for new primitives, specifically:\n    *
  `(//)` - Right-biased and shallow record merge\n    * `Optional/build` (now a built-in
  in order to support build/fold fusion)\n    * `Natural/show`\n    * `Integer/show`\n
  \   * `Double/show`\n    * `Natural/toInteger`\n    * These all add new constructors
  to the `Expr` type, which would break\n      exhaustive pattern matches\n* BREAKING
  CHANGE TO THE LANGUAGE: Imported paths and URLs no longer support\n  the characters:
  \"()[]{}<>:\"\n    * This reduces the number of cases where you have to add a space
  after\n      imports\n    * Note that this does not exclude the `:` in the URL scheme
  (i.e. `http://`)\n* Increase connection timeout for imports\n* Variable names now
  allow the `-` character for all but the first character\n* You can now escape identifiers
  with backticks\n    * This lets you name identifiers so that they don't conflict
  with reserved\n      key words\n    * This is most useful when converting Dhall
  to other file formats (like\n      JSON) where you might need to emit a field that
  conflicts with one of\n      Dhall's reserved keywords\n* New `--version` flag for
  the `dhall` executable\n\n1.2.0\n\n* BREAKING CHANGE: Add support for customizing
  derived `Interpret` instances\n    * This is a breaking change to the Dhall library
  API since this changes the\n      signature of the `Interpret` class by replacing
  the `auto` method with a\n      more general `autoWith` method.  This `autoWith`
  now takes an\n      `InterpretOptions` argument that lets you customize derived
  field and\n      constuctor names\n    * In practice user programs that use the
  common path will be unaffected by\n      this change\n    * This is not a breaking
  change to the Dhall language\n* BREAKING CHANGE: Type annotations now bind more
  tightly than lambda\n  abstraction\n    * This is a breaking change to the Dhall
  language.  An expression like this:\n\n      ```\n      λ(x : A) → y : B\n      ```\n\n
  \     ... used to parenthesized implicitly as:\n\n      ```\n      (λ(x : A) → y)
  : T\n      ```\n\n      ... but is now parenthesized implicitly as:\n\n      ```\n
  \     λ(x : A) → (y : T)\n      ```\n\n      This is now consistent with Haskell's
  precedence and also consistent with\n      the precedence of `List` and `Optional`
  type annotations\n\n    * This change affects programs with an expression like this:\n\n
  \     ```\n      -- Assuming that `y : B`\n      λ(x : A) → y : A → B\n      ```\n\n
  \     The above program would type-check before this change but not type-check\n
  \     after this change.  You would you need to fix the above program by either\n
  \     changing the type signature to annotate just the type of `y` like this:\n\n
  \     ```\n      λ(x : A) → y : B\n      ```\n\n      ... or by adding explicit
  parentheses like this:\n\n      ```\n      (λ(x : A) → y) : A → B\n      ```\n\n
  \   * This is not a breaking change to the Dhall library API\n* BREAKING CHANGE:
  Add support for importing a path's contents as raw `Text` by\n  adding `as Text`
  after the import\n    * This is a breaking change to the Dhall language\n    * This
  is technically a breaking change, but is extremely unlikely to affect\n      you
  program.  This only changes the behavior of old programs that had an\n      expression
  of the form:\n\n      ```\n      /some/imported/function as Text\n      ```\n\n
  \     ... where `/some/imported/function` is an imported function being applied\n
  \     to two arguments, the first of which is a bound variable named `as` and\n
  \     the second of which is the type `Text`\n    * This is not a breaking change
  to the Dhall library API\n* BREAKING CHANGE: Add support for importing environment
  variables using\n  `env:VAR` syntax\n    * This is a breaking change to the Dhall
  library API since it adds a new\n      `Path` constructor\n    * This also technically
  a breaking change to the Dhall language but\n      extremely unlikely to affect
  your program.  This only changes the behavior\n      of old programs that had an
  expression of the form:\n\n      ```\n      env:VAR\n      ```\n\n      ... where
  `env` was the name of a bound variable and `:VAR` was a type\n      annotation without
  spaces around the type annotation operator\n\n      After this change the program
  would be interpreted as an import of the\n      contents for the environment variable
  named `VAR`\n* BREAKING CHANGE: Support importing paths relative to home directory
  using\n  `~/some/path` syntax\n    * This is a breaking change to the Dhall library
  API since it adds a new\n      field to the `File` constructor indicating whether
  or not the imported\n      path is relative to the home directory\n    * This is
  not a breaking change to the Dhall language and the new syntax\n      does not override
  any old syntax\n* Permit trailing commas and bars in record/union syntax\n* Improve
  location information for parsing errors\n\n1.1.0\n\n* BREAKING CHANGE: Non-empty
  lists no longer require a type annotation\n    * This is a breaking change to the
  Haskell library, not the Dhall language\n    * This change does not break existing
  Dhall programs\n    * The `Expr` type was modified in a non-backwards-compatible
  way\n* Add new `exprA` parser\n* Add new `InvalidType` exception if `input` fails
  on an invalid `Type`\n* Improve documentation and tutorial\n\n1.0.2\n\n* Add support
  for Nix-style \"double single-quote\" multi-line string literals\n* Add `isNormalized`\n*
  Improve documentation and tutorial\n* Build against wider range of `http-client`
  versions\n\n1.0.1\n\n* Initial release\n\n1.0.0\n\n* Accidental premature upload
  to Hackage.  This release was blacklisted\n"
basic-deps:
  http-client: ! '>=0.4.30 && <0.6'
  bytestring: <0.11
  ansi-wl-pprint: <0.7
  optparse-generic: ! '>=1.1.1 && <1.2'
  trifecta: ! '>=1.6 && <1.8'
  case-insensitive: <1.3
  base: ! '>=4.8.0.0 && <5'
  dhall: -any
  unordered-containers: ! '>=0.1.3.0 && <0.3'
  text: ! '>=0.11.1.0 && <1.3'
  system-fileio: ! '>=0.2.1 && <0.4'
  containers: ! '>=0.5.0.0 && <0.6'
  parsers: ! '>=0.12.4 && <0.13'
  lens: ! '>=2.4 && <4.16'
  charset: <0.4
  http-client-tls: ! '>=0.2.0 && <0.4'
  contravariant: <1.5
  transformers: ! '>=0.2.0.0 && <0.6'
  text-format: <0.4
  system-filepath: ! '>=0.3.1 && <0.5'
  vector: ! '>=0.11.0.0 && <0.13'
all-versions:
- '1.0.1'
- '1.0.2'
- '1.1.0'
- '1.2.0'
- '1.3.0'
- '1.4.2'
- '1.5.0'
author: Gabriel Gonzalez
latest: '1.5.0'
description-type: haddock
description: ! 'Dhall is an explicitly typed configuration language that is not Turing

  complete.  Despite being Turing incomplete, Dhall is a real programming

  language with a type-checker and evaluator.


  Use this library to parse, type-check, evaluate, and pretty-print the Dhall

  configuration language.  This package also includes an executable which

  type-checks a Dhall file and reduces the file to a fully evaluated normal

  form.


  Read "Dhall.Tutorial" to learn how to use this library'
license-name: BSD3
