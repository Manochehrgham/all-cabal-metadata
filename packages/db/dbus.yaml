changelog-type: ''
hash: 67ddf49fbaa1867c947968be4c7ebd9cb9d7318cae093044b4b6bfa2b9d6d262
test-bench-deps:
  cereal: ! '>=0.3.4 && <0.5'
  bytestring: ! '>=0.9'
  unix: ! '>=2.2'
  base: ! '>4.0 && <5.0'
  text: ! '>=0.11.1.5'
  chell-quickcheck: ! '>=0.2 && <0.3'
  filepath: -any
  criterion: ! '>=1.0 && <2.0'
  process: ! '>=1.0 && <2.0'
  network: ! '>=2.2.3'
  parsec: ! '>=2.0 && <3.2'
  chell: ! '>=0.4 && <0.5'
  libxml-sax: ! '>=0.7 && <0.8'
  containers: ! '>=0.1 && <0.6'
  xml-types: ! '>=0.3 && <0.4'
  dbus: -any
  transformers: ! '>=0.2'
  random: ! '>=1.0 && <2.0'
  deepseq: -any
  QuickCheck: ! '>=2.4'
  vector: ! '>=0.7 && <0.11'
  directory: -any
synopsis: A client library for the D-Bus IPC system.
changelog: ''
basic-deps:
  cereal: ! '>=0.3.4 && <0.5'
  bytestring: ! '>=0.9'
  unix: ! '>=2.2'
  base: ! '>=4.0 && <5.0'
  text: ! '>=0.11.1.5'
  network: ! '>=2.2.3'
  parsec: ! '>=2.0 && <3.2'
  libxml-sax: ! '>=0.7 && <0.8'
  containers: ! '>=0.1 && <0.6'
  xml-types: ! '>=0.3 && <0.4'
  transformers: ! '>=0.2'
  random: ! '>=1.0 && <2.0'
  vector: ! '>=0.7 && <0.11'
all-versions:
- '0.10'
- '0.10.1'
- '0.10.2'
- '0.10.3'
- '0.10.4'
- '0.10.5'
- '0.10.6'
- '0.10.7'
- '0.10.8'
- '0.10.9'
- '0.10.9.1'
- '0.10.9.2'
- '0.10.10'
latest: '0.10.10'
description-type: haddock
description: ! 'D-Bus is a simple, message-based protocol for inter-process

  communication, which allows applications to interact with other parts of

  the machine and the user''s session using remote procedure calls.


  D-Bus is a essential part of the modern Linux desktop, where it replaces

  earlier protocols such as CORBA and DCOP.


  This library is an implementation of the D-Bus protocol in Haskell. It

  can be used to add D-Bus support to Haskell applications, without the

  awkward interfaces common to foreign bindings.


  Example: connect to the session bus, and get a list of active names.


  @

  &#x7b;-\# LANGUAGE OverloadedStrings \#-&#x7d;


  import Data.List (sort)

  import DBus

  import DBus.Client


  main = do

  &#x20;   client <- connectSession

  &#x20;   //

  &#x20;   \-- Request a list of connected clients from the bus

  &#x20;   reply <- call_ client (methodCall \"\/org\/freedesktop\/DBus\" \"org.freedesktop.DBus\"
  \"ListNames\")

  &#x20;       &#x7b; methodCallDestination = Just \"org.freedesktop.DBus\"

  &#x20;       &#x7d;

  &#x20;   //

  &#x20;   \-- org.freedesktop.DBus.ListNames() returns a single value, which is

  &#x20;   \-- a list of names (here represented as [String])

  &#x20;   let Just names = fromVariant (methodReturnBody reply !! 0)

  &#x20;   //

  &#x20;   \-- Print each name on a line, sorted so reserved names are below

  &#x20;   \-- temporary names.

  &#x20;   mapM_ putStrLn (sort names)

  @


  >$ ghc --make list-names.hs

  >$ ./list-names

  >:1.0

  >:1.1

  >:1.10

  >:1.106

  >:1.109

  >:1.110

  >ca.desrt.dconf

  >org.freedesktop.DBus

  >org.freedesktop.Notifications

  >org.freedesktop.secrets

  >org.gnome.ScreenSaver'
