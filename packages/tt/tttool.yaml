homepage: https://github.com/entropia/tip-toi-reveng
changelog-type: ''
hash: 45b81185f314b131f3209f6b9f2aa59c040e1bfc01c566dc254519808d0db411
test-bench-deps: {}
maintainer: mail@joachim-breitner.de
synopsis: Working with files for the Tiptoi® pen
changelog: ''
basic-deps:
  JuicyPixels: ==3.1.* || ==3.2.*
  bytestring: ! '>=0.10.4 && <0.11'
  haskeline: ==0.7.*
  base: ==4.5.* || ==4.6.* || ==4.7.* || ==4.8.*
  time: ==1.5.*
  executable-path: ==0.0.*
  filepath: ==1.3.* || ==1.4.*
  process: ! '>=1.1 && <1.4'
  parsec: ==3.1.*
  containers: ==0.4.* || ==0.5.*
  binary: ==0.5.* || ==0.7.*
  mtl: ==2.1.* || ==2.2.*
  hashable: ==1.2.*
  random: ! '>=1.0 && <1.2'
  aeson: ! '>=0.7 && <0.11'
  template-haskell: ! '>=2.7 && <2.11'
  yaml: ==0.8.*
  vector: ! '>=0.10 && <0.12'
  directory: ==1.2.*
all-versions:
- '0.1'
- '1.0'
- '1.1'
- '1.3'
- '1.4'
- '1.4.0.1'
- '1.4.0.2'
- '1.4.0.3'
- '1.4.0.4'
- '1.4.0.5'
- '1.5'
author: Joachim Breitner
latest: '1.5'
description-type: markdown
description: ! "Das tttool hat jetzt eine deutsche Webseite für Anwender: http://tttool.entropia.de/\n\ntip-toi-reveng\n==============\n\n\nThe
  goal of this project is to understand the file and paper format for the\nRavensburger
  TipToi pen. The ultimate goal is that everyone can create their\nown books, with
  their own sounds.\n\nThe current status is that we understood most of the file format
  (see the\n[GME file format specification](GME-Format.md)). We provide a tool that
  allows\nyou to dissect these files.\n\nThe tool can also be used to generate completely
  new files from scratch; see\nbelow for details.\n\nIf you want to learn more please
  have a look into our wiki (https://github.com/entropia/tip-toi-reveng/wiki).\n\nThe
  tttool tool\n---------------\n\nUse the tool `tttool.hs` to investigate the gme
  files and build new ones. It\nsupports various subcommands:\n\n    Usage: tttool
  [options] command\n\n    Options:\n        -t <transcriptfile>\n           in the
  screen output, replaces media file indices by a transscript\n\n    Commands:\n        info
  <file.gme>...\n           general information\n        media [-d dir] <file.gme>...\n
  \          dumps all audio samples to the given directory (default: media/)\n        scripts
  <file.gme>...\n           prints the decoded scripts for each OID\n        script
  <file.gme> <n>\n           prints the decoded scripts for the given OID\n        raw-scripts
  <file.gme>...\n           prints the scripts for each OID, in their raw form\n        raw-script
  <file.gme> <n>\n           prints the scripts for the given OID, in their raw form\n
  \       binaries [-d dir] <file.gme>...\n           dumps all binaries to the given
  directory (default: binaries/)\n        games <file.gme>...\n           prints the
  decoded games\n        lint <file.gme>\n           checks for errors in the file
  or in this program\n        segments <file.gme>...\n           lists all known parts
  of the file, with description.\n        segment <file.gme> <pos>\n           which
  segment contains the given position.\n        holes <file.gme>...\n           lists
  all unknown parts of the file.\n        explain <file.gme>...\n           lists
  all parts of the file, with description and hexdump.\n        play <file.gme or
  file.yaml>\n           interactively play: Enter OIDs, and see what happens.\n        rewrite
  <infile.gme> <outfile.gme>\n           parses the file and serializes it again (for
  debugging).\n        export <infile.gme> [<outfile.yaml>]\n           dumps the
  file in the human-readable yaml format\n        assemble <infile.yaml> <outfile.gme>\n
  \          creates a gme file from the given source\n        oid-code [-d DPI] <codes>\n
  \          creates a PNG file for each given code\n           scale this to 10cm×10cm\n
  \          By default, it creates a 1200 dpi image. With -d 600, you\n           obtain
  a 600 dpi image. With -d 600d resp. 1200d you can double the\n           size of
  the pixel.\n           <codes> can be a range, e.g. 1,3,1000-1085.\n           Uses
  oid-<code>.png as the file name.\n        oid-code [-d DPI] <infile.yaml>\n           Like
  above, but creates one file for each code in the yaml file.\n           Uses oid-<product-id>-<scriptname
  or code>.png as the file name.\n        raw-oid-code [-d DPI] <raw codes>\n           creates
  a PNG file with the given \"raw code\". Usually not needed.\n           Uses oid-raw-<code>.png
  as the file name.\n\nA transscript is simply a `;`-separated table of OIDs and some
  text, see for example [`transcript/WWW_Bauernhof.csv`](transcript/WWW_Bauernhof.csv).\n\n\nInstallation\n------------\n\nThis
  program is written in Haskell and can be installed on Windows, MacOS or Linux.\n\nFor
  Windows users, we create zipfile containing `tttool`, you can find them in\nthe
  [releases section](https://github.com/entropia/tip-toi-reveng/releases) of\nthe
  github project.\n\nOtherwise, installation from source is not difficult either:\n\n
  1. First install the *Haskell platform*, see http://www.haskell.org/platform/\n
  \   for details for your system. Users of Debian or Ubuntu simply run\n\n        apt-get
  install haskell-platform\n\n 2. Install the development packages for ncurses, i.e.\n\n
  \       apt-get install libncurses5-dev\n\n 3. Install the Haskell dependencies.
  The Haskell platform comes with a tool\n    called `cabal`, and you should run the
  two commands\n\n        cabal update\n        cabal install --only-dependencies\n\n
  4. Now you can build the program using\n\n        cabal install --bindir=.\n\n 5.
  At this point, `tttool` should be ready to go. If you run\n\n        ./tttool\n\n
  \   you should see the list of commands shown above.\n\nIf you have any problems,
  you can [report an issue via GitHub](https://github.com/entropia/tip-toi-reveng/issues).\n\nBuilding
  your own gme files\n---------------------------\n\nOnce you have installed `tttool`,
  you can create your own `.gme` files. The\nprocess is as follows\n\n 1. Record the
  audio samples you want to include, as Ogg Vorbis files, mono, 22050Hz. I use\n\n
  \       arecord -r 22050 foo.wav\n        oggenc foo.wav\n        rm foo.wav\n\n
  2. Write a `my-book.yaml` file containing some general information, and especially\n
  \   the scripts (i.e. what to do) for each OIDs (i.e. the various fields of a\n
  \   book). You can use the [example.yaml](example.yaml) file as a starting\n    point;
  it contains more information in its comments.\n\n 3. Run `./tttool assemble my-book.yaml`,
  and make sure it reports no error, i.e.\n    finishes silently.\n\n 4. Copy the
  now generated `my-book.gme` to your TipToi pen and enjoy!\n\nIf you need to find
  out what OID code corresponds to what part of the book, you\ncan generate a debug
  gme using the `debug.yaml` file, adjusting its\n`Product-Id` to your product’s id,
  building it with `./tttool assemble\ndebug.yaml` and loading the resulting `debug.gme`
  on your pen.  It will then\nread out the codes, as a sequence of english digits.\n\nWe
  are also collecting template files, where the OIDs are commented; these can\nbe
  found in the `./templates` directory. Please improve and contribute!\n\nAgain, please
  let us know if you have problems, but also tell us what fun\nthings you did if you
  succeded.\n\nText to speech\n--------------\n\nIf you have `libttspico-utils` and
  `vorbis-tools installed`, you can have tttool\ngenerate audio files from text for
  you, which makes developing your yaml file\nmuch easier. See [text2speech.yaml](text2speech.yaml)
  for more information.\n\nPrinting your own books\n-----------------------\n\nWith
  the code in this repository, you can create GME files. This is even more\nfun if
  you can also create your own books! „Pronwan“ found out how that works,\nas you
  can see in [this video demonstration](http://youtu.be/KC97F4PfNhk). He\nalso published
  30 minute [video tutorial](http://youtu.be/4AjvjFM8GzM) (in\nGerman).\n\nPress Review\n------------\n\n
  * [tiptoi hacking](https://blogs.fsfe.org/guido/2014/05/tiptoi-hacking-und-systemanforderungen/)
  by Guido Arnold\n * [TipToi Hacking](http://www.nerd.junetz.de/blogbox/index.php?/archives/1377-TipToi-Hacking.html)
  and [TipToi Hacking II](http://www.nerd.junetz.de/blogbox/index.php?/archives/1378-TipToi-Hacking-II.html)
  by Mr. Blog\n * [Various posts](https://www.joachim-breitner.de/blog/tag/Tiptoi)
  by Joachim “nomeata” Breitner (the main author of `tttool`)\n * [Self-made animal
  figures](https://www.youtube.com/watch?v=Yic57Y9VORA&app=desktop) demonstration
  video\n\nTODO\n----\n\n * What are all the header fields? (See [wip/Header.md](wip/Header.md))\n
  * Finish decoding the games. (See [wip/games.txt](wip/games.txt))\n * What is the
  purpose of the additional script table?\n\nOther resources in this repository\n----------------------------------\n\n
  * [`oid-decoder.html`](http://htmlpreview.github.io/?https://github.com/entropia/tip-toi-reveng/blob/master/oid-decoder.html)
  allows you to manually decode an OID image.\n * `scripts/updates.sh` downloads all
  gme files from the Ravensburger server.\n * `gameanalyse.c` and `libtiptoi.c` is
  an alternative tool to investigate gme\n   files. It can also [replace audio files
  in gme files](Audio/README.md);\n   compile and run it for diagnostic output.\n
  * `Audio/` contains some audio files, such as digits read out.\n * `docs/` collects
  information about TipToi found elsewhere.\n * `matlab/` contains scripts to analyse
  gme files in Matlab\n * `wip/` (work in progess) contains notes about the parts
  of the gme files that are not\n   fully understood yet.\n * `perl-tools` contains
  a perl based script, to generate a PDF with all OID codes from a yaml-file as well
  some functions to generate PNG-files, inject pHYs-chunks with resolution hints into
  GD generated PNG files as result from some testing\n\n"
license-name: MIT
