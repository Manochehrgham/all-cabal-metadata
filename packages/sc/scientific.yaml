homepage: https://github.com/basvandijk/scientific
changelog-type: text
hash: 8f9adcee04ec986dc7f5c9c0873d042f0157b2021117923eefd5334286bd83ea
test-bench-deps:
  bytestring: ==0.10.*
  tasty-smallcheck: ! '>=0.2 && <0.9'
  base: ! '>=4.3 && <4.9'
  text: ! '>=0.8 && <1.3'
  criterion: ! '>=0.5 && <1.1'
  array: ! '>=0.1 && <0.6'
  smallcheck: ! '>=1.0 && <1.2'
  integer-gmp: -any
  ghc-prim: -any
  tasty-quickcheck: ! '>=0.8 && <0.9'
  hashable: ! '>=1.1.2 && <1.3'
  tasty-hunit: ! '>=0.8 && <0.10'
  tasty: ! '>=0.5 && <0.11'
  deepseq: ! '>=1.3 && <1.5'
  scientific: -any
  QuickCheck: ! '>=2.5 && <2.9'
  tasty-ant-xml: ! '>=1.0 && <1.1'
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
synopsis: Numbers represented using scientific notation
changelog: ! "0.3.3.8\n\t* Support QuickCheck-2.8.\n\n0.3.3.7\n\t* Fixed both the\n\n
  \           Prelude Data.Scientific> reads \"0.0\" :: [(Data.Scientific.Scientific,String)]\n
  \           [(0.0,\".0\"),(0.0,\"\")]\n\n          problem and the\n\n            read
  \" 8\" :: Scientific fails, while read \" 8\" :: Double succeeds\n\n\t  problem.\n\n\t
  \ Courtesy of neongreen.\n\n0.3.3.6\n\t* Fixed bug in the x / y method for Scientific.
  Since I was using\n\t  the default implementation: `x * recip y` the operation would\n\t
  \ diverge when `recip y` had an infinite decimal output.\n\t  This shouldn't happen
  when the result of / is finite again.\n\t  For example: 0.6 / 0.3 should yield 2.0.\n\n\t
  \ This is now fixed by using the following implementation:\n\n\t  `x / y = fromRational
  $ toRational x / toRational y`\n\n0.3.3.5\n\t* Fixed bug when converting the Scientific:\n\t
  \ `scientific 0 someBigExponent` to a bounded Integral using toBoundedInteger\n\t
  \ or to a bounded RealFloat using toBoundedRealFloat.\n\t  If someBigExponent was
  big enough to trigger the big-exponent protection\n\t  the beforementioned functions
  didn't return 0.\n\n\t  This is fixed by explicitly handling a coefficient of 0.\n\n0.3.3.4\n\t*
  Relax upper version bounds of base and deepseq\n\t  for the test suite and benchmarks.\n\n0.3.3.3\n\t*
  Add support for `deepseq-1.4`.\n\n0.3.3.2\n\t* Fix parsing of empty digit string
  (#21).\n\n0.3.3.1\n\t* Allow newer tasty, tasty-hunit and criterion.\n\n0.3.3.0\n\t*
  Add the isFloating or isInteger predicates.\n\t  Courtesy of Zejun Wu (@watashi).\n\t*
  Add the toRealFloat' and toBoundedInteger functions.\n\t  Courtesy of Fujimura Daisuke
  (@fujimura).\n\n0.3.2.2\n\t* Enable package to link with integer-simple instead
  of\n\t  integer-gmp using the -finteger-simple cabal flag.\n\t  Courtesy of @k0ral.\n\n0.3.2.1\n\n\t*
  Parameterize inclusion of the Data.ByteString.Builder.Scientific\n\t  module using
  the bytestring-builder flag. Disabling this flag\n\t  allows building on GHC-7.0.4
  which has bytestring-0.9 installed\n\t  by default.\n\n0.3.2.0\n\n\t* Add the floatingOrInteger
  function\n\t* Fix build on GHC-7.0.4\n\t* More efficient and better behaving magnitude
  computation\n\t* Lower the number of cached magnitudes to 324 (same as GHC.Float)\n\n0.3.1.0\n\n\t*
  Don't normalize on construction but do it when pretty-printing\n\t  instead. Also
  provide a manual normalize function.\n\t* Improve efficiency of toRealFloat\n\t*
  Added note about caching magnitudes\n\t* Dropped dependency on arithmoi\n\t* Make
  benchmark easier to build\n\t* Add junit XML output support (for Jenkins)\n\n0.3.0.2\n\n\t*
  Lower the minimal QuickCheck version.\n\t* Make sure sized exponents are generated
  in the QuickCheck tests.\n\n0.3.0.1\n\n\t* Fix build for bytestring-0.10.0.*\n\n0.3.0.0\n\n\t*
  Fix a DoS vulnerability that allowed an attacker to crash the\n\t  process by sending
  a scientific with a huge exponent like\n\t  1e1000000000.\n\t* Fix various RealFrac
  methods.\n\t* Cache some powers of 10 to speed up the magnitude computation.\n\t*
  Normalize scientific numbers on construction.\n\t* Move the Text Builder to its
  own module &\n\t  provide a ByteString builder\n\t* Added more documentation\n\n0.2.0.2\n\n
  \       * Widen the dreaded pointlessly tight upper bounds\n\n0.2.0.1\n\n\t* Support
  the latest versions of smallcheck and tasty\n\n0.2.0.0\n\n\t* added deriving data\n\n0.1.0.1\n\n\t*
  Loosen upper bounds on package versions\n\n0.1.0.0\n\n\t* Fixed bugs & Changed API\n\n0.0.0.2\n\n\t*
  Support building the library on GHC >= 7.0.1\n\n0.0.0.1\n\n\t* Simplification in
  the Show instance\n\t* Optimization in fromRealFloat\n\n0.0.0.0\n\n\t* Initial commit\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.3 && <4.9'
  text: ! '>=0.8 && <1.3'
  array: ! '>=0.1 && <0.6'
  integer-gmp: -any
  ghc-prim: -any
  hashable: ! '>=1.1.2 && <1.3'
  deepseq: ! '>=1.3 && <1.5'
all-versions:
- '0.0.0.0'
- '0.0.0.1'
- '0.0.0.2'
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.2.1'
- '0.3.2.2'
- '0.3.3.0'
- '0.3.3.1'
- '0.3.3.2'
- '0.3.3.3'
- '0.3.3.4'
- '0.3.3.5'
- '0.3.3.6'
- '0.3.3.7'
- '0.3.3.8'
author: Bas van Dijk
latest: '0.3.3.8'
description-type: haddock
description: ! '@Data.Scientific@ provides a space efficient and arbitrary precision

  scientific number type.


  ''Scientific'' numbers are represented using

  <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It

  uses a coefficient @c :: ''Integer''@ and a base-10 exponent @e :: ''Int''@ (do

  note that since we''re using an ''Int'' to represent the exponent these numbers

  aren''t truly arbitrary precision). A scientific number corresponds to the

  ''Fractional'' number: @''fromInteger'' c * 10 ''^^'' e@.


  The main application of ''Scientific'' is to be used as the target of parsing

  arbitrary precision numbers coming from an untrusted source. The advantages

  over using ''Rational'' for this are that:


  * A ''Scientific'' is more efficient to construct. Rational numbers need to be

  constructed using ''%'' which has to compute the ''gcd'' of the ''numerator'' and

  ''denominator''.


  * ''Scientific'' is safe against numbers with huge exponents. For example:

  @1e1000000000 :: ''Rational''@ will fill up all space and crash your

  program. Scientific works as expected:


  > > read "1e1000000000" :: Scientific

  > 1.0e1000000000


  * Also, the space usage of converting scientific numbers with huge exponents to

  @''Integral''s@ (like: ''Int'') or @''RealFloat''s@ (like: ''Double'' or ''Float'')

  will always be bounded by the target type.'
license-name: BSD3
