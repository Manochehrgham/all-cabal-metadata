changelog-type: markdown
hash: 9771b106bca58c6fbef94d5fdee6bef0938dbec83e54990fbbcc3080fe4815f8
test-bench-deps:
  base: -any
  doctest: -any
synopsis: Haskell bindings to the PCG random number generator.
changelog: ! "### 0.1.2.0\n\n* Allow primitive-0.6.\n\n### 0.1.1.0\n\n* Add uniformB,
  a function to generate a bounded random number in [0,b)\n  range. This preforms
  significantly faster than uniformR (0,b-1).\n\n* Add type specific versions for
  uniformR and uniformB.\n\n### 0.1.0.1\n\n* Fix bug when dealing with `Word` and
  `Int` types.\n\n"
basic-deps:
  base: ! '>=4.3 && <5'
  time: -any
  random: ! '>=1.0 && <2.0'
  primitive: ! '>=0.4 && <0.7'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
latest: '0.1.2.0'
description-type: markdown
description: ! '## pcg-random


  [![Build Status](https://travis-ci.org/cchalmers/pcg-random.svg)](https://travis-ci.org/cchalmers/pcg-random)

  [![Hackage](https://img.shields.io/hackage/v/pcg-random.svg?style=flat)](https://hackage.haskell.org/package/pcg-random)


  Haskell bindings to the PCG random number generator http://www.pcg-random.org.


  > PCG is a family of simple fast space-efficient statistically good algorithms for
  random number generation with better-than-typical cryptographic security


  Implements the standard multiple stream generator as well as the fast, single and
  unique variants.


  The api is very similar to [mwc-random] but the pcg generator appears to be slightly
  faster. There is also a pure interface via the [random] libray.


  [mwc-random]: https://hackage.haskell.org/package/mwc-random

  [random]: http://hackage.haskell.org/package/random

'
