changelog-type: markdown
hash: baf23ded836ebd2264676e139fcb739bfa3d536df51bb8e4fab7f4b33ba505fc
test-bench-deps:
  base: ! '>4 && <5'
  criterion: ! '>=0.8'
  cassava-conduit: -any
  QuickCheck: ==2.7.6
synopsis: Conduit interface for cassava package
changelog: ! '# 0.2.x


  ## 0.1.0 -> 0.2.0


  ``` Haskell

  fromCsvLiftError :: (FromRecord a, MonadError e m) => (CsvParseError -> e) -> DecodeOptions
  -> HasHeader -> Conduit BS.ByteString m a

  fromNamedCsvLiftError :: (FromNamedRecord a, MonadError e m) => (CsvParseError ->
  e) -> DecodeOptions -> Conduit BS.ByteString m a

  ```


  # 0.1.x


  ## 0.0.1 -> 0.1.0


  ``` Haskell

  fromNamedCsv :: (Show a, Monad m, FromNamedRecord a, MonadError CsvParseError m)
  => DecodeOptions -> Conduit BS.ByteString m a

  fromNamedCsvStreamError :: (Monad m, FromNamedRecord a) => DecodeOptions -> Conduit
  BS.ByteString m (Either CsvParseError a)

  ```

'
basic-deps:
  bytestring: ==0.10.*
  base: <5 && >=4
  conduit: ==1.2.*
  array: -any
  conduit-extra: ==1.1.*
  containers: -any
  cassava: ==0.4.*
  bifunctors: ==4.2.*
  mtl: ==2.2.*
all-versions:
- '0.0.1'
- '0.1.0'
- '0.2.0'
latest: '0.2.0'
description-type: markdown
description: ! "# cassava-conduit [![Build Status](https://img.shields.io/travis/domdere/cassava-conduit.svg?style=flat)](https://travis-ci.org/domdere/cassava-conduit)
  [![Hackage](https://img.shields.io/hackage/v/cassava-conduit.svg?style=flat)](https://hackage.haskell.org/package/cassava-conduit)\n\nConduit
  interface for cassava package\n\nStreaming to CSV is not 100% complete at this stage,
  and doesn't support encoding to CSV with a header yet\n\n## Example Usage\n\n###
  The examples project\n\nThere is a project containing some examples of the usage,
  but the gist is here:\n\n``` Haskell\n\nimport Data.Csv\nimport Data.Conduit\nimport
  Data.Csv.Conduit\n\ndata InputRecord = ...\n\ninstance FromRecord InputRecord where\n
  \   ...\n\ndata OutputRecord = ...\n\ninstance ToRecord OutputRecord where\n    ...\n\ndecodeOpts
  :: Word8 -> DecodeOptions\n\nencodeOpts :: Word8 -> EncodeOptions\n\nprocessInput
  :: InputRecord -> OutputRecord\n\n-- |\n--  A Conduit pipeline that streams from
  '../exampledata/sampleinput.psv', decodes it from a pipe seperated format,\n--  processes
  it with 'processInput' and the encodes it to pipe seperated format and streams it
  out to '../exampledata/sampleoutput.psv'\n--  The first time it encounters a parse
  error, it will stop streaming and return the error, dropping any decoded records
  that came through in that batch also...\n--\nconduitPipeline :: (MonadError CsvParseError
  m, MonadResource m) => m ()\nconduitPipeline = sourceFile \"../exampledata/sampleinput.psv\"
  $$ fromCsv (decodeOpts $ fromIntegral $ ord '|') HasHeader =$= map processInput
  =$= toCsv (encodeOpts $ fromIntegral $ ord '|') =$= sinkFile \"../exampledata/sampleoutput.psv\"\n\nmain
  :: IO ()\nmain = do\n    res <- runEitherT $ bimapEitherT showError id $ runResourceT
  conduitPipeline\n    either putStrLn return res\n```\n\n#### Building the examples
  project\n\n```\n$ cd examples\n$ cabal sandbox init\n$ cabal sandbox add-source
  ../\n$ cabal install --only-dependencies\n$ cabal build\n```\n\n## Building the
  project\n\nInstall the dependencies first with either:\n\n    cabal install --only-dependencies\n\nIf
  you do not wish to build tests or benchmarks, or:\n\n    cabal install --only-dependencies
  --enable-tests\n\nIf you want to be able to build the tests, or:\n\n    cabal install
  --only-dependencies --enable-benchmarks\n\nIf you wish to build the benchmarks.\n\nThe
  project must be \"configured\" at least once everytime `cassava-conduit.cabal` changes,
  this can be done with:\n\n    cabal configure\n\nIf you wish to run the unit tests
  you will have to run:\n\n    cabal configure --enable-tests\n\nIf you wish to run
  benchmarks you will have to run:\n\n    cabal configure --enable-benchmarks\n\nAt
  the moment there are issues with using both flags at the same time.  Its recommended
  that you use one flag at a time, use `cabal-dev` or `cabal sandbox` \n(see below),
  and clear your sandbox when switching configurations from one to the other\n\nThen
  finally build it with:\n\n    cabal build\n\nSee `cabal build --help` for more build
  options.\n\n## Running Unit Tests\n\n**After** running `cabal build`, you can run
  the unit tests with the command:\n\n    cabal test\n\n## Adding Unit tests\n\nUnit
  tests are written with [**doctest**] [doctest-github], for instructions on how to
  add unit tests\nsee the **doctest** [**User Guide**] [doctest-userguide].\n\nCurrently
  only files in the `src/` directory are searched for tests, it is assumed that the
  code in `main/`\nis a thin layer of code that uses modules from `src/`.\n\n## Running
  Benchmarks\n\n**After** running `cabal configure --enable-benchmarks` and `cabal
  build`, the following command will run the benchmarks:\n\n    cabal bench\n\nFor
  newer versions of `cabal`, `cabal bench` will run a `cabal build` automatically
  if necessary..\n\n## Development: Cabal Dependency Hell?\n\nCabal's great, but its
  got its own warts, and when you are developing a few different projects with their
  own dependency chains, sometimes installing all your libraries to the same place
  causes problems,\n\n### Cabal version < 1.18\n\nConsider trying [`cabal-dev`] [cabal-dev].
  \ Install it with `cabal install cabal-dev`\n\nIn terms of using it, all thats required
  is replacing `cabal` with `cabal-dev` in all the above command lines.\n\nIt will
  download and install all the dependencies for your project and install them in a
  `cabal-dev/` directory in your project directory, and they will only be used for
  this project.\n\n### Cabal version >= 1.18\n\nCabal version `1.18` and onwards supports
  sandboxes, which is basically the same idea as `cabal-dev`.\n\nIn terms of using
  it all the commands remain the same, just run `cabal sandbox init` in the root directory
  of the project before running any of them.\n\n------\n\nThe related `cabal-dev`
  and `sandbox` artifacts are already contained in the `.gitignore` file.\n\n[cabal-dev]:
  https://github.com/creswick/cabal-dev \"creswick/cabal-dev on GitHub.com\"\n[doctest-github]:
  https://github.com/sol/doctest-haskell \"sol/doctest-haskell on GitHub.com\"\n[doctest-userguide]:
  https://github.com/sol/doctest-haskell/blob/master/README.markdown#usage \"doctest
  Usage Guide\"\n"
