homepage: https://github.com/domdere/cassava-conduit
changelog-type: markdown
hash: 53333613118e12e0435d75c4f826562a2c1b830dc3ef8395cb0ccbb91bbd770d
test-bench-deps:
  base: ! '>4 && <5'
  criterion: ! '>=0.8'
  cassava-conduit: -any
  QuickCheck: ==2.8.*
maintainer: Dom De Re
synopsis: Conduit interface for cassava package
changelog: ! '# 0.2.x


  ## 0.1.0 -> 0.2.0


  ``` Haskell

  fromCsvLiftError :: (FromRecord a, MonadError e m) => (CsvParseError -> e) -> DecodeOptions
  -> HasHeader -> Conduit BS.ByteString m a

  fromNamedCsvLiftError :: (FromNamedRecord a, MonadError e m) => (CsvParseError ->
  e) -> DecodeOptions -> Conduit BS.ByteString m a

  ```


  # 0.1.x


  ## 0.0.1 -> 0.1.0


  ``` Haskell

  fromNamedCsv :: (Show a, Monad m, FromNamedRecord a, MonadError CsvParseError m)
  => DecodeOptions -> Conduit BS.ByteString m a

  fromNamedCsvStreamError :: (Monad m, FromNamedRecord a) => DecodeOptions -> Conduit
  BS.ByteString m (Either CsvParseError a)

  ```

'
basic-deps:
  bytestring: ==0.10.*
  base: <5 && >=4
  conduit: ==1.2.*
  array: -any
  conduit-extra: ==1.1.*
  containers: -any
  cassava: ==0.4.*
  bifunctors: ==5.*
  mtl: ==2.2.*
all-versions:
- '0.0.1'
- '0.1.0'
- '0.2.0'
- '0.2.1'
- '0.2.2'
author: Dom De Re
latest: '0.2.2'
description-type: markdown
description: ! "# cassava-conduit [![Build Status](https://img.shields.io/travis/domdere/cassava-conduit.svg?style=flat)](https://travis-ci.org/domdere/cassava-conduit)
  [![Hackage](https://img.shields.io/hackage/v/cassava-conduit.svg?style=flat)](https://hackage.haskell.org/package/cassava-conduit)\n\nConduit
  interface for cassava package\n\nStreaming to CSV is not 100% complete at this stage,
  and doesn't support encoding to CSV with a header yet\n\n## Example Usage\n\n###
  The examples project\n\nThere is a project containing some examples of the usage,
  but the gist is here:\n\n``` Haskell\n\nimport Data.Csv\nimport Data.Conduit\nimport
  Data.Csv.Conduit\n\ndata InputRecord = ...\n\ninstance FromRecord InputRecord where\n
  \   ...\n\ndata OutputRecord = ...\n\ninstance ToRecord OutputRecord where\n    ...\n\ndecodeOpts
  :: Word8 -> DecodeOptions\n\nencodeOpts :: Word8 -> EncodeOptions\n\nprocessInput
  :: InputRecord -> OutputRecord\n\n-- |\n--  A Conduit pipeline that streams from
  '../exampledata/sampleinput.psv', decodes it from a pipe seperated format,\n--  processes
  it with 'processInput' and the encodes it to pipe seperated format and streams it
  out to '../exampledata/sampleoutput.psv'\n--  The first time it encounters a parse
  error, it will stop streaming and return the error, dropping any decoded records
  that came through in that batch also...\n--\nconduitPipeline :: (MonadError CsvParseError
  m, MonadResource m) => m ()\nconduitPipeline = sourceFile \"../exampledata/sampleinput.psv\"
  $$ fromCsv (decodeOpts $ fromIntegral $ ord '|') HasHeader =$= map processInput
  =$= toCsv (encodeOpts $ fromIntegral $ ord '|') =$= sinkFile \"../exampledata/sampleoutput.psv\"\n\nmain
  :: IO ()\nmain = do\n    res <- runEitherT $ bimapEitherT showError id $ runResourceT
  conduitPipeline\n    either putStrLn return res\n```\n\n#### Building the examples
  project\n\n```\n$ cd examples\n$ cabal sandbox init\n$ cabal sandbox add-source
  ../\n$ cabal install --only-dependencies\n$ cabal build\n```\n\n## Building the
  project\n\n``` Shell\nmake build\n```\n\n## Running Unit Tests\n\n``` Shell\nmake
  test\n```\n\n## Running Benchmarks\n\n**After** running `cabal configure --enable-benchmarks`
  and `cabal build`, the following command will run the benchmarks:\n\n    cabal bench\n\nFor
  newer versions of `cabal`, `cabal bench` will run a `cabal build` automatically
  if necessary..\n"
license-name: BSD3
