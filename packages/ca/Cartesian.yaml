homepage: ''
changelog-type: ''
hash: d62245643ec06123bf13fff9a8022086e6e255f74880e0e08683c2922011a5ad
test-bench-deps: {}
maintainer: jonatanhsundqvist@gmail.com
synopsis: Coordinate systems
changelog: ''
basic-deps:
  base: ==4.*
  lens: <=4.13.0.0
  linear: -any
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.5.0.0'
author: Jonatan H Sundqvist
latest: '0.5.0.0'
description-type: markdown
description: ! "Cartesian\r\n=========\r\nFunctions and types for working with three-dimensional
  coordinate systems.\r\n\r\nFor now, all functions assume a coordinate system where
  right is +X, up is +Y and forwards is +Z, unless otherwise stated.\r\n\r\nContributors\r\n------------\r\nJonatan
  H Sundqvist\r\n\r\n\r\nTODO\r\n----\r\n- [x] Use typeclass for Vectors (would save
  a lot of boilerplate)\r\n      -- [ ] Replace 'Vector' with more specific classes,
  depending on the use case\r\n      -- [ ] Perhaps 'Vector' could be an alias for
  types that support all vector ops\r\n- [x] Allow functions to operate on any Vector-like
  type (including eg. Complex) (cf. the `Vector`-typeclass)\r\n- [ ] Consistent naming
  scheme (eg. use Vector(2D|3D) or just Vector for both types)\r\n\r\n- [ ] Decide
  on a public API (right now, exports are a mess)"
license-name: MIT
