homepage: http://github.com/NixOS/cabal2nix
changelog-type: ''
hash: 54866b8081ddfc72761c1f38cc96df6782682058cd09b465300562910f57e2ea
test-bench-deps:
  base: -any
  doctest: -any
maintainer: Peter Simons <simons@cryp.to>
synopsis: Convert Cabal files into Nix build instructions
changelog: ''
basic-deps:
  Cabal: ! '>=1.18 && <1.22'
  base: ! '>=3 && <5'
  filepath: -any
  process: -any
  hackage-db: ! '>=1.11'
  containers: -any
  regex-posix: -any
  mtl: -any
  transformers: -any
  deepseq: -any
  pretty: -any
  directory: -any
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
- '1.4'
- '1.5'
- '1.6'
- '1.7'
- '1.8'
- '1.9'
- '1.10'
- '1.11'
- '1.12'
- '1.13'
- '1.14'
- '1.15'
- '1.16'
- '1.17'
- '1.18'
- '1.19'
- '1.20'
- '1.21'
- '1.23'
- '1.24'
- '1.25'
- '1.26'
- '1.27'
- '1.28'
- '1.29'
- '1.30'
- '1.31'
- '1.32'
- '1.33'
- '1.34'
- '1.35'
- '1.37'
- '1.38'
- '1.39'
- '1.40'
- '1.41'
- '1.42'
- '1.43'
- '1.44'
- '1.45'
- '1.46'
- '1.47'
- '1.48'
- '1.49'
- '1.50'
- '1.51'
- '1.52'
- '1.53'
- '1.54'
- '1.55'
- '1.56'
- '1.57'
- '1.58'
- '1.59'
- '1.60'
- '1.61'
- '1.63'
- '1.64'
- '1.65'
- '1.66'
- '1.67'
- '1.68'
- '1.69'
- '1.70'
- '1.71'
- '1.72'
- '1.73'
author: Peter Simons, Andres Loeh
latest: '1.73'
description-type: markdown
description: ! "How to maintain Haskell Packages in Nix\n=======================================\n\n##
  Overview over the tool-chain\n\nThere are two utilities, `cabal2nix` and `hackage4nix`,
  that automate\nmaintenance to a large extent. We intend to merge them into one program,\neventually,
  but the necessary re-factoring hasn't been done yet since\nthis is not a high priority.\n\n###
  Cabal2nix\n\n`cabal2nix` converts a single Cabal file into a single Nix build\nexpression.
  For example:\n\n    $ cabal2nix cabal://yesod-0.9.1\n    { cabal, attoparsecText,
  blazeBuilder, blazeHtml, hamlet, httpTypes\n    , monadControl, parsec, shakespeareCss,
  shakespeareJs, text, time\n    , transformers, unixCompat, wai, waiExtra, warp,
  yesodAuth\n    , yesodCore, yesodForm, yesodJson, yesodPersistent\n    }:\n\n    cabal.mkDerivation
  (self: {\n      pname = \"yesod\";\n      version = \"0.9.1\";\n      sha256 = \"1ag3lca75lrriycbscspb5yyishacgxjx0rybc3x4z1dqnkn1r71\";\n
  \     isLibrary = true;\n      isExecutable = true;\n      buildDepends = [\n        attoparsecText
  blazeBuilder blazeHtml hamlet httpTypes monadControl\n        parsec shakespeareCss
  shakespeareJs text time transformers\n        unixCompat wai waiExtra warp yesodAuth
  yesodCore yesodForm\n        yesodJson yesodPersistent\n      ];\n      meta = {\n
  \       homepage = \"http://www.yesodweb.com/\";\n        description = \"Creation
  of type-safe, RESTful web applications\";\n        license = self.stdenv.lib.licenses.bsd3;\n
  \       platforms = self.ghc.meta.platforms;\n      };\n    })\n\nCabal files can
  be referred to using the magic URL\n`cabal://NAME-VERSION`, which will automatically
  download the file from\nHackage. Alternatively, a direct `http://host/path/pkg.cabal`
  URL can be\nprovided, as well as a `file:///local/path/pkg.cabal` URI that doesn't\ndepend
  on network access. However, if the source hash is not already in `cabal2nix`'s cache
  or\nprovided using the `--sha256` option, `cabal2nix` still needs to download the
  source code to\ncompute the hash, which obviously still causes network traffic.\nRun
  the utility with `--help` to see the complete list of supported command line flags.\n\nTo
  add a new package to Nix, checkout the Nixpkgs project from\nhttps://github.com/nixos/nixpkgs.git
  and run\n\n    $ cd pkgs/development/libraries/haskell\n    $ mkdir foo\n    $ cabal2nix
  cabal://foo-1.0 >foo/default.nix\n\nThen add an appropriate attribute to\n`pkgs/top-level/haskell-packages.nix`,
  for example:\n\n    foo = callPackage ../development/libraries/haskell/foo {};\n\n`cabal2nix`
  can also build derivations for projects from other\nsources than hackage. You only
  need to provide an URI that points\nto a cabal project. The most common usecase
  for this is probably to\ngenerate a derivation for a project on the local file system:\n\n
  \   aeson:$ cabal2nix ./.\n    # This file was auto-generated by cabal2nix. Please
  do NOT edit manually!\n\n    { cabal, attoparsec, blazeBuilder, deepseq, dlist,
  hashable, HUnit\n    , mtl, QuickCheck, scientific, syb, testFramework\n    , testFrameworkHunit,
  testFrameworkQuickcheck2, text, time\n    , unorderedContainers, vector\n    }\n\n
  \   cabal.mkDerivation (self: {\n      pname = \"aeson\";\n      version = \"0.7.0.2\";\n
  \     src = ./.;\n      buildDepends = [\n        attoparsec blazeBuilder deepseq
  dlist hashable mtl scientific syb\n        text time unorderedContainers vector\n
  \     ];\n      testDepends = [\n        attoparsec HUnit QuickCheck testFramework
  testFrameworkHunit\n        testFrameworkQuickcheck2 text time unorderedContainers
  vector\n      ];\n      meta = {\n        homepage = \"https://github.com/bos/aeson\";\n
  \       description = \"Fast JSON parsing and encoding\";\n        license = self.stdenv.lib.licenses.bsd3;\n
  \       platforms = self.ghc.meta.platforms;\n      };\n    })\n\nThis derivation
  will not fetch from hackage, but instead use the directory which\ncontains the derivation
  as the source repository.\n\n`cabal2nix` currently supports the following respository
  types:\n\n* directory\n* source archive (zip, tar.gz, ...) from http or https URL
  or local file.\n* git, mercurial, svn or bazaar repository\n\n### Hackage4nix\n\nThe
  `hackage4nix` utility re-generates *all* expressions found in the\n`nixpkgs` database
  in place. This is useful to ensure that all packages\nhave been generated with a
  recent version of the tool-chain.\nFurthermore, `hackage4nix` adds default settings
  for the\n`meta.maintainers` and `meta.platforms` attribute if these aren't\nconfigured
  yet. Generally speaking, running\n\n    $ hackage4nix pkgs\n\nin your checked-out
  copy of the Nixpkgs tree should be a *no-op* ---\ni.e. no files should change! If
  there are changes, these indicate that a\nfile has been modified manually, and then
  these changes must be\ninvestigated to find out what is going on.\n\nLast but not
  least, `hackage4nix` generates a list of all updates\navailable from Hackage. (Run
  `cabal update` to make sure that your local\ncopy of the Hackage database is up-to-date!)
  For example:\n\n    $ hackage4nix pkgs\n    The following updates are available:\n\n
  \   WebBits-Html-1.0.1:\n      cabal2nix cabal://WebBits-Html-1.0.2 >pkgs/pkgs/development/libraries/haskell/WebBits-Html/default.nix\n\n
  \   happstack-server-6.1.6:\n      cabal2nix cabal://happstack-server-6.2.1 >pkgs/pkgs/development/libraries/haskell/happstack/happstack-server.nix\n
  \     cabal2nix cabal://happstack-server-6.2.2 >pkgs/pkgs/development/libraries/haskell/happstack/happstack-server.nix\n\n
  \   primitive-0.3.1:\n      cabal2nix cabal://primitive-0.4 >pkgs/pkgs/development/libraries/haskell/primitive/default.nix\n\n
  \   repa-2.1.1.5:\n      cabal2nix cabal://repa-2.1.1.6 >pkgs/pkgs/development/libraries/haskell/repa/default.nix\n\n
  \   unix-compat-0.2.2.1:\n      cabal2nix cabal://unix-compat-0.3 >pkgs/pkgs/development/libraries/haskell/unix-compat/default.nix\n\n
  \   vector-0.7.1:\n      cabal2nix cabal://vector-0.8 >pkgs/pkgs/development/libraries/haskell/vector/default.nix\n\nThese
  updates can be performed automatically by running the `cabal2nix`\ncommand given
  by `hackage4nix`. If there is more than one possible\nupdate, then all of them will
  be shown. Note, however, that some updates\nbreak compilation of other packages,
  because they depend on very\nspecific versions of their build inputs, so please
  be careful when\nperforming updates!\n\n## Current State of Affairs\n\nThe tool-chain
  is stable. As of today, 2013-04-12, virtually all Haskell\npackages available in
  Nix have been generated automatically from their\nCabal files. There are only a
  handful of exceptions, which we cannot\ngenerate because these packages aren't available
  on Hackage. The list of\nthose packages is hard-coded into the\n[`hackage4nix.hs`](https://github.com/NixOS/cabal2nix/blob/master/src/hackage4nix.hs)\nbinary
  in the function `badPackagePaths`.\n\nFurthermore, Hackage4Nix will not re-generate
  packages that have been\npatched, i.e. that define any of the following attributes:\n\n
  \       (pre|post)Configure\n        (pre|post)Install\n        patchPhase\n        patches\n\nThese
  packages are considered for updates, however.\n\nThe complete list of Haskell packages
  available in Nix is generated by\nthe tool [`package-list`](http://github.com/peti/package-list),\nand
  published at <http://cryp.to/haskell-in-nixpkgs.txt>. Hackage picks\nit up from
  there and generates links on each package's homepage to the\ncorresponding page
  in Hydra automatically. See [ticket\n875](http://www.haskell.org/pipermail/cabal-devel/2011-August/007714.html)
  for further\ndetails.\n"
license-name: BSD3
