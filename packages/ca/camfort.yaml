homepage: ''
changelog-type: ''
hash: dd92feeae98b9bbb31a55b34cf0acc6acbaf426f222e6121414427d4f747af44
test-bench-deps: {}
maintainer: dom.orchard@gmail.com
synopsis: CamFort - Cambridge Fortran infrastructure
changelog: ''
basic-deps:
  base: <5
  comonad: ! '>=3'
  text: ! '>=0.11.2.3'
  fclabels: ! '>=2'
  syb: ! '>=0.4'
  generic-deriving: ! '>=1.5.5'
  matrix: ! '>=0.2.2'
  uniplate: ! '>=1.6.10'
  array: ! '>=0.4'
  containers: ! '>=0.5.0.0'
  mtl: ! '>=2.1'
  language-fortran: ! '>=0.5'
  syz: ! '>=0.2'
  transformers: ! '>=0.4'
  haskell-src: ! '>=1.0.1'
  hmatrix: ! '>=0.15'
  template-haskell: ! '>=2.4'
  vector: ! '>=0.1'
  directory: ! '>=1.2'
all-versions:
- '0.62'
- '0.615'
- '0.700'
author: Dominic Orchard, Matthew Danish, Mistral Contrastin, Andrew Rice, Oleg Oshmyan
latest: '0.700'
description-type: markdown
description: ! "# CamFort\n\n## Installation & Building\n\n### Using Stack\n\nWe recommend
  using Stack (http://www.haskellstack.org) to build Camfort. \n\n 1. Install Stack
  following the instructions here: http://docs.haskellstack.org/en/stable/README/#how-to-install\n
  2. Checkout the latest version of language-fortran\n 3. Checkout the latest version
  of camfort\n 4. Build using Stack\n\n```\ngit clone git@github.com:dorchard/language-fortran.git\ngit
  clone git@github.com:dorchard/camfort.git\ncd camfort\nstack build\nstack install
  \     # install binary\nstack exec camfort # run camfort\n```\n\nPlease note that
  at this time we have been unable to compile Camfort on Windows due to a problem
  with the hmatrix dependency. \n\n### Using Cabal\n\nCabal does not automatically
  install the build tools. If you wonder why\ncheckout haskell/cabal#220.\n\n```\n$
  cabal install alex happy\n```\n\nInstall the native packages needed for `hmatrix`
  dependency\n\n```\nsudo apt-get install libgsl0-dev liblapack-dev libatlas-base-dev\n```\n\n###
  For general usage\n\n```\n$ cabal install camfort\n```\n\n### For development\n\n```\n$
  cabal sandbox init\n$ cabal install --only-dependencies\n$ cabal exec bash\n```\n\nThis
  spawns a new shell with only the packages within the sandbox available.\n\n```\n$
  ghc Main.hs -o camfort\n```\n\nThis generates a camfort executable in the root directory
  using only the\npackages in the sandbox and none of ~/.cabal or system Haskell packages.\n\n##
  Usage\n\n```\nCamFort - Cambridge Fortran Infrastructure.\nUsage: camfort <MODE>
  <INPUT> [OUTPUT] [OPTIONS...]\nRefactor functions:\n\tcommon         \t [common
  block elimination]\n\tcommonArg      \t [common block elimination (to parameter
  passing)]\n\tequivalence    \t [equivalence elimination]\n\tdataType       \t [derived
  data type introduction]\n\tdead           \t [dead-code elimination]\n\tunits          \t
  [unit-of-measure inference]\n\tremoveUnits    \t [unit-of-measure removal]\n\nAnalysis
  functions:\n\tasts           \t [blank analysis, outputs analysis files with AST
  information]\n\tlva            \t [live-variable analysis]\n\tloops          \t
  [loop information]\n\tcount          \t [count variable declarations]\n\tcriticalUnits
  \ \t [calculate the critical variables for units-of-measure inference]\n\tast            \t
  [print the raw AST -- for development purposes]\n\nOptions:\n  -v, -?    --version
  \           show version number\n  -e FILES  --exclude=FILES      files to exclude
  (comma separated list, no spaces)\n  -s ID     --units-solver=ID    units-of-measure
  solver. ID = Custom or LAPACK\n  -l ID     --units-literals=ID  units-of-measure
  literals mode. ID = Unitless, Poly, or Mixed\n```\n"
license-name: Apache-2.0
