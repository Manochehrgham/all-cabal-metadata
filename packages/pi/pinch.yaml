homepage: https://github.com/abhinav/pinch#readme
changelog-type: markdown
hash: a9bb0953ce1ca22b9848717abcf326f67e5d357b0e4e4ecafe381eff3d168d9a
test-bench-deps:
  pinch: -any
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2 && <0.3'
  hspec: ! '>=2.0'
  text: ! '>=1.2 && <1.3'
  containers: ! '>=0.5 && <0.6'
  QuickCheck: ! '>=2.5'
  hspec-discover: ! '>=2.1'
  vector: ! '>=0.10 && <0.12'
maintainer: mail@abhinavg.net
synopsis: An alternative implementation of Thrift for Haskell.
changelog: ! "0.2.0.1\n=======\n\n-   Build with GHC 8.\n\n0.2.0.0\n=======\n\nBreaking
  changes:\n\n-   `unpinch` no longer returns `Either String a`. Instead it returns
  a\n    `Parser a`.\n-   `Protocol.serialize*` methods no longer produce a `ByteString.Builder`
  and\n    the serialized length. Instead, they produce a custom `Builder` type.\n\nOther
  changes:\n\n-   Improve deserialization performance significantly by getting rid
  of\n    unnecessary calls to `Data.Typeable.{eqT, cast}`.\n-   Improve serialization
  performance by allocating the output buffer in one go\n    rather than using `ByteString.Builder`.\n-
  \  Improve serialization and deserialization performance further by changing\n    the
  intermediate representation of lists, sets, and maps.\n\n0.1.0.2\n=======\n\n-   Loosen
  `vector` version constraint.\n\n0.1.0.1\n=======\n\n-   Fixed recursion in C pre-processor
  expansion. This can break the build on\n    some systems.\n\n0.1.0.0\n=======\n\n-
  \  Initial release.\n\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.2 && <1.3'
  array: ! '>=0.5'
  containers: ! '>=0.5 && <0.6'
  ghc-prim: -any
  hashable: ! '>=1.2 && <1.3'
  deepseq: ! '>=1.3 && <1.5'
  vector: ! '>=0.10 && <0.12'
all-versions:
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.0'
- '0.2.0.1'
author: Abhinav Gupta
latest: '0.2.0.1'
description-type: markdown
description: ! "\n[![build-status]](https://travis-ci.org/abhinav/pinch)\n\n`pinch`
  aims to provide an alternative implementation of Apache Thrift for\nHaskell. The
  `pinch` library itself acts only as a serialization library. Types\nspecify their
  Thrift encoding by defining instances of the `Pinchable`\ntypeclass, which may be
  done by hand or automatically with the use of Generics.\n\n  [build-status]: https://travis-ci.org/abhinav/pinch.svg?branch=master\n\nHaddock
  documentation for this package is avilable on [Hackage] and [here].\n\n  [Hackage]:
  http://hackage.haskell.org/package/pinch\n  [here]: http://abhinavg.net/pinch/\n\nOverview\n--------\n\nTypes
  which can be encoded into Thrift payloads implement the `Pinchable`\ntypeclass.\n\nGiven
  the Thrift struct,\n\n```thrift\nstruct Person {\n    1: required string name\n
  \   2: optional i64 dateOfBirth\n}\n```\n\nYou can write a `Pinchable` instance
  like so,\n\n```haskell\ndata Person = Person { name :: Text, dateOfBirth :: Maybe
  Int64 }\n    deriving (Eq)\n\ninstance Pinchable Person where\n    type Tag Person
  = TStruct\n    -- The Tag tells the system that this represents a struct.\n\n    pinch
  (Person name dateOfBirth) =\n        struct [1 .= name, 2 ?= dateOfBirth]\n\n    unpinch
  value =\n        Person <$> value .:  1\n               <*> value .:? 2\n```\n\nBetter
  yet, you can drive an instance automatically.\n\n```haskell\n{-# LANGUAGE DeriveGeneric,
  DataKinds #-}\nimport GHC.Generics (Generic)\n\ndata Person = Person\n    { name
  \       :: Field 1 Text\n    , dateOfBirth :: Field 2 (Maybe Int64)\n    } deriving
  (Eq, Generic)\n\ninstance Pinchable Person\n```\n\nObjects can be serialized and
  deserialized using the `encode` and `decode`\nmethods. These methods accept a `Protocol`
  as an argument.\n\n```haskell\ndecode binaryProtocol (encode binaryProtocol person)
  == person\n```\n\nFor more information, check the documentation and the examples.\n\nCaveats\n-------\n\n-
  \  Only the Thrift Binary Protocol is supported right now. (Pull\n    requests welcome.)\n-
  \  There is no code generation or template haskell support yet so types from\n    the
  Thrift file will have to be translated by hand.\n\n"
license-name: BSD3
