changelog-type: text
hash: 9bffcfdbc0428b0350238682b0e55d6b9e9cf283c0f18dc743f5979deba3ff85
test-bench-deps:
  base: ==4.*
  hspec: -any
  filepath: -any
  process: -any
  doctest: ! '>=0.8'
  HUnit: -any
  array: -any
  containers: -any
  mtl: -any
  temporary: -any
  deepseq: -any
  QuickCheck: ! '>=2.5'
  pretty: -any
  directory: -any
synopsis: A compiler front-end generator.
changelog: ! "2.7.1 Grégoire Détrez <gregoire.detrez@gu.se> October 2014\n\t* Generated
  haskell code is now warning free\n\t* Removed unused terminal in happy\n\t* Correctly
  escape backslashes in symbols\n\t* Fix problem that was preventing custom tokens
  to work in OCaml if\n\tthey conflict with the build-in Ident\n\t* BNFC build is
  also warning free (ghc 7.4.2)\n\t* Test programs return non-zerro exit code on parse
  error\n\n2.7.0.0 Grégoire Détrez <gregoire.detrez@gu.se> September 2014\n\t* Add
  token support for Ocaml\n\t* New option parser\n\t* Adds an optional argument to
  change Makefile name\n\t* Add a --ghc option to derive Data, Typeable, Generic in
  Haskell\n\t* New online documentation (https://bnfc.readthedocs.org)\n\t* Derive
  ``Read`` for newtype decls in Haskell\n\t* New option to get the version number
  --version\n\t* Remove the F# backend\n\t* Remove the Java4 backend\n\t* New Applicative
  and Alternative instances to ``Err``\n\t* Remove the coupling between building the
  parser and the pdf from\n\tlatex\n\t* Improvement to the CNF Backend\n\t* Bug fixes
  #92, #21, #34, #33, #90, #30, #60\n"
basic-deps:
  base: ! '>=4.4 && <5'
  filepath: -any
  process: -any
  array: -any
  containers: -any
  mtl: -any
  deepseq: -any
  pretty: ! '>=1.1 && <1.2'
  directory: -any
all-versions:
- '2.4.1.1'
- '2.4.1.2'
- '2.4.2.0'
- '2.4.2.1'
- '2.5.0'
- '2.6.0.0'
- '2.6.0.1'
- '2.6.0.2'
- '2.6.0.3'
- '2.7.0.0'
- '2.7.0.1'
- '2.7.1'
latest: '2.7.1'
description-type: haddock
description: ! 'The BNF Converter is a compiler construction tool generating a compiler
  front-end

  from a Labelled BNF grammar. It was originally written to generate Haskell,

  but starting from Version 2.0, it can also be used for generating Java, C++, and
  C.


  Given a Labelled BNF grammar the tool produces:

  an abstract syntax as a Haskell/C++/C module or Java directory,

  a case skeleton for the abstract syntax in the same language,

  an Alex, JLex, or Flex lexer generator file,

  a Happy, CUP, or Bison parser generator file,

  a pretty-printer as a Haskell/Java/C++/C module,

  a Latex file containing a readable specification of the language.'
