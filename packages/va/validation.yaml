changelog-type: text
hash: b874fcbef5704b6a7a2241aefe9ad27d3d6b614b482986a133830c05eb47ce57
test-bench-deps:
  base: <5 && >=3
  filepath: ! '>=1.3'
  doctest: ! '>=0.9.7'
  QuickCheck: ! '>=2.0'
  template-haskell: ! '>=2.8'
  directory: ! '>=1.1'
synopsis: A data-type like Either but with an accumulating Applicative
changelog: ! "0.5.1\n\n* Update documentation\n\n0.5.0\n\n* Export the `ValidationB`
  (formerly `ValidationTB`) data type.\n* Renamed `ValidationTB` to `ValidationB`.\n*
  Add upper-bounds on some dependencies.\n* Move repository to https://github.com/NICTA/validation.\n*
  Add README.\n* Update copyright notice for 2015.\n\n0.4.3\n\n* Rename `ValidationT`
  to `ValidationTB`\n* Introduce `ValidationT` with `MonadTrans` instance\n\n0.4.2\n\n*
  Export constructors on `AccValidation` and `Validation`.\n\n0.4.1\n\n* Remove `Alternative`
  instances. They are obscene.\n* INLINE pragmas\n\n0.4.0\n\n* Change the premise
  of the `Validate` type-class to more strongly reflect the isomorphism to Either.\n*
  The `_Failure` and `_Success` prisms are now derived.\n* Lots more examples\n\n0.3.0\n\nA
  restructuring of 0.2.x where:\n\n* Tests updated to use doctest\n* Update API to
  use Prism and Iso (Control.Lens)\n* Rename package Validation (deprecated) to validation
  \n\n0.3.1\n\nUse Safe Haskell pragma\n\n0.3.2\n\nImplement Validate on Either\n\n0.3.3\n\nProvide
  Isos between (ValidationT Identity) and other data types.\n\n0.3.4\n\nLoosen the
  type of the Isos for polymorphic update.\n\n"
basic-deps:
  semigroupoids: ! '>=4.0'
  base: ! '>=3 && <5'
  semigroups: ! '>=0.8'
  lens: ! '>=4.0 && <5'
  bifunctors: ! '>=3.0'
  mtl: ! '>=2.0 && <2.3'
  transformers: ! '>=0.3 && <0.5'
all-versions:
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.5.0'
- '0.5.1'
latest: '0.5.1'
description-type: haddock
description: ! '<<http://i.imgur.com/Ns5hntl.jpg>>


  Several data-types like Either but with differing properties and type-class

  instances.


  Library support is provided for those different representations, include

  `lens`-related functions for converting between each and abstracting over their

  similarities.


  * `AccValidation`


  The `AccValidation` data type is isomorphic to `Either`, but has an instance

  of `Applicative` that accumulates on the error side. That is to say, if two

  (or more) errors are encountered, they are appended using a `Semigroup`

  operation.


  As a consequence of this `Applicative` instance, there is no corresponding

  `Bind` or `Monad` instance. `AccValidation` is an example of, "An applicative

  functor that is not a monad."


  * `Validation`


  The `Validation` data type is isomorphic to `Either` and has a `Monad`

  instance that does the same as `Either`. The only difference to `Either` is

  the constructor names and surrounding library support.


  * `ValidationT`


  The `ValidationT` data type is the monad transformer for `Validation`. An

  instance of `MonadTrans` is provided for `(ValidationT err)`. Due to the

  arrangement of the `ValidationT` type constructor, which permits a `MonadTrans

  instance, there is no possible `Bifunctor` instance. Consequently, the

  `ValidationB` data type provides a `Bifunctor` instance (but not a

  `MonadTrans` instance). Library support is provided to exploit the isomorphism

  to `ValidationB`.


  Note that since `AccValidation` is not a monad, there is also no corresponding

  monad transformer for this data type.


  * `ValidationB`


  The `ValidationB` data type is similar to the monad transformer for

  `Validation` (`ValidationT`), however, due to the arrangement of the

  `ValidationB` type constructor, which permits a `Bifunctor` instance, there is

  no possible `MonadTrans` instance. Consequently, the `ValidationT` data type

  provides a `MonadTrans` instance (but not a `Bifunctor` instance). Library

  support is provided to exploit the isomorphism to `ValidationT`.


  * `Validation''`


  The `Validation'' err a` type-alias is equivalent to

  `ValidationT err Identity a` and so is isomorphic to `Either` and others.

  Libraries are supplied accordingly.'
