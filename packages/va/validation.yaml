homepage: https://github.com/qfpl/validation
changelog-type: text
hash: 6879a4e5027a2ae8c3a1f5bc9af4896be97f486e047230c2e571010cb6cfce90
test-bench-deps:
  base: <5 && >=3
  filepath: ! '>=1.3'
  doctest: ! '>=0.9.7'
  QuickCheck: ! '>=2.0'
  template-haskell: ! '>=2.8'
  directory: ! '>=1.1'
maintainer: Tony Morris <ʇǝu˙sıɹɹoɯʇ@ןןǝʞsɐɥ> <dibblego>, Nick Partridge <nkpart>,
  Queensland Functional Programming Lab <oᴉ˙ldɟb@llǝʞsɐɥ>
synopsis: A data-type like Either but with an accumulating Applicative
changelog: ! '0.5.5


  * Raise upper bounds on base.

  * Include nix build.


  0.5.4


  * remove redundant constraints.

  * add instance `Validate` for `ValidationB Identity`.


  0.5.3


  * Update `transformers` dependency to work with GHC8.


  0.5.2


  * Remove LANGUAGE Safe because won''t build against lens-4.13 or higher otherwise.


  0.5.1


  * Update documentation


  0.5.0


  * Export the `ValidationB` (formerly `ValidationTB`) data type.

  * Renamed `ValidationTB` to `ValidationB`.

  * Add upper-bounds on some dependencies.

  * Move repository to https://github.com/NICTA/validation.

  * Add README.

  * Update copyright notice for 2015.


  0.4.3


  * Rename `ValidationT` to `ValidationTB`

  * Introduce `ValidationT` with `MonadTrans` instance


  0.4.2


  * Export constructors on `AccValidation` and `Validation`.


  0.4.1


  * Remove `Alternative` instances. They are obscene.

  * INLINE pragmas


  0.4.0


  * Change the premise of the `Validate` type-class to more strongly reflect the isomorphism
  to Either.

  * The `_Failure` and `_Success` prisms are now derived.

  * Lots more examples


  0.3.0


  A restructuring of 0.2.x where:


  * Tests updated to use doctest

  * Update API to use Prism and Iso (Control.Lens)

  * Rename package Validation (deprecated) to validation


  0.3.1


  Use Safe Haskell pragma


  0.3.2


  Implement Validate on Either


  0.3.3


  Provide Isos between (ValidationT Identity) and other data types.


  0.3.4


  Loosen the type of the Isos for polymorphic update.


'
basic-deps:
  semigroupoids: ! '>=4.0'
  base: ! '>=3 && <5'
  semigroups: ! '>=0.8'
  lens: ! '>=4.0 && <5'
  bifunctors: ! '>=3.0'
  mtl: ! '>=2.0 && <2.3'
  transformers: ! '>=0.3 && <0.6'
all-versions:
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
author: Tony Morris <ʇǝu˙sıɹɹoɯʇ@ןןǝʞsɐɥ> <dibblego>, Nick Partridge <nkpart>
latest: '0.5.5'
description-type: haddock
description: ! '<<http://i.imgur.com/uZnp9ke.png>>


  Several data-types like Either but with differing properties and type-class

  instances.


  Library support is provided for those different representations, include

  `lens`-related functions for converting between each and abstracting over their

  similarities.


  * `AccValidation`


  The `AccValidation` data type is isomorphic to `Either`, but has an instance

  of `Applicative` that accumulates on the error side. That is to say, if two

  (or more) errors are encountered, they are appended using a `Semigroup`

  operation.


  As a consequence of this `Applicative` instance, there is no corresponding

  `Bind` or `Monad` instance. `AccValidation` is an example of, "An applicative

  functor that is not a monad."


  * `Validation`


  The `Validation` data type is isomorphic to `Either` and has a `Monad`

  instance that does the same as `Either`. The only difference to `Either` is

  the constructor names and surrounding library support.


  * `ValidationT`


  The `ValidationT` data type is the monad transformer for `Validation`. An

  instance of `MonadTrans` is provided for `(ValidationT err)`. Due to the

  arrangement of the `ValidationT` type constructor, which permits a `MonadTrans

  instance, there is no possible `Bifunctor` instance. Consequently, the

  `ValidationB` data type provides a `Bifunctor` instance (but not a

  `MonadTrans` instance). Library support is provided to exploit the isomorphism

  to `ValidationB`.


  Note that since `AccValidation` is not a monad, there is also no corresponding

  monad transformer for this data type.


  * `ValidationB`


  The `ValidationB` data type is similar to the monad transformer for

  `Validation` (`ValidationT`), however, due to the arrangement of the

  `ValidationB` type constructor, which permits a `Bifunctor` instance, there is

  no possible `MonadTrans` instance. Consequently, the `ValidationT` data type

  provides a `MonadTrans` instance (but not a `Bifunctor` instance). Library

  support is provided to exploit the isomorphism to `ValidationT`.


  * `Validation''`


  The `Validation'' err a` type-alias is equivalent to

  `ValidationT err Identity a` and so is isomorphic to `Either` and others.

  Libraries are supplied accordingly.'
license-name: BSD3
