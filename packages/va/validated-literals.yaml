homepage: https://github.com/merijn/validated-literals
changelog-type: ''
hash: d9f5e0ae4716bbcc31d79050c50c7b94f2dc4102a1a6b029501e67683cfe894b
test-bench-deps: {}
maintainer: Merijn Verstraaten <merijn@inconsistent.nl>
synopsis: Compile-time checking for partial smart-constructors
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <4.9'
  template-haskell: -any
all-versions:
- '0.2.0'
author: Merijn Verstraaten
latest: '0.2.0'
description-type: haddock
description: ! 'To disallow invalid input it is common to define (new)types with hidden

  data constructors. Forcing the user to go through a smart-constructor that

  enforces invariants and returns @Maybe ResultType@, preventing the

  construction of data with invalid values.


  However, it is __also__ common to want to include literal values of such

  types in source text. Things of textual literals for HTML, HTTP, etc.

  In such cases smart-constructors force us to handle potential conversion

  failures at runtime, or abusing functions like @fromJust@ to break away all

  the safety smart-constructors provide. All this despite the fact that we

  can statically know at compile time that the conversion will always succeed

  or always fails.


  This package provides a typeclasses for using TH to validate the

  correctness of provided literals at compile. This lets you define, e.g.,

  @newtype Even = Even Integer@ and write:


  @

  x :: Even

  x = $$(valid 38)

  @


  This will check, at compile time, that the provided @Integer@ is, in fact,

  even and unwrap it from @Maybe@, avoiding the runtime check.'
license-name: BSD3
