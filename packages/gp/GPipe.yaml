changelog-type: ''
hash: 5c41cf6f9f2a867bac3e80f480cb4467a53313272c8f28fcd7ffa7a0cff39493
test-bench-deps: {}
synopsis: A functional graphics API for programmable GPUs
changelog: ''
basic-deps:
  OpenGL: ==2.5.0.0
  GLUT: ==2.3.0.0
  base: ! '>=4 && <5'
  list-tries: ! '>=0.4.1 && <0.5'
  containers: ! '>=0.4 && <0.5'
  Boolean: ==0.0.1
  Vec: ==1.0.1
  transformers: -any
  Vec-Boolean: ==1.0.6
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
- '1.1.0'
- '1.1.1'
- '1.1.2'
- '1.1.3'
- '1.1.4'
- '1.1.5'
- '1.1.6'
- '1.1.7'
- '1.2.0'
- '1.2.1'
- '1.3'
- '1.3.1'
- '1.3.2'
- '1.4'
- '1.4.1'
latest: '1.4.1'
description-type: haddock
description: ! 'GPipe models the entire graphics pipeline in a purely functional,
  immutable and typesafe way. It is built on top of the programmable pipeline (i.e.
  non-fixed function) of

  OpenGL 2.1 and uses features such as vertex buffer objects (VBO''s), texture objects
  and GLSL shader code synthetisation to create fast graphics programs. Buffers,

  textures and shaders are cached internally to ensure fast framerate, and GPipe is
  also capable of managing multiple windows and contexts. By creating your own

  instances of GPipes classes, it''s possible to use additional datatypes on the GPU.


  You''ll need full OpenGL 2.1 support, including GLSL 1.20 to use GPipe. Thanks to
  OpenGLRaw, you may still build GPipe programs on machines lacking this support.'
