homepage: https://github.com/choener/WordAlignment
changelog-type: markdown
hash: e5f620071fa9589e8e57979df75d1d9f9521b358707ca440f53cd5819d1dd7ea
test-bench-deps:
  test-framework: ! '>=0.8 && <0.9'
  base: -any
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  test-framework-th: ! '>=0.2 && <0.3'
  QuickCheck: -any
  WordAlignment: -any
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Bigram word pair alignments.
changelog: ! '0.1.0.0

  -------


  - using BTI types instead of IMMC

  - backtracking pretty printing with Text-Builders

  - updated README.md (TODO!)


  0.0.4.0

  -------


  - pretty, because we can!


  0.0.3.1

  -------


  - bugfixes


  0.0.2.0

  -------


  - partially rewritten


  0.0.1.0

  -------


  - internal, non-release version


'
basic-deps:
  bytestring: -any
  NaturalLanguageAlphabets: ! '>=0.1.0 && <0.2.0'
  base: ! '>=4.7 && <4.9'
  ADPfusion: ! '>=0.4.0.2 && <0.5.1'
  unordered-containers: ! '>=0.2.3 && <0.2.6'
  text: ! '>=1.0 && <1.3'
  PrimitiveArray: ! '>=0.6.0 && <0.7.1'
  strict: ==0.3.2.*
  AlignmentAlgorithms: ! '>=0.0.2 && <0.0.3'
  fmlist: ! '>=0.9 && <0.10'
  tuple-th: ! '>=0.2.4 && <0.2.6'
  containers: -any
  lens: ! '>=4.0 && <4.14'
  FormalGrammars: ! '>=0.2.1 && <0.2.2'
  stringable: ! '>=0.1.2 && <0.1.4'
  GrammarProducts: ! '>=0.1.1 && <0.1.2'
  ghc-prim: -any
  control-monad-omega: ! '>=0.3 && <0.4'
  intern: ==0.9.*
  LinguisticsTypes: ==0.0.0.*
  cmdargs: ==0.10.*
  hashable: ! '>=1.1 && <1.3'
  file-embed: ! '>=0.0.6 && <0.1'
  attoparsec: ! '>=0.10 && <0.14'
  transformers: -any
  parallel: ! '>=3.2 && <3.3'
  text-format: ! '>=0.3 && <0.4'
  deepseq: ! '>=1.3 && <1.5'
  ascii-progress: ! '>=0.3.2 && <0.4'
  template-haskell: -any
  primitive: ! '>=0.5 && <0.7'
  WordAlignment: -any
  vector: ! '>=0.10 && <0.12'
all-versions:
- '0.1.0.0'
author: Christian Hoener zu Siederdissen, 2013-2015
latest: '0.1.0.0'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/choener/WordAlignment.svg?branch=master)](https://travis-ci.org/choener/WordAlignment)\n\n#
  Word alignments in natural languages\n\nThis library and program are designed for
  the alignment of *words* in human\nlanguages. Each word is encoded as a list of
  *characters*. A single\n*character*, however, is encoded as a *list of unicode symbols*,
  not just a\nsingle symbol.\n\nThis particular encoding is necessary because there
  is no general one-to-one\nmapping of atomic alphabet symbols to unicode characters.
  Just consider\ncharacter decorations, such as *Umlaute* (even though Umlaute are
  available in\nunicode).\n\nAs user, you send a list to stdin that is formatted as
  follows (with all fields\nmandatory; the tab symbol being the separator between
  each column):\n\n* word id\n* language name\n* meaning identifier (this is a string,
  not a number)\n* length of the word\n* space-separated characters (each character
  is actually a string)\n\n(In case you read the plain-text version of this document,
  the 4 whitespace\ncharacters should be left out.)\n\n    0\tAlbanian_Tosk\t1.100\t5\t\\'
  b o t ə\n    2\tAlbanian_Tosk\t1.100\t10\tr̃ o k u lʸ i a\\' lʸ e m\n\n\n\nThe WordAlignment
  program comes with two modes, *twowaysimple* and *twoway*.\n\n## TwoWay - Simple\n\n```WordAlign
  twowaysimple``` aligns words based on a simple scoring model. Gaps\nare scored with
  linear costs. Matches are scored based on a simple scoring file\nhandling unigrams
  of characters. Even the simple model allows for the concept\nof equivalence classes.
  This makes it possible to not only score exact matches,\nbut to give somewhat high
  scores to, say, two vowels that should be matched.\n\nThe following command-line
  options are provided:\n\n    --scorefile=ITEM\n    --lpblock=ITEM,ITEM\n    --showmanual\n
  \   --prettystupid\n    --outfile=ITEM\n\n```--scorefile``` is the simple score
  file to be used by the mode. the\n*defaultSimpleScoring* file can be used as a template.\n\n```--lpblock```
  expects a pair of language names (Breton,Breton) or a pair of\nintegers (3,3 or
  4,6) and will then align only the given language pairs with\neach other. This option
  should be very helpful in case you want to parallelize\nthe program.\n\n```--showmanual```
  will show this manual in plain text.\n\n```--prettystupid``` will show a progress
  bar of the current language pair.\nIt's pretty and helpful with smaller tasks but
  should not be used when you\nparallelize on a grid engine.\n\n```--outfile``` writes
  to the given output file, not stdout. Actually required\nwhen ```--prettystupid```
  is active.\n\n```--nobacktrack``` disables backtracking. Sometimes just the alignment
  score\nis enough.\n\n\n\n## TwoWay (Complex Scoring)\n\nThe complex scoring model
  uses linear gap costs. In contrast to the simple\nmodel above, however, character
  matching is now performed in a bigram context.\n\nThe required score file is currently
  using an in-house format with the\nfollowing columns all required (with whitespace,
  not tab between the entries):\n\n* language name\n* character (bigram 1.1)\n* character
  (bigram 1.2)\n* language name\n* character (bigram 2.1)\n* character (bigram 2.2)\n*
  score\n\nThree example lines\n\n    Albanian_Tosk \\' a Albanian_Tosk \\' a 4.25238\n
  \   Albanian_Tosk \\' a Albanian_Tosk \\' b 0.402228\n    Albanian_Tosk \\' a Albanian_Tosk
  \\' g 1.07432\n\nIn addition to the scoring file, set via ```--scorefile```, the
  default score\nconstant and the gap cost constant need to be set.\n\n```--bigramdef=NUM```
  is the score given to unknown matches.\n\n```--gapopen=NUM``` is the score given
  to each gap character (and not just the\nopening score)\n\n```--lpblock``` as above\n\n```--showmanual```
  as above\n\n```--prettystupid``` as above\n\n```--outfile``` as above\n\n```--nobacktrack```
  as above\n\nAn example output is given below.\n\nThe output are four lines for each
  alignment. An info line with the word ids\n(IDS), the alignment score (SCORE), the
  normalized scores (NSCORE) and the\nactual words, started by (WORDS) and interleaved
  by (WORD). The next two lines\nare the alignment, with deletions showning up as
  minus symbols (---) in the\ndeletion field. Note that a deletion does not delete
  a character from the\ninput, it merely aligns an existing character in one alignment
  with the symbol\nfor deletion (--) in the other. The final line provides the per-column
  score\nfor the alignment. After the alignment follows one empty line.\n\nThe normalized
  score is defined as SCORE / maximum of input word lengths\n\n```cat albanian.input
  | head -n 3 | ./dist/build/WordAlign/WordAlign twoway -s albanian.scores```\n\nyields:\n\n
  \   IDS: 1 2 SCORE: 32.85 NSCORE: 5.48    WORDS: ^ d o u a r $   WORD   ^ d o u
  a r $\n       ^   d   o   u   a   r   $\n       ^   d   o   u   a   r   $\n     0.0
  4.8 5.9 4.1 6.6 4.6 6.8\n    \n    IDS: 1 3 SCORE: -12.36 NSCORE: -1.77    WORDS:
  ^ d o u a r $   WORD   ^ p o u l t r $\n         ^     d     -     o     u     a
  \    r     -     -     $\n         ^     p     o     -     u     -     l     t     r
  \    $\n       0.0   0.3  -5.0  -5.0   4.1  -5.0 -20.0  -5.0  -5.0   6.8\n\n\n\n##
  Performance Notes\n\nMeasured on a core i5-3570K @ 3.40 GHz; single-threaded.\n\nThe
  program is not compiled for multi-threading, if you need this consider the\n```--lpblock```
  option first. Otherwise, send a mail.\n\nThe running time for calculating 100 000
  alignments is:\n\n    Mode              Seconds     Alignments per Second\n    ====
  \             =======     =====================\n    TwoWay Simple:     6.7 s        ~
  15 000\n    TwoWay Complex:   15.8 s        ~  6 300\n\nDisabling backtracking (to
  get just the alignment scores) improves performance\nby roughly a factor of ```x
  2```. Words are very short, backtracking overhead\nis quite large!\n\nAs in: the
  number of actual /unicode/ symbols is approximately the same as the\nnumber of forward
  DP cells to be filled, since each /character/ can be a\ncombination of multiple
  unicdoe symbols.\n\n\n\n## Three- and Four-way Alignments\n\nThese are currently
  disabled. If you need them, consider contacting me.\n\n\n\n#### Contact\n\nChristian
  Hoener zu Siederdissen  \nLeipzig University, Leipzig, Germany  \nchoener@bioinf.uni-leipzig.de
  \ \nhttp://www.bioinf.uni-leipzig.de/~choener/  \n\n"
license-name: GPL-3
