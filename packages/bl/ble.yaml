homepage: http://github.com/plow-technologies/ble#readme
changelog-type: ''
hash: 682e0a1852df7008378a0f0fefd2cad754e95cc0059c57fca52641c6c38feb59
test-bench-deps:
  cereal: ! '>=0.4 && <0.6'
  microlens-th: ! '>=0.4 && <0.5'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <4.10'
  data-default-class: ! '>=0.0 && <0.2'
  d-bus: ! '>=0.1.5 && <0.2'
  hspec: ! '>2 && <3'
  text: ! '>=1 && <2'
  uuid: ! '>=1 && <2'
  ble: -any
  containers: ! '>=0.5 && <0.6'
  quickcheck-instances: ! '>=0.3 && <0.4'
  microlens-ghc: ! '>=0.4 && <0.5'
  hslogger: -any
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.4 && <0.6'
  random: ! '>=1 && <2'
  QuickCheck: ! '>=2.8 && <2.10'
  microlens: ! '>=0.4 && <0.5'
maintainer: jkarni@turingjump.com
synopsis: Bluetooth Low Energy (BLE) peripherals
changelog: ''
basic-deps:
  cereal: ! '>=0.4 && <0.6'
  microlens-th: ==0.4.*
  bytestring: ==0.10.*
  stm: -any
  base: ! '>=4.8 && <4.10'
  data-default-class: ! '>=0.0 && <0.2'
  d-bus: ! '>=0.1.5 && <0.2'
  text: ==1.*
  uuid: ==1.*
  markdown-unlit: -any
  ble: -any
  containers: ==0.5.*
  microlens-ghc: ==0.4.*
  hslogger: -any
  mtl: ==2.2.*
  transformers: ! '>=0.4 && <0.6'
  random: ==1.*
  microlens: ==0.4.*
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.3.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.2.1'
- '0.3.3.0'
- '0.3.4.0'
author: Julian K. Arni
latest: '0.3.4.0'
description-type: markdown
description: ! "# ble - Bluetooth Low Energy for Haskell\n\n*ble* is a Haskell library
  for writing Bluetooth Low Energy peripherals (and\nsoon centrals).\n\nFor usage,
  see the  [haddocks](https://hackage.haskell.org/package/ble). There\nare also examples
  in\n[`examples`](https://github.com/plow-technologies/ble/tree/master/examples)\ndirectory.\n\n##
  Example\n\nThe code below is a simple example of a complete Bluetooth Low Energy\napplication.
  The application allows a counter to be read, and adds one to the\nvalue of the counter,
  as well as allowing the counter to be set to any value.\n\n~~~ {.haskell}\nmodule
  Main (main) where\n\nimport Bluetooth\nimport Control.Concurrent     (threadDelay)\nimport
  Control.Concurrent.STM\nimport Control.Monad.IO.Class\n\nmain :: IO ()\nmain = do\n
  \ ref <- newTVarIO 0\n  conn <- connect\n  x <- runBluetoothM (registerAndAdvertiseApplication
  $ app ref) conn\n  case x of\n    Right _ -> putStrLn \"Started BLE counter application!\"\n
  \   Left e -> error $ \"Error starting application \" ++ show e\n  threadDelay maxBound\n\napp
  :: TVar Int -> Application\napp ref\n  = \"/com/turingjump/example/counter\"\n     &
  services .~ [counter ref]\n\ncounter :: TVar Int -> Service\ncounter ref\n  = \"4f1f704f-0a0b-49e4-bd27-6368f27697a7\"\n
  \    & characteristics .~ [getCounter ref]\n\ngetCounter :: TVar Int -> CharacteristicBS\ngetCounter
  ref\n  = \"90874979-563e-4224-9da6-3b1a6c03e97d\"\n      & readValue  ?~ encodeRead
  readV\n      & writeValue ?~ encodeWrite writeV\n      & properties .~ [CPRead,
  CPWrite]\n  where\n    readV :: Handler Int\n    readV = liftIO $ do\n      v <-
  atomically $ modifyTVar' ref succ >> readTVar ref\n      putStrLn $ \"Value requested.
  New value: \" ++ show v\n      return v\n\n    writeV :: Int -> Handler Bool\n    writeV
  i = liftIO $ do\n      v <- atomically $ swapTVar ref i\n      putStrLn $ \"Value
  changed to: \" ++ show i\n      putStrLn $ \"Old value: \" ++ show v\n      return
  True\n~~~\n\n## Requirements\n\n`ble` currently only supports Linux, and requires
  Bluez versions 5.41 and up.\nTo see what version you are running, type:\n\n``` bash\nbluetoothd
  --version\n```\n"
license-name: BSD3
