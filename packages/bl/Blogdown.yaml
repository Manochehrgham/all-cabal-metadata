homepage: ''
changelog-type: markdown
hash: 8d26a030609f7c4f5276a9bec4fb0ee82759ee7f63e42bfb0ace60d8eefacdea
test-bench-deps:
  MissingH: ! '>=1.4 && <1.5'
  base: ! '>=4.9 && <4.10'
  parsec: ! '>=3.1 && <3.2'
  containers: ! '>=0.5 && <0.6'
maintainer: acbecker@uchicago.edu
synopsis: A markdown-like markup language designed for blog posts
changelog: ! '# Revision history for Blogdown


  ## 0.1.0  -- 2017-04-02


  * Released as a Cabal package.

'
basic-deps:
  MissingH: ==1.4.*
  base: ==4.9.*
  parsec: ==3.1.*
  containers: ==0.5.*
all-versions:
- '0.1.0'
author: Alex Becker
latest: '0.1.0'
description-type: markdown
description: ! "*Note: If you are viewing this Readme on GitHub, its Blogdown-specific
  features will not render correctly.\nThe Blogdown-formatted output is in Readme.html.*\n\n#
  Blogdown\n\nBlogdown is a markup language based on Markdown, designed for writing
  blog posts.\nBlogdown's goals are:\n * Clean syntax for common blog post features
  absent from Markdown.\n * Ability to handle untrusted input.\n * Simple syntax,
  with no surprises.\n * Debuggability.\n * Near compatibility with common Markdown
  implementations.\n\nBecause there is no Markdown standard and existing Markdown
  implementations\n[disagree wildly even on simple cases](http://johnmacfarlane.net/babelmark2/?text=Hello+world%0A*+this+is+a+list%0A%3E+this+is+a+quote),\nBlogdown
  cannot be 100% compatible with even a majority of Markdown implementations.\nWhile
  there have been attemps to create a common Markdown standard--most notably [CommonMark](http://commonmark.org/)--they\nare
  necessarily quite complex. The primary cause of this complexity is that Markdown
  insists on rendering *something* for every input,\nno matter how malformed. Blogdown
  is considerably simpler, and hopefully easier for authors to debug, because it fails
  on malformed inputs.\nWith full compatability out of the window, I have chosen to
  make some other small improvements on Markdown syntax.\n\n## Installation\n\n###
  With Cabal or Stack\n\nThe recommended way to install any Haskell project is using
  [Cabal](https://www.haskell.org/cabal/) or [Stack](https://docs.haskellstack.org/en/stable/README/).\nWith
  these tools, you can simply run `cabal install` or `stack build` respectively.\n\n###
  Without Haskell Tooling\n\nBecause configuring Cabal and Stack can be tricky for
  Haskell beginners, Blogdown supports installation without any Haskell tooling.\n\nFirst,
  install [GHC](https://www.haskell.org/ghc/), [Parsec](https://hackage.haskell.org/package/parsec)
  and [MissingH](https://hackage.haskell.org/package/MissingH),\nall of which are
  available through common Linux package managers.\nThen run `ghc -isrc -o Blogdown
  src/Blogdown.hs` in the repository's base directory.\n\n## Usage\n\nThe `Blogdown`
  binary reads from `stdin` and writes to `stdout`. Typical usage looks like:\n\n
  \   cat blogpost.md | ./Blogdown > blogpost.html\n\n### Optional Styling and Scripts\n\nIt
  is recommended to include `footnotes.css` and `footnotes.js` on any pages which
  make use of Blogdown-generated footnotes,\nwhich improve the appearance of footnotes
  and allow them to be shown inline.\nThese can be inlined using the `--inline-css`
  and `--inline-js` flags respectively^[inline].\n\n### Optional Flags\n\n`Blogdown`
  accepts the following long-style flags:\n * `--footnote-prefix`: Defines a prefix
  for the `id`s of footnotes. Recommended if multiple output files are included in
  a single HTML page, to avoid `id` collisions.\n * `--footnote-index-from`: The index
  from which footnotes are numbered. Defaults to 0.\n * `--footnote-backlinks`: If
  this flag is passed, footnotes will be preceded by a caret linking back to the point
  where the footnote is referenced.\n * `--em-dashes`: If this flag is passed, `--`
  will be replaced with \"&mdash;\" in text.\n * `--inline-css`: If this flag is passed,
  the recommended CSS will be inlined at the end of the output document.\n * `--inline-js`:
  If this flag is passed, the recommended JS will be inlined at the end of the output
  document.\n\n## Syntax\n\n### Differences from Markdown\n\nMost of the syntax of
  Blogdown should be familiar to Markdown users, but some new syntax has been added,
  and some existing syntax has changed.\n\n#### New Features\n\nBlogdown adds footnote
  support to Markdown.\nFootnotes can be referenced inline with \\^\\[*footnote-name*\\],
  which will render as a superscript link to a *footnote-definition*\nat the end of
  the document, which is defined by \\~\\[*footnote-name*\\] followed by the footnote
  contents.\n\n#### Markdown Incompatibilities\n\nBlogdown does not support the Markdown
  syntax of underlining text with `=` or `-` characters to define a header,\nas this
  comes at a large cost in the parser implementation^[underline-parser-complexity].\nThe
  `#` syntax for headers is supported instead.\n\nIt also does not support using multiple
  trailing spaces to force a breakpoint at the end of a line.\nThe `<br/>` tag is
  supported instead.\n\nThe `\\~` and `\\^` characters are now special, and must be
  escaped to be used in text.\nAdditionally, while most Markdown implementations do
  not require escaping many special characters when their special meaning would\nnot
  be valid, Blogdown always requires they be escaped.\n\n### Formal Description\n\nThe
  body of a Blogdown document consists of a sequence of *block nodes*, which in turn
  consist of *inline nodes*.\n\n#### Block Nodes\n\nBlock nodes can contain any sequence
  of inline nodes, with the exception of code and HTML blocks, whose contents are
  rendered verbatim.\nBlock nodes can span multiple lines and are terminated by a
  blank line, the beginning of another type of block, or the end of the document.\n\nThe
  following block node types are supported:\n * **Paragraph**: The default block type;
  any content not in another block is part of a paragraph.\nParagraphs must be separated
  by a blank line.\nCan contain arbitrary inline nodes.\n * **Header**: 1-6 `#` characters
  at the beginning of a line begins a header, with the number of `#` characters determining
  the header level.\nCan contain arbitrary inline nodes.\n * **Ordered Lists**: A
  ` - ` begins an ordered list item, which itself is a block.\nSequential ordered
  list items form an ordered list.\nCan contain arbitrary inline nodes.\n * **Unordered
  Lists**: A ` * ` begins an unordered list item, which itself is a block.\nSequential
  unordered list items form an unordered list.\nCan contain arbitrary inline nodes.\n
  * **Blockquote**: Lines beginning with `> ` define a blockquote.\nCan contain arbitrary
  inline nodes.\nNote that the first line not beginning with `> ` will start a new
  block.\n * **Code Block**: Lines indented with 4+ spaces or a tab define a code
  block.\nCode blocks are rendered verbatim, ignoring special characters.\nNote that
  the first un-indented line will start a new block.\n * **HTML Block**: An HTML tag
  at the beginning of a line starts an HTML block.\nIts contents must be valid HTML,
  and it is ended by the corresponding closing tag.\nHTML blocks are rendered verbatim,
  unless HTML bleaching is enabled.\n * **Hard Rule**: A line consisting of 3+ `-`
  defines a hard rule.\n * **Table**: A `|`character at the beginning of a line begins
  a table row, consisting of table cells separated by `|` characters.\nThe cells are
  themselves blocks, and as such can contain newlines. The rows are terminated by
  a `|` followed by a newline.\nBy default the table has only a body, but if rows
  are separated by an alternating string of `+` and multiple `-` characters,\ne.g.
  `+---+---+`, then every row above the separator will be in the header and every
  row below will be in the body.\nOptionally the table may start and end with such
  a separator as well.\n\n#### Inline Nodes\n\nInline nodes can generally contain
  a sequence of other inline nodes, but cannot contain nodes of the same type.\nDespite
  the name, inline nodes can span multiple lines, e.g. to accomodate line length limits.\n\nThe
  following inline node types are supported:\n * **Plaintext**: The default inline
  type; any text not in another inline node is plaintext. Rendered verbatim.\n * **Italic**:
  Surrounding text with `*` *italicizes* it. Italic nodes can contain any other type
  of inline node.\n * **Bold**: Surrounding text with `**` **bolds** it. Bold nodes
  can contain any other type of inline node.\n * **Code**: Surrounding text with `\\``
  renders it as `code`. The content is rendered verbatim.\n * **Link**: A [link](#)
  is written as \\[*text*\\]\\(*href*\\). The *text* portion can contain any other
  type of inline node.\nThe *href* portion is the link destination, and is parsed
  verbatim except that any literal `(` or `)` must be escaped.\n * **Footnote Reference**:
  Writing \\^\\[*footnote-name*\\] defines a footnote reference.\nIt is rendered as
  a superscript footnote number^[footnote-numbering], and links to the footnote named
  *footnote-name*\nif it is present in the footer.\n\n#### Footer\n\nA Blogdown document
  may optionally include a footer after the body.\nThe footer consists of a sequence
  of *footnote definitions*, each of which begins on a new line with \\~\\[*footnote-name*\\]
  and consists of an arbitrary sequence of blocks.\nA footnote definition is only
  terminated by another footnote definition or the end of the document.\n\n### Escaping\n\nAny
  character (special or not) can be escaped with `\\\\`. For a literal backslash,
  use `\\\\\\\\`.\nA backslash before a newline acts as a continuation character.\n\n##
  Planned improvements\n * Nested lists\n * Better error messages on parse failures\n
  * Windows support\n * Better tests\n * Document building & running tests\n * Comments\n\n---\n\n~[inline]
  Inlining CSS and JS is not recommended if you will be rendering multiple Blogdown
  documents on a single page, e.g. multiple blog posts on a blog.\nDoing so will degrade
  network and browser performance slightly.\n\n~[underline-parser-complexity] Supporting
  underlines for headers requires the parser to look-ahead arbitrarily far, resulting
  in quadratic time complexity.\n\n~[footnote-numbering] Footnotes are auto-numbered
  in order of appearance, starting from 0 by default (this can be changed by passing
  the `--footnote-index-from` flag).\n"
license-name: AGPL-3
