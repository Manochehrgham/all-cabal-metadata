homepage: https://github.com/glguy/irc-core
changelog-type: markdown
hash: a2be33ee630d69381c0103cf25743005688f53220d02552cc99ed7131eefdadf
test-bench-deps: {}
maintainer: Eric Mertens <emertens@gmail.com>
synopsis: An IRC client library and text client
changelog: ! '1.1.0.1

  -------

  * Fix setting default nick in configuration file

  * Dependency version constraint bumps


  1.1

  ---

  * Better support for Freenode''s trailing spaces

  * More compact metadata representation

  * Ignored messages no longer count toward unread number

  * Updated version bounds on lens and attoparsec

  * Channel info has user count


  1.0

  ---

  * Initial hackage release

'
basic-deps:
  free: ! '>=4.11 && <4.13'
  haskell-lexer: ! '>=1.0 && <1.1'
  bytestring: ! '>=0.10.4.0 && <0.11'
  x509-validation: ! '>=1.5.1 && <1.7'
  split: ! '>=0.2.2 && <0.3'
  stm: ! '>=2.4.4 && <2.5'
  base: ! '>=4.7.0.2 && <4.9'
  data-default-class: ! '>=0.0.1 && <0.1'
  time: ==1.5.*
  base64-bytestring: ! '>=1.0.0.1 && <1.1'
  text: ! '>=1.2.0.4 && <1.3'
  vty: ! '>=5.2.7 && <5.3'
  tls: ! '>=1.2.16 && <1.4'
  filepath: ! '>=1.3.0.2 && <1.5'
  network: ! '>=2.6.0.2 && <2.7'
  x509-store: ! '>=1.5.0 && <1.7'
  connection: ! '>=0.2.4 && <0.3'
  array: ==0.5.*
  containers: ==0.5.*
  x509: ! '>=1.5.0.1 && <1.7'
  lens: ! '>=4.7 && <4.13'
  config-value: ! '>=0.4 && <0.5'
  x509-system: ! '>=1.5.0 && <1.7'
  old-locale: ! '>=1.0.0.6 && <1.1'
  attoparsec: ! '>=0.12.1.2 && <0.14'
  transformers: ! '>=0.2 && <0.5'
  deepseq: ! '>=1.3.0.2 && <1.5'
  irc-core: -any
  directory: ! '>=1.2.1.0 && <1.3'
all-versions:
- '1.0'
- '1.1'
- '1.1.0.1'
author: Eric Mertens
latest: '1.1.0.1'
description-type: markdown
description: ! "My IRC client\n=============\n\n[![Build Status](https://secure.travis-ci.org/glguy/irc-core.svg)](http://travis-ci.org/glguy/irc-core)\n\n![](https://raw.githubusercontent.com/wiki/glguy/irc-core/images/screenshot.png)\n\nLibrary\n=======\n\nThis
  package is split into a generic IRC modeling library and a VTY-base text client
  using that library.\n\nClient Features\n===============\n\n* Subsequent joins and
  parts fold into one line and do not scroll chat messages off the screen\n* Ignore
  support that folds ignored messages into the joins and parts. Toggle it off to see
  previously hidden messages\n* Detailed view to see all the messages in a channel
  in full detail with hostmask and timestamp (F2)\n* Nick tab completion\n* SASL authentication\n*
  New message notification\n* Customizable mention filter (looks for your nick plus
  extra search terms)\n* View ban, quiet, invex, and exception lists\n* Support for
  rendering/inputing colors and formatting\n* Haskell source code highlighting (/hs)\n*
  Write your modifications in Haskell!\n* Chanserv automation (automatically requests
  op from chanserv for privileged commands), automatically deop after 5 minutes of
  not performing privileged commands.\n* Command syntax highlighting with hints.\n*
  Each user's nick is assigned a consistent color, when a user's nick is rendered
  in a chat message it uses that same color.\n* Support for /STATUSMSG/ messages\n\nTLS\n===\n\nI've
  added TLS support. You can enable it with the `-t` flag. Note that Freenode (and
  other networks) will allow you to authenticate to NickServ via a client certificate.
  This is configurable via `--tls-client-cert`.\n\nI use the `x509-store` for decoding
  certificates and private key files. This library seems to support PEM formatted
  files and does not seem to support encrypted private key files. If the key and certificate
  are both contained in the certificate file the private key command line argument
  is unnecessary.\n\n[Identifying with CERTFP](https://freenode.net/certfp/)\n\nStartup\n=======\n\n```\nglirc
  <options> SERVER\n  -c FILENAME  --config=FILENAME       Configuration file path
  (default ~/.glirc/config)\n  -p PORT      --port=PORT             IRC Server Port\n
  \ -n NICK      --nick=NICK             Nickname\n  -u USER      --user=USER             Username\n
  \ -r REAL      --real=REAL             Real Name\n               --sasl-user=USER
  \       SASL username\n  -d FILE      --debug=FILE            Debug log filename\n
  \ -i USERINFO  --userinfo=USERINFO     CTCP USERINFO Response\n  -t           --tls
  \                  Enable TLS\n               --tls-client-cert=PATH  Path to PEM
  encoded client certificate\n               --tls-client-key=PATH   Path to PEM encoded
  client key\n               --tls-insecure          Disable server certificate verification\n
  \ -h           --help                  Show help\n\nEnvironment variables\nIRCPASSWORD=<your
  irc password>\nSASLPASSWORD=<your sasl password>\n```\n\nConfiguration file\n=================\n\nA
  configuration file can currently be used to provide some default values instead
  of\nusing command line arguments. If any value is missing the default will be used.\n\nLearn
  more about this file format at [config-value](http://hackage.haskell.org/package/config-value)\n\n```\n--
  Optional file to dump raw server messages\ndebug-file: \"debug.txt\"\n\n-- Defaults
  used when not specified on command line\ndefaults:\n  port:            6667\n  nick:
  \           \"yournick\"\n  username:        \"yourusername\"\n  realname:        \"Your
  real name\"\n  password:        \"IRC server password\"\n  sasl-username:   \"sasl_username\"\n
  \ sasl-password:   \"sasl_password\"\n  userinfo:        \"user info string\"\n
  \ tls:             yes -- or: no\n  tls-client-cert: \"/path/to/cert.pem\"\n  tls-client-key:
  \ \"/path/to/cert.key\"\n\n-- Override the defaults when connecting to specific
  servers\nservers:\n  * hostname:      \"chat.freenode.net\"\n    sasl-username:
  \"someuser\"\n    sasl-password: \"somepass\"\n\n  * hostname:      \"example.com\"\n
  \   port:          7000\n\n-- Specify additional certificates beyond the system
  CAs\nserver-certificates:\n  * \"/path/to/extra/certificate.pem\"\n```\n\nCommands\n========\n\n*
  `/exit` - *Exit!*\n\n* `/akb <nick> <message>` - Auto-kickban: Request ops from
  chanserv if needed, ban by accountname if known, hostname otherwise, kick with message\n*
  `/bans` - Show known bans for current channel. Note: Request bans list with `/quote
  mode <channel> +b`\n* `/channel <channel>` - switch to a user message window\n*
  `/channelinfo` - Show information for the current channel\n* `/ctcp <command> <params>`
  - Send CTCP command to current window\n* `/clear` - Clear all messages for the current
  channel\n* `/help <topic>` - Request help from the server\n* `/hs <haskell source
  code>` - Send syntax highlighted source code as a message to the current channel\n*
  `/ignore <nick>` - Toggle ignoring a user by nickname.\n* `/join <channel>` - join
  a new channel (optional key argument)\n* `/kick <nick> <msg>` - Kick a user from
  the current channel\n* `/masks <mode>` - Show the bans (b), quiets (q), invex (I),
  or ban exemptions (e) for a channel. The list must be requested as above.\n* `/me
  <message>` - send an action to the current channel\n* `/mode <mode> <arguments>`
  - Set modes on the current channel\n* `/msg <nick> <message>` - send a private message\n*
  `/nick <nick>` - Change your nickname\n* `/notice <nick> <message>` - send a notice
  message\n* `/op <nicks>` - Op nicks in the channel, self when no nicks given\n*
  `/deop <nicks>` - Deop nicks in the channel, self when no nicks given\n* `/voice
  <nicks>` - Voice nicks in the channel, self when no nicks given\n* `/devoice <nicks>`
  - Devoice nicks in the channel, self when no nicks given\n* `/part <message>` -
  part the current channel with the given message\n* `/query <nick>` - switch to a
  user message window\n* `/quote <raw client command>` - send a client command verbatim\n*
  `/remove <nick> <msg>` - Force a user to part from the current channel\n* `/server`
  - switch to the server message window\n* `/topic <topic>` - Change the topic for
  the current channel\n* `/umode <mode>` - Set modes on yourself\n* `/window <number>`
  - Jump to a window by index\n* `/whois <nick>` - Query the server for information
  about a user\n* `/whowas <nick>` - Query the server for information about a user
  who recently disconnected.\n* `/stats <letter>` - Request server stat information,
  try `/help stats` on Freenode first.\n* `/admin` - Request some basic admin contact
  information\n* `/away <message>` - Toggle current away status\n* `/time` - Request
  server time\n* `/oper` - Enter your OPER credentials\n* `/accept` - Add user to
  the \"accept list\", try `/help accept` on Freenode\n* `/unaccept` - Remove a user
  from the \"accept list\"\n* `/acceptlist` - List users on accept lists\n* `/knock`
  - Request an /invite/ to a restricted channel\n* `/invite <nick>` - Invite the given
  user to the current channel\n* `/reconnect` - Reconnect to the current server\n\nKeyboard
  Shortcuts\n==================\n\n* `ESC` quit\n* `^N` next channel\n* `^P` previous
  channel\n* `M-#` jump to window\n* `M-A` jump to activity\n* `^A` beginning of line\n*
  `^E` end of line\n* `^K` delete to end\n* `^U` delete to beginning\n* `^D` delete
  at cursor\n* `^W` delete word\n* `^Y` paste from yank buffer\n* `M-F` forward word\n*
  `M-B` backward word\n* `TAB` nickname completion\n* `F2` toggle detailed view\n*
  `F3` toggle timestamps\n* `F4` toggle compressed metadata\n* `Page Up` scroll up\n*
  `Page Down` scroll down\n* `^B` bold\n* `^C` color\n* `^V` reverse video\n* `^_`
  underline\n* `^]` italic\n* `^O` reset formatting\n"
license-name: BSD3
