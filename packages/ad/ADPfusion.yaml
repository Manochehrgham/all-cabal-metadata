changelog-type: markdown
hash: 1292f2fff837890dd6ebf0deaadaf37a19fb321152912e23b9c5d3388139c2a2
test-bench-deps:
  test-framework: ! '>=0.8 && <0.9'
  base: -any
  ADPfusion: -any
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  test-framework-th: ! '>=0.2 && <0.3'
  QuickCheck: -any
synopsis: Efficient, high-level dynamic programming.
changelog: ! "0.4.0.0\n-------\n\n- travic-ci integration\n- forward phase now operates
  on immutable tables that are internally thawed\n- resembles the behavior of Data.Vector.Generic.constructN\n-
  Empty needs to be bound to input. We require this as certain index structures\n
  \ have no natural notion of and empty index -- unless one provides additional\n
  \ information in the index\n\n0.3.0.0\n-------\n\n- simplified boundary checking:
  sometimes gives performance gain (!) due to one\n  loop variable less\n- optimized
  loop variable design following \"The HERMIT in the Stream\" (Farmer\n  et al, 2014)\n-
  somewhat nicer programmer interfaces\n- automatic filling and freezing of tables\n-
  multiple example algorithms (build with -fexamples switch):\n  - Needleman-Wunsch
  global alignment\n  - RNA secondary structure prediction using simple base pair
  maximization\n- updated Table code to handle single-dim Subwords in a better way.\n-
  simplified backtracking\n\n0.2.x.x\n-------\n\n- Streamlined interface: access everything
  via ADP.Fusion\n- /Multi-tape/ grammars can now be written and are fused\n\n"
basic-deps:
  bits: ==0.4.*
  base: ! '>=4.7 && <4.9'
  ADPfusion: -any
  tuple: ==0.3.*
  PrimitiveArray: ==0.6.0.*
  strict: ==0.3.*
  log-domain: ==0.10.*
  monad-primitive: ==0.1
  mtl: ==2.*
  mmorph: ==1.0.*
  transformers: ! '>=0.3 && <0.5'
  OrderedBits: ==0.0.0.*
  QuickCheck: ! '>=2.7 && <2.9'
  template-haskell: ==2.*
  primitive: ! '>=0.5.4 && <0.7'
  vector: ==0.10.*
all-versions:
- '0.0.1.0'
- '0.0.1.1'
- '0.0.1.2'
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.1.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
latest: '0.4.0.2'
description-type: markdown
description: ! "# ADPfusion\n\n[![Build Status](https://travis-ci.org/choener/ADPfusion.svg?branch=master)](https://travis-ci.org/choener/ADPfusion)\n\n[*generalized
  ADPfusion Homepage*](http://www.bioinf.uni-leipzig.de/Software/gADP/)\n\n\n\n# Introduction\n\nADPfusion
  combines stream-fusion (using the stream interface provided by the\nvector library)
  and type-level programming to provide highly efficient dynamic\nprogramming combinators.\n\nFrom
  the programmers' viewpoint, ADPfusion behaves very much like the original\nADP implementation
  <http://bibiserv.techfak.uni-bielefeld.de/adp/> developed by\nRobert Giegerich and
  colleagues, though both combinator semantics and\nbacktracking are different.\n\nThe
  library internals, however, are designed not only to speed up ADP by a\nlarge margin
  (which this library does), but also to provide further runtime\nimprovements by
  allowing the programmer to switch over to other kinds of data\nstructures with better
  time and space behaviour. Most importantly, dynamic\nprogramming tables can be strict,
  removing indirections present in lazy, boxed\ntables.\n\nAs an example, even rather
  complex ADP code tends to be completely optimized to\nloops that use only unboxed
  variables (Int# and others, indexIntArray# and\nothers).\n\nCompletely novel (compared
  to ADP), is the idea of allowing efficient monadic\ncombinators. This facilitates
  writing code that performs backtracking, or\nsamples structures stochastically,
  among others things.\n\nThis version is still highly experimental and makes use
  of multiple recent\nimprovements in GHC. This is particularly true for the monadic
  interface.\n\nLong term goals: Outer indices with more than two dimensions, specialized
  table\ndesign, a combinator library, a library for computational biology.\n\nTwo
  algorithms from the realm of computational biology are provided as examples\non
  how to write dynamic programming algorithms using this library:\n<http://hackage.haskell.org/package/Nussinov78>
  and\n<http://hackage.haskell.org/package/RNAfold>.\n\n\n\n# Installation\n\nIf GHC-7.2.2/GHC-7.4,
  LLVM and cabal-install are available, you should be all\nset. I recommend using
  cabal-dev as it provides a very nice sandbox (replace\ncabal-dev with cabal otherwise).\n\nIf
  you go with cabal-dev, no explicit installation is necessary and ADPfusion\nwill
  be installed in the sandbox together with the example algorithms or your\nown.\n\nFor
  a more global installation, \"cabal install ADPfusion\" should do the trick.\n\nTo
  run the Quickcheck tests, do an additional \"cabal-dev install QuickCheck\",\nthen
  \"cabal-dev ghci\", \":l ADP/Fusion/QuickCheck.hs\", and \"allProps\". Loading\nthe
  quickcheck module should take a bit due to compilation. \"allProps\" tests\nall
  properties and should yield no errors.\n\n\n\n# Notes\n\nIf you have problems, find
  bugs, or want to use this library to write your own\nDP algorithms, please send
  me a mail. I'm very interested in hearing what is\nmissing.\n\nOne of the things
  I'll be integrating is an extension to higher dimensions\n(more than two).\n\nRight
  now, I am not quite happy with the construction and destruction of the\n\"Box\"
  representations. These will change soon. In addition, an analysis of the\nactual
  combinators should remove the need for nested applications of objective\nfunctions
  in many cases.\n\n\n\n# Implementors Notes\n\n\n- The general inlining scheme is:
  (i) mkStream is {-# INLINE mkStream #-},\n  inner functions like mk, step, worker
  functions, and index-modifying\n  functions get an {-# INLINE [0] funName #-}. Where
  there is no function to\n  annotate, use delay_inline.\n\n- If you implement a new
  kind of memoizing table, like the dense Table.Array\n  ones, you will have to implement
  mkStream code. When you hand to the left,\n  the (i,j) indices and modify their
  extend (by, say, having NonEmpty table\n  constaints), you have to delay_inline
  this (until inliner phase 0). Otherwise\n  you will break fusion for mkStream.\n\n\n\n####
  Contact\n\nChristian Hoener zu Siederdissen\nchoener@bioinf.uni-leipzig.de\nLeipzig
  University, Leipzig, Germany\n\n"
