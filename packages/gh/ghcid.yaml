homepage: https://github.com/ndmitchell/ghcid#readme
changelog-type: text
hash: b0d70ae396ce2d8adcec06901c032b2a4f6b689f5b0f6c852902b0d8b534d3f8
test-bench-deps:
  extra: ! '>=1.2'
  base: ! '>=4'
  time: -any
  filepath: -any
  process: -any
  containers: -any
  terminal-size: ! '>=0.3'
  ansi-terminal: -any
  cmdargs: -any
  tasty-hunit: -any
  tasty: -any
  fsnotify: -any
  directory: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: GHCi based bare bones IDE
changelog: ! "Changelog for GHCiD\n\n0.5\n    Add an extra boolean argument to startGhci\n
  \   Add the number of modules loaded after All good\n    Print out messages until
  the prompt comes up\n    #23, add arguments and change what commands get invoked\n
  \   #35, change the titlebar icon on Windows\n0.4.2\n    Fix a GHC 7.6 warning\n0.4.1\n
  \   #37, add a --notitle flag\n    Require extra-1.2\n0.4\n    #33, make Ctrl-C
  more robust\n    #31, add an outputfile feature\n    #32, make newer warnings first
  (save a file, view its warnings)\n    #28, fix issues on VIM file saves\n    #29,
  support running a quick test on each save\n    Add a --directory flag to change
  directory first\n    #26, use fs-notify to avoid excessive wakeups\n    #25, detect
  console size just before using it\n0.3.6\n    #24, don't error out if error/putStrLn
  are not imported\n0.3.5\n    #19, put errors in bold\n    #9, display interesting
  information in the title bar\n    #7, reload if the .ghci or .cabal file changes\n
  \   Use nubOrd\n    Require extra-1.1\n0.3.4\n    #21, if you aren't waiting for
  any files, exit\n0.3.3\n    #21, if the root file is missing, report an error\n
  \   #20, avoid an O(n^2) nub\n0.3.2\n    #18, reformat excessively long lines, add
  a --width flag\n0.3.1\n    Ensure if there are lots of warnings, the first error
  gets shown\n0.3\n    #11, ignore certain GHCi-only warnings\n    #13, fix version
  printing\n    #8, display Loading... when starting\n    Require the extra library\n
  \   #14, figure out the terminal height automatically\n0.2\n    #6, rewrite as a
  library\n    Remove duplicate error messages from cabal repl\n0.1.3\n    #2, handle
  files that get deleted while loaded\n    #3, flesh out the test suite\n    #4, give
  a polite error if ghci does not start\n    #5, add --topmost flag to make the window
  topmost\n0.1.2\n    Add a very simple test suite\n    Default to cabal repl if there
  is no .ghci file\n    #1, if there is an IOError just :reload\n    Say why you are
  reloading\n0.1.1\n    Support arguments to --command\n0.1\n    Initial version\n"
basic-deps:
  extra: ! '>=1.2'
  base: ==4.*
  time: -any
  filepath: -any
  process: ! '>=1.1'
  containers: -any
  terminal-size: ! '>=0.3'
  ansi-terminal: -any
  cmdargs: ! '>=0.10'
  fsnotify: -any
  directory: ! '>=1.2'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.3'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.5'
author: Neil Mitchell <ndmitchell@gmail.com>, jpmoresmau
latest: '0.5'
description-type: markdown
description: ! "# ghcid [![Hackage version](https://img.shields.io/hackage/v/ghcid.svg?style=flat)](https://hackage.haskell.org/package/ghcid)
  [![Build Status](https://img.shields.io/travis/ndmitchell/ghcid.svg?style=flat)](https://travis-ci.org/ndmitchell/ghcid)\n\nEither
  \"GHCi as a daemon\" or \"GHC + a bit of an IDE\". To a first approximation, it
  opens `ghci` and runs `:reload` whenever your source code changes, formatting the
  output to fit a fixed height console. Unlike other Haskell development tools, `ghcid`
  is intended to be _incredibly simple_. In particular, it doesn't integrate with
  any editors, doesn't depend on GHC the library and doesn't start web servers.\n\n_Acknowledgements:_
  This project incorporates significant work from [JPMoresmau](https://github.com/JPMoresmau),
  who is listed as a co-author.\n\n**Using it**\n\nRun `cabal update && cabal install
  ghcid` to install it as normal. Then run `ghcid --height=8 --topmost \"--command=ghci
  Main.hs\"`. The `height` is the number of lines you are going to resize your console
  window to (defaults to height of the console). The `topmost` is to make the window
  sit above all others, which only works on Windows. The `command` is how you start
  your project in `ghci`. If you omit `--command` then it will default to `ghci` if
  you have a `.ghci` file in the current directory, otherwise it will default to `cabal
  repl`.\n\nPersonally, I always create a `.ghci` file at the root of all my projects,
  which usually [reads something like](https://github.com/ndmitchell/ghcid/blob/master/.ghci):\n\n
  \   :set -fwarn-unused-binds -fwarn-unused-imports\n    :set -isrc\n    :load Main\n\nAfter
  that, resize your console and make it so you can see it while working in your editor.
  On Windows the console will automatically sit on top of all other windows. On Linux,
  you probably want to use your window manager to make it topmost or use a [tiling
  window manager](http://xmonad.org/).\n\n**What you get**\n\nOn every save you'll
  see a list of the errors and warnings in your project. It uses `ghci` under the
  hood, so even relatively large projects should update their status pretty quickly.
  As an example:\n\n    Main.hs:23:10:\n        Not in scope: `verbosit'\n        Perhaps
  you meant `verbosity' (imported from System.Console.CmdArgs)\n    Util.hs:18:1:
  Warning: Defined but not used: `foo'\n\nOr, if everything is good, you see:\n\n
  \   All good\n\nPlease [report any bugs](https://github.com/ndmitchell/ghcid/issues)
  you find.\n\n**FAQ**\n\n* _This isn't as good as full IDE._ I've gone for simplicity
  over features. It's a point in the design space, but not necessarily the best point
  in the design space for you. For \"real\" IDEs see [the Haskell wiki](http://www.haskell.org/haskellwiki/IDEs).\n*
  _If I delete a file and put it back it gets stuck._ Yes, that's a [bug in GHCi](https://ghc.haskell.org/trac/ghc/ticket/9648).
  If you see GHCi getting confused just kill `ghcid` and start it again.\n"
license-name: BSD3
