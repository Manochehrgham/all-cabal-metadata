homepage: http://www.clash-lang.org/
changelog-type: markdown
hash: e4db76ab525baa3396c5dcc9bf6b5835f0460bdf7171c29d4818c1c2239b3e52
test-bench-deps:
  base: ! '>=4.8 && <5'
  ghc-typelits-natnormalise: ! '>=0.4'
  tasty-hunit: ! '>=0.9'
  tasty: ! '>=0.10'
maintainer: christiaan.baaij@gmail.com
synopsis: GHC typechecker plugin for types of kind GHC.TypeLits.Nat
changelog: ! "# Changelog for the [`ghc-typelits-natnormalise`](http://hackage.haskell.org/package/ghc-typelits-natnormalise)
  package\n\n## 0.4 *January 19th 2016*\n* Stop using 'provenance' hack to create
  conditional evidence (GHC 8.0+ only)\n* Find more unifications:\n  * `F x + 2 -
  1 - 1 ~ F x` ==> [F x := F x], where `F` can be any type function with result `Nat`.\n\n##
  0.3.2\n* Find more unifications:\n  * `(z ^ a) ~ (z ^ b) ==> [a := b]`\n  * `(i
  ^ a) ~ j ==> [a := round (logBase i j)]`, when `i` and `j` are integers, and `ceiling
  (logBase i j) == floor (logBase i j)`.\n\n## 0.3.1 *October 19th 2015*\n* Find more
  unifications:\n  * `(i * a) ~ j ==> [a := div j i]`, when `i` and `j` are integers,
  and `mod j i == 0`.\n  * `(i * a) + j ~ k  ==> [a := div (k-j) i]`, when `i`, `j`,
  and `k` are integers, and `k-j >= 0` and `mod (k-j) i == 0`.\n\n## 0.3 *June 3rd
  2015*\n* Find more unifications:\n  * `<TyApp xs> + x ~ 2 + x ==> [<TyApp xs> ~
  2]`\n* Fixes bugs:\n  * Unifying `a*b ~ b` now returns `[a ~ 1]`; before it erroneously
  returned `[a ~ ]`, which is interpred as `[a ~ 0]`...\n  * Unifying `a+b ~ b` now
  returns `[a ~ 0]`; before it returned the undesirable, though equal, `[a ~ ]`\n\n##
  0.2.1 *May 6th 2015*\n* Update `Eq` instance of `SOP`: Empty SOP is equal to 0\n\n##
  0.2 *April 22nd 2015*\n* Finds more unifications:\n  * `(2 + a) ~ 5  ==>  [a :=
  3]`\n  * `(3 * a) ~ 0  ==>  [a := 0]`\n\n## 0.1.2 *April 21st 2015*\n* Don't simplify
  expressions with negative exponents\n\n## 0.1.1 *April 17th 2015*\n* Add workaround
  for https://ghc.haskell.org/trac/ghc/ticket/10301\n\n## 0.1 *March 30th 2015*\n*
  Initial release\n"
basic-deps:
  ghc: ! '>=7.10 && <8.2'
  base: ! '>=4.8 && <5'
  ghc-tcplugins-extra: ! '>=0.2'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.2.1'
- '0.3'
- '0.3.1'
- '0.4'
author: Christiaan Baaij
latest: '0.4'
description-type: markdown
description: ! "# ghc-tynat-normalise\n\n[![Build Status](https://secure.travis-ci.org/clash-lang/ghc-typelits-natnormalise.png?branch=master)](http://travis-ci.org/clash-lang/ghc-typelits-natnormalise)\n[![Hackage](https://img.shields.io/hackage/v/ghc-typelits-natnormalise.svg)](https://hackage.haskell.org/package/ghc-typelits-natnormalise)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-natnormalise.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-natnormalise)\n\nA
  type checker plugin for GHC that can solve _equalities_ \nof types of kind `Nat`,
  where these types are either:\n\n* Type-level naturals\n* Type variables\n* Applications
  of the arithmetic expressions `(+,-,*,^)`.\n\nIt solves these equalities by normalising
  them to _sort-of_\n`SOP` (Sum-of-Products) form, and then perform a\nsimple syntactic
  equality.\n\nFor example, this solver can prove the equality between:\n\n```\n(x
  + 2)^(y + 2)\n```\n\nand\n\n```\n4*x*(2 + x)^y + 4*(2 + x)^y + (2 + x)^y*x^2\n```\n\nBecause
  the latter is actually the `SOP` normal form\nof the former.\n\nTo use the plugin,
  add\n\n```\n{-# OPTIONS_GHC -fplugin GHC.TypeLits.Normalise #-}\n```\n\nTo the header
  of your file.\n"
license-name: BSD2
