homepage: ''
changelog-type: text
hash: 1aa1d7a7d2998f8f3a0a67bd210f3906526c330038d9d121ed2649002d1fc0c4
test-bench-deps: {}
maintainer: edsko@well-typed.com
synopsis: Analyze and visualize event logs
changelog: ! "2014-02-12  Edsko de Vries  <edsko@well-typed.com>\n\n  * Initial release
  \n"
basic-deps:
  diagrams-lib: ! '>=1.2 && <1.3'
  SVGFonts: ! '>=1.4 && <1.5'
  base: ! '>=4.5 && <4.8'
  filepath: ! '>=1.3 && <1.4'
  parsec: ! '>=3.1 && <3.2'
  ghc-events: ! '>=0.4 && <0.5'
  diagrams-svg: ! '>=1.1 && <1.3'
  containers: ! '>=0.5 && <0.6'
  lens: ! '>=3.10 && <4.5'
  mtl: ! '>=2.2.1 && <2.3'
  transformers: ! '>=0.3 && <0.5'
  optparse-applicative: ! '>=0.11 && <0.12'
  th-lift: ! '>=0.6 && <0.7'
  template-haskell: -any
all-versions:
- '0.2.0'
- '0.2.1'
author: Edsko de Vries, Duncan Coutts, Mikolaj Konarski
latest: '0.2.1'
description-type: haddock
description: ! 'ghc-events-analyze is a simple Haskell profiling tool that

  uses GHC''s eventlog system. It helps with some profiling

  use cases that are not covered by the existing GHC

  profiling modes or tools. It has two major features:


  1. While ThreadScope shows CPU activity across all your

  cores, ghc-events-analyze shows CPU activity across all

  your Haskell threads.


  2. It lets you label periods of time during program

  execution (by instrumenting your code with special trace

  calls) and then lets you visualize those time periods or

  get statistics on them.


  It is very useful for profiling code when ghc''s normal

  profiling mode is not available, or when using profiling

  mode would perturb the code too much. It is also useful

  when you want time-profiling information with a breakdown

  over time rather than totals for the whole run.


  The blog post

  <http://www.well-typed.com/blog/2014/02/ghc-events-analyze/ Performance profiling
  with ghc-events-analyze>

  describes the motivation in more detail.'
license-name: BSD3
