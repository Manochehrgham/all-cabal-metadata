homepage: ''
changelog-type: text
hash: 7177ec844a28753ed892c04428d649d88756fbe931c498d9be1309e449867fc6
test-bench-deps:
  ghc: -any
  filemanip: -any
  base: <5
  syb: -any
  ghc-exactprint: -any
  filepath: -any
  HUnit: -any
  containers: -any
  silently: -any
  ghc-paths: -any
  mtl: -any
  random: -any
  directory: -any
maintainer: alan.zimm@gmail.com
synopsis: ExactPrint for GHC
changelog: ! "2015-07-20 v0.3\n\tSubstantial rework to manage changes introduced in
  GHC 7.10.2 rc2\n\tand beyond.\n\n\tSimplification of the core Annotation data type
  coupled with\n\tsimplification of the various phases, by @mpickering.\n\n\tIntroduction
  of initial Transform functions, driven by the needs\n\tof HaRe [1] and apply-refact
  [2] for applying hlint hints. Both of\n\tthese are currently works in progress,
  and this module is likely\n\tto change substantially in future releases.\n\n\tSupport
  for processing files making use of CPP.\n\n\tLinks\n\t[1] https://github.com/alanz/HaRe/tree/wip\n\t[2]
  https://github.com/mpickering/apply-refact\n\n2015-03-24 v0.2\n\tThis release contains
  a major rewrite of all internal modules.\n\n\tThe external interface has also changed
  significantly. A description is\n\tomitted.\n\n\t# Top-level changes\n\tThe most
  notable change is that the common structor of the modules known as\n\t`ExactPrint`
  and `Annotate` has been factored out into a common module\n\t(`Annotate`). The aforementioned
  modules are now known as `Delta` and\n\t`Print` and contain functions to interpret
  this common structure.\n\n\tThe top level module `ExactPrint` now just reexports
  a consistent interface\n\tfrom the base modules.\n\n\tIntroduced a new module `Lookup`
  which contains a mapping from AnnKeywordId\n\tto their String representation.\n\n\t#
  Internal Changes\n\n\t`Annotate` contains all the information about which annotations
  appear on\n\teach AST element. This is achieved by building up a syntax tree (using
  a\n\tfree monad) which can then be interpreted by programs requiring access to\n\tthis
  information.\n\n\t# Layout compensation\n\n\tThe method which compensates for layout
  rules has been clarified.\n\n\t\t1. When the Layout Flag is activated in `Annotate`,
  we mark\n\tthe current column as the start of the layout block.\n\n\t\t2. This is
  important when we move to a new line. We take the offset at\n\t\tthat current point
  to be the baseline and calculate the correct next\n\t\tposition based on this.\n\n\t\t3.
  This method is very general as one can think of a entire source file as\n\t\tobeying
  layout rules where the offset is equal to zero.\n\n\n2015-03-11 v0.1.1.0\n\tHandles
  indentation when the AST is edited\n\tMajor rework of internal monads by @mpickering\n2015-01-28
  v0.1.0.1\n\tUpdate cabal to prevent building with GHC 7.70,thanks @peti\n2015-01-24
  v0.1.0.0\n\tInitial release, for GHC 7.10 RC 2\n"
basic-deps:
  free: -any
  ghc: -any
  base: ! '>=4.7 && <4.9'
  syb: -any
  filepath: -any
  containers: -any
  ghc-paths: -any
  mtl: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.2'
- '0.3'
author: Alan Zimmerman, Matthew Pickering
latest: '0.3'
description-type: haddock
description: ! 'Using the API Annotations available from GHC 7.10.2, this

  library provides a means to round trip any code that can

  be compiled by GHC, currently excluding lhs files.


  It does this with a phased approach


  * Delta - converts GHC API Annotations into relative

  offsets, indexed by SrcSpan


  * Transform - functions to facilitate changes to

  the AST, adjusting the annotations generated in the

  Delta phase to suit the changes.


  * Print - converts an AST and its annotations to

  properly formatted source text.



  Note: requires GHC 7.10.2 or later'
license-name: BSD3
