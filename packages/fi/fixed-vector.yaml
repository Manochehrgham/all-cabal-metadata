changelog-type: ''
hash: 55d491f07939ff1e194c9002b25473c5f2b9a36b6ea77aa668b977873fd38e7d
synopsis: Generic vectors with statically known size.
changelog: ''
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.2.1'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.4.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.2'
- '0.6.0.0'
- '0.6.1.0'
- '0.6.1.1'
- '0.6.2.0'
- '0.6.3.0'
- '0.6.3.1'
- '0.6.4.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.0.3'
- '0.8.0.0'
latest: '0.8.0.0'
description-type: haddock
description: ! 'Generic library for vectors with statically known

  size. Implementation is based on

  <http://unlines.wordpress.com/2010/11/15/generics-for-small-fixed-size-vectors/>

  Same functions could be used to work with both ADT based vector like


  > data Vec3 a = a a a


  Tuples are vectors too:


  >>> sum (1,2,3)

  6


  Vectors which are represented internally by arrays are provided by

  library. Both boxed and unboxed arrays are supported.


  Library is structured as follows:


  * Data.Vector.Fixed

  Generic API. It''s suitable for both ADT-based vector like Complex

  and array-based ones.


  * Data.Vector.Fixed.Cont

  Continuation based vectors. Internally all functions use them.


  * Data.Vector.Fixed.Mutable

  Type classes for array-based implementation and API for working with

  mutable state.


  * Data.Vector.Fixed.Unboxed

  Unboxed vectors.


  * Data.Vector.Fixed.Boxed

  Boxed vector which can hold elements of any type.


  * Data.Vector.Fixed.Storable

  Unboxed vectors of Storable  types.


  * Data.Vector.Fixed.Primitive

  Unboxed vectors based on pritimive package.


  * Data.Vector.Fixed.Monomorphic

  Wrappers for monomorphic vectors'
