changelog-type: text
hash: 4acf4fdc1d29e46f5975cb7ab5d0fee4634c1175d833f3a3bb1855db5a909c18
test-bench-deps:
  filemanip: ==0.3.6.*
  base: ! '>=3 && <5'
  doctest: ==0.9.*
  primitive: -any
synopsis: Generic vectors with statically known size.
changelog: ! "Changes in 0.8.0.0\n\n  * NFData instances for all data type.\n\n  *
  Storable instances for all data types and default implementation of\n    Storable's
  methods added.\n\n  * {i,}zipWith3 and {i,}zipWithM_ added.\n\n\nChanges in 0.7.0.3\n\n
  \ * GHC 7.10 support\n\n\nChanges in 0.7.0.0\n\n  * Type level addition for unary
  numbers added\n\n  * `concat` function added\n\n  * More consistent naming for functions
  for working with `Fun`\n\n\nChanges in 0.6.4.0\n\n  * Isomorphism between Peano
  numbers and Nat added. (GHC >= 7.8)\n\n\nChanges in 0.6.3.1\n\n  * Documentation
  fixes.\n\n\nChanges in 0.6.3.0\n\n  * Left scans added.\n\n\nChanges in 0.6.2.0\n\n
  \ * `Vec1' type synonym for boxed/unboxed/etc. vectors added.\n\n  * Vector instance
  for Data.Typeable.Proxy (GHC >= 7.8)\n\n\nChanges in 0.6.1.1\n\n  * GHC 7.8 support\n\n\nChanges
  in 0.6.1.0\n\n  * `distribute', `collect' and their monadic variants added.\n\n\nChanges
  in 0.6.0.0\n\n  * Data instance for all array-based vectors added.\n\n  * Storable
  instance added for `Storable.Vec'.\n\n  * Monoid instances added for all vectors.\n\n\nChanges
  in 0.5.1.0\n\n  * Zero-element vector `Empty' is added.\n\n\nChanges in 0.5.0.0\n\n
  \ * `ContVec' now behaves like normal vector. `Arity' type class is\n    reworked.
  `Id' data type is removed.\n\n  * Construction of vector reworked.\n\n  * `reverse',
  `snoc', `consV', `fold' and `foldMap' are added.\n\n  * Type changing maps and zips
  are added.\n\n  * Vector indexing with type level numbers is added.\n\n  * Twan
  van Laarhoven's lens added. (`element' and `elementTy')\n\n  * Ord instances added
  to vector data types defined in the library.\n\n\nChanges in 0.4.4.0\n\n  * Functor
  and Applicative instances are added to Id.\n\n\nChanges in 0.4.3.0\n\n  * Typeable
  instance for S and Z added.\n\n\nChanges in 0.4.2.0\n\n  * 1-tuple `Only' added.\n\n
  \ * fromList' and fromListM added.\n\n  * apply functions from Arity type class
  generalized.\n\n\nChanges in 0.4.1.0\n\n  * `cons' function added.\n\n  * Getter
  for `Fun' data type added.\n\n\nChanges in 0.4.0.0\n\n  * Wrapper for monomorphics
  vectors is added.\n\n  * `VecList' is reimplemented as GADT and constructors are
  exported.\n\n  * Constructor of `ContVecT' is exported\n\n  * Empty `ContVecT' is
  implemented as `empty'.\n\n  * Typeable, Foldable and Traversable instances are
  added where\n    appropriate\n\n\nChanges in 0.3.0.0\n\n  * Vector type class definition
  is moved to the D.V.F.Cont module.\n\n  * Indexing function restored.\n\n  * `unfoldr'
  added.\n\n\nChanges in 0.2.0.0\n\n  * Continuation-based vector added.\n\n  * Right
  fold added.\n\n  * tailWith, convertContinuation, and ! from\n    Data.Vector.Fixed
  removed.\n\n  * Vector instance for tuples added.\n\n\nChanges in 0.1.2\n\n  * imap,
  imapM, ifoldl, ifoldM, zipWithM, izipWithM\n    functions are added.\n\n  * VectorN
  type class added.\n\n\nChanges in 0.1.1\n\n  * foldM and tailWith added. Type synonyms
  for numbers up to 6 are\n    added. Fun is reexported from Data.Vector.Fixed.\n"
basic-deps:
  base: ! '>=3 && <5'
  deepseq: -any
  primitive: -any
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.2.1'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.4.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.2'
- '0.6.0.0'
- '0.6.1.0'
- '0.6.1.1'
- '0.6.2.0'
- '0.6.3.0'
- '0.6.3.1'
- '0.6.4.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.0.3'
- '0.8.0.0'
latest: '0.8.0.0'
description-type: haddock
description: ! 'Generic library for vectors with statically known

  size. Implementation is based on

  <http://unlines.wordpress.com/2010/11/15/generics-for-small-fixed-size-vectors/>

  Same functions could be used to work with both ADT based vector like


  > data Vec3 a = a a a


  Tuples are vectors too:


  >>> sum (1,2,3)

  6


  Vectors which are represented internally by arrays are provided by

  library. Both boxed and unboxed arrays are supported.


  Library is structured as follows:


  * Data.Vector.Fixed

  Generic API. It''s suitable for both ADT-based vector like Complex

  and array-based ones.


  * Data.Vector.Fixed.Cont

  Continuation based vectors. Internally all functions use them.


  * Data.Vector.Fixed.Mutable

  Type classes for array-based implementation and API for working with

  mutable state.


  * Data.Vector.Fixed.Unboxed

  Unboxed vectors.


  * Data.Vector.Fixed.Boxed

  Boxed vector which can hold elements of any type.


  * Data.Vector.Fixed.Storable

  Unboxed vectors of Storable  types.


  * Data.Vector.Fixed.Primitive

  Unboxed vectors based on pritimive package.


  * Data.Vector.Fixed.Monomorphic

  Wrappers for monomorphic vectors'
