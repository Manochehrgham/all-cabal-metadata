homepage: http://clafer.org
changelog-type: markdown
hash: 2bf6d76f81d25e18e5d1ae4e6d2d0f6efb8298bfce840ad3dacdcbdda1c78714
test-bench-deps:
  clafer: ==0.4.4
  tasty-th: ! '>=0.1.3'
  base: ! '>=4.7.0.1 && <5'
  filepath: ! '>=1.3.0.2'
  HUnit: ! '>=1.2.5.2'
  array: ! '>=0.5.0.0'
  claferIG: ==0.4.4
  cmdargs: ! '>=0.10.12'
  tasty-hunit: ! '>=0.9.2'
  transformers: ! '>=0.3.0.0'
  tasty: ! '>=0.10.1.2'
  transformers-compat: ! '>=0.3'
  directory: ! '>=1.2.1.0'
maintainer: Michal Antkiewicz <mantkiew@gsd.uwaterloo.ca>
synopsis: claferIG is an interactive tool that generates instances of Clafer models.
changelog: ! "##### ClaferIG Version 0.4.4 released on Jun 23, 2016\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/32)\r\n\r\n#####
  ClaferIG Version 0.4.3 released on Dec 22, 2015\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/31)\r\n\r\n#####
  ClaferIG Version 0.4.2.1 released on Oct 19, 2015\r\n\r\n* Fixed Java manifest file,
  added stack instructions to README\r\n\r\n##### ClaferIG Version 0.4.2 released
  on Oct 16, 2015\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/28)\r\n\r\n#####
  ClaferIG Version 0.4.1 released on Sep 1, 2015\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/27)\r\n\r\n#####
  ClaferIG Version 0.4.0 released on Jul 28, 2015\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/26)\r\n\r\n#####
  ClaferIG Version 0.3.10 released on April 24, 2015\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/25)\r\n\r\n#####
  ClaferIG Version 0.3.9 released on March 06, 2015\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/24)\r\n\r\n#####
  ClaferIG Version 0.3.8 released on January 27, 2015\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/23)\r\n\r\n#####
  ClaferIG Version 0.3.7 released on October 23, 2014\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/22)\r\n\r\n#####
  ClaferIG Version 0.3.6.1 released on July 08, 2014\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/20)\r\n\r\n#####
  ClaferIG Version 0.3.6 released on May 23, 2014\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/19)\r\n\r\n#####
  ClaferIG Version 0.3.5 released on January 20, 2014\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/17)\r\n\r\n#####
  ClaferIG Version 0.3.4 released on September 20, 2013\r\n\r\n##### ClaferIG Version
  0.3.3 released on August 14, 2013\r\n\r\n* [Release](https://github.com/gsdlab/claferIG/pull/12)\r\n\r\n#####
  ClaferIG Version 0.3.2 released on April 11, 2013\r\n\r\n##### ClaferIG Version
  0.3.1 released on October 17, 2012\r\n\r\n##### ClaferIG Version 0.3 released on
  July 17, 2012\r\n\r\nThis was the first release of Clafer Instance Generator and
  included all code since the beginning of the project.\r\n"
basic-deps:
  mtl-compat: ! '>=0.2.1'
  clafer: ==0.4.4
  haskeline: ! '>=0.7.1.2'
  base: ! '>=4.7.0.1 && <5'
  HaXml: ! '>=1.25.3'
  executable-path: ! '>=0.0.3'
  filepath: ! '>=1.3.0.2'
  process: ! '>=1.2.0.0'
  parsec: ! '>=3.1.5'
  array: ! '>=0.5.0.0'
  claferIG: ==0.4.4
  containers: ! '>=0.5.5.1'
  json-builder: ! '>=0.3'
  data-stringmap: ! '>=1.0.1.1'
  mtl: ! '>=2.1.3.1'
  cmdargs: ! '>=0.10.12'
  transformers: ! '>=0.3.0.0'
  string-conversions: ! '>=0.3.0.3'
  transformers-compat: ! '>=0.3'
  directory: ! '>=1.2.1.0'
all-versions:
- '0.4.2.1'
- '0.4.3'
- '0.4.4'
author: Jimmy Liang, Michal Antkiewicz, Luke Michael Brown
latest: '0.4.4'
description-type: markdown
description: ! "# Clafer Instance Generator\r\n\r\n##### v0.4.4\r\n\r\n[Clafer](http://clafer.org)
  is a powerful (equivalent to first-order predicate logic) yet lightweight structural
  modeling language. Despite simplicity and conciseness of Clafer, writing correct
  models remains challenging due to hard-to-predict interactions among all constraints
  expressed in the model.\r\n\r\n**Clafer instance generator** (ClaferIG) is an interactive
  tool that generates instances and counter examples of concrete clafers in a Clafer
  model. If the concrete clafers do not have contradicting constraints, the generator
  produces valid instance data. Otherwise, the generator produces an unsatisfiable
  core which included all contradicting constraints and generates a counter example
  by removing one constraint from the core. The generator can potentially produce
  many instances if the concrete clafers are not fully specialized. The generator
  produces different instances on-demand. With these capabilities, the instance generator
  can be used for debugging models: checking the consistency of the model and detecting
  under- and overconstraining of the model. The instance generator can also be used
  programmatically via API (the command line and interactive session interfaces only
  use the API).\r\n\r\nFor more information, see [technical report](http://gsd.uwaterloo.ca/node/462).\r\n\r\n##
  Contributors\r\n\r\n* [Micha≈Ç Antkiewicz](http://gsd.uwaterloo.ca/mantkiew), Main
  developer.\r\n* [Jimmy Liang](http://gsd.uwaterloo.ca/jliang), Original developer.\r\n*
  Luke Michael Brown, co-op student May-Aug 2013. Many improvements.\r\n\r\n## Getting
  the Clafer Instance Generator\r\n\r\nClafer can be installed from a binary distribution
  (preferred), from Hackage, and from the source code.\r\n\r\n### Dependencies for
  running\r\n\r\nRegardless of the installation method, the following are required:\r\n\r\n*
  [Clafer](https://github.com/gsdlab/clafer) v0.4.4\r\n* [Java Platform (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
  v8+, 64bit\r\n  * On Windows, Java must be 32bit because of Alloy, 64bit otherwise\r\n*
  [Alloy4.2](http://alloy.mit.edu/alloy/download.html)\r\n\r\n### Installation from
  binaries\r\n\r\nBinary distributions of the release 0.4.4 of Clafer Tools for Windows,
  Mac, and Linux,\r\ncan be downloaded from [Clafer Tools - Binary Distributions](http://gsd.uwaterloo.ca/clafer-tools-binary-distributions).\r\n\r\n1.
  download the binaries and unpack `<target directory>` of your choice,\r\n2. add
  the `<target directory>` to your system path so that the executables can be found.\r\n\r\n###
  Installation From Hackage\r\n\r\nClafer is now available on [Hackage](http://hackage.haskell.org/package/claferIG-0.4.4/)
  and it can be installed using either [`stack`](https://github.com/commercialhaskell/stack)
  or [`cabal-install`](https://hackage.haskell.org/package/cabal-install).\r\n\r\n####
  Installation using `stack`\r\n\r\nStack is the only requirement: no other Haskell
  tooling needs to be installed because stack will automatically install the needed
  Haskell build tools.\r\n\r\n1. [install `stack`](https://github.com/commercialhaskell/stack#how-to-install)\r\n2.
  Execute\r\n  * `stack install claferIG`\r\n  * ``` cd `stack --local-bin-path` ```\r\n
  \ * `wget http://alloy.mit.edu/alloy/downloads/alloy4.2_2015-02-22.jar`\r\n  * `mv
  alloy4.2_2015-02-22.jar alloy4.2.jar`\r\n  * `wget https://github.com/gsdlab/claferIG/raw/master/alloyIG.jar`\r\n
  \ * `mkdir lib`\r\n  * `cd lib`\r\n  * Depending on your OS:\r\n    * for Win, `stack
  exec wget --  https://github.com/gsdlab/claferIG/raw/master/lib/libminisatprover.dll`\r\n
  \   * for Linux, `wget https://github.com/gsdlab/claferIG/raw/master/lib/libminisatprover.so`\r\n
  \   * for Mac, `wget https://github.com/gsdlab/claferIG/raw/master/lib/libminisatprover.dylib`\r\n\r\n####
  Installation using `cabal-install`\r\n\r\nDependencies\r\n\r\n* [GHC](https://www.haskell.org/downloads)
  >= 7.10.3 and 8.0.1 are recommended,\r\n* `cabal-install` >= 1.18, should be installed
  together with a GHC distribution,\r\n\r\n1. Install GHC\r\n2. `cabal update`\r\n3.
  `cabal install claferIG`\r\n4. `cd <cabal's lib or share folder>`  (`C:\\Users\\<user>\\AppData\\Roaming\\cabal\\x86_64-windows-ghc-8.0.1\\claferIG-0.4.4`
  on Windows or `.cabal/share/x86_64-linux-ghc-8.0.1/claferIG-0.4.4/` on Linux)\r\n5.
  to automatically download alloy4.2.jar\r\n  * execute `make alloy4.2.jar`\r\n7.
  copy the following into the Cabal's `bin` folder\r\n  * the file `alloyIG.jar`\r\n
  \ * the file `alloy4.2.jar`\r\n  * the folder `lib`\r\n\r\n### Installation from
  the source code\r\n\r\nDependencies\r\n\r\n* [GHC](https://www.haskell.org/downloads)
  >= v7.10.3\r\n* [Clafer compiler](https://github.com/gsdlab/clafer) (to produce
  Alloy models (`.als`)).\r\n* On Linux, might need to manually install `zlib1g-dev`
  and `libncurses5-dev` to build one of Haskell packages on which ClaferIG depends\r\n
  \ * on Ubuntu, execute `sudo apt-get install zlib1g-dev libncurses5-dev`\r\n\r\nOn
  Windows\r\n\r\n* [MSYS2](http://msys2.sourceforge.net/)\r\n* it is installed automatically
  by `stack setup` (see Building below)\r\n* update MSYS2 packages\r\n   * follow
  [III. Updating packages](http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/)
  but always execute `stack exec pacman -- <arguments for pacman>`\r\n* execute\r\n
  \  * `stack exec pacman -- -S make wget unzip diffutils`\r\n\r\n### Important: branches
  must correspond\r\n\r\nAll related projects are following the *simultaneous release
  model*.\r\nThe branch `master` contains releases, whereas the branch `develop` contains
  code under development.\r\nWhen building the tools, the branches should match.\r\nReleases
  from branches 'master` are guaranteed to work well together.\r\nDevelopment versions
  from branches `develop` should work well together but this might not always be the
  case.\r\n\r\n### Building\r\n\r\n1. install the [Clafer compiler](https://github.com/gsdlab/clafer)\r\n2.
  in some `<source directory>`, execute `git clone git://github.com/gsdlab/claferIG.git`\r\n3.
  in `<source directory>/claferIG`, execute `stack setup`. This will install all dependencies,
  build tools, and MSYS2 (on Windows).\r\n4. `cd <source directory>/claferIG`\r\n
  \ * `make`\r\n\r\n### Installation\r\n\r\n1. execute `make install to=<target directory>`\r\n\r\n####
  Note:\r\n> On Windows, use `/` with the `make` command instead of `\\`, e.g., `make
  install to=/c/clafer-tools-0.4.4/`\r\n\r\n\r\n## Integration with Sublime Text 2/3\r\n\r\n\r\nSee
  [ClaferToolsST](https://github.com/gsdlab/ClaferToolsST)\r\n\r\n## Integration with
  VIM\r\n\r\n\r\nSee [clafer-vim](https://github.com/wasowski/clafer-vim)\r\n\r\n#
  Usage\r\n\r\nClafer Instance Generator can be used in interactive and batch modes,
  as well as, an API.\r\n\r\n## Command-line Usage\r\n\r\n(As printed by `claferIG
  --help`)\r\n\r\n```\r\nClaferIG v0.4.4\r\n\r\nclaferIG [OPTIONS] [FILE]\r\n\r\nCommon
  flags:\r\n     --all=INT                                 Saves all instances up
  to the\r\n                                               provided scope or a\r\n
  \                                              counterexample.\r\n     --savedir=FILE
  \                           Specify the directory for\r\n                                               storing
  saved files.\r\n     --alloysolution                           Convert Alloy solution
  to a\r\n                                               Clafer solution.\r\n  -b
  --bitwidth=INTEGER                        Set the bitwidth for integers.\r\n  -m
  --maxint=INTEGER                          Set the bitwidth for integers\r\n                                               based
  on the largest required\r\n                                               number.
  Overrides --bitwidth\r\n                                               argument.\r\n
  \ -u --useuids                                 Use unique clafer names in the\r\n
  \                                              Clafer solution.\r\n     --addtypes
  \                               Add colon/reference types to\r\n                                               the
  Clafer solution.\r\n  -j --json                                    Render solution
  as JSON\r\n                                               (forces 'addUids').\r\n
  \ -i --flatten-inheritance-comp                Flatten inheritance during\r\n                                               compiling
  ('alloy' and 'Alloy'\r\n                                               modes only)\r\n
  \ -l --no-layout-comp                          Don't resolve off-side rule\r\n                                               layout
  during compiling\r\n  -c --check-duplicates-comp                   Check duplicated
  clafer names\r\n                                               during compiling\r\n
  \ -f --skip-resolver-comp                      Skip name resolution during\r\n                                               compiling\r\n
  \    --ss=SCOPESTRATEGY --scope-strategy-comp  Use scope computation strategy\r\n
  \                                              during compiling: none or simple\r\n
  \                                              (default).\r\n  -? --help                                    Display
  help message\r\n  -V --version                                 Print version information\r\n```\r\n\r\n`claferIG
  <model file name>.cfr`\r\n\r\n- opens an interactive session and displays an instance
  or a counterexample.\r\n\r\n`claferIG <model file name>.cfr -all <scope>`\r\n\r\n-
  opens a non-interactive session and saves all instances up to the provided scope
  or a counterexample to files named `<model file name>.cfr.<instance number>.data`,
  one instance per file.\r\n\r\n## Interactive Session Usage\r\n\r\nIn the interactive
  mode, the users can invoke the following commands by pressing a letter marked in
  \ the command name between '' or the whole command as marked by '':\r\n\r\n```\r\nClaferIG
  v0.4.4\r\n\r\nYou can invoke the following commands as indicated by single quotes:\r\n[tab]
  \             - print the available commands\r\n                   - auto-complete
  command name, a clafer name, or clafer instance name in a given context\r\n'n'ext,
  [enter]    - to produce the next instance if available or to output a message that
  no more\r\n                     instances exist within the given scope\r\n'i'ncrease
  \        - to increase the maximum number of instances of a given clafer or all
  clafers (scope)\r\n's'et              - to set the maximum number of instances of
  a given clafer or all clafers (scope)\r\n'm'axint, 'maxint' - to set the bitwidth
  by providing the largest integer\r\nsa'v'e             - to save all instances displayed
  so far or a counterexample to files named\r\n                     <model file name>.cfr.<instance
  number>.data, one instance per file\r\n'q'uit             - to quit the interactive
  session\r\n'r'eload           - to reload your clafer model\r\n'h'elp             -
  to display this menu options summary\r\n'scope'            - to print out the values
  of the global scope and individual Clafer scopes\r\n'saveScopes'       - to generate
  a '<model>.cfr-scope' file with the current scopes\r\n'loadScopes'       - to load
  scopes from a '<model>.cfr-scope' file\r\n'setUnsatCoreMinimization' - to choose
  UnSAT core minimization strategy [fastest | medium | best]. Default: fastest\r\n'c',
  'claferModel' - to print out the original Clafer model verbatim\r\n'a', 'alloyModel'
  \ - to print out the output of Clafer translator verbatim\r\n'alloyInstance'    -
  to print out the Alloy xml document of the most recent solution\r\n'f'ind             -
  to print a Clafer with given name found in the most recent solution\r\n\r\nParameterized
  command usage:\r\n'i [enter]'         - to increase for all clafers by 1\r\n'i <name>
  [enter]'  - to increase for the clafer <name> by 1\r\n'i <name> <number>' - to increase
  for the clafer <name> by <number>\r\n's <number> [enter]'- to set for the clafers
  to <number>\r\n's <name> <number>' - to set for the clafer <name> to <number>\r\n'f
  <name>'          - to display a clafer <name>\r\n'setUnsatCoreMinimization fastest'
  - fastest but the worst\r\n'setUnsatCoreMinimization medium'\r\n'setUnsatCoreMinimization
  best' - best but slowest even for modest size cores\r\n```\r\n\r\n## Output format\r\n\r\nThere
  are two output formats: native (plain text, default) and JSON (`--json`).\r\n\r\n###
  Instance data (native)\r\n\r\nThe instance data notation is very similar to a regular
  Clafer notation for concrete clafers with a few differences:\r\n\r\n* no constraints\r\n*
  no types and super types\r\n    * except when `--useuids --addtypes` parameters
  are used\r\n* no clafer and group cardinalities (each clafer has the default group
  `(0..*)` and clafer `(1..1)` cardinality)\r\n* no clafers not present in the instance\r\n\r\nAdditionally,
  the data notation contains concrete values of the clafers and suffix numbers to
  distinguish among multiple instances of the same clafer.\r\n\r\n### Note:\r\n> The
  instance data models could be read by the Clafer translator if the translator had
  simple type inference support.\r\n\r\n#### Example\r\n\r\nFor a model\r\n\r\n```\r\nabstract
  A\r\n    a ?\r\n    b +\r\n    c -> integer ?\r\n    d -> E 2\r\n    g -> E 2\r\n
  \       h -> integer\r\n\r\nabstract E\r\n    f ->> integer +\r\n\r\na1 : A\r\ne1
  : E\r\ne2 : E\r\n```\r\n\r\nA possible instance data looks as follows:\r\n\r\n```\r\n===
  Instance 1 Begin ===\r\n\r\na1\r\n    b$1\r\n    b$2\r\n    c -> 10\r\n    d$1 ->
  e1\r\n    d$2 -> e2\r\n    g1 -> e1\r\n        h$1 -> 5\r\n    g2 -> e2\r\n        h$2
  -> 2\r\n\r\ne1\r\n    f$1 -> 2\r\n    f$2 -> 3\r\n    f$3 -> 4\r\n    f$4 -> 2\r\n\r\n---
  Instance 1 End ---\r\n```\r\n\r\n### Near-miss instance\r\n\r\nNear-miss instance
  notation is the same as the instance data notation. Additionally, it indicates which
  constraints belong to the UnSAT Core.\r\n\r\n#### Example\r\n\r\nFor a model\r\n\r\n```\r\nabstract
  A\r\n    a ?\r\n    b ?\r\n        [ a ]   // C1\r\n\r\na1 : A\r\n    [ no a ]    //
  C2\r\n    [ b ]       // C3\r\n```\r\n\r\nConstraints C1, C2, and C3 form an UnSAT
  Core. Removal of any of them will make the model satisfiable. The constraint C1
  is part of the model and cannot be removed (part of domain knowledge). Therefore,
  either C2 or C3 must be removed to remove the inconsistency.\r\n\r\nOn possible
  near-miss instance:\r\n\r\n```\r\na1\r\n    a\r\n    b\r\n```\r\n\r\nHere, `C1`
  and `C3` are satisfied but `C2` is not. To resolve the conflict and assuming that
  the counter example is actually a correct instance data, the user has to modify
  the model by removing `C2`. However, should the counter example actually represent
  incorrect instance data, the user can remove `C3` to resolve the inconsistency.\r\n\r\n##
  Troubleshooting\r\n\r\n\r\nIf you get an error:\r\n\r\n```\r\nException in thread
  \"main\" java.lang.UnsatisfiedLinkError: no minisatproverx1 in java.library.path\r\n
  at java.lang.ClassLoader.loadLibrary(Unknown Source)\r\n at java.lang.Runtime.loadLibrary0(Unknown
  Source)\r\n at java.lang.System.loadLibrary(Unknown Source)\r\n at org.clafer.ig.AlloyIG.main(AlloyIG.java:275)\r\n```\r\n\r\nit
  means that you have a 64bit Java on Windows instead of the required 32bit one.\r\nOn
  Windows, Alloy only supports Minisat with UnSAT core on 32bit Java.\r\nThere's nothing
  we can do.\r\n\r\n## How it works\r\n\r\nThe Clafer instance generator:\r\n\r\n*
  translates the input Clafer model (.cfr) to an Alloy4.2 model (.als). The compiler's
  intermediate representation (IR) contains the mapping between Clafer names and Alloy
  names. The IR also contains the scopes for each Alloy signature to ensure that a
  valid instance can be found if it exists\r\n* invokes Alloy Analyzer to produce
  an instance or find an UnSAT core\r\n** given an UnSAT core, removes constraints
  from the core until an instance is found - that instance represents the counterexample
  which violates the removed constraints\r\n* translates the instance or the counterexample
  data produced by Alloy Analyzer to Clafer instance data format using the name map
  from IR in a reverse direction,\r\n* for a counterexample, translates the counter
  example in Alloy to Claefr instance data and constraint violations in Alloy into
  constraint violations in Clafer model\r\n\r\n# Need help?\r\n\r\n* Visit [language's
  website](http://clafer.org).\r\n* Report issues to [issue tracker](https://github.com/gsdlab/claferIG/issues)\r\n"
license-name: MIT
