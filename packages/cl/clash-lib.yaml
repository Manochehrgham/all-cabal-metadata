homepage: http://www.clash-lang.org/
changelog-type: markdown
hash: 5862a793b3cfb116eaebbe0d22faaa4a3457cae595b550a206f85232111521c9
test-bench-deps: {}
maintainer: Christiaan Baaij <christiaan.baaij@gmail.com>
synopsis: CAES Language for Synchronous Hardware - As a Library
changelog: ! "# Changelog for the [`clash-lib`](http://hackage.haskell.org/package/clash-lib)
  package\n\n## 0.6.9\n* Fixes bugs:\n  * `case undefined of ...` should reduce to
  `undefined` [#116](https://github.com/clash-lang/clash-compiler/issues/109)\n  *
  Type families obscure eligibility for synthesis [#114](https://github.com/clash-lang/clash-compiler/issues/114)\n\n##
  0.6.8 *January 13th 2015*\n* New features:\n  * Support for Haskell's: `Char`, `Int8`,
  `Int16`, `Int32`, `Int64`, `Word`, `Word8`, `Word16`, `Word32`, `Word64`.\n  * Int/Word/Integer
  bitwidth for generated HDL is configurable using the `-clash-intwidth=N` flag, where
  `N` can be either 32 or 64.\n* Fixes bugs:\n  * Cannot reduce `case error ... of
  ...` to `error ...` [#109](https://github.com/clash-lang/clash-compiler/issues/109)\n\n##
  0.6.7 *December 21st 2015*\n* Support for `unbound-generics-0.3`\n* New features:\n
  \ * Only look for 'topEntity' in the root module. [#22](https://github.com/clash-lang/clash-compiler/issues/22)\n\n##
  0.6.6 *December 11th 2015*\n* New features:\n  * Remove all existing HDL files before
  generating new ones. This can be disabled by the `-clash-noclean` flag. [#96](https://github.com/clash-lang/clash-compiler/issues/96)\n
  \ * Support for `clash-prelude` 0.10.4\n\n## 0.6.5 *November 17th 2015*\n* Fixes
  bugs:\n  * Integer literals used as arguments not always properly annotated with
  their type.\n\n## 0.6.4 *November 12th 2015*\n* Fixes bugs:\n  * Reversing alternatives
  is not meaning preserving for literal patterns [#91](https://github.com/clash-lang/clash-compiler/issues/91)\n
  \ * DEC: root of the case-tree must contain at least 2 alternatives [#92](https://github.com/clash-lang/clash-compiler/issues/92)\n\n##
  0.6.3 *October 24th 2015*\n* New features:\n  * Improve DEC transformation: consider
  alternatives before the subject when checking for disjoint expressions.\n* Fixes
  bugs:\n  * DEC: don't generate single-branch case-expressions [#90](https://github.com/clash-lang/clash-compiler/issues/90)\n\n##
  0.6.2 *October 21st 2015*\n* Fixes bugs:\n  * DEC: Subject and alternatives are
  not disjoint [#88](https://github.com/clash-lang/clash-compiler/issues/88)\n\n##
  0.6.1 *October 16th 2015*\n* New features:\n  * Support for `clash-prelude` 0.10.1\n
  \ * Transformation that lifts applications of the same function out of alternatives
  of case-statements. e.g.\n\n    ```haskell\n    case x of\n      A -> f 3 y\n      B
  -> f x x\n      C -> h x\n    ```\n\n    is transformed into:\n\n    ```haskell\n
  \   let f_arg0 = case x of {A -> 3; B -> x}\n        f_arg1 = case x of {A -> y;
  B -> x}\n        f_out  = f f_arg0 f_arg1\n    in  case x of\n          A -> f_out\n
  \         B -> f_out\n          C -> h x\n    ```\n\n* Fixes bugs:\n  * Case-statements
  acting like normal decoder circuits are erroneously synthesised to priority decoder
  circuits.\n\n## 0.6 *October 3rd 2015*\n* New features:\n  * Support for `clash-prelude`
  0.10\n  * Add `~INDEXTYPE` tag: primitives get access to the `Index` clash-prelude
  type\n  * Add `~IF` construct: primitives can do conditional templating\n  * Unroll
  \"definitions\" of the following primitives: `fold`, `dfold`, `foldr`\n\n## 0.5.13
  *September 21st 2015*\n* Fixes bugs:\n  * Performance bug: top-level definitions
  of type \"Signal\" erroneously inlined.\n\n## 0.5.12 *September 14th 2015*\n* New
  features:\n  * Completely unroll \"definitions\" of some higher-order primitives
  with non-representable argument or result vectors:\n    It is now possible to translate
  e.g. `f xs ys = zipWith ($) (map (+) xs) ys :: Vec 4 Int -> Vec 4 Int -> Vec 4 Int`\n\n*
  Fixes bugs:\n  * `topLet` transformation erroneously not performed in a top-down
  traversal\n  * Specialisation limit unchecked on types and constants\n  * Vector
  of functions cannot be translated [#25](https://github.com/clash-lang/clash-compiler/issues/25
  )\n  * CLaSH fails to generate VHDL when map is applied [#78](https://github.com/clash-lang/clash-compiler/issues/78)\n\n##
  0.5.11 *September 7th 2015*\n* Fixes bugs:\n  * Clash running out of memory on Simple-ish
  project [#70](https://github.com/clash-lang/clash-compiler/issues/70)\n  * `CLaSH.Sized.Vector.:>`
  was not allowed as a function argument to HO-primitives\n\n## 0.5.10 *August 2nd
  2015*\n* Fixes bugs:\n  * Make testbench generation deterministic\n  * Compile against
  unbound-generics-0.2\n\n## 0.5.9 *July 9th 2015*\n* Fixes bugs:\n  * `coreView`
  didn't look through newtypes of the form: `newtype Foo a = MkFoo (Maybe a)`\n\n##
  0.5.8 *June 26th 2015*\n* Fixes bugs:\n  * Allow text and tags in ~SIGD black box
  construct\n\n## 0.5.7 *June 25th 2015*\n* New features:\n  * Support for copying
  string literals from Haskell to generated code\n  * Collect and copy data-files\n\n*
  Fixes bugs:\n  * Signals declared twice when not using a clock-generating component
  [#60](https://github.com/clash-lang/clash-compiler/issues/60)\n  * This piece of
  code eat up all CPU when generating verilog [#62](https://github.com/clash-lang/clash-compiler/issues/60)\n\n##
  0.5.6 *June 3rd 2015*\n* New features:\n  * Support Verilog backend\n  * Generated
  component names are prefixed by the name of the module containing the `topEntity`\n\n##
  0.5.5 *May 18th 2015*\n* New features:\n  * Make inlining and specialisation limit
  configurable\n  * Make debug message level configurable\n\n* Fixes bugs:\n  * Netlist:
  ensure that the arguments of a component instantiation are always simple variables\n
  \ * CaseCon transformation: ensure that we run the compile-time evaluator on the
  subject before handling the one-alternative case\n  * Emit a warning if a function
  remains recursive, instead of producing an error: compilation can still be successful
  if the function is an argument to a higher-order blackbox that doesn't use the function.\n
  \ * Emit a warning if inlining limit is reached, instead of producing an error:
  compilation can still be successful if the function is an argument to a higher-order
  blackbox that doesn't use the function.\n  * Always inline terms that have a type
  of kind `Constraint`\n\n## 0.5.4 *May 10th 2015*\n* New features:\n  * Add `~COMPNAME`
  tag: primitives get access to the component name in which they are instantiated\n\n##
  0.5.3 *May 5th 2015*\n* New features:\n  * `TopEntity` wrappers are now specified
  as `ANN` annotation pragmas\n* Fixes bugs:\n  * Lost system1000 clock in VHDL generation...
  [#53](https://github.com/clash-lang/clash-compiler/issues/53)\n  * `flattenCallTree`
  sometimes introduces free variables\n\n## 0.5.2 *May 1st 2015*\n* New features:\n
  \ * Generate wrappers around `topEntity` that have constant names and types\n\n##
  0.5.1 *April 20th 2015*\n* GHC 7.10 support\n\n## 0.5 *March 11th 2015*\n* New features:\n
  \ * Simplify BlackBox handling, and improve VHDL generation. [#47](https://github.com/clash-lang/clash-compiler/issues/47)\n
  \ * Use unbound-generics. [#48](https://github.com/clash-lang/clash-compiler/issues/48)\n\n*
  Fixes bugs:\n  * VHDL generation error: wrapper for sum-of-products type. [#44](https://github.com/clash-lang/clash-compiler/issues/44)\n\n##
  0.4.1 *February 4th 2015*\n* Fixes bugs:\n  * Treat BlackBox expressions as declarations
  when DC args. [#37](https://github.com/christiaanb/clash2/issues/33)\n  * Don't
  inline recursive closed bindings\n\n## 0.4 *November 17th 2014*\n* New features:\n
  \ * Support for clash-prelude 0.6\n\n* Fixes bugs:\n  * Ambiguous type: 'std_logic_vector'
  or 'std_ulogic_vector' [#33](https://github.com/christiaanb/clash2/issues/33)\n\n##
  0.3.2 *June 5th 2014*\n\n* Fixes bugs:\n  * VHDL array constant ambiguous [#18](https://github.com/christiaanb/clash2/issues/18)\n
  \ * Exception: can't create selector [#24](https://github.com/christiaanb/clash2/issues/24)\n
  \ * Calls to `vhdlTypeMark` don't result to inclusion of VHDL type in types.vhdl
  [#28](https://github.com/christiaanb/clash2/issues/28)\n\n## 0.3.1 *May 15th 2014*\n\n*
  New features:\n  * Make ANF lift non-representable values [#7](https://github.com/christiaanb/clash2/issues/7)\n
  \ * Hardcode `fromInteger` for `Signed` and `Unsigned` [#9](https://github.com/christiaanb/clash2/issues/9)\n
  \ * Replace VHDL default hole by error hole [#13](https://github.com/christiaanb/clash2/issues/13)\n\n*
  Fixes bugs:\n  * Type families are not expanded [#3](https://github.com/christiaanb/clash2/issues/3)\n
  \ * Exception: CLaSH.Netlist.VHDL(512): fromSLV: Vector 13 Bool [#5](https://github.com/christiaanb/clash2/issues/5)\n
  \ * Incorrect vhdl generation for default value in blackbox [#6](https://github.com/christiaanb/clash2/issues/6)\n
  \ * Duplicate type names when multiple ADTs need the same amount of bits [#8](https://github.com/christiaanb/clash2/issues/8)\n
  \ * Circuit testbench generation with MAC example fails[#15](https://github.com/christiaanb/clash2/issues/15)\n\n*
  Code improvements:\n  * Refactor Netlist/BlackBox [#10](https://github.com/christiaanb/clash2/issues/10)\n
  \ * CPP special-case conversion of `Control.Exception.Base.irrefutPatError` [#11](https://github.com/christiaanb/clash2/issues/11)\n"
basic-deps:
  bytestring: ! '>=0.10.0.2'
  clash-prelude: ! '>=0.10.4'
  uu-parsinglib: ! '>=2.8.1'
  base: ! '>=4.8 && <5'
  time: ! '>=1.4.0.1'
  unordered-containers: ! '>=0.2.3.3'
  text: ! '>=0.11.3.1'
  filepath: ! '>=1.3.0.1'
  process: ! '>=1.1.0.2'
  containers: ! '>=0.5.0.0'
  lens: ! '>=3.9.2'
  wl-pprint-text: ! '>=1.1.0.0'
  concurrent-supply: ! '>=0.1.7'
  fgl: ! '>=5.4.2.4'
  mtl: ! '>=2.1.2'
  hashable: ! '>=1.2.1.0'
  attoparsec: ! '>=0.10.4.0'
  transformers: ! '>=0.3.0.0'
  errors: ! '>=1.4.2'
  deepseq: ! '>=1.3.0.2'
  unbound-generics: ! '>=0.1 && <0.4'
  pretty: ! '>=1.1.1.0'
  aeson: ! '>=0.6.2.0'
  template-haskell: ! '>=2.8.0.0'
  directory: ! '>=1.2.0.1'
all-versions:
- '0.2'
- '0.2.0.1'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.0.3'
- '0.3.0.4'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.6'
- '0.5.7'
- '0.5.8'
- '0.5.9'
- '0.5.10'
- '0.5.11'
- '0.5.12'
- '0.5.13'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.6.5'
- '0.6.6'
- '0.6.7'
- '0.6.8'
- '0.6.9'
author: Christiaan Baaij
latest: '0.6.9'
description-type: markdown
description: ! "# `clash-lib` - CλaSH compiler, as a library\n\n  * See the LICENSE
  file for license and copyright details\n\n# CλaSH - A functional hardware description
  language\nCλaSH (pronounced ‘clash’) is a functional hardware description language
  that\nborrows both its syntax and semantics from the functional programming language\nHaskell.
  The CλaSH compiler transforms these high-level descriptions to\nlow-level synthesizable
  VHDL, Verilog, or SystemVerilog.\n\nFeatures of CλaSH:\n\n  * Strongly typed (like
  VHDL), yet with a very high degree of type inference,\n    enabling both safe and
  fast prototying using consise descriptions (like\n    Verilog).\n\n  * Interactive
  REPL: load your designs in an interpreter and easily test all\n    your component
  without needing to setup a test bench.\n\n  * Higher-order functions, with type
  inference, result in designs that are\n    fully parametric by default.\n\n  * Synchronous
  sequential circuit design based on streams of values, called\n    `Signal`s, lead
  to natural descriptions of feedback loops.\n\n  * Support for multiple clock domains,
  with type safe clock domain crossing.\n\n# Support\nFor updates and questions join
  the mailing list clash-language+subscribe@googlegroups.com or read the [forum](https://groups.google.com/d/forum/clash-language)\n"
license-name: BSD2
