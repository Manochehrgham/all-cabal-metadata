changelog-type: ''
hash: 040d9aa9f09e04c383173fec303f8030e646f9c0826c6c8a8fc514b73dfc604f
synopsis: CAES Language for Synchronous Hardware - As a Library
changelog: ''
all-versions:
- '0.2'
- '0.2.0.1'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.0.3'
- '0.3.0.4'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
latest: '0.5.4'
description-type: haddock
description: ! 'CλaSH (pronounced ‘clash’) is a functional hardware description language
  that

  borrows both its syntax and semantics from the functional programming language

  Haskell. The merits of using a functional language to describe hardware comes

  from the fact that combinational circuits can be directly modelled as

  mathematical functions and that functional languages lend themselves very well

  at describing and (de-)composing mathematical functions.


  This package provides:


  * The CoreHW internal language: SystemF + Letrec + Case-decomposition


  * The normalisation process that brings CoreHW in a normal form that can be

  converted to a netlist


  * Blackbox/Primitive Handling



  Front-ends (for: parsing, typecheck, etc.) are provided by separate packages:


  * <https://github.com/christiaanb/Idris-dev Idris Frontend>


  * <http://hackage.haskell.org/package/clash-ghc GHC/Haskell Frontend>



  Prelude library: <http://hackage.haskell.org/package/clash-prelude>'
