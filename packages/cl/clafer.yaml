changelog-type: markdown
hash: 16fbbf1cb800813e88e8b5e8286b0ee1955183a9f1e9bdaffb586c2518151af2
test-bench-deps:
  clafer: ==0.3.10
  lens-aeson: ! '>=1.0.0.3'
  tasty-th: ! '>=0.1.2'
  base: ! '>=4.7.0.1 && <5'
  HaXml: ==1.24
  filepath: ! '>=1.3.0.2'
  HUnit: ! '>=1.2.5.2'
  containers: ! '>=0.5.5.1'
  lens: ! '>=4.7'
  data-stringmap: ! '>=1.0.1.1'
  mtl: ! '>=2.2.1'
  tasty-hunit: ! '>=0.9'
  tasty: ! '>=0.10'
  QuickCheck: ! '>=2.6'
  directory: ! '>=1.2.1.0'
synopsis: clafer compiles Clafer models to other formats, such as Alloy, XML, HTML,
  Dot.
changelog: ! "**Clafer Version 0.3.10 released on April 24, 2015**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/66)\r\n\r\n**Clafer
  Version 0.3.9 released on March 06, 2015**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/63)\r\n\r\n**Clafer
  Version 0.3.8 released on January 27, 2015**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/60)\r\n\r\n**Clafer
  Version 0.3.7 released on October 23, 2014**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/53)\r\n\r\n**Clafer
  Version 0.3.6.1 released on July 08, 2014**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/50)\r\n\r\n**Clafer
  Version 0.3.6 released on May 23, 2014**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/48)\r\n\r\n**Clafer
  Version 0.3.5 released on January 20, 2014**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/44)\r\n\r\n**Clafer
  Version 0.3.4 released on September 20, 2013**\r\n\r\n**Clafer Version 0.3.3 released
  on August 14, 2013**\r\n\r\n[Release](https://github.com/gsdlab/clafer/pull/35)\r\n\r\n**Clafer
  Version 0.3.2 released on April 11, 2013**\r\n\r\n**Clafer Version 0.3.1 released
  on October 17, 2012**\r\n\r\n**Clafer Version 0.3 released on July 17, 2012**\r\n\r\nThis
  was the first release of Clafer and included all code since the beginning of the
  project.\r\n\r\nBasic features - See the `README.md`.\r\n\r\n\r\n\r\n\r\n\r\n"
basic-deps:
  clafer: ==0.3.10
  bytestring: ! '>=0.10.4.0'
  lens-aeson: ! '>=1.0.0.3'
  split: ! '>=0.2.2'
  base: ! '>=4.7.0.1 && <5'
  text: ! '>=1.1.0.0'
  HaXml: ==1.24
  executable-path: ! '>=0.0.3'
  filepath: ! '>=1.3.0.2'
  process: ! '>=1.1.0.2'
  network: ! '>=2.6'
  parsec: ! '>=3.1.3'
  array: ! '>=0.4.0.1'
  containers: ! '>=0.5.5.1'
  json-builder: ! '>=0.3'
  lens: ! '>=4.7'
  data-stringmap: ! '>=1.0.1.1'
  network-uri: ! '>=2.6'
  mtl: ! '>=2.2.1'
  cmdargs: ! '>=0.10.7'
  HTTP: ! '>=4000.2.10'
  transformers: ! '>=0.3.0.0'
  string-conversions: ! '>=0.3.0.2'
  aeson: ! '>=0.7.0.6'
  directory: ! '>=1.2.1.0'
all-versions:
- '0.3.5'
- '0.3.5.1'
- '0.3.6'
- '0.3.6.1'
- '0.3.7'
- '0.3.8'
- '0.3.9'
- '0.3.10'
latest: '0.3.10'
description-type: markdown
description: ! "Clafer\r\n======\r\n\r\nv0.3.10\r\n\r\n[Clafer](http://clafer.org)
  is a general-purpose lightweight structural modeling language developed by\r\n[GSD
  Lab](http://gsd.uwaterloo.ca/), [University of Waterloo](http://uwaterloo.ca), and\r\n[MODELS](http://www.itu.dk/research/models/)
  group at [IT University of Copenhagen](http://www.itu.dk/).\r\nClafer can be used
  for modeling of static hierarchical structures but has no support for modeling the
  change of the structures over time (behavior).\r\nThe main goal of Clafer is to
  make modeling more accessible to a wider range of users and domains.\r\n\r\nThere
  are many possible applications of Clafer; however, three are prominent:\r\n\r\n1.
  *Product-Line Modeling* - aims at representing and managing commonality and variability
  of assets in product lines and creating and verifying product configurations.\r\nClafer
  naturally supports multi-staged configuration.\r\n\r\n2. *Multi-Objective Product
  Optimization* - aims at finding a set of products in a given product line that are
  optimal with respect to a set of objectives.\r\nClafer multi-objective optimizer
  generates a Pareto front of optimal product configurations.\r\n\r\n3. *Domain Modeling*
  - aims at improving the understanding of the problem domain in the early stages
  of software development and determining the requirements with fewer defects.\r\nThis
  is also known as *Concept Modeling* or *Ontology Modeling*.\r\n\r\nClafer Compiler\r\n===============\r\n\r\nClafer
  compiler provides a reference language implementation.\r\nIt translates models in
  Clafer to other formats (e.g., Alloy, XML, Python, JS, HTML, DOT) to allow for reasoning
  and processing with existing tools (Alloy Analyzer, Choco3, and Z3 SMT solver).\r\n\r\nCurrently,
  the compiler is used by\r\n\r\n* Backends\r\n  * Alloy-based Instance Generator
  ([ClaferIG](https://github.com/gsdlab/claferIG)),\r\n  * Choco3-based Instance Generator
  and Multi-Objective Optimizer ([chocosolver](https://github.com/gsdlab/chocosolver),
  [ClaferChocoIG](https://github.com/gsdlab/ClaferChocoIG)), and\r\n  * Z3-based Instance
  Generator and Multi-Objective Optimizer ([ClaferSMT](https://github.com/gsdlab/claferSMT)),\r\n*
  Web Frontends\r\n  * Clafer Integrated Development Environment ([ClaferIDE](https://github.com/gsdlab/claferIDE)),\r\n
  \ * Clafer Configurator ([ClaferConfigurator](https://github.com/gsdlab/ClaferConfigurator)),\r\n
  \ * Multi-Objective [Visualizer and Explorer](https://github.com/gsdlab/ClaferMooVisualizer),
  and\r\n  * Clafer Wiki ([ClaferWiki](https://github.com/gsdlab/claferwiki)).\r\n\r\nContributors\r\n------------\r\n\r\n*
  [Kacper Bak](http://gsd.uwaterloo.ca/kbak), Original developer.\r\n* [Jimmy Liang](http://gsd.uwaterloo.ca/jliang),
  Main developer.\r\n* [Micha≈Ç Antkiewicz](http://gsd.uwaterloo.ca/mantkiew), Requirements,
  development, architecture, testing, technology transfer.\r\n* [Ed Zulkoski](http://gsd.uwaterloo.ca/ezulkosk),
  Python IR Generator.\r\n* Luke Michael Brown, co-op student May-Aug 2013. Many improvements.\r\n*
  Paulius Juodisius, [customized BNFC generator](https://github.com/juodaspaulius/bnfc)
  and layout resolver.\r\n* [Rafael Olaechea](http://gsd.uwaterloo.ca/rolaechea),
  Multi-Objective Optimization extensions.\r\n\r\nGetting the Clafer Compiler\r\n---------------------------\r\n\r\nClafer
  can be installed from a binary distribution (preferred), from Hackage, and from
  the source code.\r\n\r\n### Dependencies for running\r\n\r\nRegardless of the installation
  method, the following are\r\n\r\nOptional:\r\n\r\n* [Java Platform (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
  v8+, 32bit\r\n  * needed only for running XML output validation\r\n* [Alloy4.1 and/or
  Alloy4.2](http://alloy.mit.edu/alloy/download.html)\r\n  * needed only for Alloy
  output validation\r\n* [GraphViz](http://graphviz.org/)\r\n  * the program `dot`
  is needed only in the `html` mode for SVG graph generation\r\n\r\n### Installation
  from binaries\r\n\r\nBinary distributions of the release 0.3.10 of Clafer Tools
  for Windows, Mac, and Linux,\r\ncan be downloaded from\r\n[Clafer Tools - Binary
  Distributions](http://gsd.uwaterloo.ca/clafer-tools-binary-distributions).\r\n\r\n1.
  download the binaries and unpack `<target directory>` of your choice\r\n2. add the
  `<target directory>` to your system path so that the executables can be found\r\n\r\n###
  Installation from Hackage\r\n\r\nDependencies\r\n\r\n* [The Haskell Platform](http://hackage.haskell.org/platform/)
  v2014.2.0.0\r\n  * Alternatively GHC >= 7.8.3 and Cabal >= 1.18\r\n\r\nClafer is
  now available on [Hackage](http://hackage.haskell.org/package/clafer-0.3.10/) and
  it can be installed using\r\n\r\n1. `cabal update`\r\n2. `cabal install clafer`\r\n3.
  `cd <cabal's lib or share folder>`  (`C:\\Users\\<user>\\AppData\\Roaming\\cabal\\x86_64-windows-ghc-7.8.3\\clafer-0.3.10`
  on Windows or `.cabal/share/x86_64-linux-ghc-7.8.3/clafer-0.3.10/` on Linux)\r\n4.
  to automatically download Alloy jars\r\n  * execute `make` in `tools`\r\n\r\n###
  Installation from the source code\r\n\r\nDependencies\r\n\r\n* [The Haskell Platform](http://hackage.haskell.org/platform/)
  v2014.2.0.0\r\n  * Alternatively GHC >= 7.8.3 and Cabal >= 1.18\r\n* [Alloy4.1 and/or
  Alloy4.2](http://alloy.mit.edu/alloy/download.html)\r\n  * downloaded automatically
  during the build\r\n* [Git](http://git-scm.com/)\r\n\r\nOn Windows\r\n\r\n* [MSYS2](http://msys2.sourceforge.net/)\r\n
  \ * download MSYS2 installer\r\n  * in MSYS2 console, execute\r\n     * `pacman
  -Syu`\r\n     * `pacman -S make wget unzip diffutils`\r\n\r\n#### Important: Branches
  must correspond\r\n\r\nAll related projects are following the *simultaneous release
  model*.\r\nThe branch `master` contains releases, whereas the branch `develop` contains
  code under development.\r\nWhen building the tools, the branches should match.\r\nReleases
  from branches 'master` are guaranteed to work well together.\r\nDevelopment versions
  from branches `develop` should work well together but this might not always be the
  case.\r\n\r\n#### Building\r\n\r\n1. install the dependencies\r\n2. open the command
  line terminal. On Windows, open MSYS2 terminal.\r\n3. in some `<source directory>`
  of your choice, execute\r\n  * `git clone git://github.com/gsdlab/clafer.git`\r\n4.
  in `<source directory>/clafer`, execute\r\n  * `cabal update`\r\n  * `make init`\r\n
  \ * `make`\r\n\r\n### Installation\r\n\r\n1. Execute\r\n  * `make install to=<target
  directory>`\r\n\r\n#### Note:\r\n> On Windows, use `/` with the `make` command instead
  of `\\`.\r\n\r\nIntegration with Sublime Text 2/3\r\n---------------------------------\r\n\r\nSee
  [ClaferToolsST](https://github.com/gsdlab/ClaferToolsST)\r\n\r\nIntegration with
  VIM\r\n--------------------\r\n\r\nSee [clafer-vim](https://github.com/wasowski/clafer-vim)\r\n\r\nUsage\r\n=====\r\n\r\nClafer
  Compiler\r\n---------------\r\n\r\n(As printed by `clafer --help`)\r\n\r\n```\r\nClafer
  0.3.10\r\n\r\nclafer [OPTIONS] [FILE]\r\n\r\nCommon flags:\r\n  -m --mode=CLAFERMODE
  \                   Generated output type. Available\r\n                                          CLAFERMODEs
  are: 'alloy' (Alloy 4.1);\r\n                                          'alloy42'
  (default, Alloy 4.2); 'xml'\r\n                                          (intermediate
  representation of\r\n                                          Clafer model); 'json'
  (intermediate\r\n                                          representation of Clafer
  model);\r\n                                          'clafer' (analyzed and desugared\r\n
  \                                         clafer model); 'html' (original model\r\n
  \                                         in HTML); 'graph' (graphical\r\n                                          representation
  written in DOT\r\n                                          language); 'cvlgraph'
  (cvl notation\r\n                                          representation written
  in DOT\r\n                                          language); 'python' (generates
  IR in\r\n                                          python); 'choco' (Choco constraint\r\n
  \                                         programming solver). Multiple modes\r\n
  \                                         can be specified at the same time,\r\n
  \                                         e.g., '-m alloy -m html'.\r\n  -o --console-output
  \                    Output code on console.\r\n  -i --flatten-inheritance                Flatten
  inheritance ('alloy' and\r\n                                          'alloy42'
  modes only).\r\n     --timeout-analysis=INT               Timeout for analysis.\r\n
  \ -l --no-layout                          Don't resolve off-side rule layout.\r\n
  \    --nl --new-layout                    Use new fast layout resolver\r\n                                          (experimental).\r\n
  \ -c --check-duplicates                   Check duplicated clafer names in\r\n                                          the
  entire model.\r\n  -f --skip-resolver                      Skip name resolution.\r\n
  \ -k --keep-unused                        Keep uninstantated abstract clafers\r\n
  \                                         ('alloy' and 'alloy42' modes only).\r\n
  \ -s --no-stats                           Don't print statistics.\r\n     --schema
  \                            Show Clafer IR (intermediate\r\n                                          representation)
  XML schema.\r\n  -v --validate                           Validate outputs of all
  modes. Uses\r\n                                          'tools/XsdCheck.class'
  for XML,\r\n                                          'tools/alloy4.jar' and\r\n
  \                                         'tools/alloy4.2.jar' for Alloy\r\n                                          models,
  and Clafer translator for\r\n                                          desugared
  Clafer models. Use\r\n                                          '--tooldir' to override
  the default\r\n                                          location of these tools.\r\n
  \    --nr --noalloyruncommand             For usage with partial instances:\r\n
  \                                         Don't generate the alloy 'run show\r\n
  \                                         for ... ' command, and rename @.ref\r\n
  \                                         with unique names  ('alloy' and\r\n                                          'alloy42'
  modes only).\r\n     --tooldir=DIR                        Specify the tools directory\r\n
  \                                         ('validate' only). Default: 'tools/'.\r\n
  \ -a --alloy-mapping                      Generate mapping to Alloy source\r\n                                          code
  ('alloy' and 'alloy42' modes\r\n                                          only).\r\n
  \    --self-contained                     Generate a self-contained html\r\n                                          document
  ('html' mode only).\r\n     --add-graph                          Add a graph to
  the generated html\r\n                                          model ('html' mode
  only). Requires\r\n                                          the \"dot\" executable
  to be on the\r\n                                          system path.\r\n     --sr
  --show-references               Whether the links for references\r\n                                          should
  be rendered. ('html' and\r\n                                          'graph' modes
  only).\r\n     --add-comments                       Include comments from the source\r\n
  \                                         file in the html output ('html' mode\r\n
  \                                         only).\r\n  -e --ecore2clafer                       Translate
  an ECore model into\r\n                                          Clafer.\r\n     --ss=SCOPESTRATEGY
  --scope-strategy  Use scope computation strategy:\r\n                                          none
  or simple (default).\r\n     --check-afm --afm                    Throws an error
  if the cardinality\r\n                                          of any of the clafers
  is above 1.\r\n     --sg --skip-goals                    Skip generation of Alloy
  code for\r\n                                          goals. Useful for all tools
  working\r\n                                          with standard Alloy.\r\n     --meta-data
  \                         Generate a 'fully qualified\r\n                                          name'-'least-partially-qualified\r\n
  \                                         name'-'unique ID' map ('.cfr-map').\r\n
  \                                         In Alloy, Alloy42, and Choco modes,\r\n
  \                                         generate the scopes map\r\n                                          ('.cfr-scope').\r\n
  \ -? --help                               Display help message\r\n  -V --version
  \                           Print version information\r\n     --numeric-version
  \                   Print just the version number\r\n```\r\n\r\nThe dependencies
  among the command line arguments are described on the [model wiki](http://t3-necsis.cs.uwaterloo.ca:8091/ClaferTools/CommandLineArguments).\r\n\r\nMultiple
  modes can be used at the same time. For example,\r\n\r\n`clafer model.cfr -m alloy
  -m xml -m html -m graph --self-contained --show-references --no-stats`\r\n\r\nThe
  mode `-m alloy42` is only the default mode if no other modes are given. When other
  modes are given, the mode `-m alloy42` must be added explicitly if needed.\r\n\r\nAdditionally,
  `[OPTIONS]` can also be specified directly in the model file by inserting the following
  compiler directive as the first line of the file:\r\n\r\n```\r\n//# [OPTIONS]\r\n```\r\n\r\nfor
  example\r\n\r\n```\r\n//# --keep-unused -m=alloy\r\n```\r\n\r\nOptions given at
  command line override the options given in the file using `//#` which, in turn,
  override the defaults.\r\n\r\n### Using compiler directives\r\n\r\nCompiler directives
  are comments of the form\r\n\r\n```\r\n//# <directive name>\r\n```\r\n\r\nThe following
  directives are markers of locations in the input files for different purposes:\r\n\r\n*
  `//# FRAGMENT` - marks the beginning of the new [module fragment](http://gsd.uwaterloo.ca:8888/question/463/multi-fragment-modules).\r\n*
  `//# GRAPH` - marks the insertion point for a graph rendering. The graph is only
  produced in HTML mode with the argument `--add-graph`.\r\n* `//# STATS` - marks
  the insertion point for module statistics. The statistics can be omitted using the
  argument `--no-stats`.\r\n* `//# SUMMARY` - shorthand for `//# GRAPH` and `//# STATS`\r\n*
  `//# QUALITY_ATTRIBUTE` - is used by ClaferMooVisualizer and ClaferConfigurator
  to distinguish quality attributes, which should be filtered out, from other clafers.\r\n\r\nNeed
  help?\r\n==========\r\n* Visit [language's website](http://clafer.org).\r\n* Report
  issues to [issue tracker](https://github.com/gsdlab/clafer/issues)\r\n"
