homepage: http://clafer.org
changelog-type: markdown
hash: ac35440ec553c2346926f7c44e7bb82c701f871c0f795ab073afbad5fef2702d
test-bench-deps:
  mtl-compat: ! '>=0.2.1'
  clafer: ==0.4.3
  lens-aeson: ! '>=1.0.0.3'
  tasty-th: ! '>=0.1.3'
  base: ! '>=4.7.0.1 && <5'
  filepath: ! '>=1.3.0.2'
  doctest: ! '>=0.10.1'
  HUnit: ! '>=1.2.5.2'
  containers: ! '>=0.5.5.1'
  lens: ! '>=4.6.0.1'
  data-stringmap: ! '>=1.0.1.1'
  mtl: ! '>=2.1.3.1'
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.10.1.2'
  QuickCheck: ! '>=2.6'
  transformers-compat: ! '>=0.3 && <0.5'
  directory: ! '>=1.2.1.0'
maintainer: Michal Antkiewicz <mantkiew@gsd.uwaterloo.ca>
synopsis: ! 'Compiles Clafer models to other formats: Alloy, JavaScript, JSON, HTML,
  Dot.'
changelog: ! "##### Clafer Version 0.4.3 released on Dec 22, 2015\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/81)\r\n\r\n#####
  Clafer Version 0.4.2.1 released on Oct 19, 2015\r\n\r\n* Fixed Haddock build, updated
  README, fixed a test case.\r\n\r\n##### Clafer Version 0.4.2 released on Oct 16,
  2015\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/74)\r\n\r\n##### Clafer
  Version 0.4.1 released on Sep 1, 2015\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/71)\r\n\r\n#####
  Clafer Version 0.4.0 released on Jul 28, 2015\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/68)\r\n\r\n#####
  Clafer Version 0.3.10 released on April 24, 2015\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/66)\r\n\r\n#####
  Clafer Version 0.3.9 released on March 06, 2015\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/63)\r\n\r\n#####
  Clafer Version 0.3.8 released on January 27, 2015\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/60)\r\n\r\n#####
  Clafer Version 0.3.7 released on October 23, 2014\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/53)\r\n\r\n#####
  Clafer Version 0.3.6.1 released on July 08, 2014\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/50)\r\n\r\n#####
  Clafer Version 0.3.6 released on May 23, 2014\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/48)\r\n\r\n#####
  Clafer Version 0.3.5 released on January 20, 2014\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/44)\r\n\r\n#####
  Clafer Version 0.3.4 released on September 20, 2013\r\n\r\n##### Clafer Version
  0.3.3 released on August 14, 2013\r\n\r\n* [Release](https://github.com/gsdlab/clafer/pull/35)\r\n\r\n#####
  Clafer Version 0.3.2 released on April 11, 2013\r\n\r\n##### Clafer Version 0.3.1
  released on October 17, 2012\r\n\r\n##### Clafer Version 0.3 released on July 17,
  2012\r\n\r\nThis was the first release of Clafer and included all code since the
  beginning of the project.\r\n\r\nBasic features - See the `README.md`.\r\n"
basic-deps:
  mtl-compat: ! '>=0.2.1'
  clafer: ==0.4.3
  bytestring: ! '>=0.10.4.0'
  lens-aeson: ! '>=1.0.0.3'
  split: ! '>=0.2.2'
  base: ! '>=4.7.0.1 && <5'
  text: ! '>=1.1.0.0'
  executable-path: ! '>=0.0.3'
  filepath: ! '>=1.3.0.2'
  process: ! '>=1.2.0.0'
  network: ! '>=2.4.2.3'
  parsec: ! '>=3.1.5'
  array: ! '>=0.5.0.0'
  containers: ! '>=0.5.5.1'
  json-builder: ! '>=0.3'
  lens: ! '>=4.6.0.1'
  data-stringmap: ! '>=1.0.1.1'
  network-uri: ! '>=2.5.0.0'
  mtl: ! '>=2.1.3.1'
  cmdargs: ! '>=0.10.12'
  HTTP: ! '>=4000.2.10'
  file-embed: ! '>=0.0.9'
  transformers: ! '>=0.3.0.0'
  string-conversions: ! '>=0.3.0.3'
  aeson: ! '>=0.8.0.2 && <0.10.0.0'
  transformers-compat: ! '>=0.3 && <0.5'
  directory: ! '>=1.2.1.0'
all-versions:
- '0.3.5'
- '0.3.5.1'
- '0.3.6'
- '0.3.6.1'
- '0.3.7'
- '0.3.8'
- '0.3.9'
- '0.3.10'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.2.1'
- '0.4.3'
author: Kacper Bak, Jimmy Liang, Michal Antkiewicz, Ed Zulkoski, Luke Michael Brown,
  Paulius Juodisius, Rafael Olaechea
latest: '0.4.3'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/clafer.svg)](https://hackage.haskell.org/package/clafer)\r\n[![Build
  Status](https://secure.travis-ci.org/gsdlab/clafer.svg)](http://travis-ci.org/gsdlab/clafer)\r\n\r\n#
  Clafer, the language\r\n\r\n##### v0.4.3\r\n\r\n\r\n[Clafer](http://clafer.org)
  is a general-purpose lightweight structural modeling language developed by\r\n[GSD
  Lab](http://gsd.uwaterloo.ca/), [University of Waterloo](http://uwaterloo.ca), and\r\n[MODELS](http://www.itu.dk/research/models/)
  group at [IT University of Copenhagen](http://www.itu.dk/).\r\nClafer can be used
  for modeling of static hierarchical structures but has no support for modeling the
  change of the structures over time (behavior).\r\nThe main goal of Clafer is to
  make modeling more accessible to a wider range of users and domains.\r\n\r\nThere
  are many possible applications of Clafer; however, three are prominent:\r\n\r\n1.
  *Product-Line Modeling* - aims at representing and managing commonality and variability
  of assets in product lines and creating and verifying product configurations.\r\nClafer
  naturally supports multi-staged configuration.\r\n\r\n2. *Multi-Objective Product
  Optimization* - aims at finding a set of products in a given product line that are
  optimal with respect to a set of objectives.\r\nClafer multi-objective optimizer
  generates a Pareto front of optimal product configurations.\r\n\r\n3. *Domain Modeling*
  - aims at improving the understanding of the problem domain in the early stages
  of software development and determining the requirements with fewer defects.\r\nThis
  is also known as *Concept Modeling* or *Ontology Modeling*.\r\n\r\n### Resources\r\n\r\n*
  [Learning Clafer](http://t3-necsis.cs.uwaterloo.ca:8091/#learning-clafer)\r\n* [Cheat
  Sheet](doc/CheatSheet.md)\r\n* [Syntax Documentation](doc/clafer.pdf)\r\n* [Grammar](src/clafer.cf)\r\n\r\n#
  Clafer, the compiler\r\n\r\nClafer compiler provides a reference implementation
  of Clafer, the language.\r\nIt translates models in Clafer to other formats (e.g.,
  Alloy, JSON, JS, HTML, DOT) to allow for reasoning and processing with existing
  tools (Alloy Analyzer, Choco3, and GraphViz).\r\n\r\nCurrently, the compiler is
  used by\r\n\r\n* Backends\r\n  * Alloy-based Instance Generator ([ClaferIG](https://github.com/gsdlab/claferIG)),\r\n
  \ * Choco3-based Instance Generator and Multi-Objective Optimizer ([chocosolver](https://github.com/gsdlab/chocosolver).\r\n*
  Web Frontends\r\n  * Clafer Integrated Development Environment ([ClaferIDE](https://github.com/gsdlab/claferIDE)),\r\n
  \ * Clafer Configurator ([ClaferConfigurator](https://github.com/gsdlab/ClaferConfigurator)),\r\n
  \ * Multi-Objective [Visualizer and Explorer](https://github.com/gsdlab/ClaferMooVisualizer),
  and\r\n  * Clafer Wiki ([ClaferWiki](https://github.com/gsdlab/claferwiki)).\r\n\r\n##
  Contributors\r\n\r\n* [Micha≈Ç Antkiewicz](http://gsd.uwaterloo.ca/mantkiew), Main
  developer.\r\n* [Kacper Bak](http://gsd.uwaterloo.ca/kbak), Original developer.\r\n*
  [Jimmy Liang](http://gsd.uwaterloo.ca/jliang), Developer.\r\n* Luke Michael Brown,
  co-op student May-Aug 2013. Many improvements.\r\n* Paulius Juodisius, [customized
  BNFC generator](https://github.com/juodaspaulius/bnfc) and layout resolver.\r\n*
  [Rafael Olaechea](http://gsd.uwaterloo.ca/rolaechea), Multi-Objective Optimization
  extensions.\r\n\r\n## Getting the Clafer compiler\r\n\r\nClafer can be installed
  from a binary distribution (preferred), from Hackage, and from the source code.\r\n\r\n###
  Dependencies for running\r\n\r\nRegardless of the installation method, the following
  are\r\n\r\nOptional:\r\n\r\n* [Java Platform (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
  v8+, 64bit\r\n  * only needed for running Alloy validation\r\n* [Alloy4.2](http://alloy.mit.edu/alloy/download.html)\r\n
  \ * only needed for Alloy output validation\r\n* [GraphViz](http://graphviz.org/)\r\n
  \ * the program `dot` is needed only in the `html` mode for SVG graph generation\r\n\r\n###
  Installation from binaries\r\n\r\nBinary distributions of the release 0.4.3 of Clafer
  Tools for Windows, Mac, and Linux,\r\ncan be downloaded from\r\n[Clafer Tools -
  Binary Distributions](http://gsd.uwaterloo.ca/clafer-tools-binary-distributions).\r\n\r\n1.
  download the binaries and unpack `<target directory>` of your choice\r\n2. add the
  `<target directory>` to your system path so that the executables can be found\r\n\r\n###
  Installation from Hackage\r\n\r\nClafer is now available on [Hackage](http://hackage.haskell.org/package/clafer-0.4.3/)
  and it can be installed using either [`stack`](https://github.com/commercialhaskell/stack)
  or [`cabal-install`](https://hackage.haskell.org/package/cabal-install).\r\n\r\n####
  Installation using `stack`\r\n\r\nStack is the only requirement: no other Haskell
  tooling needs to be installed because stack will automatically install everything
  that's needed.\r\n\r\n1. [install `stack`](https://github.com/commercialhaskell/stack#how-to-install)\r\n2.
  execute `stack install clafer`\r\n\r\n#### Installation using `cabal-install`\r\n\r\nDependencies\r\n\r\n*
  [GHC](https://www.haskell.org/downloads) >= 7.8.3. 7.10.2 is recommended,\r\n* `cabal-install`
  >= 1.18, should be installed together with a GHC distribution,\r\n* [alex](https://hackage.haskell.org/package/alex),\r\n*
  [happy](https://hackage.haskell.org/package/happy).\r\n\r\n1. Install GHC\r\n2.
  `cabal update`\r\n3. `cabal install alex happy`\r\n4. `cabal install clafer`\r\n5.
  on Windows `cd C:\\Users\\<user>\\AppData\\Roaming\\cabal\\i386-windows-ghc-7.10.2\\clafer-0.4.3`\r\n6.
  on Linux `ca ~/.cabal/share/x86_64-linux-ghc-7.10.2/clafer-0.4.3/`\r\n7. to automatically
  download Alloy jars, execute\r\n  * `make alloy4.2.jar`,\r\n  * move `alloy4.2.jar`
  to the location of the clafer executable.\r\n\r\n### Installation from the source
  code\r\n\r\nDependencies\r\n\r\n* [`stack`](https://github.com/commercialhaskell/stack#how-to-install)\r\n*
  [Git](http://git-scm.com/)\r\n\r\nOn Windows\r\n\r\n* [MSYS2](http://msys2.sourceforge.net/)\r\n
  \ * it is installed automatically by `stack setup`\r\n  * to open MinGW64 shell,
  execute `mingw64_shell.bat` in `C:\\Users\\<user>\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-<date>`,
  where `<date>` is the release date of your MSYS installation\r\n  * update MSYS2
  packages\r\n     * follow guide for [III. Updating packages](http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/)\r\n
  \ * execute\r\n     * `pacman -S make wget unzip diffutils`\r\n\r\n#### Important:
  branches must correspond\r\n\r\nAll related projects are following the *simultaneous
  release model*.\r\nThe branch `master` contains releases, whereas the branch `develop`
  contains code under development.\r\nWhen building the tools, the branches should
  match.\r\nReleases from branches 'master` are guaranteed to work well together.\r\nDevelopment
  versions from branches `develop` should work well together but this might not always
  be the case.\r\n\r\n#### Building\r\n\r\n1. in some `<source directory>` of your
  choice, execute\r\n  * `git clone git://github.com/gsdlab/clafer.git`\r\n2. in `<source
  directory>/clafer`, execute `stack setup`. This will install all dependencies, build
  tools, and MSYS2 (on Windows).\r\n3. first time only on Windows\r\n  * open `MinGW64
  Shell` using `C:\\Users\\<user>\\AppData\\Local\\Programs\\stack\\i386-windows\\msys2-20150512\\mingw64_shell.bat`\r\n
  \ * update MSYS2 following the [update procedure](http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/):\r\n
  \   * `pacman -Sy`\r\n    * `pacman --needed -S bash pacman pacman-mirrors msys2-runtime`\r\n
  \   * restart shell if the runtime was updated\r\n    * `pacman -Su`\r\n  * `pacman
  -S make wget unzip diffutils`\r\n4. `cd <source directory>`\r\n  * `make`\r\n\r\n###
  Installation\r\n\r\n1. Execute\r\n  * `make install to=<target directory>`\r\n\r\n####
  Note:\r\n> On Windows, use `/` with the `make` command instead of `\\`, e.g., `make
  install to=/c/clafer-tools-0.4.3/`\r\n\r\n## Integration with Sublime Text 2/3\r\n\r\nSee
  [ClaferToolsST](https://github.com/gsdlab/ClaferToolsST)\r\n\r\n## Integration with
  VIM\r\n\r\nSee [clafer-vim](https://github.com/wasowski/clafer-vim)\r\n\r\n## Usage\r\n\r\n###
  Clafer Compiler\r\n\r\n(As printed by `clafer --help`)\r\n\r\n```\r\nClafer 0.4.3\r\n\r\nclafer
  [OPTIONS] [FILE]\r\n\r\nCommon flags:\r\n  -m --mode=CLAFERMODE                    Generated
  output type. Available\r\n                                          CLAFERMODEs
  are: 'alloy' (default,\r\n                                          Alloy 4.2);
  'json' (intermediate\r\n                                          representation
  of Clafer model);\r\n                                          'clafer' (analyzed
  and desugared\r\n                                          clafer model); 'html'
  (original model\r\n                                          in HTML); 'graph' (graphical\r\n
  \                                         representation written in DOT\r\n                                          language);
  'cvlgraph' (cvl notation\r\n                                          representation
  written in DOT\r\n                                          language); 'choco' (Choco
  constraint\r\n                                          programming solver). Multiple
  modes\r\n                                          can be specified at the same
  time,\r\n                                          e.g., '-m alloy -m html'.\r\n
  \ -o --console-output                     Output code on console.\r\n  -i --flatten-inheritance
  \               Flatten inheritance ('alloy' mode\r\n                                          only).\r\n
  \    --timeout-analysis=INT               Timeout for analysis.\r\n  -l --no-layout
  \                         Don't resolve off-side rule layout.\r\n  -n --nl --new-layout
  \                   Use new fast layout resolver\r\n                                          (experimental).\r\n
  \ -c --check-duplicates                   Check duplicated clafer names in\r\n                                          the
  entire model.\r\n  -f --skip-resolver                      Skip name resolution.\r\n
  \ -k --keep-unused                        Keep uninstantated abstract clafers\r\n
  \                                         ('alloy' mode only).\r\n  -s --no-stats
  \                          Don't print statistics.\r\n  -v --validate                           Validate
  outputs of all modes. Uses\r\n                                          '<tooldir>/alloy4.2.jar'
  for Alloy\r\n                                          models, '<tooldir>/chocosolver.jar'\r\n
  \                                         for Alloy models, and Clafer\r\n                                          translator
  for desugared Clafer\r\n                                          models. Use '--tooldir'
  to override\r\n                                          the default location ('.')
  of these\r\n                                          tools.\r\n     --tooldir=DIR
  \                       Specify the tools directory\r\n                                          ('validate'
  only). Default: '.'\r\n                                          (current directory).\r\n
  \ -a --alloy-mapping                      Generate mapping to Alloy source\r\n                                          code
  ('alloy' mode only).\r\n     --self-contained                     Generate a self-contained
  html\r\n                                          document ('html' mode only).\r\n
  \    --add-graph                          Add a graph to the generated html\r\n
  \                                         model ('html' mode only). Requires\r\n
  \                                         the \"dot\" executable to be on the\r\n
  \                                         system path.\r\n     --sr --show-references
  \              Whether the links for references\r\n                                          should
  be rendered. ('html' and\r\n                                          'graph' modes
  only).\r\n     --add-comments                       Include comments from the source\r\n
  \                                         file in the html output ('html' mode\r\n
  \                                         only).\r\n  -e --ecore2clafer                       Translate
  an ECore model into\r\n                                          Clafer.\r\n     --ss=SCOPESTRATEGY
  --scope-strategy  Use scope computation strategy:\r\n                                          none
  or simple (default).\r\n     --check-afm --afm                    Throws an error
  if the cardinality\r\n                                          of any of the clafers
  is above 1.\r\n     --meta-data                          Generate a 'fully qualified\r\n
  \                                         name'-'least-partially-qualified\r\n                                          name'-'unique
  ID' map ('.cfr-map').\r\n                                          In Alloy and
  Choco modes, generate\r\n                                          the scopes map
  ('.cfr-scope').\r\n  -? --help                               Display help message\r\n
  \ -V --version                            Print version information\r\n     --numeric-version
  \                   Print just the version number\r\n```\r\n\r\nThe dependencies
  among the command line arguments are described on the [model wiki](http://t3-necsis.cs.uwaterloo.ca:8091/ClaferTools/CommandLineArguments).\r\n\r\nMultiple
  modes can be used at the same time. For example,\r\n\r\n`clafer model.cfr -m alloy
  -m json -m html -m graph --self-contained --show-references --no-stats`\r\n\r\nThe
  mode `-m alloy` is only the default mode if no other modes are given. When other
  modes are given, the mode `-m alloy` must be added explicitly if needed.\r\n\r\nAdditionally,
  `[OPTIONS]` can also be specified directly in the model file by inserting the following
  compiler directive as the first line of the file:\r\n\r\n```\r\n//# [OPTIONS]\r\n```\r\n\r\nfor
  example\r\n\r\n```\r\n//# --keep-unused -m=alloy\r\n```\r\n\r\nOptions given at
  command line override the options given in the file using `//#` which, in turn,
  override the defaults.\r\n\r\n### Using compiler directives\r\n\r\nCompiler directives
  are comments of the form\r\n\r\n```\r\n//# <directive name>\r\n```\r\n\r\nThe following
  directives are markers of locations in the input files for different purposes:\r\n\r\n*
  `//# FRAGMENT` - marks the beginning of the new [module fragment](http://gsd.uwaterloo.ca:8888/question/463/multi-fragment-modules).\r\n*
  `//# GRAPH` - marks the insertion point for a graph rendering. The graph is only
  produced in HTML mode with the argument `--add-graph`.\r\n* `//# STATS` - marks
  the insertion point for module statistics. The statistics can be omitted using the
  argument `--no-stats`.\r\n* `//# SUMMARY` - shorthand for `//# GRAPH` and `//# STATS`\r\n\r\n#
  Developing Clafer\r\n\r\nHere is some information about the development of the Clafer
  compiler.\r\n\r\n## Branching\r\n\r\nWe are following the simplified version of
  the [successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/).\r\nThe
  branch `master` is for releases and hot fixes only.\r\nThe branch `develop` is for
  minor development and for integration of features from feature branches.\r\nFor
  any substantial work, branch off from `develop` and create a pull request back into
  `develop` after the work is completed.\r\nWe do testing and code review before merging
  into develop.\r\nIf the `develop` is ahead, merge it into the feature branch and
  perform integration testing there.\r\nTo make a release, we create a pull request
  from `develop` into `master`.\r\nWe tag `master` with version numbers after each
  release merge.\r\n\r\n## Building\r\n\r\nWe have switched to [Haskell Tool Stack](https://github.com/commercialhaskell/stack#the-haskell-tool-stack).\r\nInstall
  the tool first.\r\n\r\n## Testing\r\n\r\nWe have both automated tests and regression
  tests.\r\n\r\nTo run the automated tests (including both unit tests and [doctests](https://github.com/sol/doctest#readme)),
  execute\r\n\r\n```\r\nstack test\r\n```\r\n\r\nTo only run unit tests, execute `stack
  test test-suite`.\r\n\r\nTo only run doctests, execute `stack test doctests`.\r\n\r\n>
  Note: it is still possible to run `cabal test` as previously; however, the `Makefile`
  uses `stack` by default.\r\n\r\nFor instructions for adding new modules to the doctest
  suite, see [cabal integration](https://github.com/sol/doctest#cabal-integration).\r\n\r\nTo
  run all the automated tests and the regression tests, execute\r\n\r\n```\r\nmake
  test\r\n```\r\n\r\nWe do test-driven development in the following way:\r\n\r\n1.
  create a test case Clafer model in either `test/positive` or `test/negative` depending
  on whether a test case should compile successfully or return an error. For example,
  see a positive test case [test/positive/redefinition.cfr](https://github.com/gsdlab/clafer/blob/namedDrefs/test/positive/redefinition.cfr).\r\n2.
  produce the intended compiler output automatically if possible and manually fix
  the output. Save the intended output as a regression test case. For example, see
  [test/regression/redefinition.cfr.reg](https://github.com/gsdlab/clafer/blob/namedDrefs/test/regression/redefinition.als.reg).\r\n3.
  implement the feature to reproduce the intended output: compiler the test case and
  execute\r\n\r\n```\r\ncd test\r\nmake diffRegressions\r\n```\r\n\r\nthis will show
  you how the current output diverges from the intended output.\r\n\r\n\r\n## Modifying
  the grammar\r\n\r\nWe are using a [customized version of BNCF](https://github.com/juodaspaulius/bnfc).\r\nClone
  the repository and install a binary of `bnfc` so that it's visible in your `PATH`.\r\nAfter
  changing the grammar, execute\r\n\r\n```\r\nmake grammar\r\n```\r\n\r\n\r\n# Need
  help?\r\n\r\n* Visit [language's website](http://clafer.org).\r\n* Report issues
  to [issue tracker](https://github.com/gsdlab/clafer/issues)\r\n"
license-name: MIT
