homepage: http://www.clash-lang.org/
changelog-type: markdown
hash: f4dfa0d50798d7ee46451d748a9e6c02e4372851e31a8d641b5dca52eac186bb
test-bench-deps:
  base: ! '>=4 && <5'
  doctest: ! '>=0.9.1 && <0.11'
  Glob: ! '>=0.7 && <0.8'
maintainer: Christiaan Baaij <christiaan.baaij@gmail.com>
synopsis: CAES Language for Synchronous Hardware - Prelude library
changelog: ! "# Changelog for [`clash-prelude` package](http://hackage.haskell.org/package/clash-prelude)\n\n##
  0.9.2 *August 2nd 2015*\n* Disable strictness analysis in `CLaSH.Signal.Internal`,
  this allows turning on strictness analysis in the GHC front-end of the CLaSH compiler.\n\n##
  0.9.1 *June 26th 2015*\n* Updated documentation on data-file support on Altera/Quartus\n\n##
  0.9 *June 25th 2015*\n* New features:\n  * Add operations on singleton natural numbers:
  `addSNat`, `subSNat`, `mulSNat`, and `powSNat`.\n  * Add asynchronous RAM functions
  in `CLaSH.Prelude.RAM`, which have an asynchronous/combinational read port.\n  *
  Add ROM functions in modules `CLaSH.Prelude.ROM` and `CLaSH.Prelude.ROM.File`, where
  the latter module contains functions that instantiate a ROM from the content specified
  in an external data-file.\n  * Add BlockRam functions, in the `CLaSH.Prelude.BlockRam.File`
  module, whose content can be initialised with the content specified in an external
  data-file.\n  * `assert` now takes an extra `String` argument so you can distinguish
  one `assert` from the others.\n  Additionally, `assert'` is added which takes an
  additional `SClock` argument.\n  This is needed, because `assert` now reports the
  clock cycle, and clock domain, when an assertion fails.\n  * `defClkAltera` and
  `defClkXilinx` are replaced by, `altpll` and `alteraPll` for Altera clock sources,
  and `clockWizard` for Xilinx clock sources.\n  These names correspond to the names
  of the generator utilities in Quartus and ISE/Vivado.\n  * Add [Safe](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/safe-haskell.html)
  versions of the prelude modules: `CLaSH.Prelude.Safe` and `CLaSH.Prelude.Explicit.Safe`\n
  \ * Add synchronizers in the `CLaSH.Prelude.Synchronizer` module\n\n## 0.8 *June
  3rd 2015*\n* New features:\n  * Make the (Bit)Vector argument the _last_ argument
  for the following functions: `slice`, `setSlice`, `replaceBit`, `replace`. The signatures
  for the above functions are now:\n\n    ```\n    slice      :: BitPack a => SNat
  m -> SNat n -> a -> BitVector (m + 1 - n)\n    setSlice   :: BitPack a => SNat m
  -> SNat n -> BitVector (m + 1 - n) -> a -> a\n    replaceBit :: Integral i => i
  -> Bit -> a -> a\n    replace    :: Integral i => i -> a -> Vec n a -> Vec n a\n
  \   ```\n\n    This allows for easier chaining, e.g.:\n\n    ```\n    replaceBit
  0 1 $\n    repleceBit 4 0 $\n    replaceBit 6 1 bv\n    ```\n  * Until version 0.7.5,
  given `x :: Vec 8 Bit` and `y :: BitVector 8`, it used to be `last x == msb y`.\n
  \   This is quite confusing when printing converted values.\n    Until version 0.7.5
  we would get:\n\n    ```\n    > 0x0F :: BitVector 8\n    0000_1111\n    > unpack
  0x0F :: Vec 8 Bit\n    <1,1,1,1,0,0,0,0>\n    ```\n\n    As of version 0.8, we have
  `head x == msb y`:\n\n    ```\n    > 0x0F :: BitVector 8\n    0000_1111\n    > unpack
  0x0F :: Vec 8 Bit\n    <0,0,0,0,1,1,1,1>\n    ```\n\n    So converting for `Vec`tors
  of `Bit`s to `BitVector`s is no longer _index_-preserving, but it is _order_-preserving.\n
  \ * Add [QuickCheck](http://hackage.haskell.org/package/QuickCheck) `Arbitary` and
  `CoArbitary` instances for all data types\n  * Add [lens](http://hackage.haskell.org/package/lens)
  `Ixed` instances for `BitVector`, `Signed`, `Unsigned`, and `Vec`\n\n## 0.7.5 **May
  7th 2015**\n* New features:\n  * Moore machine combinators\n\n## 0.7.4 **May 5th
  2015*\n* New features:\n  * Add `TopEntity` annotations\n\n## 0.7.3 *April 22nd
  2015*\n* New features:\n  * Add the vector functions: `zip3`, `unzip3`, and `zipWith3`\n
  \ * Use version 0.2 of the [`ghc-typelits-natnormalise` package](http://hackage.haskell.org/package/ghc-typelits-natnormalise)\n\n##
  0.7.2 *April 20th 2015*\n* New features:\n  * Support for GHC 7.10 => only works
  with GHC 7.10 and higher\n  * Use http://hackage.haskell.org/package/ghc-typelits-natnormalise
  typechecker plugin for better type-level natural number handling\n\n## 0.7.1 *March
  25th 2015*\n* Fixes bugs:\n  * Fix laziness bug in Vector.(!!) and Vector.replace\n\n##
  0.7 *March 13th 2015*\n* New features:\n  * Switch types of `bundle` and `bundle'`,
  and `unbundle` and `unbundle'`.\n  * Rename all explicitly clocked versions of Signal
  functions, to the primed\n    name of the implicitly clocked Signal functions. E.g.
  `cregister` is now\n    called `register'` (where the implicitly clocked function
  is callled `register`)\n  * Add new instances for `DSignal`\n  * Add experimental
  `antiDelay` function for `DSignal`\n  * Generalize lifted functions over Signals
  (e.g. (.==.))\n\n* Fixes bugs:\n  * Faster versions of Vector.(!!) and Vector.replace\n\n##
  0.6.0.1 *November 17th 2014*\n* Fixes bugs:\n  * Add missing 'CLaSH.Sized.BitVector'
  module to .cabal file.\n\n## 0.6 *November 17th 2014*\n\n* New features:\n  * Add
  `Fractional` instance for `Fixed` [#9](https://github.com/christiaanb/clash-prelude/issues/9)\n
  \ * Make indexing/subscript of `Vec` ascending [#4](https://github.com/christiaanb/clash-prelude/issues/4)\n
  \ * Add separate `BitVector` type, which has a descending index.\n  * Add bit indexing
  operators, including the index/subscript operator `(!)`.\n  * Add bit reduction
  operators: `reduceOr`, `reduceAnd`, `reduceOr`.\n  * Rename `BitVector` class to
  `BitPack` with `pack` and `unpack` class methods.\n  * Rename `Pack` class to `Bundle`
  with `bundle` and `unbundle` class methods.\n  * Strip all `Vec` functions from
  their `v` prefix, i.e. `vmap` -> `map`.\n  * Rename `Vec` indexing operator from
  `(!)` to `(!!)`.\n  * Combine `Add` and `Mult` class into `ExtendingNum` class.\n
  \ * Add extend and truncate methods to the `Resize` class.\n  * Add `SaturatingNum`
  class with saturating numeric operators.\n  * Add multitude of lifted `Signal` operators,
  i.e. `(.==.) :: Eq a => Signal a -> Signal a -> Signal Bool`\n  * Add `CLaSH.Signal.Delayed`
  with functions and data types for delay-annotated signals to support safe synchronisation.\n
  \ * Add `CLASH.Prelude.DataFlow` with functions and data types to create self-synchronising
  circuits based on data-flow principles.\n\n* Fixes bugs:\n  * Remove deprecated
  'Arrow' instance for and related functions for `Comp` [#5](https://github.com/christiaanb/clash-prelude/issues/5)\n\n##
  0.5.1 *June 5th 2014*\n\n* New features:\n  * Add `Default` instance for `Vec` [#2](https://github.com/christiaanb/clash-prelude/issues/2)\n
  \ * Instantiation for `blockRam` [#3](https://github.com/christiaanb/clash-prelude/issues/2)\n\n*
  Fixes bugs:\n  * Fixed error on documentation of fLit in Fixed.hs [#6](https://github.com/christiaanb/clash-prelude/issues/6)\n
  \ * Non-translatable `Enum` function interfere with `sassert` compilation [#7](https://github.com/christiaanb/clash-prelude/issues/7)\n
  \ * Substituted the word 'list' into 'vector' in some places in the documentation.
  [#8](https://github.com/christiaanb/clash-prelude/issues/8)\n  * mark vselectI INLINEABLE
  [#10](https://github.com/christiaanb/clash-prelude/issues/10)\n\n## 0.5 *April 3rd
  2014*\n  * Add explicitly clocked synchronous signals for multi-clock circuits\n\n##
  0.4.1 *March 27th 2014*\n  * Add saturation to fixed-point operators\n  * Finalize
  most documentation\n\n## 0.4 *March 20th 2014*\n  * Add fixed-point integers\n  *
  Extend documentation\n  * 'bit' and 'testBit' functions give run-time errors on
  out-of-bound positions\n\n## 0.3 *March 14th 2014*\n  * Add Documentation\n  * Easy
  SNat literals for 0..1024, e.g. d4 = snat :: SNat 4\n  * Fix blockRamPow2\n\n##
  0.2 *March 5th 2014*\n  * Initial release\n"
basic-deps:
  base: ! '>=4.8.0.0 && <5'
  data-default: ! '>=0.5.3'
  array: ! '>=0.5.1.0'
  integer-gmp: ! '>=0.5.1.0'
  ghc-typelits-natnormalise: ! '>=0.3'
  singletons: ! '>=1.0'
  lens: ! '>=4.9'
  ghc-prim: ! '>=0.3.1.0'
  QuickCheck: ! '>=2.7 && <2.9'
  th-lift: ! '>=0.5.6'
  template-haskell: ! '>=2.9.0.0'
all-versions:
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.5.0.1'
- '0.5.1'
- '0.6'
- '0.6.0.1'
- '0.7'
- '0.7.1'
- '0.7.2'
- '0.7.3'
- '0.7.4'
- '0.7.5'
- '0.8'
- '0.8.1'
- '0.9'
- '0.9.1'
- '0.9.2'
author: Christiaan Baaij
latest: '0.9.2'
description-type: markdown
description: ! '[![Build Status](https://travis-ci.org/clash-lang/clash-prelude.svg?branch=master)](https://travis-ci.org/clash-lang/clash-prelude)

  [![Hackage](https://img.shields.io/hackage/v/clash-prelude.svg)](https://hackage.haskell.org/package/clash-prelude)

  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/clash-prelude.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aclash-prelude)


  = WARNING =

  Only works with GHC-7.10.* (http://www.haskell.org/ghc/download_ghc_7_10_1)!

'
license-name: BSD2
