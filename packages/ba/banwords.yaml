homepage: https://github.com/fanjam/banwords
changelog-type: ''
hash: 31c48a9d20d0469d76942eaf8b1afe57ed059b5e9ceb921767cbc04bcf04bbf2
test-bench-deps:
  test-framework-hunit: ! '>=0.3 && <0.4'
  test-framework: ! '>=0.8 && <0.9'
  base: -any
  text: -any
  HUnit: ! '>=1.2 && <1.3'
  banwords: -any
  attoparsec: -any
  vector: -any
maintainer: ian@housejeffries.com
synopsis: Generalized word blacklister
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.6 && <5.0'
  text: ! '>=1.1 && <1.3'
  data-default: ! '>=0.5 && <0.6'
  attoparsec: ! '>=0.12.1 && <0.13'
  vector: ! '>=0.10.12 && <0.11'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
author: Ian Grant Jeffries
latest: '0.2.0.0'
description-type: markdown
description: ! "# Intro\n\nA few tools for checking if a word is a close match against
  a blacklist.\n\n# Example\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule
  Main where\n\nimport Data.Monoid\nimport Data.Text (Text)\nimport Data.Vector (Vector)\nimport
  qualified Data.Vector as V\nimport Heuristics.BanWords\n\nmain :: IO ()\nmain =\n
  \ case passBlacklist banAlmostExact blacklist \"acme \" of\n    Nothing -> putStrLn
  \"Blocked 'acme '\"\n    Just _  -> error \"This shouldn't happen!\"\n\nblacklist
  :: Vector Text\nblacklist = exampleReserved -- Includes \"admin\", \"security\",
  and a few others.\n         <> V.fromList [\"gosh\", \"darn\"] -- Supply your own
  profanity list.\n         <> V.fromList [\"acme\"] -- Prevent users from impersonating
  your company.\n```\n"
license-name: MIT
