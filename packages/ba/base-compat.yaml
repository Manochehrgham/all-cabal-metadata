changelog-type: markdown
hash: 5ef1aede7af049a430264cb3035ff23c0062c1d2f3d97a16668d2e34676002ee
test-bench-deps:
  base: ! '>=4.3 && <5'
  hspec: ! '>=1.8'
  base-compat: -any
  QuickCheck: -any
synopsis: A compatibility layer for base
changelog: ! "## Changes in 0.8.2\n - Backport `bitDefault`, `testBitDefault`, and
  `popCountDefault` in\n   `Data.Bits.Compat` to all versions of `base`\n   - Backport
  `toIntegralSized` to `base-4.7`\n - Backport `nub` and `nubBy` (as well as `union`
  and `unionBy`, which are\n   implemented in terms of them) to fix logic error in
  `Data.List.Compat`\n - Backport `byteSwap16`, `byteSwap32`, and `byteSwap64` to
  `Data.Word.Compat`\n - Backport `fillBytes` in `Foreign.Marshal.Utils.Compat`\n
  - Backport `showFFloatAlt` and `showGFloatAlt` to `Numeric.Compat`\n\n## Changes
  in 0.8.1.1\n - Fixed Windows build\n\n## Changes in 0.8.1\n - Implement `setEnv`
  and `unsetEnv` in `System.Environment.Compat` (which were\n   ported from the `setenv`
  package). As a result, `base-compat` now depends\n   on `unix` on POSIX-like operating
  systems.\n - Drop GHC 6.12 (and `base-4.2.0.0`) compatibility\n\n## Changes in 0.8.0.1\n
  - Retrospective version bump updating the changelog to reflect the changes\n   made
  in 0.8.0\n\n## Changes 0.8.0\n - All orphan instances were split off into a separate
  package,\n   [`base-orphans`](https://github.com/haskell-compat/base-orphans)\n
  - `base-compat` no longer redefines the data types `Down` and `Alt`. See\n   [here](https://github.com/haskell-compat/base-compat/issues/17)
  for\n   the discussion that led to this change.\n - Update `Control.Monad.Compat`
  for `base-4.8.0.0`\n - Update `Data.List.Compat` for `base-4.8.0.0`\n - Update `Data.Foldable.Compat`
  for `base-4.8.0.0`\n\n## Changes in 0.7.1\n - Backported `Alt` to `Data.Monoid.Compat`\n
  - Backported `Down` to `Data.Ord.Compat`\n\n## Changes in 0.7.0\n - Add functions
  and orphan instances introduced by changes to\n   `base-4.7.0.0` and `base-4.8.0.0`\n\n##
  Changes in 0.6.0\n - Update `Prelude.Compat` for `base-4.8.0.0` and AMP\n\n## Changes
  in 0.5.0\n - Remove Control.Exception.Base.Compat and GHC.Exception.Compat\n - Add
  System.Exit.Compat.die\n - Compatibility with base-4.7.1\n\n## Changes in 0.4.1\n
  - Add `setEnv` and `unsetEnv` to `System.Environment.Compat`\n\n## Changes in 0.4.0\n
  - Major refactoring: base-compat no longer aims to replace all base,\n   only new
  code is included in module .Compat\n - Removed stubbed modules\n - Removed generation
  scripts\n\n## Changes in 0.3\n - Added functions from Base 4.7 (bool, isLeft, isRight)\n
  - Added instances from Base 4.7 (Either Foldable, Traversable,...)\n\n## Changes
  in 0.2.1\n - Fix build on windows\n\n## Changes in 0.2.0\n - Re-export everything
  from base\n - provides access to `VERSION_base` and `MIN_VERSION_base` CPP macros
  (with\n   `#include \"base-compat.h\"`)\n - Do not re-export `System.IO.Error.catch`
  from `Prelude` for `base` < 4.6.0\n - Add `Eq`/`Ord` instance for `ErrorCall`\n
  - Remove `GHC.IOBase`, `GHC.Handle`, `Control.Concurrent.QSem`,\n   `Control.Concurrent.QSemN`,
  `Control.Concurrent.SampleVar`, `Data.HashTable`\n\n## Changes in 0.1.0\n - Remove
  getExecutablePath, it did not work with GHC < 7.2 (patches welcome!)\n - Add `<>`\n"
basic-deps:
  unix: -any
  base: ! '>=4.3 && <5'
all-versions:
- '0.0.0'
- '0.1.0'
- '0.1.0.1'
- '0.2.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.1'
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.5.0'
- '0.6.0'
- '0.7.0'
- '0.7.1'
- '0.8.0'
- '0.8.0.1'
- '0.8.1'
- '0.8.1.1'
- '0.8.2'
latest: '0.8.2'
description-type: markdown
description: ! "# A compatibility layer for `base` [![Hackage version](https://img.shields.io/hackage/v/base-compat.svg?style=flat)](http://hackage.haskell.org/package/base-compat)
  [![Build Status](https://img.shields.io/travis/haskell-compat/base-compat.svg?style=flat)](https://travis-ci.org/haskell-compat/base-compat)\n##
  Scope\n\nThe scope of `base-compat` is to provide functions available in later versions\nof
  base to a wider (older) range of compilers.\n\nIn addition, successful library proposals
  that have been accepted to be part of\nupcoming versions of `base` are also included.
  \ This package is not intended to\nreplace `base`, but to complement it.\n\nNote
  that `base-compat` does not add any orphan instances.  There is a separate\npackage
  [`base-orphans`](https://github.com/haskell-compat/base-orphans) for\nthat.\n\n##
  Basic usage\n\nIn your cabal file, you should have something like this:\n\n```\n
  \ build-depends:      base              >= 4.3\n                    , base-compat
  \      >= 0.8.0\n```\n\nThen, lets say you want to use the `isRight` function introduced
  with\n`base-4.7.0.0`.  Replace:\n\n```\nimport Data.Either\n```\n\nwith\n\n```\nimport
  Data.Either.Compat\n```\n\n_Note (1)_: There is no need to import both unqualified.
  \ The `.Compat` modules\nre-exports the original module.\n\n_Note (2)_: If a given
  module `.Compat` version is not defined, that either\nmeans that:\n\n* The module
  has not changed in recent base versions, thus no `.Compat` is\n  needed.\n* The
  module has changed, but the changes depend on newer versions of GHC, and\n  thus
  are not portable.\n* The module has changed, but those changes have not yet been
  merged in\n  `base-compat`: patches are welcomed!\n\n## Using `Prelude.Compat`\n\nIf
  you want to use `Prelude.Compat` (which provides all the\nAMP/Traversable/Foldable
  changes from `base-4.8.0.0`), it's best to hide\n`Prelude`, e.g.:\n\n    import
  Prelude ()\n    import Prelude.Compat\n\n    main :: IO ()\n    main = mapM_ print
  (Just 23)\n\nAlternatively, you can use the `NoImplicitPrelude` language extension:\n\n
  \   {-# LANGUAGE NoImplicitPrelude #-}\n    import Prelude.Compat\n\n    main ::
  IO ()\n    main = mapM_ print (Just 23)\n\nNote that we use\n\n    mapM_ :: (Foldable
  t, Monad m) => (a -> m b) -> t a -> m ()\n\nfrom `Data.Foldable` here, which is
  only exposed from `Prelude` since\n`base-4.8.0.0`.\n\nUsing this approach allows
  you to write code that works seamlessly with all\nversions of GHC that are supported
  by `base-compat`.\n\n## What is covered\nSo far the following is covered.\n\n###
  For compatibility with the latest released version of `base`\n\n * `Prelude.Compat`
  incorporates the AMP/Foldable/Traversable changes and\n   exposes the same interface
  as `Prelude` from `base-4.8.0.0`\n * `System.IO.Error.catch` is not re-exported
  from `Prelude.Compat` for older\n   versions of `base`\n * `Text.Read.Compat.readMaybe`\n
  * `Text.Read.Compat.readEither`\n * `Data.Monoid.Compat.<>`\n * Added `bitDefault`,
  `testBitDefault`, and `popCountDefault` to `Data.Bits.Compat`\n * Added `toIntegralSized`
  to `Data.Bits.Compat` (if using `base-4.7`)\n * Added `bool` function to `Data.Bool.Compat`\n
  * Added `isLeft` and `isRight` to `Data.Either.Compat`\n * Added `withMVarMasked`
  function to `Control.Concurrent.MVar.Compat`\n * Added `(<$!>)` function to `Control.Monad.Compat`\n
  * Added `($>)` and `void` functions to `Data.Functor.Compat`\n * `(&)` function
  to `Data.Function.Compat`\n * `($>)` and `void` functions to `Data.Functor.Compat`\n
  * `dropWhileEnd`, `isSubsequenceOf`, `sortOn`, and `uncons` functions to `Data.List.Compat`\n
  * Correct versions of `nub`, `nubBy`, `union`, and `unionBy` to `Data.List.Compat`\n
  * `makeVersion` function to `Data.Version.Compat`\n * `traceId`, `traceShowId`,
  `traceM`, and `traceShowM` functions to `Debug.Trace.Compat`\n * `byteSwap16`, `byteSwap32`,
  and `byteSwap64` to `Data.Word.Compat`\n * `calloc` and `callocBytes` functions
  to `Foreign.Marshal.Alloc.Compat`\n * `callocArray` and `callocArray0` functions
  to `Foreign.Marshal.Array.Compat`\n * `fillBytes` to `Foreign.Marshal.Utils.Compat`\n
  * Added `Data.List.Compat.scanl'`\n * `showFFloatAlt` and `showGFloatAlt` to `Numeric.Compat`\n
  * `lookupEnv`, `setEnv` and `unsetEnv` to `System.Environment.Compat`\n\n## Supported
  versions of GHC/base\n\n * `ghc-7.10.1` / `base-4.8.0.0`\n * `ghc-7.8.4`  / `base-4.7.0.2`\n
  * `ghc-7.8.3`  / `base-4.7.0.1`\n * `ghc-7.8.2`  / `base-4.7.0.0`\n * `ghc-7.8.1`
  \ / `base-4.7.0.0`\n * `ghc-7.6.3`  / `base-4.6.0.1`\n * `ghc-7.6.2`  / `base-4.6.0.1`\n
  * `ghc-7.6.1`  / `base-4.6.0.0`\n * `ghc-7.4.2`  / `base-4.5.1.0`\n * `ghc-7.4.1`
  \ / `base-4.5.0.0`\n * `ghc-7.2.2`  / `base-4.4.1.0`\n * `ghc-7.2.1`  / `base-4.4.0.0`\n
  * `ghc-7.0.4`  / `base-4.3.1.0`\n * `ghc-7.0.3`  / `base-4.3.1.0`\n * `ghc-7.0.2`
  \ / `base-4.3.1.0`\n * `ghc-7.0.1`  / `base-4.3.0.0`\n\nPatches are welcome; add
  tests for new code!\n\n## Development\n\nFor `Prelude.Compat` there is an `Prelude.index`
  file that was generated from\nthe output of\n\n    ghc --show-iface Prelude.hi\n\nTo
  verify that `Prelude.Compat` matches the specification given in\n`Prelude.types`
  run:\n\n    ./check-Prelude.sh\n"
