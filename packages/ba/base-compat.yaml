changelog-type: markdown
hash: 3e1eb846ecc6c5e80a0b04c87053dac973e06e5259da2841f35e395095c51369
test-bench-deps:
  base: ! '>=4.3 && <5'
  hspec: ! '>=1.8'
  base-compat: -any
  QuickCheck: -any
synopsis: A compatibility layer for base
changelog: ! "## Changes in 0.8.1.1\r\n - Fixed Windows build\r\n\r\n## Changes in
  0.8.1\r\n - Implement `setEnv` and `unsetEnv` in `System.Environment.Compat` (which
  were\r\n   ported from the `setenv` package). As a result, `base-compat` now depends\r\n
  \  on `unix` on POSIX-like operating systems.\r\n - Drop GHC 6.12 (and `base-4.2.0.0`)
  compatibility\r\n\r\n## Changes in 0.8.0.1\r\n - Retrospective version bump updating
  the changelog to reflect the changes\r\n   made in 0.8.0\r\n\r\n## Changes 0.8.0\r\n
  - All orphan instances were split off into a separate package,\r\n   [`base-orphans`](https://github.com/haskell-compat/base-orphans)\r\n
  - `base-compat` no longer redefines the data types `Down` and `Alt`. See\r\n   [here](https://github.com/haskell-compat/base-compat/issues/17)
  for\r\n   the discussion that led to this change.\r\n - Update `Control.Monad.Compat`
  for `base-4.8.0.0`\r\n - Update `Data.List.Compat` for `base-4.8.0.0`\r\n - Update
  `Data.Foldable.Compat` for `base-4.8.0.0`\r\n\r\n## Changes in 0.7.1\r\n - Backported
  `Alt` to `Data.Monoid.Compat`\r\n - Backported `Down` to `Data.Ord.Compat`\r\n\r\n##
  Changes in 0.7.0\r\n - Add functions and orphan instances introduced by changes
  to\r\n   `base-4.7.0.0` and `base-4.8.0.0`\r\n\r\n## Changes in 0.6.0\r\n - Update
  `Prelude.Compat` for `base-4.8.0.0` and AMP\r\n\r\n## Changes in 0.5.0\r\n - Remove
  Control.Exception.Base.Compat and GHC.Exception.Compat\r\n - Add System.Exit.Compat.die\r\n
  - Compatibility with base-4.7.1\r\n\r\n## Changes in 0.4.1\r\n - Add `setEnv` and
  `unsetEnv` to `System.Environment.Compat`\r\n\r\n## Changes in 0.4.0\r\n - Major
  refactoring: base-compat no longer aims to replace all base,\r\n   only new code
  is included in module .Compat\r\n - Removed stubbed modules\r\n - Removed generation
  scripts\r\n\r\n## Changes in 0.3\r\n - Added functions from Base 4.7 (bool, isLeft,
  isRight)\r\n - Added instances from Base 4.7 (Either Foldable, Traversable,...)\r\n\r\n##
  Changes in 0.2.1\r\n - Fix build on windows\r\n\r\n## Changes in 0.2.0\r\n - Re-export
  everything from base\r\n - provides access to `VERSION_base` and `MIN_VERSION_base`
  CPP macros (with\r\n   `#include \"base-compat.h\"`)\r\n - Do not re-export `System.IO.Error.catch`
  from `Prelude` for `base` < 4.6.0\r\n - Add `Eq`/`Ord` instance for `ErrorCall`\r\n
  - Remove `GHC.IOBase`, `GHC.Handle`, `Control.Concurrent.QSem`,\r\n   `Control.Concurrent.QSemN`,
  `Control.Concurrent.SampleVar`, `Data.HashTable`\r\n\r\n## Changes in 0.1.0\r\n
  - Remove getExecutablePath, it did not work with GHC < 7.2 (patches welcome!)\r\n
  - Add `<>`\r\n"
basic-deps:
  unix: -any
  base: ! '>=4.3 && <5'
all-versions:
- '0.0.0'
- '0.1.0'
- '0.1.0.1'
- '0.2.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.1'
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.5.0'
- '0.6.0'
- '0.7.0'
- '0.7.1'
- '0.8.0'
- '0.8.0.1'
- '0.8.1'
- '0.8.1.1'
latest: '0.8.1.1'
description-type: markdown
description: ! "# A compatibility layer for `base` [![Hackage version](https://img.shields.io/hackage/v/base-compat.svg?style=flat)](http://hackage.haskell.org/package/base-compat)
  [![Build Status](https://img.shields.io/travis/haskell-compat/base-compat.svg?style=flat)](https://travis-ci.org/haskell-compat/base-compat)\r\n##
  Scope\r\n\r\nThe scope of `base-compat` is to provide functions available in later
  versions\r\nof base to a wider (older) range of compilers.\r\n\r\nIn addition, successful
  library proposals that have been accepted to be part of\r\nupcoming versions of
  `base` are also included.  This package is not intended to\r\nreplace `base`, but
  to complement it.\r\n\r\nNote that `base-compat` does not add any orphan instances.
  \ There is a separate\r\npackage [`base-orphans`](https://github.com/haskell-compat/base-orphans)
  for\r\nthat.\r\n\r\n## Basic usage\r\n\r\nIn your cabal file, you should have something
  like this:\r\n\r\n```\r\n  build-depends:      base              >= 4.3\r\n                    ,
  base-compat       >= 0.8.0\r\n```\r\n\r\nThen, lets say you want to use the `isRight`
  function introduced with\r\n`base-4.7.0.0`.  Replace:\r\n\r\n```\r\nimport Data.Either\r\n```\r\n\r\nwith\r\n\r\n```\r\nimport
  Data.Either.Compat\r\n```\r\n\r\n_Note (1)_: There is no need to import both unqualified.
  \ The `.Compat` modules\r\nre-exports the original module.\r\n\r\n_Note (2)_: If
  a given module `.Compat` version is not defined, that either\r\nmeans that:\r\n\r\n*
  The module has not changed in recent base versions, thus no `.Compat` is\r\n  needed.\r\n*
  The module has changed, but the changes depend on newer versions of GHC, and\r\n
  \ thus are not portable.\r\n* The module has changed, but those changes have not
  yet been merged in\r\n  `base-compat`: patches are welcomed!\r\n\r\n## Using `Prelude.Compat`\r\n\r\nIf
  you want to use `Prelude.Compat` (which provides all the\r\nAMP/Traversable/Foldable
  changes from `base-4.8.0.0`), it's best to hide\r\n`Prelude`, e.g.:\r\n\r\n    import
  Prelude ()\r\n    import Prelude.Compat\r\n\r\n    main :: IO ()\r\n    main = mapM_
  print (Just 23)\r\n\r\nAlternatively, you can use the `NoImplicitPrelude` language
  extension:\r\n\r\n    {-# LANGUAGE NoImplicitPrelude #-}\r\n    import Prelude.Compat\r\n\r\n
  \   main :: IO ()\r\n    main = mapM_ print (Just 23)\r\n\r\nNote that we use\r\n\r\n
  \   mapM_ :: (Foldable t, Monad m) => (a -> m b) -> t a -> m ()\r\n\r\nfrom `Data.Foldable`
  here, which is only exposed from `Prelude` since\r\n`base-4.8.0.0`.\r\n\r\nUsing
  this approach allows you to write code that works seamlessly with all\r\nversions
  of GHC that are supported by `base-compat`.\r\n\r\n## What is covered\r\nSo far
  the following is covered.\r\n\r\n### For compatibility with the latest released
  version of `base`\r\n\r\n * `Prelude.Compat` incorporates the AMP/Foldable/Traversable
  changes and\r\n   exposes the same interface as `Prelude` from `base-4.8.0.0`\r\n
  * `System.IO.Error.catch` is not re-exported from `Prelude.Compat` for older\r\n
  \  versions of `base`\r\n * `Text.Read.Compat.readMaybe`\r\n * `Text.Read.Compat.readEither`\r\n
  * `Data.Monoid.Compat.<>`\r\n * Added `bool` function to `Data.Bool.Compat`\r\n
  * Added `isLeft` and `isRight` to `Data.Either.Compat`\r\n * Added `withMVarMasked`
  function to `Control.Concurrent.MVar.Compat`\r\n * Added `(<$!>)` function to `Control.Monad.Compat`\r\n
  * Added `($>)` and `void` functions to `Data.Functor.Compat`\r\n * `(&)` function
  to `Data.Function.Compat`\r\n * `($>)` and `void` functions to `Data.Functor.Compat`\r\n
  * `dropWhileEnd`, `isSubsequenceOf`, `sortOn`, and `uncons` functions to `Data.List.Compat`\r\n
  * `makeVersion` function to `Data.Version.Compat`\r\n * `traceId`, `traceShowId`,
  `traceM`, and `traceShowM` functions to `Debug.Trace.Compat`\r\n * `calloc` and
  `callocBytes` functions to `Foreign.Marshal.Alloc.Compat`\r\n * `callocArray` and
  `callocArray0` functions to `Foreign.Marshal.Array.Compat`\r\n * Added `Data.List.Compat.scanl'`\r\n
  * `lookupEnv`, `setEnv` and `unsetEnv` to `System.Environment.Compat`\r\n\r\n##
  Supported versions of GHC/base\r\n\r\n * `ghc-7.10.1` / `base-4.8.0.0`\r\n * `ghc-7.8.4`
  \ / `base-4.7.0.2`\r\n * `ghc-7.8.3`  / `base-4.7.0.1`\r\n * `ghc-7.8.2`  / `base-4.7.0.0`\r\n
  * `ghc-7.8.1`  / `base-4.7.0.0`\r\n * `ghc-7.6.3`  / `base-4.6.0.1`\r\n * `ghc-7.6.2`
  \ / `base-4.6.0.1`\r\n * `ghc-7.6.1`  / `base-4.6.0.0`\r\n * `ghc-7.4.2`  / `base-4.5.1.0`\r\n
  * `ghc-7.4.1`  / `base-4.5.0.0`\r\n * `ghc-7.2.2`  / `base-4.4.1.0`\r\n * `ghc-7.2.1`
  \ / `base-4.4.0.0`\r\n * `ghc-7.0.4`  / `base-4.3.1.0`\r\n * `ghc-7.0.3`  / `base-4.3.1.0`\r\n
  * `ghc-7.0.2`  / `base-4.3.1.0`\r\n * `ghc-7.0.1`  / `base-4.3.0.0`\r\n\r\nPatches
  are welcome; add tests for new code!\r\n\r\n## Development\r\n\r\nFor `Prelude.Compat`
  there is an `Prelude.index` file that was generated from\r\nthe output of\r\n\r\n
  \   ghc --show-iface Prelude.hi\r\n\r\nTo verify that `Prelude.Compat` matches the
  specification given in\r\n`Prelude.types` run:\r\n\r\n    ./check-Prelude.sh\r\n"
