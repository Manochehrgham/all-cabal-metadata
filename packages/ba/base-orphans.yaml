homepage: https://github.com/haskell-compat/base-orphans#readme
changelog-type: markdown
hash: 8b2c894336ae34d34e60f61ba50832bcadd01ef5d81a44a9b5cdafda0db47863
test-bench-deps:
  base: ! '>=4.3 && <5'
  hspec: ==2.*
  base-orphans: -any
  QuickCheck: -any
maintainer: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@ku.edu>'
synopsis: Backwards-compatible orphan instances for base
changelog: ! "## Changes in 0.4.3\r\n - Fix build on OSes where `HTYPE_DEV_T = Int32`
  (e.g., OS X)\r\n\r\n## Changes in 0.4.2\r\n - `Functor` instances for `Handler`\r\n
  - `Functor`. `Applicative`, `Alternative`, and `MonadPlus` instances for\r\n   `ArrowMonad`\r\n
  - Expose `Read` and `Show` instances for `Down` on GHCs before 7.8\r\n - `Bits`,
  `Bounded`, and `Integral` instances for `CDev`\r\n\r\n## Changes in 0.4.1\r\n -
  Fixed imports on GHC < 7.8 on Windows\r\n\r\n## Changes in 0.4.0\r\n - Removed all
  `Generic` and `Generic1` instances. These have been moved to the\r\n   `generic-deriving`
  library.\r\n\r\n## Changes in 0.3.3\r\n - `Typeable` instances for `(~)`, `Any`,
  `Constraint`, `CSigset`, `Handler`,\r\n   `Opaque`, `SPEC`, and every promotable
  data constructor in `base`\r\n\r\n## Changes in 0.3.2\r\n - `Storable (Complex a)`
  instance no longer requires a `RealFloat a`\r\n   constraint if using `base-4.4`
  or later\r\n\r\n## Changes in 0.3.1\r\n - `Functor`, `Applicative`, and `Monad`
  instances for `First` and `Last`\r\n\r\n## Changes in 0.3.0\r\n - `Show` instance
  for `Fingerprint`\r\n - `Data.Orphans` is now `Trustworthy`\r\n - Backported the
  `Generic` and `Generic1` instances available in `base-4.7.0.0`\r\n   to GHC 7.2,
  7.4, and 7.6, namely\r\n   * `Const`, `WrappedMonad`, and `ZipList` from `Control.Applicative`\r\n
  \  * `WrappedArrow` from `Control.Category`\r\n   * `All`, `Any`, `Dual`, `Endo`,
  `First`, `Last`, `Product`, and `Sum` from\r\n     `Data.Monoid`\r\n   * `U1`, `Par1`,
  `Rec1`, `K1`, `M1`, `(:+:)`, `(:*:)`, `(:.:)`, `Arity`,\r\n     `Associativity`,
  and `Fixity` from `GHC.Generics`\r\n\r\n## Changes in 0.2.0\r\n - Drop GHC 6.12
  (and `base-4.2.0.0`) compatibility\r\n - Fix Windows, GHCJS build\r\n - `Read` instance
  for `Fixed`\r\n - `Applicative` instances for strict and lazy `ST`\r\n - `Typeable`
  instance for `SampleVar`\r\n - `Applicative` and `Alternative` instances for `ReadP`
  and `ReadPrec`\r\n - `Typeable` instance for `KProxy`\r\n - `Typeable` instances
  for more data types in `GHC.`-prefixed modules\r\n - `Generic` instances for `Arity`,
  `Associativity`, and `Fixity` from\r\n   the `GHC.Generics` module\r\n - Corrected
  the `Generic` instance for `(:*:)` to work around GHC bug #9830\r\n"
basic-deps:
  base: ! '>=4.3 && <5'
  ghc-prim: -any
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
author: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@ku.edu>'
latest: '0.4.3'
description-type: markdown
description: ! "# `base-orphans` [![Hackage version](https://img.shields.io/hackage/v/base-orphans.svg?style=flat)](http://hackage.haskell.org/package/base-orphans)
  [![Build Status](https://img.shields.io/travis/haskell-compat/base-orphans.svg?style=flat)](https://travis-ci.org/haskell-compat/base-orphans)\r\n\r\n##
  Scope\r\n\r\n`base-orphans` defines orphan instances that mimic instances available
  in later\r\nversions of `base` to a wider (older) range of compilers. `base-orphans`
  does\r\nnot export anything except the orphan instances themselves and complements\r\n[base-compat](http://hackage.haskell.org/package/base-compat).\r\n\r\nNote
  that `base-orphans` doesn't cover every possible instance. See the\r\n[What is not
  covered](#what-is-not-covered) section for exceptions.\r\n\r\n## Usage\r\n\r\nTo
  use `base-orphans`, simply `import Data.Orphans ()`.\r\n\r\n## What is covered\r\n\r\n
  * Added `Applicative` and `Alternative` instances for `ReadP` and `ReadPrec`\r\n
  * Added `Bits`, `Bounded`, and `Integral` instances for `CDev`\r\n * Added `Eq`
  and `Ord` instances for `Control.Exception.ErrorCall`\r\n * Added `Eq`, `Ord`, `Read`,
  and `Show` instances for data types in `GHC.Generics`\r\n * Added `Functor`, `Applicative`,
  `Alternative`, and `MonadPlus` instances for `ArrowMonad`\r\n * Added `Functor`,
  `Applicative`, and `Monad` instances for `First` and `Last`\r\n * Added `Monoid`,
  `Eq`, `Ord`, `Read`, and `Show` instances for `Const`\r\n * Added `Read` and `Show`
  instances for `Down`\r\n * Added `Eq`, `Ord`, `Read`, and `Show` instances for `ZipList`\r\n
  * Added `Monad` instance for `WrappedMonad`\r\n * Added `Data` and `IsList` instances
  for `Version`\r\n * `Applicative` instance for strict and lazy `ST`\r\n * `Bits`
  instance for `Bool`\r\n * `Foldable` instance for `Either`, `(,)` and `Const`\r\n
  * `Functor` instance for `Handler`, `ArgOrder`, `OptDescr`, and `ArgDescr`\r\n *
  `Num` instance for `Sum` and `Product`\r\n * `Read` instance for `Fixed`\r\n * `Show`
  instance for `Fingerprint`\r\n * `Storable` instance for `Complex` and `Ratio`\r\n
  * `Traversable` instance for `Either`, `(,)` and `Const`\r\n * `Typeable` instance
  for most data types, typeclasses, and promoted data constructors (when possible)\r\n\r\n##
  What is not covered\r\n`base-orphans` does not define the following instances:\r\n\r\n*
  `Generic` or `Generic1` instances. These can be found in the\r\n  [`Generics.Deriving.Instances`](https://hackage.haskell.org/package/generic-deriving-1.8.0/docs/Generics-Deriving-Instances.html)\r\n
  \ module of the [`generic-deriving`](https://hackage.haskell.org/package/generic-deriving)\r\n
  \ library.\r\n\r\n## Supported versions of GHC/`base`\r\n\r\n * `ghc-7.10.2` / `base-4.8.1.0`\r\n
  * `ghc-7.10.1` / `base-4.8.0.0`\r\n * `ghc-7.8.4`  / `base-4.7.0.2`\r\n * `ghc-7.8.3`
  \ / `base-4.7.0.1`\r\n * `ghc-7.8.2`  / `base-4.7.0.0`\r\n * `ghc-7.8.1`  / `base-4.7.0.0`\r\n
  * `ghc-7.6.3`  / `base-4.6.0.1`\r\n * `ghc-7.6.2`  / `base-4.6.0.1`\r\n * `ghc-7.6.1`
  \ / `base-4.6.0.0`\r\n * `ghc-7.4.2`  / `base-4.5.1.0`\r\n * `ghc-7.4.1`  / `base-4.5.0.0`\r\n
  * `ghc-7.2.2`  / `base-4.4.1.0`\r\n * `ghc-7.2.1`  / `base-4.4.0.0`\r\n * `ghc-7.0.4`
  \ / `base-4.3.1.0`\r\n * `ghc-7.0.3`  / `base-4.3.1.0`\r\n * `ghc-7.0.2`  / `base-4.3.1.0`\r\n
  * `ghc-7.0.1`  / `base-4.3.0.0`\r\n\r\nPatches are welcome; add tests for new code!\r\n"
license-name: MIT
