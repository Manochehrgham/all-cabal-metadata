homepage: https://github.com/haskell-compat/base-orphans#readme
changelog-type: markdown
hash: fbe270a1eeb94d1e92738056df88ed5e4a4feb047ce5b118c4b306baed060e4c
test-bench-deps:
  base: ! '>=4.3 && <5'
  hspec: ==2.*
  base-orphans: -any
maintainer: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@ku.edu>'
synopsis: Backwards-compatible orphan instances for base
changelog: ! "## Changes in 0.3.3\n - `Typeable` instances for `(~)`, `Any`, `Constraint`,
  `CSigset`, `Handler`,\n   `Opaque`, `SPEC`, and every promotable data constructor
  in `base`\n\n## Changes in 0.3.2\n - `Storable (Complex a)` instance no longer requires
  a `RealFloat a`\n   constraint if using `base-4.4` or later\n\n## Changes in 0.3.1\n
  - `Functor`, `Applicative`, and `Monad` instances for `First` and `Last`\n\n## Changes
  in 0.3.0\n - `Show` instance for `Fingerprint`\n - `Data.Orphans` is now `Trustworthy`\n
  - Backported the `Generic` and `Generic1` instances available in `base-4.7.0.0`\n
  \  to GHC 7.2, 7.4, and 7.6, namely\n   * `Const`, `WrappedMonad`, and `ZipList`
  from `Control.Applicative`\n   * `WrappedArrow` from `Control.Category`\n   * `All`,
  `Any`, `Dual`, `Endo`, `First`, `Last`, `Product`, and `Sum` from\n     `Data.Monoid`\n
  \  * `U1`, `Par1`, `Rec1`, `K1`, `M1`, `(:+:)`, `(:*:)`, `(:.:)`, `Arity`,\n     `Associativity`,
  and `Fixity` from `GHC.Generics`\n\n## Changes in 0.2.0\n - Drop GHC 6.12 (and `base-4.2.0.0`)
  compatibility\n - Fix Windows, GHCJS build\n - `Read` instance for `Fixed`\n - `Applicative`
  instances for strict and lazy `ST`\n - `Typeable` instance for `SampleVar`\n - `Applicative`
  and `Alternative` instances for `ReadP` and `ReadPrec`\n - `Typeable` instance for
  `KProxy`\n - `Typeable` instances for more data types in `GHC.`-prefixed modules\n
  - `Generic` instances for `Arity`, `Associativity`, and `Fixity` from\n   the `GHC.Generics`
  module\n - Corrected the `Generic` instance for `(:*:)` to work around GHC bug #9830\n"
basic-deps:
  base: ! '>=4.3 && <5'
  ghc-prim: -any
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
author: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@ku.edu>'
latest: '0.3.3'
description-type: markdown
description: ! "# `base-orphans` [![Hackage version](https://img.shields.io/hackage/v/base-orphans.svg?style=flat)](http://hackage.haskell.org/package/base-orphans)
  [![Build Status](https://img.shields.io/travis/haskell-compat/base-orphans.svg?style=flat)](https://travis-ci.org/haskell-compat/base-orphans)\n\n##
  Scope\n\n`base-orphans` defines orphan instances that mimic instances available
  in later\nversions of `base` to a wider (older) range of compilers. `base-orphans`
  does\nnot export anything except the orphan instances themselves and complements\n[base-compat](http://hackage.haskell.org/package/base-compat).\n\n##
  Usage\n\nTo use `base-orphans`, simply `import Data.Orphans ()`.\n\n## What is covered\n\n
  * Added `Applicative` and `Alternative` instances for `ReadP` and `ReadPrec`\n *
  Added `Eq` and `Ord` instances for `Control.Exception.ErrorCall`\n * Added `Eq`,
  `Ord`, `Read`, and `Show` instances for data types in `GHC.Generics`\n * Added `Functor`,
  `Applicative`, and `Monad` instances for `First` and `Last`\n * Added `Monoid`,
  `Eq`, `Ord`, `Read`, and `Show` instances for `Const`\n * Added `Read` and `Show`
  instances for `Down`\n * Added `Eq`, `Ord`, `Read`, and `Show` instances for `ZipList`\n
  * Added `Monad` instance for `WrappedMonad`\n * Added `Data` and `IsList` instances
  for `Version`\n * `Applicative` instance for strict and lazy `ST`\n * `Bits` instance
  for `Bool`\n * `Generic` instances for the data types in `GHC.Generics`\n * `Generic`
  instance for `All`, `Any`, `Const`, `Dual`, `Endo`, `First`, `Last`, `Product`,
  `Sum`, `WrappedArrow`, `WrappedMonad`, and `ZipList`\n * `Generic1` instance for
  `Const`, `Dual`, `First`, `Last`, `Product`, `Sum`, `WrappedArrow`, `WrappedMonad`,
  and `ZipList`\n * `Foldable` instance for `Either`, `(,)` and `Const`\n * `Functor`
  instance for `ArgOrder`, `OptDescr`, and `ArgDescr`\n * `Num` instance for `Sum`
  and `Product`\n * `Read` instance for `Fixed`\n * `Show` instance for `Fingerprint`\n
  * `Storable` instance for `Complex` and `Ratio`\n * `Traversable` instance for `Either`,
  `(,)` and `Const`\n * `Typeable` instance for most data types, typeclasses, and
  promoted data constructors (when possible)\n\n## Supported versions of GHC/`base`\n\n
  * `ghc-7.10.1` / `base-4.8.0.0`\n * `ghc-7.8.4`  / `base-4.7.0.2`\n * `ghc-7.8.3`
  \ / `base-4.7.0.1`\n * `ghc-7.8.2`  / `base-4.7.0.0`\n * `ghc-7.8.1`  / `base-4.7.0.0`\n
  * `ghc-7.6.3`  / `base-4.6.0.1`\n * `ghc-7.6.2`  / `base-4.6.0.1`\n * `ghc-7.6.1`
  \ / `base-4.6.0.0`\n * `ghc-7.4.2`  / `base-4.5.1.0`\n * `ghc-7.4.1`  / `base-4.5.0.0`\n
  * `ghc-7.2.2`  / `base-4.4.1.0`\n * `ghc-7.2.1`  / `base-4.4.0.0`\n * `ghc-7.0.4`
  \ / `base-4.3.1.0`\n * `ghc-7.0.3`  / `base-4.3.1.0`\n * `ghc-7.0.2`  / `base-4.3.1.0`\n
  * `ghc-7.0.1`  / `base-4.3.0.0`\n\nPatches are welcome; add tests for new code!\n"
license-name: MIT
