homepage: ''
changelog-type: markdown
hash: 9b752063bfc15d0943b3751546eb300389d2a1979aa048db8a52a6c4ec807936
test-bench-deps: {}
maintainer: libraries@haskell.org
synopsis: Basic libraries
changelog: ! "# Changelog for [`base` package](http://hackage.haskell.org/package/base)\n\n##
  4.8.0.0  *Mar 2015*\n\n  * Bundled with GHC 7.10.1\n\n  * Make `Applicative` a superclass
  of `Monad`\n\n  * Add reverse application operator `Data.Function.(&)`\n\n  * Add
  `Data.List.sortOn` sorting function\n\n  * Add `System.Exit.die`\n\n  * Deprecate
  `versionTags` field of `Data.Version.Version`.\n    Add `makeVersion :: [Int] ->
  Version` constructor function to aid\n    migration to a future `versionTags`-less
  `Version`.\n\n  * Add `IsList Version` instance\n\n  * Weaken RealFloat constraints
  on some `Data.Complex` functions\n\n  * Add `Control.Monad.(<$!>)` as a strict version
  of `(<$>)`\n\n  * The `Data.Monoid` module now has the `PolyKinds` extension\n    enabled,
  so that the `Monoid` instance for `Proxy` are polykinded\n    like `Proxy` itself
  is.\n\n  * Make `abs` and `signum` handle (-0.0) correctly per IEEE-754.\n\n  *
  Re-export `Data.Word.Word` from `Prelude`\n\n  * Add `countLeadingZeros` and `countTrailingZeros`
  methods to\n    `Data.Bits.FiniteBits` class\n\n  * Add `Data.List.uncons` list
  destructor (#9550)\n\n  * Export `Monoid(..)` from `Prelude`\n\n  * Export `Foldable(..)`
  from `Prelude`\n    (hiding `fold`, `foldl'`, `foldr'`, and `toList`)\n\n  * Export
  `Traversable(..)` from `Prelude`\n\n  * Set fixity for `Data.Foldable.{elem,notElem}`
  to match the\n    conventional one set for `Data.List.{elem,notElem}` (#9610)\n\n
  \ * Turn `toList`, `elem`, `sum`, `product`, `maximum`, and `minimum`\n    into
  `Foldable` methods (#9621)\n\n  * Replace the `Data.List`-exported functions\n\n
  \   ```\n    all, and, any, concat, concatMap, elem, find, product, sum,\n    mapAccumL,
  mapAccumR\n    ```\n\n    by re-exports of their generalised `Data.Foldable`/`Data.Traversable`\n
  \   counterparts.  In other words, unqualified imports of `Data.List`\n    and `Data.Foldable`/`Data.Traversable`
  no longer lead to conflicting\n    definitions. (#9586)\n\n  * New (unofficial)
  module `GHC.OldList` containing only list-specialised\n    versions of the functions
  from `Data.List` (in other words, `GHC.OldList`\n    corresponds to `base-4.7.0.2`'s
  `Data.List`)\n\n  * Replace the `Control.Monad`-exported functions\n\n    ```\n
  \   sequence_, msum, mapM_, forM_,\n    forM, mapM, sequence\n    ```\n\n    by
  re-exports of their generalised `Data.Foldable`/`Data.Traversable`\n    counterparts.
  \ In other words, unqualified imports of `Control.Monad`\n    and `Data.Foldable`/`Data.Traversable`
  no longer lead to conflicting\n    definitions. (#9586)\n\n  * Generalise `Control.Monad.{when,unless,guard}`
  from `Monad` to\n    `Applicative` and from `MonadPlus` to `Alternative` respectively.\n\n
  \ * Generalise `Control.Monad.{foldM,foldM_}` to `Foldable`\n\n  * `scanr`, `mapAccumL`
  and `filterM` now take part in list fusion (#9355,\n    #9502, #9546)\n\n  * Remove
  deprecated `Data.OldTypeable` (#9639)\n\n  * New module `Data.Bifunctor` providing
  the `Bifunctor(bimap,first,second)`\n    class (previously defined in `bifunctors`
  package) (#9682)\n\n  * New module `Data.Void` providing the canonical uninhabited
  type `Void`\n    (previously defined in `void` package) (#9814)\n\n  * Update Unicode
  class definitions to Unicode version 7.0\n\n  * Add `Alt`, an `Alternative` wrapper,
  to `Data.Monoid`. (#9759)\n\n  * Add `isSubsequenceOf` to `Data.List` (#9767)\n\n
  \ * The arguments to `==` and `eq` in `Data.List.nub` and `Data.List.nubBy`\n    are
  swapped, such that `Data.List.nubBy (<) [1,2]` now returns `[1]`\n    instead of
  `[1,2]` (#2528, #3280, #7913)\n\n  * New module `Data.Functor.Identity` (previously
  provided by `transformers`\n    package). (#9664)\n\n  * Add `scanl'`, a strictly
  accumulating version of `scanl`, to `Data.List`\n    and `Data.OldList`. (#9368)\n\n
  \ * Add `fillBytes` to `Foreign.Marshal.Utils`.\n\n  * Add new `displayException`
  method to `Exception` typeclass. (#9822)\n\n  * Add `Data.Bits.toIntegralSized`,
  a size-checked version of\n    `fromIntegral`. (#9816)\n\n  * New module `Numeric.Natural`
  providing new `Natural` type\n    representing non-negative arbitrary-precision
  integers.  The `GHC.Natural`\n    module exposes additional GHC-specific primitives.
  (#9818)\n\n  * Add `(Storable a, Integeral a) => Storable (Ratio a)` instance (#9826)\n\n
  \ * Add `Storable a => Storable (Complex a)` instance (#9826)\n\n  * New module
  `GHC.RTS.Flags` that provides accessors to runtime flags.\n\n  * Expose functions
  for per-thread allocation counters and limits in `GHC.Conc`\n\n        disableAllocationLimit
  :: IO ()\n        enableAllocationLimit :: IO ()\n        getAllocationCounter ::
  IO Int64\n        setAllocationCounter :: Int64 -> IO ()\n\n    together with a
  new exception `AllocationLimitExceeded`.\n\n  * Make `read . show = id` for `Data.Fixed`
  (#9240)\n\n  * Add `calloc` and `callocBytes` to `Foreign.Marshal.Alloc`. (#9859)\n\n
  \ * Add `callocArray` and `callocArray0` to `Foreign.Marshal.Array`. (#9859)\n\n
  \ * Restore invariant in `Data (Ratio a)` instance (#10011)\n\n  * Add/expose `rnfTypeRep`,
  `rnfTyCon`, `typeRepFingerprint`, and\n    `tyConFingerprint` helpers to `Data.Typeable`.\n\n
  \ * Define proper `MINIMAL` pragma for `class Ix`. (#10142)\n\n## 4.7.0.2  *Dec
  2014*\n\n  * Bundled with GHC 7.8.4\n\n  * Fix performance bug in `Data.List.inits`
  (#9345)\n\n  * Fix handling of null bytes in `Debug.Trace.trace` (#9395)\n\n## 4.7.0.1
  \ *Jul 2014*\n\n  * Bundled with GHC 7.8.3\n\n  * Unhide `Foreign.ForeignPtr` in
  Haddock (#8475)\n\n  * Fix recomputation of `TypeRep` in `Typeable` type-application
  instance\n    (#9203)\n\n  * Fix regression in Data.Fixed Read instance (#9231)\n\n
  \ * Fix `fdReady` to honor `FD_SETSIZE` (#9168)\n\n## 4.7.0.0  *Apr 2014*\n\n  *
  Bundled with GHC 7.8.1\n\n  * Add `/Since: 4.[4567].0.0/` Haddock annotations to
  entities\n    denoting the package version, when the given entity was introduced\n
  \   (or its type signature changed in a non-compatible way)\n\n  * The `Control.Category`
  module now has the `PolyKinds` extension\n    enabled, meaning that instances of
  `Category` no longer need be of\n    kind `* -> * -> *`.\n\n  * There are now `Foldable`
  and `Traversable` instances for `Either a`,\n   `Const r`, and `(,) a`.\n\n  * There
  are now `Show`, `Read`, `Eq`, `Ord`, `Monoid`, `Generic`, and\n    `Generic1` instances
  for `Const`.\n\n  * There is now a `Data` instance for `Data.Version`.\n\n  * A
  new `Data.Bits.FiniteBits` class has been added to represent\n    types with fixed
  bit-count. The existing `Bits` class is extended\n    with a `bitSizeMaybe` method
  to replace the now obsolete\n    `bitsize` method.\n\n  * `Data.Bits.Bits` gained
  a new `zeroBits` method which completes the\n    `Bits` API with a direct way to
  introduce a value with all bits cleared.\n\n  * There are now `Bits` and `FiniteBits`
  instances for `Bool`.\n\n  * There are now `Eq`, `Ord`, `Show`, `Read`, `Generic`.
  and `Generic1`\n    instances for `ZipList`.\n\n  * There are now `Eq`, `Ord`, `Show`
  and `Read` instances for `Down`.\n\n  * There are now `Eq`, `Ord`, `Show`, `Read`
  and `Generic` instances\n    for types in GHC.Generics (`U1`, `Par1`, `Rec1`, `K1`,
  `M1`,\n    `(:+:)`, `(:*:)`, `(:.:)`).\n\n  * `Data.Monoid`: There are now `Generic`
  instances for `Dual`, `Endo`,\n    `All`, `Any`, `Sum`, `Product`, `First`, and
  `Last`; as well as\n    `Generic1` instances for `Dual`, `Sum`, `Product`, `First`,
  and `Last`.\n\n  * The `Data.Monoid.{Product,Sum}` newtype wrappers now have `Num`
  instances.\n\n  * There are now `Functor` instances for `System.Console.GetOpt`'s\n
  \   `ArgOrder`, `OptDescr`, and `ArgDescr`.\n\n  * A zero-width unboxed poly-kinded
  `Proxy#` was added to\n    `GHC.Prim`. It can be used to make it so that there is
  no the\n    operational overhead for passing around proxy arguments to model\n    type
  application.\n\n  * New `Data.Proxy` module providing a concrete, poly-kinded proxy
  type.\n\n  * New `Data.Coerce` module which exports the new `Coercible` class\n
  \   together with the `coerce` primitive which provide safe coercion\n    (wrt role
  checking) between types with same representation.\n\n  * `Control.Concurrent.MVar`
  has a new implementation of `readMVar`,\n    which fixes a long-standing bug where
  `readMVar` is only atomic if\n    there are no other threads running `putMVar`.
  \ `readMVar` now is\n    atomic, and is guaranteed to return the value from the
  first\n    `putMVar`.  There is also a new `tryReadMVar` which is a\n    non-blocking
  version.\n\n  * New `Control.Concurrent.MVar.withMVarMasked` which executes\n    `IO`
  action with asynchronous exceptions masked in the same style\n    as the existing
  `modifyMVarMasked` and `modifyMVarMasked_`.\n\n  * New `threadWait{Read,Write}STM
  :: Fd -> IO (STM (), IO ())`\n    functions added to `Control.Concurrent` for waiting
  on FD\n    readiness with STM actions.\n\n  * Expose `Data.Fixed.Fixed`'s constructor.\n\n
  \ * There are now byte endian-swapping primitives\n    `byteSwap{16,32,64}` available
  in `Data.Word`, which use\n    optimized machine instructions when available.\n\n
  \ * `Data.Bool` now exports `bool :: a -> a -> Bool -> a`, analogously\n    to `maybe`
  and `either` in their respective modules.\n\n  * `Data.Either` now exports `isLeft,
  isRight :: Either a b -> Bool`.\n\n  * `Debug.Trace` now exports `traceId`, `traceShowId`,
  `traceM`,\n    and `traceShowM`.\n\n  * `Data.Functor` now exports `($>)` and `void`.\n\n
  \ * Rewrote portions of `Text.Printf`, and made changes to `Numeric`\n    (added
  `Numeric.showFFloatAlt` and `Numeric.showGFloatAlt`) and\n    `GHC.Float` (added
  `formatRealFloatAlt`) to support it.  The\n    rewritten version is extensible to
  user types, adds a \"generic\"\n    format specifier \"`%v`\", extends the `printf`
  spec to support much\n    of C's `printf(3)` functionality, and fixes the spurious
  warnings\n    about using `Text.Printf.printf` at `(IO a)` while ignoring the\n
  \   return value.  These changes were contributed by Bart Massey.\n\n  * The minimal
  complete definitions for all type-classes with cyclic\n    default implementations
  have been explicitly annotated with the\n    new `{-# MINIMAL #-}` pragma.\n\n  *
  `Control.Applicative.WrappedMonad`, which can be used to convert a\n    `Monad`
  to an `Applicative`, has now a\n    `Monad m => Monad (WrappedMonad m)` instance.\n\n
  \ * There is now a `Generic` and a `Generic1` instance for `WrappedMonad`\n    and
  `WrappedArrow`.\n\n  * Handle `ExitFailure (-sig)` on Unix by killing process with
  signal `sig`.\n\n  * New module `Data.Type.Bool` providing operations on type-level
  booleans.\n\n  * Expose `System.Mem.performMinorGC` for triggering minor GCs.\n\n
  \ * New `System.Environment.{set,unset}Env` for manipulating\n    environment variables.\n\n
  \ * Add `Typeable` instance for `(->)` and `RealWorld`.\n\n  * Declare CPP header
  `<Typeable.h>` officially obsolete as GHC 7.8+\n    does not support hand-written
  `Typeable` instances anymore.\n\n  * Remove (unmaintained) Hugs98 and NHC98 specific
  code.\n\n  * Optimize `System.Timeout.timeout` for the threaded RTS.\n\n  * Remove
  deprecated functions `unsafeInterleaveST`, `unsafeIOToST`,\n    and `unsafeSTToIO`
  from `Control.Monad.ST`.\n\n  * Add a new superclass `SomeAsyncException` for all
  asynchronous exceptions\n    and makes the existing `AsyncException` and `Timeout`
  exception children\n    of `SomeAsyncException` in the hierarchy.\n\n  * Remove
  deprecated functions `blocked`, `unblock`, and `block` from\n    `Control.Exception`.\n\n
  \ * Remove deprecated function `forkIOUnmasked` from `Control.Concurrent`.\n\n  *
  Remove deprecated function `unsafePerformIO` export from `Foreign`\n    (still available
  via `System.IO.Unsafe.unsafePerformIO`).\n\n  * Various fixes and other improvements
  (see Git history for full details).\n"
basic-deps:
  ghc-prim: ==0.4.*
  rts: ==1.0.*
all-versions:
- '3.0.3.1'
- '3.0.3.2'
- '4.0.0.0'
- '4.1.0.0'
- '4.2.0.0'
- '4.2.0.1'
- '4.2.0.2'
- '4.3.0.0'
- '4.3.1.0'
- '4.4.0.0'
- '4.4.1.0'
- '4.5.0.0'
- '4.5.1.0'
- '4.6.0.0'
- '4.6.0.1'
- '4.7.0.0'
- '4.7.0.1'
- '4.7.0.2'
- '4.8.0.0'
author: ''
latest: '4.8.0.0'
description-type: haddock
description: ! 'This package contains the "Prelude" and its support libraries,

  and a large collection of useful libraries ranging from data

  structures to parsing combinators and debugging utilities.'
license-name: BSD3
