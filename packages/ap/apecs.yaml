homepage: https://github.com/jonascarpay/apecs#readme
changelog-type: ''
hash: 7381c64076138e92d79b7ab02f51da30b09c4e1f7ad0218246af65609d125bf6
test-bench-deps:
  apecs: -any
  base: -any
  criterion: -any
  linear: -any
maintainer: jonascarpay@gmail.com
synopsis: A fast ECS for game engine programming
changelog: ''
basic-deps:
  apecs: -any
  base: ! '>=4.7 && <5'
  sdl2: -any
  containers: -any
  linear: -any
  mtl: -any
  random: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
author: Jonas Carpay
latest: '0.1.1.0'
description-type: markdown
description: ! "# apecs\n\napecs is an Entity Component System inspired by [specs](https://github.com/slide-rs/specs)
  and [Entitas](https://github.com/sschmid/Entitas-CSharp).\nIt exposes a DSL that
  translates to fast storage operations, resulting in expressivity without sacrificing
  performance or safety.\n\nThere is an example below, and a tutorial can be found
  [here](https://github.com/jonascarpay/apecs/blob/master/tutorials/RTS.md).\nFor
  a general introduction to ECS, see [this talk](https://www.youtube.com/watch?v=lNTaC-JWmdI&feature=youtu.be&t=218)
  or [here](https://en.wikipedia.org/wiki/Entity–component–system).\n\n### Performance\nPerformance
  is good.\nRunning the [ecs-bench](https://github.com/lschmierer/ecs_bench) pos_vel
  benchmark shows that we can keep up with specs, which was written in Rust:\n\n|
  \    | specs | apecs |\n| --- | ----- | --- |\n| build | 699 us | 285 us | \n| update
  | 34 us | 46 us |\n\n### Example\n```haskell\nimport Apecs\nimport Apecs.Stores\nimport
  Apecs.Util\nimport Linear.V2\n\n-- Component data definitions\nnewtype Velocity
  = Velocity (V2 Double) deriving (Eq, Show)\nnewtype Position = Position (V2 Double)
  deriving (Eq, Show)\ndata Enemy = Enemy -- A single constructor for tagging entites
  as enemies\n\n-- Define Velocity as a component by giving it a storage type\ninstance
  Component Velocity where\n  -- Store velocities in a cached map\n  type Storage
  Velocity = Cache 100 (Map Velocity)\n\ninstance Component Position where\n  type
  Storage Position = Cache 100 (Map Position)\n\ninstance Flag Enemy where flag =
  Enemy\ninstance Component Enemy where\n  -- Because enemy is just a flag, we can
  use a set\n  type Storage Enemy = Set Enemy\n\n-- Define your world as containing
  the storages of your components\ndata World = World\n  { positions     :: Storage
  Position\n  , velocities    :: Storage Velocity\n  , enemies       :: Storage Enemy\n
  \ , entityCounter :: Storage EntityCounter }\n\n-- Define Has instances for components
  to allow type-driven access to their storages\ninstance World `Has` Position      where
  getStore = System $ asks positions\ninstance World `Has` Velocity      where getStore
  = System $ asks velocities\ninstance World `Has` Enemy         where getStore =
  System $ asks enemies\ninstance World `Has` EntityCounter where getStore = System
  $ asks entityCounter\n\ntype System' a = System World a\n\ngame :: System' ()\ngame
  = do\n  -- Create new entities\n  newEntity (Position 0)\n  -- Components can be
  composed using tuples\n  newEntity (Position 0, Velocity 1)\n  -- Tagging one as
  an enemy is a matter of adding the constructor\n  newEntity (Position 1, Velocity
  1, Enemy)\n\n  -- Side effects\n  liftIO$ putStrLn \"Stepping velocities\"\n  --
  rmap maps a pure function over all entities in its domain\n  rmap $ \\(Position
  p, Velocity v) -> Position (v+p)\n\n  -- Print the positions of all enemies\n  cmapM_
  $ \\(Enemy, Position p) -> liftIO (print p)\n\nmain :: IO ()\nmain = do w <- World
  <$> initStore <*> initStore <*> initStore <*> initCounter\n          runSystem game
  w\n```\n"
license-name: BSD3
