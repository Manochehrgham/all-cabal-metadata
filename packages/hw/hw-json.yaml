homepage: http://github.com/haskell-works/hw-json#readme
changelog-type: ''
hash: 048d47647c6ddd822ebbe7f6230b2117d1cbac7bf8bbbf572708b73d9b33842f
test-bench-deps:
  bytestring: -any
  hw-json: -any
  base: ==4.*
  hspec: -any
  criterion: -any
  parsec: -any
  conduit: -any
  mmap: -any
  hw-prim: ! '>=0.3.0.5'
  containers: -any
  hw-rankselect: ! '>=0.5.0.0'
  hw-rankselect-base: ! '>=0.1.0.0'
  hw-conduit: -any
  attoparsec: -any
  transformers: -any
  QuickCheck: -any
  resourcet: -any
  hw-bits: -any
  vector: -any
maintainer: newhoggy@gmail.com
synopsis: Conduits for tokenizing streams.
changelog: ''
basic-deps:
  bytestring: -any
  ansi-wl-pprint: -any
  hw-json: -any
  base: ==4.*
  hw-mquery: ! '>=0.1.0.0'
  text: -any
  criterion: -any
  word8: -any
  dlist: -any
  conduit: -any
  hw-diagnostics: -any
  array: -any
  mmap: -any
  hw-prim: ! '>=0.3.0.5'
  containers: -any
  hw-rankselect: ! '>=0.5.0.0'
  hw-rankselect-base: ! '>=0.1.0.0'
  hw-conduit: -any
  hw-parser: -any
  attoparsec: -any
  resourcet: -any
  hw-bits: ! '>=0.3.0.0'
  mono-traversable: -any
  vector: -any
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.3.0.0'
author: John Ky
latest: '0.3.0.0'
description-type: markdown
description: ! "# hw-json\n[![0.0-branch](https://circleci.com/gh/haskell-works/hw-json/tree/0.0-branch.svg?style=svg)](https://circleci.com/gh/haskell-works/hw-json/tree/0.0-branch)\n\nConduits
  for tokenizing streams.\n\n`hw-json` is a succinct JSON parsing library.  It uses
  succinct data-structures to allow traversal of\nlarge JSON strings with minimal
  memory overhead.\n\nIt is currently considered experimental.\n\nFor an example,
  see [`app/Main.hs`](../master/app/Main.hs)\n\n## Prerequisites\n* Install `haskell-stack`.\n*
  Install `hlint` (eg. `stack install hlint`)\n\n## Building\n\nRun the following
  in the shell:\n\n    git clone git@github.com:haskell-works/hw-json.git\n    cd
  hw-json\n    stack setup\n    stack build\n    stack test\n    stack ghci --ghc-options
  -XOverloadedStrings \\\n      --main-is hw-json:exe:hw-json-example\n\n## Memory
  benchmark\n\n### Parsing large Json files in Scala with Argonaut\n\n          S0U
  \      EU           OU       MU     CCSU CMD\n    --------- --------- -----------
  -------- -------- ---------------------------------------------------------------\n
  \         0.0  80,526.3    76,163.6 72,338.6 13,058.6 sbt console\n          0.0
  536,660.4    76,163.6 72,338.6 13,058.6 import java.io._, argonaut._, Argonaut._\n
  \         0.0 552,389.1    76,163.6 72,338.6 13,058.6 val file = new File(\"/Users/jky/Downloads/78mbs.json\"\n
  \         0.0 634,066.5    76,163.6 72,338.6 13,058.6 val array = new Array[Byte](file.length.asInstanceOf[Int])\n
  \         0.0 644,552.3    76,163.6 72,338.6 13,058.6 val is = new FileInputStream(\"/Users/jky/Downloads/78mbs.json\")\n
  \         0.0 655,038.1    76,163.6 72,338.6 13,058.6 is.read(array)\n    294,976.0
  160,159.7 1,100,365.0 79,310.8 13,748.1 val json = new String(array)\n    285,182.9
  146,392.6 1,956,264.5 82,679.8 14,099.6 val data = Parse.parse(json)\n                        ***********\n\n###
  Parsing large Json files in Haskell with Aeson\n\n    Mem (MB) CMD\n    --------
  ---------------------------------------------------------\n          54 import           Control.DeepSeq\n
  \         64 import           Data.Aeson\n          64 import qualified Data.ByteString.Lazy
  as BSL\n          66 json78m <- BSL.readFile \"../data/78mb.json\"\n         167
  let !x = deepseq json78m json78m\n        1207 let !y = decode json78m :: Maybe
  Value\n\n\n### Parsing large Json files in Haskell with hw-json\n\n    Mem (MB)
  CMD\n    -------- ---------------------------------------------------------\n         274
  import Foreign\n         274 import qualified Data.Vector.Storable as DVS\n         274
  import qualified Data.ByteString as BS\n         274 import System.IO.MMap\n         274
  import Control.Monad\n         274 import Data.Word\n         274 import HaskellWorks.Data.Bits.BitShown\n
  \        274 import HaskellWorks.Data.Succinct.BalancedParens.Simple\n         274
  import HaskellWorks.Data.FromForeignRegion\n         274 import HaskellWorks.Diagnostics\n
  \        274 (fptr :: ForeignPtr Word8, offset, size) <- mmapFileForeignPtr \"/Users/jky/Downloads/78mbs.json\"
  ReadOnly Nothing\n         601 cursor <- measure (fromForeignRegion (fptr, offset,
  size) :: JsonCursor BS.ByteString (BitShown (DVS.Vector Word64)) (SimpleBalancedParens
  (DVS.Vector Word64)))\n\n## Examples\n\n### Performance example\n\n    import Foreign\n
  \   import qualified Data.Vector.Storable as DVS\n    import qualified Data.ByteString
  as BS\n    import qualified Data.ByteString.Internal as BSI\n    import System.IO.MMap\n
  \   import Data.Word\n    import System.CPUTime\n    (fptr :: ForeignPtr Word8,
  offset, size) <- mmapFileForeignPtr \"/Users/jky/Downloads/78mbs.json\" ReadOnly
  Nothing\n    cursor <- measure (fromForeignRegion (fptr, offset, size) :: JsonCursor
  BS.ByteString (BitShown (DVS.Vector Word64)) (SimpleBalancedParens (DVS.Vector Word64)))\n
  \   let !bs = BSI.fromForeignPtr (castForeignPtr fptr) offset size\n    x <- measure
  $ jsonBsToInterestBs bs\n    let !y = runListConduit [bs] (unescape' \"\")\n\n    import
  Foreign\n    import qualified Data.Vector.Storable as DVS\n    import qualified
  Data.ByteString as BS\n    import qualified Data.ByteString.Internal as BSI\n    import
  System.IO.MMap\n    import Data.Word\n    import System.CPUTime\n    (fptr :: ForeignPtr
  Word8, offset, size) <- mmapFileForeignPtr \"/Users/jky/Downloads/part40.json\"
  ReadOnly Nothing\n    let !bs = BSI.fromForeignPtr (castForeignPtr fptr) offset
  size\n    x <- measure $ BS.concat $ runListConduit [bs] (blankJson =$= blankedJsonToInterestBits)\n
  \   x <- measure $ jsonBsToInterestBs bs\n\n    jsonTokenAt $ J.nextSibling $ J.firstChild
  $ J.nextSibling $ J.firstChild $ J.firstChild  cursor\n\n### Navigation example\n\n```\n$
  \ cabal repl --ghc-option='-package mmap'\nλ> :set -XNoMonomorphismRestriction\nλ>
  import qualified Data.ByteString                                            as BS\nλ>
  import           Data.String\nλ> import qualified Data.Vector.Storable                                       as
  DVS\nλ> import           Data.Word\nλ> import           HaskellWorks.Data.Bits.BitShow\nλ>
  import           HaskellWorks.Data.Bits.BitShown\nλ> import           HaskellWorks.Data.FromForeignRegion\nλ>
  import           HaskellWorks.Data.Json.Succinct.Cursor                     as C\nλ>
  import           HaskellWorks.Data.Json.Token\nλ> import           HaskellWorks.Data.Succinct.BalancedParens.Internal\nλ>
  import           HaskellWorks.Data.Succinct.BalancedParens.Simple\nλ> import           HaskellWorks.Data.Succinct.RankSelect.Binary.Basic.Rank0\nλ>
  import           HaskellWorks.Data.Succinct.RankSelect.Binary.Basic.Rank1\nλ> import
  \          HaskellWorks.Data.Succinct.RankSelect.Binary.Basic.Select1\nλ> import
  \          HaskellWorks.Data.Succinct.RankSelect.Binary.Poppy512\nλ> import qualified
  HaskellWorks.Data.TreeCursor as TC\nλ> import           System.IO.MMap\nλ> let fc
  = TC.firstChild\nλ> let ns = TC.nextSibling\nλ> let pn = TC.parent\nλ> let cd =
  TC.depth\nλ> let ss = TC.subtreeSize\nλ> let cursor = \"[null, {\\\"field\\\": 1}]\"
  :: JsonCursor BS.ByteString (BitShown (DVS.Vector Word64)) (SimpleBalancedParens
  (DVS.Vector Word64))\nλ> cursor\n```\n\n### Querying example\n\n```\nimport           Control.Monad\nimport
  qualified Data.DList as DL\nimport           Data.Function\nimport           Data.List\nimport
  \          HaskellWorks.Data.Json.LoadCursor\nimport           HaskellWorks.Data.Micro\nimport
  \          HaskellWorks.Data.MQuery\nimport           HaskellWorks.Data.Json.PartialValue\nimport
  \          HaskellWorks.Data.Row\nimport           HaskellWorks.Diagnostics\n```\n\n```\n!cursor
  <- loadJsonPartial \"../data/78mb.json\"\n!cursor <- loadJsonWithIndex \"../data/78mb.json\"\n!cursor
  <- loadJson \"../data/78mb.json\"\n!cursor <- loadJsonWithPoppy512SMinMaxIndex \"../data/78mb.json\"\nlet
  !json = jsonPartialJsonValueAt cursor\nlet q = MQuery (DL.singleton json)\n```\n\n```\nmeasureIO
  $ putPretty $ q >>= item & limit 10\nmeasureIO $ putPretty $ q >>= item & page 10
  1\nmeasureIO $ putPretty $ q >>= item >>= hasKV \"founded_year\" (JsonPartialNumber
  2005) & limit 10\nmeasureIO $ putPretty $ q >>= item >>= entry\nmeasureIO $ putPretty
  $ q >>= item >>= entry >>= named \"name\" & limit 10\nmeasureIO $ putPretty $ q
  >>= (item >=> entry >=> named \"acquisition\" >=> entry >=> named \"price_currency_code\")\nmeasureIO
  $ putPretty $ q >>= (item >=> entry >=> named \"acquisition\" >=> entry >=> named
  \"price_currency_code\") & onList (uniq . sort)\nmeasureIO $ putPretty $ q >>= (item
  >=> entry >=> named \"acquisition\" >=> entry >=> named \"price_currency_code\"
  >=> asString >=> valueOf \"USD\") & limit 10\nmeasureIO $ putPretty $ q >>= (item
  >=> entry >=> named \"acquisition\" >=> having (entry >=> named \"price_currency_code\"
  >=> asString >=> valueOf \"USD\") >=> entry >=> named \"price_amount\") & limit
  10\nmeasureIO $ putPretty $ q >>= (item >=> entry >=> named \"acquisition\" >=>
  having (entry >=> named \"price_currency_code\" >=> asString >=> valueOf \"USD\")
  >=> entry >=> named \"price_amount\" >=> castAsInteger ) & limit 10\nmeasureIO $
  putPretty $ q >>= (item >=> entry >=> named \"acquisition\" >=> having (entry >=>
  named \"price_currency_code\" >=> asString >=> valueOf \"USD\") >=> entry >=> named
  \"price_amount\" >=> castAsInteger ) & aggregate sum\n```\n\n```\nimport           Control.Monad\nimport
  qualified Data.DList as DL\nimport           Data.Function\nimport           Data.List\nimport
  \          HaskellWorks.Data.Json.LoadCursor\nimport           HaskellWorks.Data.Micro\nimport
  \          HaskellWorks.Data.MQuery\nimport           HaskellWorks.Data.Json.LightJson\nimport
  \          HaskellWorks.Data.Row\nimport           HaskellWorks.Diagnostics\n```\n\n```\n!cursor
  <- loadJsonPartial \"../data/78mb.json\"\n!cursor <- loadJsonWithIndex \"../data/78mb.json\"\n!cursor
  <- loadJson \"../data/78mb.json\"\n!cursor <- loadJsonWithPoppy512SMinMaxIndex \"../data/78mb.json\"\nlet
  !json = lightJsonAt cursor\nlet q = MQuery (DL.singleton json)\n```\n\n```\nmeasureIO
  $ putPretty $ q >>= item & limit 10\nmeasureIO $ putPretty $ q >>= item & page 10
  1\nmeasureIO $ putPretty $ q >>= item >>= entry\nmeasureIO $ putPretty $ q >>= item
  >>= entry >>= named \"name\" & limit 10\nmeasureIO $ putPretty $ q >>= (item >=>
  entry >=> named \"acquisition\" >=> entry >=> named \"price_currency_code\" >=>
  asString)\nmeasureIO $ putPretty $ q >>= (item >=> entry >=> named \"acquisition\"
  >=> entry >=> named \"price_currency_code\" >=> asString) & onList (uniq . sort)\nmeasureIO
  $ putPretty $ q >>= (item >=> entry >=> named \"acquisition\" >=> entry >=> named
  \"price_currency_code\" >=> asString >=> valueOf \"USD\") & limit 10\nmeasureIO
  $ putPretty $ q >>= (item >=> entry >=> named \"acquisition\" >=> having (entry
  >=> named \"price_currency_code\" >=> asString >=> valueOf \"USD\") >=> entry >=>
  named \"price_amount\") & limit 10\nmeasureIO $ putPretty $ q >>= (item >=> entry
  >=> named \"acquisition\" >=> having (entry >=> named \"price_currency_code\" >=>
  asString >=> valueOf \"USD\") >=> entry >=> named \"price_amount\" >=> castAsInteger
  ) & limit 10\nmeasureIO $ putPretty $ q >>= (item >=> entry >=> named \"acquisition\"
  >=> having (entry >=> named \"price_currency_code\" >=> asString >=> valueOf \"USD\")
  >=> entry >=> named \"price_amount\" >=> castAsInteger ) & aggregate sum\n```\n\n###
  Decoding\n#### Line separated base 64 encoded gzipped json\nwhile read in; do echo
  \"$in\" | base64 --decode | gunzip; echo \"\"; done < file.lgz > firehose.json\n\n###
  Profiling with stack traces\n```\nmafia build -p\ncabal repl --ghc-options='-fexternal-interpreter
  -prof'\n```\n\n```\nimport HaskellWorks.Data.Succinct.BalancedParens\nimport HaskellWorks.Data.Succinct.RankSelect.Binary.Poppy512\nimport
  HaskellWorks.Data.Positioning\nimport qualified Data.Vector.Storable as DVS\nimport
  HaskellWorks.Data.IndexedSeq\n(jsonBS, jsonIb, jsonBp) <- loadJsonRawWithIndex \"firehose.json\"\nlet
  bp1 = SimpleBalancedParens jsonBp\nlet bp2 = SimpleBalancedParens (makePoppy512
  jsonBp)\nlet bp3 = makePoppy512 jsonBp\n```\n\n## References\n* [Semi-Indexing Semi-Structured
  Data in Tiny Space](http://www.di.unipi.it/~ottavian/files/semi_index_cikm.pdf)\n*
  [Succinct Data Structures talk by Edward Kmett](https://www.youtube.com/watch?v=uA0Z7_4J7u8)\n*
  [Typed Tagless Final Interpreters](http://okmij.org/ftp/tagless-final/course/lecture.pdf)\n*
  [Conduit Overview](https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/conduit-overview)\n\n\n##
  Special mentions\n* [Sydney Paper Club](http://www.meetup.com/Sydney-Paper-Club/)\n\n\n
  :set +s\n"
license-name: MIT
