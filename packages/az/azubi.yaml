homepage: http://palovandalo.com/azubi
changelog-type: ''
hash: e9cdf7133449889d79a34d0b8379fd8b61644f0ac79b6d4aa8a594081c4251f7
test-bench-deps: {}
maintainer: azubi@ingolf-wagner.de
synopsis: A simple DevOps tool which will never "reach" enterprice level.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  filepath: ! '>=1 && <2'
  options: ! '>=1.2 && <2'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Ingolf Wagner
latest: '0.1.0.1'
description-type: markdown
description: ! "# Azubi\n\n[![Build Status](https://travis-ci.org/mrVanDalo/azubi.svg?branch=master)](https://travis-ci.org/mrVanDalo/azubi)\n\nIs
  a very simple DevOps tool, which will never \"reach\" enterprise level.\n\n## Goals\n\n*
  Readable -> Haskell\n* Check your rule set before changing your system -> Strong
  Type-system of Haskell\n* Adaptive, -> can run on all kinds of Linux and it is also
  planed to run on osx and Windows\n* Lightweight -> No installation (except some
  basic shell tools) needed on the target host.\n\n## Features\n\n### Different types
  of Execution\n\nYou can \n\n* enforce everything by command line (not yet)\n* create
  a bash script which you can run for system setup\n* use ssh to setup a target host
  (not yet)\n* create different configurations for different situations (not yet)\n*
  export to a Dockerfile (not yet)\n* export to a Bat file (not yet)\n\n### How to
  start\n\nInstall `azubi` via cabal.\n\n    cabal install azubi\n\ncreate a file
  (e.g. `config.hs`) somewhere you like with the content\n\n    #!/usr/bin/env runghc\n
  \   \n    import Azubi\n    \n    main :: IO ()\n    main = azubiMain $ azubiConfig
  Gentoo $ []\n        & installed \"vim\"\n\n\ncall the script to get a help\n\n
  \   ./config.hs --help\n\n\ncall the script to get a bashscript\n\n    ./config.hs
  --output \"my-first-azubi-script.sh\"\n\n\n# Syntax\n\n## Commands\n\nEvery Command
  should be revertable.\n\n### installed\n\n#### Package \n\ninstall vim if not already
  done:\n\n    & installed \"vim\"\n\nuninstall vim if vim is installed:\n\n    !
  installed \"vim\"\n\n### exists\n\n#### Files\n\ncreate files, directories and symlinks
  : \n\n    & exists (File \"~/.vimrc\")\n    & exists (Directory \"~/.vim\")\n    &
  exists (Symlink \".bashrc\" \"~/.bashrc.d/bashrc\")\n    \ndelete files files, directories
  and symlinks : \n\n    & exists (File \"~/.vimrc\")\n    & exists (Directory \"~/.vim\")\n
  \   & exists (Symlink \".bashrc\" \"~/.bashrc.d/bashrc\")\n\n#### Git projects\n\npull
  git repository if not pressent:\n\n    & exists (Git \"git@github.com:mrVanDalo/azubi.git\"
  \"~/develop/azubi\" [Branch \"develop\"])\n\nyou can give it options\n\n* *Branch
  \"branchname\"*\n* *Recursive*\n* more to follow ... \n\n\n## Logic Components\n\n\n###
  Combiner\n\n#### &, !\n\nAlmost every command should be revertable. So you have
  2 states\n\n* do it -> `&`\n* undo it -> `!`\n\nthis ensures the file `/tmp/foo`
  exist\n\n        & exists (File \"/tmp/foo\")\n\nand this ensures the file does
  not exist\n\n        ! exists (File \"/tmp/foo\")\n\nIn most cases it happens what
  you expect, but sometimes it's not so obvious so we it is written right next to
  the command.\n(e.g.:) `! exists (File \"/tmp/foo\")` will delete a file `/tmp/foo`
  but won't delete a directory `/tmp/foo`\n\n#### !?&,!?!, &?&, &?!\n\nThey are special
  cases of `!` and `&` and should be read like `X if in context Y` -> `X?Y` and start
  only to make \nsense in combination of submodules (see later).\n\n* `&?&` is `&`
  if you are in a `do it` context.\n* `!?&` is `!` if you are in a `do it` context.\n*
  `&?!` is `&` if you are in a `undo it` context.\n* `!?!` is `!` if you are in a
  `undo it` context.\n\nfor example \n\n    & (submodule $ []\n      &?& contains
  (File \"/dev/shm/test\") [\"text\"]\n      & exists (Symlink  \"~/.vimrc\" \"/dev/shm/test\")\n
  \   )\n\nwould be reverted like this\n\n    ! (submodule $ []\n      &?& contains
  (File \"/dev/shm/test\") [\"text\"]\n      & exists (Symlink  \"~/.vimrc\" \"/dev/shm/test\")\n
  \   )\n\nwhich is similar to \n\n    ! exists (Symlink  \"~/.vimrc\" \"/dev/shm/test\")\n
  \   \n\n### `submodule`\n\nto group a bunch of command together to on command you
  can negate all at once if you want.\nBut you can create a much more sophisticated
  combination of commands using\n`!?&`,`!?!`,`&?&` and `&?!`.\n\nfor example \n\n
  \   & (submodule $ []\n      & contains (File \"/dev/shm/test\") [\"text\"]\n      &
  exists (Symlink  \"~/.vimrc\" \"/dev/shm/test\")\n    )\n\nis equivalent to\n\n
  \   & contains (File \"/dev/shm/test\") [\"text\"]\n    & exists (Symlink  \"~/.vimrc\"
  \"/dev/shm/test\")\n\nbut could be reverted like this\n\n    ! (submodule $ []\n
  \     & contains (File \"/dev/shm/test\") [\"text\"]\n      & exists (Symlink  \"~/.vimrc\"
  \"/dev/shm/test\")\n    )\n\nwhich is equivalent to\n\n    ! contains (File \"/dev/shm/test\")
  [\"text\"]\n    ! exists (Symlink  \"~/.vimrc\" \"/dev/shm/test\")\n\n### `requires`\n\nis
  used to create dependencies like \"first do *this*, and when everything is fine
  do *this*\".\nThey make most sense with submodules\n\n    & ((submodule $ []\n       &
  exists (Symlink \"~/.vim\"   \"~/.dot_vim\")\n       & exists (Symlink \"~/.vimrc\"
  \"~/.vim/vimrc\")\n      ) \n      `requires` \n      (submodule $ []\n       &
  exists (Git \"git@github.com/myrepo/dot_vim.git\" \"~/.dot_vim\" [Recursive])\n
  \     ))\n      \nIf `requires` is called in a reverting context (e.g. using `!`)
  it will also create a dependency \nbut twisted and the body will be reverted as
  well.\n\n     ! ((submodule $ []\n       & exists (Symlink \"~/.vim\"   \"~/.dot_vim\")\n
  \      & exists (Symlink \"~/.vimrc\" \"~/.vim/vimrc\")\n      ) \n      `requires`
  \n      (submodule $ []\n       & exists (Git \"git@github.com/myrepo/dot_vim.git\"
  \"~/.dot_vim\" [Recursive])\n      ))\n    \nis equivalent to\n\n     & ((submodule
  $ []\n       ! exists (Git \"git@github.com/myrepo/dot_vim.git\" \"~/.dot_vim\"
  [Recursive])\n      )\n      `requires` \n      (submodule $ []\n       ! exists
  (Symlink \"~/.vim\"   \"~/.dot_vim\")\n       ! exists (Symlink \"~/.vimrc\" \"~/.vim/vimrc\")\n
  \     ))\n\n"
license-name: GPL-3
