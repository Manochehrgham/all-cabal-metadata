homepage: https://github.com/advancedtelematic/quickcheck-state-machine#readme
changelog-type: markdown
hash: 45e4e41c1b4213f7fbf41b832132c648979e6beefb968e16c29f882946eb857c
test-bench-deps:
  base: ! '>=4.9.1.0 && <4.10'
  hspec: ! '>=2.4.3 && <2.5'
  mtl: ! '>=2.2.1 && <2.3'
  random: ==1.1.*
  QuickCheck: ! '>=2.9.2 && <2.10'
  quickcheck-state-machine: ! '>=0.0.0 && <0.1'
maintainer: Stevan Andjelkovic <stevan@advancedtelematic.com>
synopsis: Test monadic programs using state machine based models
changelog: ! "#### 0.0.0\n\n  * Initial release.\n"
basic-deps:
  ansi-wl-pprint: ! '>=0.6.7.3 && <0.7'
  stm: ! '>=2.4.4.1 && <2.5'
  base: ! '>=4.7 && <5'
  constraints: ! '>=0.9.1 && <0.10'
  containers: ! '>=0.5.7.1 && <0.6'
  singletons: ==2.2.*
  mtl: ! '>=2.2.1 && <2.3'
  parallel-io: ! '>=0.3.3 && <0.4'
  random: ==1.1.*
  QuickCheck: ! '>=2.9.2 && <2.10'
all-versions:
- '0.0.0'
author: Stevan Andjelkovic
latest: '0.0.0'
description-type: markdown
description: ! "## quickcheck-state-machine\n\n[![Hackage](https://img.shields.io/hackage/v/quickcheck-state-machine.svg)](https://hackage.haskell.org/package/quickcheck-state-machine)\n[![Build
  Status](https://api.travis-ci.org/advancedtelematic/quickcheck-state-machine.svg?branch=master)](https://travis-ci.org/advancedtelematic/quickcheck-state-machine)\n\n`quickcheck-state-machine`
  is a Haskell library, based\non [QuickCheck](https://hackage.haskell.org/package/QuickCheck),
  for testing\nstateful programs. The library is different from\nthe\n[`Test.QuickCheck.Monadic`](https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck-Monadic.html)
  approach\nin that it lets the user specify the correctness by means of a state machine\nbased
  model using pre- and post-conditions. The advantage of the state machine\napproach
  is twofold: 1) specifying the correctness of your programs becomes less\nadhoc,
  and 2) you get testing for race conditions for free.\n\nThe combination of state
  machine based model specification and property based\ntesting first appeard in Erlang's
  proprietary QuickCheck. The\n`quickcheck-state-machine` library can be seen as an
  attempt to provide similar\nfunctionality to Haskell's QuickCheck library.\n\n###
  Sample run (teaser)\n\nHere's a sample output from when we look for race conditions
  in the mutable\nreference example:\n\n```\n> quickCheck (MutableReference.prop_parallel
  RaceCondition)\n*** Failed! (after 5 tests and 6 shrinks):\n\nCouldn't linearise:\n\n┌──────────────────────┐\n│
  New                  │\n│                 ⟶ $0 │\n└──────────────────────┘\n            │
  ┌────────┐\n            │ │ Inc $0 │\n┌─────────┐ │ │        │\n│ Inc $0  │ │ │
  \       │\n│         │ │ │   ⟶ () │\n│         │ │ └────────┘\n│    ⟶ () │ │\n└─────────┘
  │\n┌─────────┐ │\n│ Read $0 │ │\n│     ⟶ 1 │ │\n└─────────┘ │\n\n\n```\n\nClearly,
  if we increment a mutable reference in parallel we can end up with a\nrace condition.
  We shall come back to this example below, but if your are\nimpatient you can find
  the full source\ncode\n[here](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/MutableReference.hs).\n\n###
  How it works\n\nThe rought idea is that the user of the library is asked to provide:\n\n
  \ * a datatype of commands;\n  * a datatype model;\n  * pre- and post-conditions
  of the commands on the model;\n  * a state transition function that given a model
  and a command advances the\n    model to its next state;\n  * a way to generate
  and shrink commands;\n  * semantics for executing the commands.\n\nThe library then
  gives back a sequential and a parallel property.\n\n#### Sequential property\n\nThe
  *sequential property* checks if the model is consistent with respect to the\nsemantics.
  The way this is done is:\n\n  1. generate a list of commands;\n\n  2. starting from
  the initial model, for each command do the the following:\n\n       1. check that
  the pre-condition holds;\n       2. if so, execute the command using the semantics;\n
  \      3. check if the the post-condition holds;\n       4. advance the model using
  the transition function.\n\n  3. If something goes wrong, shrink the initial list
  of commands and present a\n     minimal counter example.\n\n#### Parallel property\n\nThe
  *parallel property* checks if parallel execution of the semantics can be\nexplained
  in terms of the sequential model. This is useful for trying to find\nrace conditions
  -- which normally can be tricky to test for. It works as\nfollows:\n\n  1. generate
  a list of commands that will act as a sequential prefix for the\n     parallel program
  (think of this as an initialisation bit that setups up\n     some state);\n\n  2.
  generate two lists of commands that will act as parallel suffixes;\n\n  3. execute
  the prefix sequentially;\n\n  4. execute the suffixes in parallel and gather the
  a trace (or history) of\n     invocations and responses of each command;\n\n  5.
  try to find a possible sequential interleaving of command invocations and\n     responses
  that respects the post-conditions.\n\nThe last step basically tries to find\na [linearisation](https://en.wikipedia.org/wiki/Linearizability)
  of calls that\ncould have happend on a single thread.\n\n### Examples\n\nTo get
  started it is perhaps easiest to have a look at one of the several\nexamples:\n\n
  \ * The water jug problem from *Die Hard 2* -- this is a\n    simple\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/DieHard.hs)
  of\n    a specification where we use the sequential property to find a solution\n
  \   (counter example) to a puzzle from an action movie. Note that this example\n
  \   has no meaningful semantics, we merely model-check. It might be helpful to\n
  \   compare the solution to the\n    Hedgehog\n    [solution](http://clrnd.com.ar/posts/2017-04-21-the-water-jug-problem-in-hedgehog.html)
  and\n    the\n    TLA+\n    [solution](https://github.com/tlaplus/Examples/blob/master/specifications/DieHard/DieHard.tla);\n\n
  \ * The\n    union-find\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/UnionFind.hs)
  --\n    another use of the sequential property, this time with a useful semantics\n
  \   (imperative implementation of the union-find algorithm). It could be useful\n
  \   to compare the solution to the one that appears in the paper *Testing\n    Monadic
  Code with\n    QuickCheck* [[PS](http://www.cse.chalmers.se/~rjmh/Papers/QuickCheckST.ps)],\n
  \   which is\n    the\n    [`Test.QuickCheck.Monadic`](https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck-Monadic.html)
  module\n    is based on;\n\n\n  * Mutable\n    reference\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/MutableReference.hs)
  --\n    this is a bigger example that shows both how the sequential property can\n
  \   find normal bugs, and how the parallel property can find race conditions.\n
  \   Several metaproperties, that for example check if the counter examples are\n
  \   minimal, are specified in a\n    separate\n    [module](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/MutableReference/Prop.hs);\n\n
  \ * Ticket\n    dispenser\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/TicketDispenser.hs)
  --\n    a simpler example where the parallel property is used once again to find
  a\n    race condition. This is an example used in the *Testing a Database for Race\n
  \   Conditions with QuickCheck* and *Testing the Hard Stuff and Staying\n    Sane*\n
  \   [[PDF](http://publications.lib.chalmers.se/records/fulltext/232550/local_232550.pdf),\n
  \   [video](https://www.youtube.com/watch?v=zi0rHwfiX1Q)] papers.\n\nAll examples
  have an associated `Spec` module located in\nthe\n[`example/test`](https://github.com/advancedtelematic/quickcheck-state-machine/tree/master/example/test)
  directory.\nThese make use of the properties in the examples, and get tested as
  part\nof\n[Travis CI](https://travis-ci.org/advancedtelematic/quickcheck-state-machine).\n\nTo
  get a better feel for the examples it might be helpful to `git clone` this\nrepo,
  `cd` into the `example/` directory and fire up `stack ghci` and run the\ndifferent
  properties interactively.\n\n### How to contribute\n\nThe `quickcheck-state-machine`
  library is still very experimental.\n\nWe would like to encourage users to try it
  out, and join the discussion of how\nwe can improve it on the issue tracker!\n\n###
  See also\n\n  * The QuickCheck\n    bugtrack [issue](https://github.com/nick8325/quickcheck/issues/139)
  -- where\n    the initial discussion about how how to add state machine based testing
  to\n    QuickCheck started;\n\n  * *Finding Race Conditions in Erlang with QuickCheck
  and\n    PULSE*\n    [[PDF](http://www.cse.chalmers.se/~nicsma/papers/finding-race-conditions.pdf),\n
  \   [video](https://vimeo.com/6638041)] -- this is the first paper to describe\n
  \   how Erlang's QuickCheck works (including the parallel testing);\n\n  * *Linearizability:
  a correctness condition for concurrent\n    objects* [[PDF](https://cs.brown.edu/~mph/HerlihyW90/p463-herlihy.pdf)],
  this\n    is a classic paper that describes the main technique of the parallel\n
  \   property;\n\n  * Aphyr's blogposts about [Jepsen](https://github.com/jepsen-io/jepsen),
  which\n    also uses the linearisability technique, and has found bugs in many\n
  \   distributed systems:\n\n    - [Knossos: Redis and linearizability](https://aphyr.com/posts/309-knossos-redis-and-linearizability)\n
  \   - [Strong consistency models](https://aphyr.com/posts/313-strong-consistency-models)\n
  \   - [Computational techniques in Knossos](https://aphyr.com/posts/314-computational-techniques-in-knossos)\n
  \   - [Serializability, linearizability, and locality](https://aphyr.com/posts/333-serializability-linearizability-and-locality)\n\n
  \ * The use of state machines to model and verify properties about programs is\n
  \   quite well-established, as witnessed by several books on the subject:\n\n      -
  [Specifying Systems](https://www.microsoft.com/en-us/research/publication/specifying-systems-the-tla-language-and-tools-for-hardware-and-software-engineers/):\n
  \       The TLA+ Language and Tools for Hardware and Software Engineers\n      -
  [Modeling in Event-B](http://www.event-b.org/abook.html): System and\n        Software
  Engineering\n      - [Abstract State Machines](http://www.di.unipi.it/~boerger/AsmBook/):
  A\n        Method for High-Level System Design and Analysis\n\n    The books contain
  general advice how to model systems using state machines,\n    and are hence relevant
  to us. For shorter texts on why state machines are\n    important for modeling,
  see:\n\n      - Lamport's\n        [*Computation and State Machines*](https://www.microsoft.com/en-us/research/publication/computation-state-machines/);\n\n
  \     - Gurevich's\n        [*Evolving Algebras 1993: Lipari Guide*](https://www.microsoft.com/en-us/research/publication/103-evolving-algebras-1993-lipari-guide/)
  and\n        *Sequential Abstract State Machines Capture Sequential\n        Algorithms*\n
  \       [[PDF](http://delta-apache-vm.cs.tau.ac.il/~nachumd/models/gurevich.pdf)].\n\n###
  License\n\nBSD-style (see the file LICENSE).\n"
license-name: BSD3
