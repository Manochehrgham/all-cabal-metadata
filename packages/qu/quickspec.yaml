changelog-type: ''
hash: d0fbe401db36becf9071e2cc63a5f80226bc36ea27671bf72f041f324d1b8159
test-bench-deps: {}
synopsis: Equational laws for free!
changelog: ''
basic-deps:
  base: <5
  array: -any
  containers: -any
  ghc-prim: -any
  spoon: ! '>=0.2'
  transformers: -any
  random: -any
  QuickCheck: ! '>=2.7'
all-versions:
- '0.9'
- '0.9.1'
- '0.9.2'
- '0.9.3'
- '0.9.4'
- '0.9.5'
- '0.9.6'
latest: '0.9.6'
description-type: text
description: ! ":replacements.DOCS: http://hackage.haskell.org/package/quickspec-0.9.5/docs/Test-QuickSpec.html\n:replacements.PAPER:
  http://www.cse.chalmers.se/~nicsma/papers/quickspec.pdf\n:replacements.FUN: http://hackage.haskell.org/package/quickspec-0.9.5/docs/Test-QuickSpec.html#v:\n:replacements.TYPE:
  http://hackage.haskell.org/package/quickspec-0.9.5/docs/Test-QuickSpec.html#t:\n:replacements.EXAMPLE:
  link:examples/\n\nQuickSpec: equational laws for free!\n====================================\n\nEver
  get that nagging feeling that your code must satisfy some\nalgebraic properties,
  but not sure what they are? Want to write some\nQuickCheck properties, but not sure
  where to start? QuickSpec might be\nfor you! Give it your program -- QuickSpec will
  find the laws it obeys.\n\nQuickSpec takes any hodgepodge of functions, and tests
  those functions\nto work out the relationship between them. It then spits out what
  it\ndiscovered as a list of equations.\n\nGive QuickSpec `reverse`, `++` and `[]`,
  for example, and it will find\nsix laws:\n\n------------------------------------------------\nxs++[]
  == xs\n[]++xs == xs\n(xs++ys)++zs == xs++(ys++zs)\nreverse [] == []\nreverse (reverse
  xs) == xs\nreverse xs++reverse ys == reverse (ys++xs)\n------------------------------------------------\n\nAll
  the laws you would expect to hold, and nothing more -- and all\ndiscovered automatically!
  Brill!\n\nWhere's the catch? While QuickSpec is pretty nifty, it isn't magic,\nand
  has a number of limitations:\n\n* QuickSpec can only discover _equations_, not other
  kinds of laws.\n  Luckily, equations cover a lot of what you would normally want
  to\n  say about Haskell programs. Often, even if a law you want isn't\n  equational,
  QuickSpec will discover equational special cases of that\n  law which suggest the
  general case.\n* You have to tell QuickSpec exactly which functions and constants
  it\n  should consider when generating laws. In the example above, we gave\n  `reverse`,
  `++` and `[]`, and those are the _only_ functions that\n  appear in the six equations.
  For example, we don't get the equation\n  `(x:xs)++ys == x:(xs++ys)`, because we
  didn't include +:+ in the\n  functions we gave to QuickSpec. A large part of using
  QuickSpec\n  effectively is choosing which functions to consider in laws.\n* QuickSpec
  exhaustively enumerates terms, so it will only discover\n  equations about small(ish)
  terms -- in fact, terms up to a fixed\n  depth. You can adjust the maximum depth
  but, as QuickSpec exhaustively\n  enumerates terms, there is an exponential blowup
  as you increase the\n  depth. Likewise, there is an exponential blowup as you give
  QuickSpec\n  more functions to consider (though it doesn't blow up as badly as\n
  \ you might think!)\n* QuickSpec only tests the laws, it doesn't try to prove them.\n
  \ So while the generated laws are very likely to be true, there is\n  still a chance
  that they are false, especially if your test data\n  generation is not up to scratch.\n\nDespite
  these limitations, QuickSpec works well on many examples.\n\nThe rest of this +README+
  introduces QuickSpec through a couple of short examples.\nYou can look at the bottom
  of this file for links to more examples, Haddock documentation and our paper about
  QuickSpec.\n\nInstalling\n----------\n\nInstall QuickSpec in the usual way -- `cabal
  install quickspec`.\n\nBooleans -- the basics\n----------------------\n\nLet's start
  by testing some boolean operators.\n\nTo run QuickSpec, we must define a _signature_,
  which specifies which\nfunctions we want to test, together with the variables that
  can appear\nin the generated equations. Here is our signature:\n\n[source,haskell]\n------------------------------------------------\nbools
  = [\n  [\"x\", \"y\", \"z\"] `vars` (undefined :: Bool),\n\n  \"||\"    `fun2` (||),\n
  \ \"&&\"    `fun2` (&&),\n  \"not\"   `fun1` not,\n  \"True\"  `fun0` True,\n  \"False\"
  `fun0` False]\n------------------------------------------------\n\nIn the signature,
  we define three variables (+x+, +y+ and +z+) of type\n+Bool+, using the FUNvars[`vars`]
  combinator, which takes two\nparameters: a list of variable names, and the type
  we want those\nvariables to have. We also give give QuickSpec the functions +||+,\n+&&+,
  +not+, +True+ and +False+, using the\nFUNfun0[`fun0`]/FUNfun1[`fun1`]/FUNfun2[`fun2`]
  combinators. These\ntake two parameters: the name of the function, and the function\nitself.
  The integer, +0+, +1+ or +2+ here, is the arity of the\nfunction.\n\nHaving written
  this signature, we can invoke QuickSpec just by calling\nthe function FUNquickSpec[`quickSpec`]:\n\n[source,haskell]\n------------------------------------------------\nimport
  Test.QuickSpec hiding (bools)\nmain = quickSpec bools\n------------------------------------------------\n\nYou
  can find this code in EXAMPLEBools.hs[examples/Bools.hs] in\nthe QuickSpec distribution.
  Go on, run it! (Compile it or else it'll go slow.)\nYou will see that QuickSpec
  prints out:\n\n1. The signature it's testing, i.e. the types of all functions and\n
  \  variables. If something fishy is happening, check that the\n   functions and
  types match up with what you expect! QuickSpec will\n   also print a warning here
  if something seems fishy about the\n   signature, e.g. if there are no variables
  of a certain type.\n2. A summary of how much testing it did.\n3. The equations it
  found -- the exciting bit!\n   The equations are grouped according to which function
  they\n   talk about, with equations that relate several functions at the end.\n\nPeering
  through what QuickSpec found, you should see the familiar laws\nof Boolean algebra.
  The only oddity is the equation +x||(y||z) ==\ny||(x||z)+. This is QuickSpec's rather
  eccentric way of expressing\nthat +||+ is associative -- in the presence of the
  law +x||y == y||x+,\nit's equivalent to associativity, and QuickSpec happens to
  choose this\nformulation rather than the more traditional one. All the other laws\nare
  just as we would expect, though. Not bad for 5 minutes' work!\n\nLists -- polymorphic
  functions and the prelude\n----------------------------------------------\n\nNow
  let's try testing some list functions -- perhaps just `reverse`,\n`++` and `[]`.
  We might start by writing a signature by analogy with\nthe earlier booleans example:\n\n[source,haskell]\n----\nlists
  = [\n  [\"xs\", \"ys\", \"zs\"] `vars` (undefined :: [a]),\n\n  \"[]\"      `fun0`
  [],\n  \"reverse\" `fun1` reverse,\n  \"++\"      `fun2` (++)]\n----\n\nUnfortunately,
  QuickSpec only supports _monomorphic_ functions. The\nfunctions and variables in
  the `lists` signature are polymorphic,\nand GHC complains:\n\n----\nNo instance
  for (Arbitrary a0) arising from a use of `vars'\nThe type variable `a0' is ambiguous\n----\n\nThe
  solution is to monomorphise the signature ourselves. QuickSpec\nprovides types called
  TYPEA[`A`], TYPEB[`B`] and TYPEC[`C`] for that\npurpose, so we simply specialise
  all type variables to TYPEA[`A`]:\n\n[source,haskell]\n----\nlists = [\n  [\"xs\",
  \"ys\", \"zs\"] `vars` (undefined :: [A]),\n\n  \"[]\"      `fun0` ([] :: [A]),\n
  \ \"reverse\" `fun1` (reverse :: [A] -> [A]),\n  \"++\"      `fun2` ((++) :: [A]
  -> [A] -> [A])]\n----\n\nHaving done that, we get the six laws from the beginning
  of this file.\n\nPerhaps we now decide we want laws about `length` too. We want
  to keep\nour existing list functions in the signature, so that we get laws\nrelating
  them to `length`, but on the other hand we only want to see\nnew laws, i.e. the
  ones that mention `length`. We can do this by\nmarking the existing functions as
  _background functions_, and the\nresulting signature looks as follows:\n\n[source,haskell]\n----\nlists
  = [\n  [\"xs\", \"ys\", \"zs\"] `vars` (undefined :: [A]),\n\n  background [\n    \"[]\"
  \     `fun0` ([] :: [A]),\n    \"reverse\" `fun1` (reverse :: [A] -> [A]),\n    \"++\"
  \     `fun2` ((++) :: [A] -> [A] -> [A])],\n  \"length\" `fun1` (length :: [A] ->
  Int)]\n----\n\nQuickSpec will only print an equation if it involves at least one\nnon-background
  function, in this case `length`. Running QuickSpec\nagain we get the following two
  laws:\n\n----\nlength (reverse xs) == length xs\nlength (xs++ys) == length (ys++xs)\n----\n\nThe
  first equation is all very well and good, but the second one is a\nbit unsatisfying.
  Wouldn't we rather get\n`length (xs++ys) = length xs + length ys`? To get that equation,
  we need to add\n`(+) :: Int -> Int -> Int` to the signature. Adding it as a background\nfunction
  gives us the law we want.\n\nYou often need a wide variety of background functions
  to get good\nequations out of QuickSpec, and it gets a bit tedious declaring them\nall
  by hand. To help you with this QuickSpec provides a _prelude_, a\npredefined set
  of background functions which you can import into your\nown signature. The prelude
  is very minimal, but includes basic boolean,\narithmetic and list functions. We
  can write our lists signature using\nthe prelude as follows:\n\n[source,haskell]\n----\nlists
  = [\n  prelude (undefined :: A) `without` [\"[]\", \":\"],\n\n  background [\n    \"reverse\"
  `fun1` (reverse :: [A] -> [A])],\n  \"length\" `fun1` (length :: [A] -> Int)]\n----\n\nA
  call to FUNprelude[`prelude`] +(undefined :&colon; a)+ will declare the following\nbackground
  functions:\n  * The boolean connectives `||`, `&&`, `not`, `True` and `False`.\n
  \ * The arithmetic operations `0`, `1`, `+` and `*` over type `Int`.\n  * The list
  operations `[]`, `:`, `++`, `head` and `tail` over type `[a]`.\n  * Three variables
  each of type `Bool`, `Int`, `a` and `[a]`.\n\nIn the example above we used the FUNwithout[`without`]
  combinator to\nleave out `[]` and `:` from the prelude, so as to get fewer laws.\nQuickSpec
  also provides the combinators FUNbools[`bools`],\nFUNarith[`arith`] and FUNlists[`lists`],
  which import only their\nrespective part of the prelude, for when you want more
  control -- see\nthe DOCS[documentation] for more information.\n\nIn EXAMPLELists.hs[Lists.hs]
  you can find an extended version\nof the above example which also tests `map`.\n\nAdvanced:
  function composition -- testing types with no `Ord` instance\n----------------------------------------------------------------------\n\nWARNING:
  this section isn't finished.\n\nIMPORTANT: You can skip this section unless you
  need to test a type\nwith no `Ord` instance.\n\nSuppose we want to get QuickSpec
  to discover the laws of function\ncomposition -- things like `id . f == f`.\n\nIf
  we just define a signature containing `id` and `(.)` (and suitable\nvariables),
  the output is rather disappointing:\n\n----\n(f . g) x == f (g x)\nid x == x\n----\n\nThis
  is because QuickSpec is giving us laws about _fully saturated_\napplications of
  `(.)` and `id`, that is, `(.)` applied to three\narguments and `id` applied to one
  argument. In the laws we are after,\nwe only want to apply `(.)` to two arguments,
  and we don't want to\napply `id` to an argument at all. To fix this we can declare
  `(.)`\nto have arity 2 and `id` to have arity 1, so that QuickSpec won't\nfully
  apply them:\n\n----\ncomposition = [\n  vars [\"f\", \"g\", \"h\"] (undefined ::
  A -> A),\n  fun2 \".\"   ((.) :: (A -> A) -> (A -> A) -> (A -> A)),\n  fun0 \"id\"
  \ (id  :: A -> A),\n  ]\n----\n\nUnfortunately, we get the following error message:\n\n----\nCould
  not deduce (Ord (A -> A)) arising from a use of `fun2'\n----\n\nTo test a law like
  `id . f == f`, QuickSpec generates a random value\nfor `f` and then just evaluates
  the expression `id . f == f` to get\neither `True` or `False`.\n\nThe error message
  complains that we are trying to generate laws about\nterms of the type `A -> A`
  (i.e. functions), but as there is no `Ord`\ninstance for functions QuickSpec has
  no way of testing the laws.\nQuickSpec tests a law like `id . f == f` by generating
  random values\nfor `f` and seeing if the resulting left-hand side and right-hand
  side\nevaluate to the same value; it can only do this if it has an `Ord`\ninstance
  for the values in question. As there is no way to tell if\ntwo functions are equal,
  it seems we are stuck!\n\nHang on, though. We can still _test_ if two functions
  are equal:\ngenerate a random argument and apply the two functions to it, and see\nif
  they both give the same result. If they don't, they're certainly\nnot equal. Repeat
  the process a few times, for several random\narguments, and if both functions always
  seem to give the same result\nthen they're probably equal.\n\n\n\nThis is a common
  situation -- we have a type, we cannot directly\ncompare values of that type, but
  we can make random _observations_\nand compare those. For our example, observing
  a function consists\nof applying the function to a random argument. QuickSpec supports\nfinding
  equations over types that you can observe. The\nobservations must satisfy the following
  properties:\n\n* The observation returns a value of a type that we can directly\n
  \ compare for equality.\n* If two values are different, there is an observation
  that\n  distinguishes them.\n* If an observation distinguishes two values, they
  are not equal.\n\n\n\nCommon pitfalls\n---------------\n\nWARNING: this section
  isn't finished.\n\n*I get laws which seem to be false!*\nIf a law really is false,
  it means that QuickCheck didn't discover the\ncounterexample to it. Possible solutions
  include:\n\n  * Improve the test data generation. If you can't change the\n    Arbitrary`
  instance for your type, you can use the\n    FUNgvars[`gvars`] combinator, which
  is like FUNvars[`vars`]\n    but allows you to specify the generator.\n  * If you
  are testing a polymorphic function, try instantiating it\n    with the QuickSpec
  type TYPETwo[`Two`] instead of TYPEA[`A`].\n    TYPETwo[`Two`] is a type that has
  only two elements, which may\n    make it easier to hit counterexamples.\n  * Use
  the FUNwithTests[`withTests`] combinator to increase the\n    number of tests.\n\n*QuickSpec
  runs for a very long time without terminating!*\nQuickSpec works by enumerating
  all terms up to a certain depth,\nand therefore suffers from exponential blowup.
  Check the output\nwhere it reports how many terms it generated:\n\n----\n== Testing
  ==\nDepth 1: 6 terms, 4 tests, 18 evaluations, 6 classes, 0 raw equations.\nDepth
  2: 61 terms, 500 tests, 28568 evaluations, 15 classes, 46 raw equations.\nDepth
  3: 412 terms, 500 tests, 205912 evaluations, 53 classes, 359 raw equations.\n----\n\nHere
  it's generated 412 terms. If the number gets much above 100,000\nthen you will probably
  run into trouble. This can be caused by one of\nseveral things:\n  * Too many functions
  in the signature.\n\n*I only get ground instances of the laws I want!*\n\nPerhaps
  you forgot to add\n\nno variables\n\n*Law not found*\n\nIs it true? Is it provable?
  Are all necessary functions in the signature?\nDo the types match up so that the
  term is well-typed?\n\n*Get false laws*\n\nTweak test data generators\n\n*Exponential
  blowup*\n\n*I want to test a datatype with no `Ord` instance, such as functions*\n\nsee
  function composition\n\n\n\n\nA common mistake when using QuickSpec is to forget
  to define any\nvariables of a certain type. In that case, you will typically get
  lots\nof special cases instead of the law you really want. For example,\n\n----\nTrue||True
  == True\nTrue||False == True\nFalse||True == True\nFalse||False == False\n----\n\nWhere
  to go from here?\n--------------------\n\nHave a look at the examples that come
  with QuickSpec:\n\n* link:examples/Bools.hs[Booleans]\n* link:examples/Arith.hs[Arithmetic]\n*
  link:examples/Lists.hs[List functions]\n* link:examples/Heaps.hs[Binary heaps]\n*
  link:examples/Composition.hs[Function composition]\n* link:examples/Arrays.hs[Arrays]\n*
  link:examples/TinyWM.hs[A tiny window manager]\n* link:examples/PrettyPrinting.hs[Pretty-printing
  combinators]\n\nRead our PAPER[paper].\n\nRead the DOCS[Haddock documentation] for
  things to tweak.\n"
