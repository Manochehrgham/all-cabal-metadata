changelog-type: ''
hash: 680d4ced527bedfe10601a57ee1149d8c8273842b52cd33166d62cc2ed7af1f5
synopsis: A library for client-side HTTP
changelog: ''
all-versions:
- '3000.0.0'
- '3001.0.0'
- '3001.0.1'
- '3001.0.2'
- '3001.0.3'
- '3001.0.4'
- '3001.1.3'
- '3001.1.4'
- '3001.1.5'
- '4000.0.0'
- '4000.0.1'
- '4000.0.2'
- '4000.0.3'
- '4000.0.4'
- '4000.0.5'
- '4000.0.6'
- '4000.0.7'
- '4000.0.8'
- '4000.0.9'
- '4000.0.10'
- '4000.1.0'
- '4000.1.1'
- '4000.1.2'
- '4000.2.0'
- '4000.2.1'
- '4000.2.2'
- '4000.2.3'
- '4000.2.4'
- '4000.2.5'
- '4000.2.6'
- '4000.2.7'
- '4000.2.8'
- '4000.2.9'
- '4000.2.10'
- '4000.2.11'
- '4000.2.12'
- '4000.2.13'
- '4000.2.14'
- '4000.2.15'
- '4000.2.16'
- '4000.2.16.1'
- '4000.2.17'
- '4000.2.18'
- '4000.2.19'
latest: '4000.2.19'
description-type: haddock
description: ! 'The HTTP package supports client-side web programming in Haskell.
  It lets you set up

  HTTP connections, transmitting requests and processing the responses coming back,
  all

  from within the comforts of Haskell. It''s dependent on the network package to operate,

  but other than that, the implementation is all written in Haskell.


  A basic API for issuing single HTTP requests + receiving responses is provided.
  On top

  of that, a session-level abstraction is also on offer  (the @BrowserAction@ monad);

  it taking care of handling the management of persistent connections, proxies,

  state (cookies) and authentication credentials required to handle multi-step

  interactions with a web server.


  The representation of the bytes flowing across is extensible via the use of a type
  class,

  letting you pick the representation of requests and responses that best fits your
  use.

  Some pre-packaged, common instances are provided for you (@ByteString@, @String@).


  Here''s an example use:


  >

  >    do

  >      rsp <- Network.HTTP.simpleHTTP (getRequest "http://www.haskell.org/")

  >              -- fetch document and return it (as a ''String''.)

  >      fmap (take 100) (getResponseBody rsp)

  >

  >    do

  >      (_, rsp)

  >         <- Network.Browser.browse $ do

  >               setAllowRedirects True -- handle HTTP redirects

  >               request $ getRequest "http://www.haskell.org/"

  >      return (take 100 (rspBody rsp))'
