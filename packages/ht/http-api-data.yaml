homepage: http://github.com/fizruk/http-api-data
changelog-type: markdown
hash: 5c700ed4464e428a18bf268039ec28dbcb418489b279d97ab5fa459b5781ff85
test-bench-deps:
  base: ==4.*
  time: -any
  hspec: ! '>=1.3'
  text: -any
  http-api-data: -any
  doctest: -any
  HUnit: -any
  QuickCheck: -any
  Glob: -any
maintainer: Nickolay Kudasov <nickolay.kudasov@gmail.com>
synopsis: Converting to/from HTTP API data like URL pieces, headers and query parameters.
changelog: ! "0.2.3\n---\n* Add more parser helpers for `Bounded` `Enum` types.\n\n0.2.2\n---\n\n*
  Add instances for more `time` types: `LocalTime`, `ZonedTime`, `UTCTime` and `NominalDiffTime`\n\n0.2.1\n---\n\n*
  Add helpers for multiple URL pieces and query params:\n    * `toUrlPieces`, `parseUrlPieces`\n
  \   * `toQueryParams`, `parseQueryParams`\n\n0.2\n---\n\n* Export helper functions
  from `Web.HttpApiData`:\n    * `parseUrlPieceMaybe`, `parseHeaderMaybe`, `parseQueryParamMaybe`\n
  \   * `parseUrlPieceWithPrefix`, `parseHeaderWithPrefix`, `parseQueryParamWithPrefix`\n
  \   * `showTextData`, `readTextData`, `parseBoundedTextData`\n* Fix AMP related
  warnings\n\n0.1.1\n---\n\n* Add `use-text-show` flag to optionally use more efficient
  `TextShow` instances\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <4.10'
  time: -any
  text: ! '>=0.5'
  time-locale-compat: ! '>=0.1.1.0 && <0.2'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.1.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
author: Nickolay Kudasov <nickolay.kudasov@gmail.com>
latest: '0.2.3'
description-type: markdown
description: ! '# http-api-data


  [![Hackage package](http://img.shields.io/hackage/v/http-api-data.svg)](http://hackage.haskell.org/package/http-api-data)

  [![Build Status](https://secure.travis-ci.org/fizruk/http-api-data.png?branch=master)](http://travis-ci.org/fizruk/http-api-data)


  This package defines typeclasses used for converting Haskell data types to and from
  HTTP API data.


  ### Examples


  Booleans:


  ```

  >>> toUrlPiece True

  "true"

  >>> parseUrlPiece "false" :: Either Text Bool

  Right False

  >>> parseUrlPieces ["true", "false", "undefined"] :: Either Text [Bool]

  Left "could not parse: `undefined''"

  ```


  Numbers:


  ```

  >>> toQueryParam 45.2

  "45.2"

  >>> parseQueryParam "452" :: Either Text Int

  Right 452

  >>> toQueryParams [1..5]

  ["1","2","3","4","5"]

  >>> parseQueryParams ["127", "255"] :: Either Text [Int8]

  Left "out of bounds: `255'' (should be between -128 and 127)"

  ```


  Strings:


  ```

  >>> toHeader "hello"

  "hello"

  >>> parseHeader "world" :: Either Text String

  Right "world"

  ```


  Calendar day:


  ```

  >>> toQueryParam (fromGregorian 2015 10 03)

  "2015-10-03"

  >>> toGregorian <$> parseQueryParam "2016-12-01"

  Right (2016,12,1)

  ```


  ## Contributing


  Contributions and bug reports are welcome!


'
license-name: BSD3
