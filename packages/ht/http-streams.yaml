homepage: http://research.operationaldynamics.com/projects/http-streams/
changelog-type: markdown
hash: 0454315798f741eb26dfad8261c1749b85ee5da1953b30a38e6e6899ca8741c6
test-bench-deps:
  MonadCatchIO-transformers: -any
  bytestring: -any
  case-insensitive: -any
  openssl-streams: ! '>=1.1 && <1.4'
  base: -any
  base64-bytestring: -any
  aeson-pretty: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  http-common: ! '>=0.8.2'
  system-fileio: ! '>=0.3.10 && <0.4'
  network: ! '>=2.6'
  HUnit: -any
  snap-server: ! '>=0.9 && <1.0'
  blaze-builder: -any
  io-streams: -any
  ghc-prim: -any
  snap-core: ! '>=0.9 && <1.0'
  http-streams: ! '>=0.8.2'
  network-uri: ! '>=2.6'
  mtl: -any
  attoparsec: -any
  transformers: -any
  HsOpenSSL: -any
  system-filepath: ! '>=0.4.1 && <0.5'
  aeson: -any
  hspec-expectations: -any
  directory: -any
maintainer: Andrew Cowie <andrew@operationaldynamics.com>
synopsis: An HTTP client using io-streams
changelog: ! "* _v0.8.3_  \n\tA pure version of `buildRequest` is now available as
  `buildRequest1`.\n\tSupport for connecting to Unix domain sockets has been added.\n\n*
  _v0.7.0_  \n\tThe Request, Response, Headers, and RequestBuilder types have been\n\tfactored
  out and moved to **http-common**. They are still exported\n\tby **http-streams**.\n\n*
  _v0.6.0_  \n\tEntity body lengths (both for Requests and Responses) now Int64.\n\tLibrary
  depends on **io-streams** 1.1.\n\n* _v0.5.0_  \n\tDefinition of Hostname and Port
  have been changed to ByteString\n\tand Word16, respectively.\n\n* _v0.4.0_  \n\tType
  signature of `buildRequest` changed, removing the Connection\n\tparameter. This
  allows you to construct Request objects before\n\topening a connection to the web
  server if you wish.\n\n* _v0.3.1_  \n\tInitial public release\n"
basic-deps:
  bytestring: -any
  case-insensitive: -any
  openssl-streams: ! '>=1.1 && <1.4'
  base: ! '>=4 && <5'
  base64-bytestring: -any
  unordered-containers: -any
  text: -any
  http-common: ! '>=0.8.2'
  network: ! '>=2.6'
  blaze-builder: ! '>=0.4'
  io-streams: ! '>=1.3 && <1.4'
  network-uri: ! '>=2.6'
  mtl: -any
  attoparsec: -any
  transformers: -any
  HsOpenSSL: ! '>=0.10.3.5'
  aeson: -any
  directory: -any
all-versions:
- '0.3.1.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.5.0.0'
- '0.5.0.1'
- '0.5.0.2'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.1.0'
- '0.6.1.1'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.1.1'
- '0.7.1.2'
- '0.7.2.0'
- '0.7.2.2'
- '0.7.2.3'
- '0.7.2.4'
- '0.7.2.5'
- '0.7.2.6'
- '0.8.3.1'
- '0.8.3.2'
author: Andrew Cowie <andrew@operationaldynamics.com>
latest: '0.8.3.2'
description-type: markdown
description: ! "An HTTP client\n==============\n\nAn HTTP client library for Haskell
  using the Snap Framework's\n[io-streams](https://github.com/snapframework/io-streams)
  library to\nhandle the streaming IO.\n<!-- replace with link to hackage when it
  is released -->\n\nA common case in writing RESTful web services is needing to make
  onward calls\nto further servers. This package is intended to make this easy to
  do.\nThough originally written for making calls from wep apps written with\nSnap,
  you can use this from any library or framework.\n\nEnjoy!\n\nExample\n-------\n\nThe
  underlying API is very simple:\n\n```haskell\nmain :: IO ()\nmain = do\n    c <-
  openConnection \"www.example.com\" 80\n    \n    let q = buildRequest1 $ do\n                http
  GET \"/\"\n                setAccept \"text/html\"\n    \n    sendRequest c q emptyBody\n
  \   \n    receiveResponse c (\\p i -> do\n    \tputStr $ show p\n\n    \tx <- Streams.read
  i\n    \tS.putStr $ fromMaybe \"\" x)\n    \n    closeConnection c\n```\n\nThere
  are also convenience functions for the common case of making\nstraight-forward GET
  and POST requests; for instance:\n\n```haskell\n    get \"http://www.example.com/\"
  (\\_ i -> Streams.connect i stdout)\n```\n\nwill _{ahem}_ stream the response body
  to stdout. Perhaps more\ninteresting (though less streams-oriented), is simply getting
  the\nresponse as a ByteString using one of the pre-defined handlers:\n\n```haskell\n
  \   x' <- get \"https://secure.example.com/\" concatHandler\n```\n\nSee the documentation
  in\n[Network.Http.Client](https://hackage.haskell.org/package/http-streams/docs/Network-Http-Client.html)\nfor
  further examples and details of usage of the API. There's also a [blog\npost](http://blogs.operationaldynamics.com/andrew/software/haskell/http-streams-introduction)\nintroducing
  the library with a discussion of the design and usage.\n\nChange Log\n----------\n\nNow
  included in separate file [CHANGELOG](CHANGELOG.markdown).\n\nAfC\n\n"
license-name: BSD3
