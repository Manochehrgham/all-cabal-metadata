changelog-type: text
hash: 064cf9a0e920dafb1c462be435414c91f52e22c863d661690bbea3ab88d8e9bb
test-bench-deps: {}
synopsis: Rational arithmetic in an irrational world.
changelog: ! "2011-03-01 Dr. Alistair Ward <factory at functionalley dot eu>\n\n0.0.0.1\n\t*
  First version of the package.\n0.0.0.2\n\t* Created the modules; \"Factory.Test.QuickCheck.Bounds\",
  \"Factory.Math.Implementations.Pi.Borwein.*\" and \"Factory.Test.Performance.Statistics\".\n\t*
  Created a new module \"Factory.Data.PrimeFactors\", and migrated definitions from
  both \"Factory.Math.PrimeFactorisation\" and \"Factory.Math.Implementations.PrimeFactorisation\".\n\t*
  Created the class 'Factory.Math.Factorial.Factorial' and a new module \"Factory.Math.Implementations.Factorial\".\n\tMoved
  existing implementation (Bisection) into the new module, with a new implementation
  (PrimeFactorisation).\n\t* Added the function 'Factory.Math.Summation.sumR'.\n\t*
  Added a parameter to the functions 'Factory.Math.DivideAndConquer.divideAndConquer'
  and 'Factory.Data.Bounds.divideAndConquer', to permit asymmetric bisection.\n\t*
  Added methods to class \"Factory.Math.Pi.Algorithm\" to permit the retrieval of
  /Pi/ as a 'Rational' or a 'String'.\n\t* Renamed the function 'Factory.Math.Precision.capPrecision'
  to 'Factory.Math.Precision.simplify'.\n\t* Removed the module \"Factory.Test.Performance.Exponential\".\n\t*
  Removed the function 'Factory.Math.Power.raise', which was no more efficient than
  ghc's implementation of '(^)'.\n\t* Uploaded to <http://hackage.haskell.org/packages/hackage.html>.\n0.1.0.0\n\t*
  Amended 'factory.cabal' to more correctly specify the dependency on package 'toolshed'.\n\t*
  Added the module \"Factory.Math.Probability\".\n\t* Renamed the module \"Factory.Data.Bounds\"
  to \"Factory.Data.Interval\",\n\tand added the functions; 'Factory.Data.Interval.precisely',
  'Factory.Data.Interval.shift', 'Factory.Data.Interval.closedUnitInterval'.\n\t*
  Guarded 'eager-blackholing' flag in /cabal/ file.\n0.1.0.1\n\t* Renamed classes
  \"Factory.Math.[Primality, Pi, Factorial, SquareRoot, PrimeFactorisation].Algorithm\"
  to \"Factory.Math.[Primality, Pi, Factorial, SquareRoot, PrimeFactorisation].Algorithmic\",
  to distinguish them from the data-types which implement them.\n\t* Added the modules
  \"Factory.Math.Hyperoperation\", \"Factory.Test.QuickCheck.Hyperoperation\" and
  \"Factory.Test.Performance.Hyperoperation\".\n\t* Added the modules \"Factory.Math.Primes\",
  \"Factory.Math.Implementation.Primes\", \"Factory.Test.Performance.Primes\", \"Factory.Test.QuickCheck.Primes\"
  and \"Factory.Data.PrimeWheel\".\n\t* Added the function 'Factory.Math.PrimeFactorisation.squareFree'.\n\t*
  Added rewrite-rules to specialise 'Factory.Math.Power.isPerfectPower' for type-parameter='Int'.\n\t*
  Recoded \"Factory.Math.Radix\" to the interface \"Data.Array.IArray.IArray\", rather
  than the data-type \"Data.Array.Array\".\n0.1.0.2\n\t* Added 'Factory.Math.Primes.primorial'.\n\t*
  Altered 'Factory.Math.Implementations.Primes.trialDivision' to take an integer defining
  the size of a 'Factory.Data.PrimeWheel', from which candidates are extracted.\n\t*
  Removed the command-line option 'primesPerformanceGraph', which appears to memoise
  data from previous tests.\n\t* Uploaded to <http://hackage.haskell.org/packages/hackage.html>.\n0.1.0.3\n\t*
  Qualified 'Factory.Math.Implementations.Primes.trialDivision' with /NOINLINE/ pragma,
  to block optimization which conflicts with rewrite-rule for 'Factory.Math.Implementations.Primes.sieveOfEratosthenes'
  !\n\t* Re-coded 'Factory.Data.PrimeWheel.coprimes' and 'Factory.Math.Implementations.Primes.sieveOfEratosthenes',
  to use a map of lists, rather than a map of lists of lists.\n0.2.0.0\n\t* Separately
  coded the special-case of a 'Factory.Data.PrimeWheel' of size zero, in 'Factory.Math.Implementations.Primes.trialDivision',
  to achieve better space-complexity.\n\t* Added 'Factory.Data.PrimeWheel.estimateOptimalSize'.\n\t*
  Split \"Factory.Math.Implementations.Primes\" into; \"Factory.Math.Implementations.Primes.SieveOfEratosthenes\",
  \"Factory.Math.Implementations.Primes.TurnersSieve\", \"Factory.Math.Implementations.Primes.TrialDivision\",
  and added a new module \"Factory.Math.Implementations.Primes.SieveOfAtkin\". This
  makes the rewrite-rules less fragile.\n\t* Coded 'Factory.Math.Radix.digitalRoot'
  more concisely.\n\t* Split \"Factory.Math.Power\" into an additional module \"Factory.Math.PerfectPower\".\n\t*
  Replaced '(+ 1)' and '(- 1)' with the faster calls 'succ' and 'pred'.\n\t* Used
  'Paths_factory.version' in 'Main', rather than hard-coding it.\n0.2.0.1\n\t* Changed
  by Lennart Augustsson, to replace \"System\" with \"System.Environment\" and \"System.Exit\",
  and to remove dependency on \"haskell98\".\n0.2.0.2\n\t* Reacted to new module-hierarchy
  and addition of method 'ToolShed.SelfValidate.getErrors', in 'toolshed-0.13.0.0'.\n\t*
  Made 'Factory.Data.Interval.getLength' private.\n\t* Added 'Factory.Data.Interval.mkBounded'.\n\t*
  Generalised \"Factory.Math.Statistics\" to accept any 'Data.Foldable.Foldable' 'Functor',
  rather than merely lists.\n0.2.0.3\n\t* Added class 'Show' to some contexts in \"Factory.Math.Radix\",
  for migration to 'ghc-7.4'.\n0.2.0.4\n\t* Added classes 'Eq' and 'Show' to many
  contexts, for migration to 'ghc-7.4'.\n\t* Minor re-formatting.\n0.2.0.5\n\t* Minor
  clarification of 'Factory.Math.Implementations.Primality.witnessesCompositeness'.\n\t*
  Added details to any failure to parse the command-line arguments.\n\t* Defined package's
  name using program's name, in \"Main.hs\".\n\t* Added 'Factory.Math.Primes.mersenneNumbers'.\n\t*
  Replaced use of 'mod' on positive integers, with the faster 'rem', in 'Factory.Math.Implementations.Pi.Spigot.Spigot.processColumns',
  'Factory.Math.Implementations.Primality.witnessesCompositeness', 'Factory.Math.Implementations.Primes.TrialDivision.isIndivisibleBy',
  'Factory.Math.Implementations.Primes.SieveOfAtkin.polynomialTypeLookup', 'Factory.Math.Implementations.Primes.SieveOfAtkin.findPolynomialSolutions',
  'Factory.Math.Implementations.Primes.TurnersSieve.turnersSieve', 'Factory.Math.PerfectPower.maybeSquareNumber'.\n\t*
  Replaced calls to 'realToFrac' with 'toRational' in; \"Factory.Math.Implementations.SquareRoot\",
  'Factory.Math.Statistics.getDispersionFromMean', 'Factory.Math.SquareRoot.getDiscrepancy',
  'Factory.Math.SquareRoot.getAccuracy', to more clearly represent the required operation.\n0.2.1.0\n\t*
  Refactored 'Factory.Test.QuickCheck.QuickChecks'.\n\t* Remove redundant import of
  'Data.Ratio' from many modules.\n\t* Refactored 'Factory.Math.Radix.encodes' to
  make use of 'Data.List.genericLength', & removed empty 'where'.\n\t* Explicitly
  closed standard-input in the executable.\n\t* Replaced calls to 'error' from inside
  the IO-monad, with 'Control.Monad.fail'.\n\t* Added function 'Factory.Math.Precision.roundTo'.\n\t*
  Trapped command-line arguments to which garbage has been appended.\n\t* Corrected
  the output of 'Main.main.optDescrList.printVersion'.\n\t* Removed the integral population-size
  parameter from 'Factory.Math.Probability.generateContinuousPopulation' & 'Factory.Math.Probability.generateDiscretePopulation',
  making the result conceptually infinite.\n\t* Created class 'Factory.Math.Probability.Distribution',
  to which data-types 'Factory.Math.Probability.ContinuousDistribution' & 'Factory.Math.Probability.DiscreteDistribution'
  conform.\n\t* Added data-constructors 'Factory.Math.Probability.ExponentialDistribution',
  'Factory.Math.Probability.ShiftedGeometricDistribution' & 'Factory.Math.Probability.LogNormal'.\n\t*
  Added command-line option '--plotDiscreteDistribution' to \"Main\".\n\t* Removed
  Preprocessor-check on the version of package 'toolshed', in \"Factory/Math/Summation\"
  & \"Factory/Data/PrimeFactors\".\n0.2.1.1\n\t* Added 'Factory.Test.QuickCheck.Probability.prop_logNormalDistributionEqual'.\n\t*
  Removed /INLINE/ pragma from 'Factory.Math.Implementations.Primes.TrialDivision.isIndivisibleBy',
  since to be effective it must be called with fully applied parameters (which it
  isn't).\n\t* Un eta-reduced 'Factory.Math.Power.square', since we want it to be
  inlined when called with one argument.\n\t* Tested with 'haskell-platform-2013.2.0.0'.\n\t*
  Replaced preprocessor-directives with 'build-depends' constraints in 'factory.cabal'.\n\t*
  Added function 'Factory.Math.Statistics.getWeightedMean' & corresponding tests in
  module \"Factory.Test.QuickCheck.Statistics\".\n\t* Since '(<$>)' is exported from
  the Prelude from 'base-4.8', imported \"Prelude\" hiding '(<*>)' into module \"Factory.Data.Monomial\",
  since this symbol is defined locally for other purposes.\n\t* Either replaced instances
  of '(<$>)' with 'fmap' to avoid ambiguity between \"Control.Applicative\" & \"Prelude\"
  which (from 'base-4.8') also exports this symbol, or hid the symbol when importing
  the \"Prelude\"..\n\n"
basic-deps:
  toolshed: ! '>=0.13'
  Cabal: ! '>=1.6 && <2'
  base: ! '>=4.3 && <5'
  primes: ! '>=0.1'
  array: -any
  containers: -any
  random: -any
  parallel: ! '>=3.0'
  deepseq: ! '>=1.1'
  QuickCheck: ! '>=2.2'
all-versions:
- '0.0.0.2'
- '0.1.0.0'
- '0.1.0.2'
- '0.1.0.3'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.0.5'
- '0.2.1.0'
- '0.2.1.1'
latest: '0.2.1.1'
description-type: haddock
description: A library of number-theory functions, for; factorials, square-roots,
  Pi and primes.
